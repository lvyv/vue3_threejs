/* 代码由 https://prettier.io/playground/ 格式化。 */
!(function () {
  var t,
    e = [
      function (t, e, s) {
        /** 函数入口 */
        // s包含了所有函数，就是引导部份代码的i。
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidsApp: function () {
              return AsteroidsApp;
            },
          });
        //类似 import 导入的一堆包
        var i = s(1), // BaseApp etc...
          n = (s(695), s(529)),
          o = s(5),   // o.THREE
          r = s(706),
          a = s(764), // ui components
          l = s(765),
          c = s(766),
          h = s(767),
          u = s(768),
          d = s(769), // views (HomeView, AsteroidView, WatchView, ...)
          p = s(730),
          m = s(770),
          _ = s(778),
          g = s(783), //HTML
          y = s.n(g); //返回HTML

        // var tttt = self.testForCustomer  // Just Test  AWEN 2024.01.16

        class AsteroidsApp extends i.BaseApp {
          constructor() {
            super(r.Types),
              (this._timeInfo = h),
              (this._sceneInfo = u),
              (this._viewClasses = { ...m.default }),
              (this._viewInfo = d),
              (this._componentInfo = a.default),
              (this._heroes = l),
              (this._neos = new Map()),
              (this._particleMatchFunctions = {}),
              (this._colors = {
                neos: [0.823, 0.882, 0.909],
                spacecraft: [0.969, 0.957, 0.875],
              }),
              (this._resetValues = {}),
              (this.tutorials = c),
              this.bindFunctions([
                "addParticleMatchFunction",
                "removeParticleMatchFunction",
                "createAsteroidParticles",
              ]);
          }
          get heroes() {
            return this._heroes;
          }
          get neos() {
            return this._neos;
          }
          setUpRoutes() {
            this.getManager("router").addRoutes([
              { route: this.getManager("router").homeRoute, view: "home" },
              { route: "/story/:id", view: "story" },
              { route: "/missions/:spacecraft", view: "mission" },
              { route: "/planets/:planet", view: "following" },
              { route: "/stars/:star", view: "following" },
              { route: "/moons/:moon", view: "following" },
              { route: "/watch", view: "watch" },
              { route: "/watch/:neoName", view: "watch" },
              { route: "/:spaceObject", view: "asteroid" },
            ]);
          }
          async setUpScene() {
            // tttt('hello', 'awen', 'lvyu!')  //测试一下导入外部js逻辑
            console.log(o.THREE.REVISION); //使用的是three.js r 154
            this._neos = await r.NEOUtils.loadNEOs(this.pioneer);
            const t = this.getManager("label");
            (t._iconMap.Asteroid = "asteroid"),
              (t._iconMap["Dwarf Planet"] = "asteroid"),
              (t._iconMap.Comet = "comet"),
              (t._iconMap.Spacecraft = "spacecraft"),
              (t._iconMap.Default = ""),
              await super.setUpScene();
            const e = this.scene;
            for (const t of Object.keys(this._heroes))
              if (null === e.getEntity(t) && this._neos.has(t)) {
                const s = r.NEOUtils.createEntity(this._neos.get(t), e);
                this.setUpLabels(s, { category: l[t].category });
              }
            (t._weightMap.Moon = "5"),
              (t._weightMap.Planet = "10"),
              (t._weightMap.Spacecraft = "15"),
              (t._weightMap.Comet = "20"),
              (t._weightMap.Asteroid = "20"),
              (t._weightMap["Dwarf Planet"] = "20"),
              (t._weightMap.Star = "30"),
              (t._weightMap.Watch = "40"),
              (t._weightMap.Focus = "50"),
              t.setWeights(this.getManager("content").getEntityList()),
              this._neos.size
                ? this.createAsteroidParticles()
                : console.error("NEOs data could not be loaded.");
            this.getManager("trail")._opacity.primary;
            n.Entity.getEntityNamesInGroup("planets").forEach((t) => {
              this._resetValues[t] = {};
            });
            const s = this.scene.get("sun");
            if (!s.get("orbiterLineOfSight")) {
              s.addComponent("orbiterLineOfSight").setEnabled(!1);
            }
            const a = this.getManager("scene");
            await n.SceneHelpers.waitTillEntitiesInPlace(e, ["earth"]),
              a.createRing(
                "sunRing",
                1.3 * i.AppUtils.conversionTable.auToKm,
                "sun",
                {
                  orbitPlaneEntityName: "earth",
                  color: new o.Color(1, 1, 1),
                  labelText: "1.3 AU distance from Sun",
                  isEnable: !1,
                },
              ),
              a.createTorus("sunTorus", 14212e4, 15708e4, "sun", {
                orbitPlaneEntityName: "earth",
                color: new o.Color(1, 1, 1, 0.2),
                labelText: "PHO boundary zone",
                isEnable: !1,
              }),
              t.addException("sunRingLabel"),
              t.addException("sunTorusLabel");
          }
          setUpLabels(t, { category: e } = {}) {
            const s = this.getManager("content"),
              i = this.getManager("label"),
              n = [
                "mercury",
                "venus",
                "earth",
                "mars",
                "jupiter",
                "saturn",
                "uranus",
                "neptune",
              ];
            i.addEntity(t),
              i.setLabelProps(
                {
                  getLabelClass: (t) =>
                    `no-select ${n.includes(t) ? "color" : ""} ${s.getClassName(t, e) ?? ""
                    }`,
                  handleMouseEnter: (t, e) =>
                    i.triggerCallbacks("hoverchange", [e, !0, n.includes(e)]),
                  handleMouseLeave: (t, e) => {
                    (t.target?.classList?.contains("selected") &&
                      t.target?.classList?.contains("asteroid-watch-label")) ||
                      i.triggerCallbacks("hoverchange", [e, !1, n.includes(e)]);
                  },
                  ...(e && { getIconClass: (t) => e.toLowerCase() }),
                },
                [t.getName()],
              );
          }
          setUpManagers() {
            super.setUpManagers(),
              this.addManager("watch", r.WatchManager),
              this.addManager("filters", r.FiltersManager, this._scene),
              this.addManager("neos", r.NEOsManager, this._scene),
              this.addManager("link", r.LinkManager);
            const t = {
              ...this._sceneInfo.title,
              parseFn: ({ url: t, params: e, query: s } = {}) => {
                const {
                  spaceObject: i,
                  spacecraft: n,
                  planet: o,
                  star: r,
                  moon: a,
                } = e,
                  l = i || n || o || r || a;
                if (s?.includes("=learn")) return "Learn";
                if (s?.includes("=filters")) return "Filters";
                if (t?.includes("/story") && e.id) {
                  const t = p.find(({ path: t }) => t === e.id);
                  if (t?.title) return t.title;
                }
                if (t?.includes("/watch")) return "Asteroid Watch";
                if (l) {
                  const t = this.scene.get(l),
                    { innerText: e } =
                      t?.getComponentByType("div")?.getDiv() || {};
                  if (e) return e;
                }
                return "Home";
              },
            },
              e = r.Types.get("TitleManager");
            this.addManager("title", e, t);
          }
          _buildSearchDatabase() {
            const t = i.AppUtils.deepCopy(
              this.getManager("content").getEntityList(),
            ),
              e = this.scene._entities._itemsByName,
              s = ["observable_universe", "milky_way"],
              n = {};
            return (
              e.forEach((e) => {
                const i = t[e];
                !s.includes(e) && i && ((i.url = `/${i.id}`), (n[e] = i));
              }),
              this._neos.forEach((t, e) => {
                e in n
                  ? (n[e].neo = t)
                  : (n[e] = { id: e, iauName: t.name, url: `/${e}`, neo: t });
              }),
              n
            );
          }
          async setUpComponents() {
            await super.setUpComponents();
            const t = this.getManager("content").getEntityList(),
              e = this.getManager("content");
            e.setStoryList(_.STORY_LIST), e.setStories(_.STORIES);
            const s = this._buildSearchDatabase();
            this.getManager("search").setDatabase(s);
            const i = Object.keys(this.heroes).map((e) => {
              const s = t[e];
              if (!s) {
                const t = l[e];
                return t.iauName && t.id
                  ? {
                    text: t.iauName,
                    sortText: t.displayName || t.iauName,
                    url: `/${t.id}`,
                  }
                  : (console.error(`No entity found for hero: ${e}`), !1);
              }
              return {
                text: s.iauName,
                sortText: s.displayName || s.iauName,
                url: `/${s.id}`,
              };
            });
            i.sort((t, e) => (t.sortText > e.sortText ? 1 : -1)),
              this.getComponent("search").setupFeaturedSuggestion(i);
            const n = this.getManager("trail"),
              r = ["73p_schwassmann_wachmann_3"],
              a = [];
            this.scene._entities._items.forEach((e) => {
              const s = e.getName(),
                { category: i } = t[s] || {};
              "Asteroid" === i || "Dwarf Planet" === i || "Comet" === i
                ? r.push(s)
                : "Spacecraft" === i && a.push(s);
            }),
              n.setColor(r, new o.Color(...this._colors.neos, 0.35)),
              n.setColor(a, new o.Color(...this._colors.spacecraft, 0.5));
            const c = this.getManager("layer"),
              h = this.getComponent("layerPanel");
            c.getLayer("asteroids").visible || h.toggleLayer("asteroids"),
              c.getLayer("comets").visible || h.toggleLayer("comets"),
              c.getLayer("dwarfPlanets").visible ||
              h.toggleLayer("dwarfPlanets"),
              c.getLayer("starfield").toggleCallback[0](!1);
          }
          setTutorialVariables(t) {
            const e = JSON.stringify(t).replace(/\{\{(.+?)\}\}/g, (t, e) =>
              this[e] && "function" == typeof this[e] ? this[e]() : t,
            );
            return JSON.parse(e);
          }
          addParticleMatchFunction(t, e, s, i) {
            (this._particleMatchFunctions[e] = t),
              s && this.createAsteroidParticles(i);
          }
          removeParticleMatchFunction(t, e, s) {
            delete this._particleMatchFunctions[t],
              e && this.createAsteroidParticles(s);
          }
          createAsteroidParticles(t) {
            const e = this.scene.getEntity("sun");
            null !== e.getComponentByType("orbitalParticles") &&
              e.removeComponent(e.getComponentByType("orbitalParticles"));
            const s = new o.Color(0, 0.25, 0.35),
              i = new o.Color(0, 0.45, 0.65),
              r = new o.Color(1, 1, 1);
            s.lerp(s, r, 0.1), i.lerp(i, r, 0.15);
            const a = e.addComponent("orbitalParticles");
            a.setLoadFunction(async () => {
              const e = [],
                r = [],
                a = [];
              let l;
              for (const t of this._neos.values()) {
                l = !1;
                for (const e in this._particleMatchFunctions)
                  if (!this._particleMatchFunctions[e](t)) {
                    l = !0;
                    break;
                  }
                if (l) continue;
                if (void 0 !== n.Entity.getEntityOptions(t.pioneerName))
                  continue;
                const c = new o.Color();
                if (t.comet) c.set(...this._colors.neos);
                else {
                  const t = Math.random();
                  c.lerp(s, i, t);
                }
                e.push(c);
                const h =
                  (t.comet ? 1.3 : 1) *
                  (t.pho ? 1.5 : 1) *
                  0.003 *
                  Math.max(1, Math.log10(1 + t.diameter));
                r.push(h), a.push(t.orbitalElements);
              }
              return (
                "function" == typeof t && t(a),
                { colors: e, scales: r, orbitalElements: a }
              );
            }),
              a.setResourcesLoadedCallback(() => {
                const t = this._pioneer
                  .get("main", "sun", "orbitalParticles")
                  .getThreeJsMaterials()[0];
                (t.uniforms.masterOpacity = new o.THREE.Uniform(0.5)),
                  (t.vertexShader = t.vertexShader.replace(
                    "vec4 viewPosition = modelViewMatrix * vec4(offset, 1.0) + vec4(position, 0.0) * scale;",
                    "\n\t\t\t\tvec4 viewOffset = modelViewMatrix * vec4(offset, 1.0);\n\t\t\t\tvec4 viewPosition = viewOffset + vec4(position, 0.0) * scale;\n\t\t\t\t",
                  )),
                  (t.vertexShader = t.vertexShader.replace(
                    "gl_Position = projectionMatrix * viewPosition;",
                    "\n\t\t\t\tfloat aspect_ratio_h = min(1.0, projectionMatrix[0][0] / projectionMatrix[2][1]);\n\t\t\t\tfloat aspect_ratio_v = min(1.0, projectionMatrix[2][1] / projectionMatrix[0][0]);\n\t\t\t\tgl_Position = projectionMatrix * viewOffset + vec4(position.x * viewOffset.y * scale * aspect_ratio_h, position.z * viewOffset.y * scale * aspect_ratio_v, 0, 0);\n\t\t\t\t",
                  )),
                  (t.vertexShader = t.vertexShader.replace(
                    "fColor = color;",
                    "fColor = color * clamp((length(viewPosition) - 21937.0) / 40000.0, 0.0, 1.0);",
                  )),
                  (t.fragmentShader = t.fragmentShader.replace(
                    "varying vec2 fPosition;",
                    "uniform float masterOpacity;\n\t\t\t\tvarying vec2 fPosition;\n\t\t\t\t",
                  )),
                  (t.fragmentShader = t.fragmentShader.replace(
                    "gl_FragColor = fColor * (1.0 - length(fPosition));",
                    "gl_FragColor = fColor * (1.0 - step(1.0, length(fPosition))) * vec4(1.0, 1.0, 1.0, masterOpacity);",
                  )),
                  (t.needsUpdate = !0),
                  (t.blending = o.THREE.NormalBlending);
              });
          }
          getNeoTotal(t = 2) {
            return this.neos?.size.toLocaleString(void 0, {
              maximumSignificantDigits: t,
              roundingMode: "floor",
            });
          }
        }
        (AsteroidsApp.html = y()), AsteroidsApp.setAppClass();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AnimationUtils: function () {
              return i.AnimationUtils;
            },
            AppUtils: function () {
              return i.AppUtils;
            },
            BaseApp: function () {
              return i.BaseApp;
            },
            BaseComponent: function () {
              return i.BaseComponent;
            },
            BaseManager: function () {
              return i.BaseManager;
            },
            BaseView: function () {
              return i.BaseView;
            },
            Breadcrumb: function () {
              return i.Breadcrumb;
            },
            ButtonsBlock: function () {
              return i.ButtonsBlock;
            },
            CameraManager: function () {
              return i.CameraManager;
            },
            CameraScripts: function () {
              return i.CameraScripts;
            },
            CancelToken: function () {
              return i.CancelToken;
            },
            Carousel: function () {
              return i.Carousel;
            },
            CarouselPanel: function () {
              return i.CarouselPanel;
            },
            CheckboxBlock: function () {
              return i.CheckboxBlock;
            },
            Clock: function () {
              return i.Clock;
            },
            ClockShortcut: function () {
              return i.ClockShortcut;
            },
            ComparisonManager: function () {
              return i.ComparisonManager;
            },
            ContentManager: function () {
              return i.ContentManager;
            },
            DescriptionBlock: function () {
              return i.DescriptionBlock;
            },
            DistanceLineComponent: function () {
              return i.DistanceLineComponent;
            },
            ERTManager: function () {
              return i.ERTManager;
            },
            HintBlock: function () {
              return i.HintBlock;
            },
            ImageBlock: function () {
              return i.ImageBlock;
            },
            LabelManager: function () {
              return i.LabelManager;
            },
            LayerManager: function () {
              return i.LayerManager;
            },
            LayerPanel: function () {
              return i.LayerPanel;
            },
            LoadIcon: function () {
              return i.LoadIcon;
            },
            OrbiterLineOfSightComponent: function () {
              return i.OrbiterLineOfSightComponent;
            },
            Overlay: function () {
              return i.Overlay;
            },
            ReplayButtonBlock: function () {
              return i.ReplayButtonBlock;
            },
            RouteManager: function () {
              return i.RouteManager;
            },
            SceneManager: function () {
              return i.SceneManager;
            },
            Search: function () {
              return i.Search;
            },
            SearchManager: function () {
              return i.SearchManager;
            },
            SelectionManager: function () {
              return i.SelectionManager;
            },
            Settings: function () {
              return i.Settings;
            },
            Story: function () {
              return i.Story;
            },
            StoryBaseContentBlock: function () {
              return i.StoryBaseContentBlock;
            },
            TimeController: function () {
              return i.TimeController;
            },
            TimeManager: function () {
              return i.TimeManager;
            },
            TitleBlock: function () {
              return i.TitleBlock;
            },
            TitleManager: function () {
              return i.TitleManager;
            },
            ToggleBlock: function () {
              return i.ToggleBlock;
            },
            TrailManager: function () {
              return i.TrailManager;
            },
            TutorialOverlay: function () {
              return i.TutorialOverlay;
            },
            Types: function () {
              return i.Types;
            },
            Version: function () {
              return i.Version;
            },
          });
        var i = s(2);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Version: function () {
              return i.default;
            },
            OrbiterLineOfSightComponent: function () {
              return n.OrbiterLineOfSightComponent;
            },
            DistanceLineComponent: function () {
              return o.DistanceLineComponent;
            },
            CancelToken: function () {
              return r.CancelToken;
            },
            AppUtils: function () {
              return a.AppUtils;
            },
            AnimationUtils: function () {
              return l.AnimationUtils;
            },
            BaseComponent: function () {
              return c.BaseComponent;
            },
            Settings: function () {
              return h.default;
            },
            LoadIcon: function () {
              return u.default;
            },
            Overlay: function () {
              return d.default;
            },
            Search: function () {
              return p.default;
            },
            Clock: function () {
              return m.default;
            },
            ClockShortcut: function () {
              return _.default;
            },
            Carousel: function () {
              return g.default;
            },
            TutorialOverlay: function () {
              return y.default;
            },
            CarouselPanel: function () {
              return f.default;
            },
            TimeController: function () {
              return b.default;
            },
            LayerPanel: function () {
              return T.LayerPanel;
            },
            Breadcrumb: function () {
              return S.Breadcrumb;
            },
            StoryBaseContentBlock: function () {
              return E.StoryBaseContentBlock;
            },
            HintBlock: function () {
              return v.HintBlock;
            },
            ToggleBlock: function () {
              return C.ToggleBlock;
            },
            TitleBlock: function () {
              return x.TitleBlock;
            },
            ImageBlock: function () {
              return w.ImageBlock;
            },
            DescriptionBlock: function () {
              return I.DescriptionBlock;
            },
            ReplayButtonBlock: function () {
              return M.ReplayButtonBlock;
            },
            ButtonsBlock: function () {
              return N.ButtonsBlock;
            },
            CheckboxBlock: function () {
              return A.CheckboxBlock;
            },
            Story: function () {
              return R.Story;
            },
            BaseManager: function () {
              return L.BaseManager;
            },
            SelectionManager: function () {
              return P.SelectionManager;
            },
            LabelManager: function () {
              return V.LabelManager;
            },
            RouteManager: function () {
              return k.RouteManager;
            },
            ContentManager: function () {
              return O.ContentManager;
            },
            SceneManager: function () {
              return F.SceneManager;
            },
            LayerManager: function () {
              return U.LayerManager;
            },
            TrailManager: function () {
              return z.TrailManager;
            },
            CameraManager: function () {
              return D.CameraManager;
            },
            CameraScripts: function () {
              return j.CameraScripts;
            },
            ERTManager: function () {
              return H.ERTManager;
            },
            TimeManager: function () {
              return B.TimeManager;
            },
            ComparisonManager: function () {
              return J.ComparisonManager;
            },
            SearchManager: function () {
              return G.SearchManager;
            },
            TitleManager: function () {
              return Y.TitleManager;
            },
            BaseView: function () {
              return $.BaseView;
            },
            BaseApp: function () {
              return Q.BaseApp;
            },
            Types: function () {
              return Z.Types;
            },
          });
        var i = s(3),
          n = s(4),
          o = s(130),
          r = s(131),
          a = s(132),
          l = s(139),
          c = s(140),
          h = s(141),
          u = s(204),
          d = s(208),
          p = s(212),
          m = s(216),
          _ = s(360),
          g = s(364),
          y = s(369),
          f = s(479),
          b = s(484),
          T = s(488),
          S = s(491),
          E = s(494),
          v = s(496),
          C = s(499),
          x = s(502),
          w = s(504),
          I = s(507),
          M = s(510),
          N = s(513),
          A = s(516),
          R = s(519),
          L = s(521),
          P = s(522),
          V = s(523),
          k = s(525),
          O = s(527),
          F = s(528),
          U = s(666),
          z = s(667),
          D = s(668),
          j = s(669),
          H = s(670),
          B = s(671),
          J = s(672),
          G = s(673),
          Y = s(675),
          $ = s(676),
          Q = s(677),
          Z = s(694);
      },
      function (t, e, s) {
        "use strict";
        s.r(e), (e.default = "2.1.4");
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbiterLineOfSightComponent: function () {
              return OrbiterLineOfSightComponent;
            },
          });
        var i = s(5);
        class OrbiterLineOfSightComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._targetA = null),
              (this._targetB = null),
              (this._ignoreDistance = !1),
              (this._distanceThreshold = { min: 2, max: 20 }),
              (this._positions = []),
              (this._colors = []),
              (this._widths = []),
              (this._color = new i.Color(1, 1, 0)),
              (this._width = 2),
              (this._threeJsScene = s.getScene().getThreeJsScene()),
              (this._lineMesh = null),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          setTargets(t, e) {
            "string" == typeof t && (t = this.getEntity().getScene().get(t)),
              "string" == typeof e && (e = this.getEntity().getScene().get(e)),
              (this._targetA = t),
              (this._targetB = e);
          }
          setColor(t) {
            this._color = t;
          }
          setWidth(t) {
            this._width = t;
          }
          __loadResources() {
            return (this._lineMesh = new i.LineMesh(this)), Promise.resolve();
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          __prepareForRender(t) {
            if (null === this._targetA || null === this._targetB)
              return void (
                this.getThreeJsObjects().length > 0 &&
                (this.getThreeJsObjects()[0].visible = !1)
              );
            this._updatePoints(t);
            let e = 1;
            if (!this._ignoreDistance) {
              e *=
                (t.getEntity().getPosition().magnitude() -
                  this._distanceThreshold.min) /
                (this._distanceThreshold.max - this._distanceThreshold.min);
            }
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
              t,
            ),
              this._lineMesh.setAlphaMultiplier(e),
              this._lineMesh.prepareForRender(t);
          }
          _updatePoints() {
            const t = i.Vector3.pool.get(),
              e = i.Vector3.pool.get();
            this._targetA.getPositionRelativeToEntity(
              t,
              i.Vector3.Zero,
              this.getEntity(),
            ),
              this._targetB.getPositionRelativeToEntity(
                e,
                i.Vector3.Zero,
                this.getEntity(),
              ),
              (this._positions = []),
              this._positions.push(t),
              this._positions.push(e),
              this._lineMesh.setPositions(this._positions);
            const s = this._color;
            (this._colors = []),
              this._colors.push(s),
              this._colors.push(s),
              this._lineMesh.setColors(this._colors),
              (this._widths = []),
              this._widths.push(this._width),
              this._widths.push(this._width),
              this._lineMesh.setWidths(this._widths),
              i.Vector3.pool.release(t),
              i.Vector3.pool.release(e);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AER: function () {
              return i.AER;
            },
            AlignController: function () {
              return i.AlignController;
            },
            AnimdataController: function () {
              return i.AnimdataController;
            },
            AtmosphereComponent: function () {
              return i.AtmosphereComponent;
            },
            BaseComponent: function () {
              return i.BaseComponent;
            },
            BaseController: function () {
              return i.BaseController;
            },
            BaseRef: function () {
              return i.BaseRef;
            },
            CMTSComponent: function () {
              return i.CMTSComponent;
            },
            Cache: function () {
              return i.Cache;
            },
            CameraComponent: function () {
              return i.CameraComponent;
            },
            Capabilities: function () {
              return i.Capabilities;
            },
            Collection: function () {
              return i.Collection;
            },
            CollectionItem: function () {
              return i.CollectionItem;
            },
            Color: function () {
              return i.Color;
            },
            CometTailComponent: function () {
              return i.CometTailComponent;
            },
            ComponentRef: function () {
              return i.ComponentRef;
            },
            Config: function () {
              return i.Config;
            },
            ConnectedSpriteComponent: function () {
              return i.ConnectedSpriteComponent;
            },
            ControllerRef: function () {
              return i.ControllerRef;
            },
            CoverageController: function () {
              return i.CoverageController;
            },
            CubeMap: function () {
              return i.CubeMap;
            },
            DependencyGraph: function () {
              return i.DependencyGraph;
            },
            DivComponent: function () {
              return i.DivComponent;
            },
            Download: function () {
              return i.Download;
            },
            Downloader: function () {
              return i.Downloader;
            },
            DynamicEnvironmentMapComponent: function () {
              return i.DynamicEnvironmentMapComponent;
            },
            DynamoController: function () {
              return i.DynamoController;
            },
            Engine: function () {
              return i.Engine;
            },
            Entity: function () {
              return i.Entity;
            },
            EntityItem: function () {
              return i.EntityItem;
            },
            EntityRef: function () {
              return i.EntityRef;
            },
            FPS: function () {
              return i.FPS;
            },
            FastIterable: function () {
              return i.FastIterable;
            },
            FastMap: function () {
              return i.FastMap;
            },
            FastMapEntry: function () {
              return i.FastMapEntry;
            },
            FastSet: function () {
              return i.FastSet;
            },
            FixedController: function () {
              return i.FixedController;
            },
            FixedToParentController: function () {
              return i.FixedToParentController;
            },
            FreeFlyController: function () {
              return i.FreeFlyController;
            },
            Freezable: function () {
              return i.Freezable;
            },
            Geometry: function () {
              return i.Geometry;
            },
            GizmoComponent: function () {
              return i.GizmoComponent;
            },
            GroundClampController: function () {
              return i.GroundClampController;
            },
            Input: function () {
              return i.Input;
            },
            Interval: function () {
              return i.Interval;
            },
            KeyframeController: function () {
              return i.KeyframeController;
            },
            LabelComponent: function () {
              return i.LabelComponent;
            },
            LatLonAlt: function () {
              return i.LatLonAlt;
            },
            LightSourceComponent: function () {
              return i.LightSourceComponent;
            },
            LineMesh: function () {
              return i.LineMesh;
            },
            LookController: function () {
              return i.LookController;
            },
            MaterialManager: function () {
              return i.MaterialManager;
            },
            MaterialUtils: function () {
              return i.MaterialUtils;
            },
            MaterialUtilsPhong: function () {
              return i.MaterialUtilsPhong;
            },
            MaterialUtilsStandard: function () {
              return i.MaterialUtilsStandard;
            },
            MathUtils: function () {
              return i.MathUtils;
            },
            ModelAnimateController: function () {
              return i.ModelAnimateController;
            },
            ModelComponent: function () {
              return i.ModelComponent;
            },
            OrbitController: function () {
              return i.OrbitController;
            },
            OrbitKeyframeController: function () {
              return i.OrbitKeyframeController;
            },
            OrbitalElements: function () {
              return i.OrbitalElements;
            },
            OrbitalElementsController: function () {
              return i.OrbitalElementsController;
            },
            OrbitalElementsKeyFrame: function () {
              return i.OrbitalElementsKeyFrame;
            },
            OrbitalParticlesComponent: function () {
              return i.OrbitalParticlesComponent;
            },
            ParticleSprayComponent: function () {
              return i.ParticleSprayComponent;
            },
            PickController: function () {
              return i.PickController;
            },
            Pool: function () {
              return i.Pool;
            },
            Quaternion: function () {
              return i.Quaternion;
            },
            Reader: function () {
              return i.Reader;
            },
            Rect: function () {
              return i.Rect;
            },
            RingsComponent: function () {
              return i.RingsComponent;
            },
            RollController: function () {
              return i.RollController;
            },
            RotateByEntityOrientationController: function () {
              return i.RotateByEntityOrientationController;
            },
            RotateController: function () {
              return i.RotateController;
            },
            ScaleController: function () {
              return i.ScaleController;
            },
            Scene: function () {
              return i.Scene;
            },
            SelectController: function () {
              return i.SelectController;
            },
            SetParentController: function () {
              return i.SetParentController;
            },
            ShaderChunkLogDepth: function () {
              return i.ShaderChunkLogDepth;
            },
            ShaderFix: function () {
              return i.ShaderFix;
            },
            SkyboxComponent: function () {
              return i.SkyboxComponent;
            },
            Sort: function () {
              return i.Sort;
            },
            SpheroidComponent: function () {
              return i.SpheroidComponent;
            },
            SpheroidLODComponent: function () {
              return i.SpheroidLODComponent;
            },
            SpinController: function () {
              return i.SpinController;
            },
            SpoutComponent: function () {
              return i.SpoutComponent;
            },
            SpriteComponent: function () {
              return i.SpriteComponent;
            },
            SpriteParticles: function () {
              return i.SpriteParticles;
            },
            StarfieldComponent: function () {
              return i.StarfieldComponent;
            },
            THREE: function () {
              return i.THREE;
            },
            TapController: function () {
              return i.TapController;
            },
            TextureLOD: function () {
              return i.TextureLOD;
            },
            TextureLoader: function () {
              return i.TextureLoader;
            },
            TextureLoaderCompressed: function () {
              return i.TextureLoaderCompressed;
            },
            ThreeJsEffectComposer: function () {
              return i.ThreeJsEffectComposer;
            },
            ThreeJsGLTFLoader: function () {
              return i.ThreeJsGLTFLoader;
            },
            ThreeJsHelper: function () {
              return i.ThreeJsHelper;
            },
            ThreeJsKTXLoader: function () {
              return i.ThreeJsKTXLoader;
            },
            ThreeJsOutlinePass: function () {
              return i.ThreeJsOutlinePass;
            },
            ThreeJsRenderPass: function () {
              return i.ThreeJsRenderPass;
            },
            ThreeJsUnrealBloomPass: function () {
              return i.ThreeJsUnrealBloomPass;
            },
            Tile: function () {
              return i.Tile;
            },
            TimeUtils: function () {
              return i.TimeUtils;
            },
            TrailComponent: function () {
              return i.TrailComponent;
            },
            TransitionController: function () {
              return i.TransitionController;
            },
            TranslateController: function () {
              return i.TranslateController;
            },
            Types: function () {
              return i.Types;
            },
            Vector2: function () {
              return i.Vector2;
            },
            Vector3: function () {
              return i.Vector3;
            },
            Version: function () {
              return i.Version;
            },
            Viewport: function () {
              return i.Viewport;
            },
            ZoomController: function () {
              return i.ZoomController;
            },
            waitUntil: function () {
              return i.waitUntil;
            },
          });
        var i = s(6);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            THREE: function () {
              return i;
            },
            ThreeJsEffectComposer: function () {
              return n.EffectComposer;
            },
            ThreeJsGLTFLoader: function () {
              return o.GLTFLoader;
            },
            ThreeJsKTXLoader: function () {
              return r.KTXLoader;
            },
            ThreeJsOutlinePass: function () {
              return a.OutlinePass;
            },
            ThreeJsRenderPass: function () {
              return l.RenderPass;
            },
            ThreeJsUnrealBloomPass: function () {
              return c.UnrealBloomPass;
            },
            ShaderChunkLogDepth: function () {
              return h.ShaderChunkLogDepth;
            },
            BaseRef: function () {
              return u.BaseRef;
            },
            Collection: function () {
              return d.Collection;
            },
            CollectionItem: function () {
              return d.CollectionItem;
            },
            DependencyGraph: function () {
              return p.DependencyGraph;
            },
            FastIterable: function () {
              return m.FastIterable;
            },
            FPS: function () {
              return _.FPS;
            },
            Freezable: function () {
              return g.Freezable;
            },
            MathUtils: function () {
              return y.MathUtils;
            },
            Pool: function () {
              return f.Pool;
            },
            Reader: function () {
              return b.Reader;
            },
            Sort: function () {
              return T.Sort;
            },
            Tile: function () {
              return S.Tile;
            },
            TimeUtils: function () {
              return E.TimeUtils;
            },
            waitUntil: function () {
              return v.waitUntil;
            },
            AER: function () {
              return C.AER;
            },
            Color: function () {
              return x.Color;
            },
            FastMap: function () {
              return w.FastMap;
            },
            FastMapEntry: function () {
              return w.FastMapEntry;
            },
            FastSet: function () {
              return I.FastSet;
            },
            Geometry: function () {
              return M.Geometry;
            },
            Interval: function () {
              return N.Interval;
            },
            OrbitalElements: function () {
              return A.OrbitalElements;
            },
            Rect: function () {
              return R.Rect;
            },
            Quaternion: function () {
              return L.Quaternion;
            },
            Vector2: function () {
              return P.Vector2;
            },
            Vector3: function () {
              return V.Vector3;
            },
            Cache: function () {
              return k.Cache;
            },
            ComponentRef: function () {
              return O.ComponentRef;
            },
            ControllerRef: function () {
              return F.ControllerRef;
            },
            CubeMap: function () {
              return U.CubeMap;
            },
            EntityRef: function () {
              return z.EntityRef;
            },
            LatLonAlt: function () {
              return D.LatLonAlt;
            },
            LineMesh: function () {
              return j.LineMesh;
            },
            MaterialUtilsPhong: function () {
              return H.MaterialUtilsPhong;
            },
            MaterialUtilsStandard: function () {
              return B.MaterialUtilsStandard;
            },
            MaterialUtils: function () {
              return J.MaterialUtils;
            },
            ShaderFix: function () {
              return G.ShaderFix;
            },
            SpriteParticles: function () {
              return Y.SpriteParticles;
            },
            TextureLOD: function () {
              return $.TextureLOD;
            },
            ThreeJsHelper: function () {
              return Q.ThreeJsHelper;
            },
            Capabilities: function () {
              return Z.Capabilities;
            },
            Config: function () {
              return q.Config;
            },
            Download: function () {
              return W.Download;
            },
            Downloader: function () {
              return W.Downloader;
            },
            Engine: function () {
              return X.Engine;
            },
            Entity: function () {
              return K.Entity;
            },
            EntityItem: function () {
              return tt.EntityItem;
            },
            Input: function () {
              return et.Input;
            },
            MaterialManager: function () {
              return st.MaterialManager;
            },
            Scene: function () {
              return it.Scene;
            },
            TextureLoader: function () {
              return nt.TextureLoader;
            },
            TextureLoaderCompressed: function () {
              return ot.TextureLoaderCompressed;
            },
            Version: function () {
              return rt.Version;
            },
            Viewport: function () {
              return at.Viewport;
            },
            BaseComponent: function () {
              return lt.BaseComponent;
            },
            AtmosphereComponent: function () {
              return ct.AtmosphereComponent;
            },
            CameraComponent: function () {
              return ht.CameraComponent;
            },
            CMTSComponent: function () {
              return ut.CMTSComponent;
            },
            CometTailComponent: function () {
              return dt.CometTailComponent;
            },
            ConnectedSpriteComponent: function () {
              return pt.ConnectedSpriteComponent;
            },
            DivComponent: function () {
              return mt.DivComponent;
            },
            DynamicEnvironmentMapComponent: function () {
              return _t.DynamicEnvironmentMapComponent;
            },
            GizmoComponent: function () {
              return gt.GizmoComponent;
            },
            LabelComponent: function () {
              return yt.LabelComponent;
            },
            LightSourceComponent: function () {
              return ft.LightSourceComponent;
            },
            ModelComponent: function () {
              return bt.ModelComponent;
            },
            OrbitalParticlesComponent: function () {
              return Tt.OrbitalParticlesComponent;
            },
            ParticleSprayComponent: function () {
              return St.ParticleSprayComponent;
            },
            RingsComponent: function () {
              return Et.RingsComponent;
            },
            SkyboxComponent: function () {
              return vt.SkyboxComponent;
            },
            SpheroidComponent: function () {
              return Ct.SpheroidComponent;
            },
            SpheroidLODComponent: function () {
              return xt.SpheroidLODComponent;
            },
            SpoutComponent: function () {
              return wt.SpoutComponent;
            },
            SpriteComponent: function () {
              return It.SpriteComponent;
            },
            StarfieldComponent: function () {
              return Mt.StarfieldComponent;
            },
            TrailComponent: function () {
              return Nt.TrailComponent;
            },
            BaseController: function () {
              return At.BaseController;
            },
            AlignController: function () {
              return Rt.AlignController;
            },
            AnimdataController: function () {
              return Lt.AnimdataController;
            },
            CoverageController: function () {
              return Pt.CoverageController;
            },
            DynamoController: function () {
              return Vt.DynamoController;
            },
            FixedController: function () {
              return kt.FixedController;
            },
            FixedToParentController: function () {
              return Ot.FixedToParentController;
            },
            FreeFlyController: function () {
              return Ft.FreeFlyController;
            },
            GroundClampController: function () {
              return Ut.GroundClampController;
            },
            KeyframeController: function () {
              return zt.KeyframeController;
            },
            LookController: function () {
              return Dt.LookController;
            },
            ModelAnimateController: function () {
              return jt.ModelAnimateController;
            },
            OrbitController: function () {
              return Ht.OrbitController;
            },
            OrbitKeyframeController: function () {
              return Bt.OrbitKeyframeController;
            },
            OrbitalElementsController: function () {
              return Jt.OrbitalElementsController;
            },
            OrbitalElementsKeyFrame: function () {
              return Jt.OrbitalElementsKeyFrame;
            },
            PickController: function () {
              return Gt.PickController;
            },
            RollController: function () {
              return Yt.RollController;
            },
            RotateController: function () {
              return $t.RotateController;
            },
            RotateByEntityOrientationController: function () {
              return Qt.RotateByEntityOrientationController;
            },
            ScaleController: function () {
              return Zt.ScaleController;
            },
            SelectController: function () {
              return qt.SelectController;
            },
            SetParentController: function () {
              return Wt.SetParentController;
            },
            SpinController: function () {
              return Xt.SpinController;
            },
            TapController: function () {
              return Kt.TapController;
            },
            TransitionController: function () {
              return te.TransitionController;
            },
            TranslateController: function () {
              return ee.TranslateController;
            },
            ZoomController: function () {
              return se.ZoomController;
            },
            Types: function () {
              return ie.Types;
            },
          });
        var i = s(7),
          n = s(8),
          o = s(13),
          r = s(15),
          a = s(16),
          l = s(17),
          c = s(18),
          h = s(20),
          u = s(21),
          d = s(22),
          p = s(23),
          m = s(24),
          _ = s(25),
          g = s(26),
          y = s(27),
          f = s(28),
          b = s(29),
          T = s(30),
          S = s(31),
          E = s(32),
          v = s(33),
          C = s(34),
          x = s(35),
          w = s(36),
          I = s(37),
          M = s(38),
          N = s(39),
          A = s(40),
          R = s(41),
          L = s(42),
          P = s(43),
          V = s(44),
          k = s(45),
          O = s(46),
          F = s(47),
          U = s(48),
          z = s(49),
          D = s(50),
          j = s(51),
          H = s(52),
          B = s(53),
          J = s(54),
          G = s(55),
          Y = s(56),
          $ = s(57),
          Q = s(58),
          Z = s(59),
          q = s(60),
          W = s(61),
          X = s(62),
          K = s(63),
          tt = s(64),
          et = s(65),
          st = s(66),
          it = s(75),
          nt = s(76),
          ot = s(77),
          rt = s(78),
          at = s(79),
          lt = s(80),
          ct = s(81),
          ht = s(82),
          ut = s(83),
          dt = s(84),
          pt = s(85),
          mt = s(86),
          _t = s(87),
          gt = s(88),
          yt = s(89),
          ft = s(90),
          bt = s(91),
          Tt = s(92),
          St = s(93),
          Et = s(94),
          vt = s(95),
          Ct = s(96),
          xt = s(97),
          wt = s(98),
          It = s(99),
          Mt = s(100),
          Nt = s(101),
          At = s(102),
          Rt = s(103),
          Lt = s(104),
          Pt = s(105),
          Vt = s(106),
          kt = s(107),
          Ot = s(108),
          Ft = s(109),
          Ut = s(110),
          zt = s(111),
          Dt = s(112),
          jt = s(113),
          Ht = s(114),
          Bt = s(115),
          Jt = s(116),
          Gt = s(117),
          Yt = s(118),
          $t = s(119),
          Qt = s(120),
          Zt = s(121),
          qt = s(122),
          Wt = s(123),
          Xt = s(124),
          Kt = s(125),
          te = s(126),
          ee = s(127),
          se = s(128),
          ie = s(129);
      },
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ShaderChunkLogDepth: function () {
              return ShaderChunkLogDepth;
            },
          });
        var i = s(7);
        class ShaderChunkLogDepth {
          static Uniforms = {
            invertDepth: "float",
            nearDistance: "float",
            midDistance: "float",
          };
          static VertexHead =
            "\n\t\t#ifdef L_EXT_frag_depth\n\t\t\tvarying float depth;\n\t\t#else\n\t\t\tuniform float nearDistance;\n\t\t\tuniform float midDistance;\n\t\t#endif\n\t";
          static Vertex =
            "\n\t\t#ifdef L_EXT_frag_depth\n\t\t\tdepth = gl_Position.w;\n\t\t#else\n\t\t\tfloat z = gl_Position.w;\n\t\t\tif (z < midDistance) {\n\t\t\t\tgl_Position.z = nearDistance * (z - midDistance) / (midDistance - nearDistance);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfloat logFactor = 0.01254291648; // 1 / log2(1e24 - midDistance + 1.0)\n\t\t\t\tgl_Position.z = log2(z - midDistance + 1.0) * logFactor;\n\t\t\t\tgl_Position.z *= gl_Position.w;\n\t\t\t}\n\t\t#endif\n\t";
          static FragmentHead =
            "\n\t\t#ifdef L_EXT_frag_depth\n\t\t\tuniform float invertDepth;\n\t\t\tuniform float nearDistance;\n\t\t\tuniform float midDistance;\n\t\t\tvarying float depth;\n\t\t#endif\n\t";
          static Fragment =
            "\n\t\t#ifdef L_EXT_frag_depth\n\t\t\tfloat logFactor = 0.01254291648; // 1 / log2(1 + 1e24)\n\t\t\tfloat nearFactor = 0.5 * (depth - nearDistance) / (midDistance - nearDistance);\n\t\t\tfloat farFactor = 0.5 * (1.0 + log2(1.0 + depth - midDistance) * logFactor);\n\t\t\tgl_FragDepthEXT = (1.0 - 2.0 * invertDepth) * (depth >= midDistance ? farFactor : nearFactor) + invertDepth;\n\t\t#endif\n\t";
          static ThreeUniforms = {
            invertDepth: new i.Uniform(0),
            nearDistance: new i.Uniform(0),
            midDistance: new i.Uniform(0),
          };
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseRef: function () {
              return BaseRef;
            },
          });
        s(6);
        class BaseRef {
          constructor(t) {
            (this._scene = t),
              (this._ref = null),
              (this._refChangedCallback = null);
          }
          get() {
            return this.update(), this._ref;
          }
          setRefChangedCallback(t) {
            this._refChangedCallback = t;
          }
          update() { }
          _setRef(t) {
            if ((null === t || t.isEnabled() || (t = null), this._ref !== t)) {
              const e = this._ref;
              (this._ref = t),
                null !== this._refChangedCallback &&
                this._refChangedCallback(e, this._ref);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CollectionItem: function () {
              return CollectionItem;
            },
            Collection: function () {
              return Collection;
            },
          });
        class CollectionItem {
          constructor(t, e, s) {
            (this._type = t),
              (this._index = 0),
              (this._typeIndex = 0),
              (this._name = e),
              (this._collectionParent = s);
          }
          getType() {
            return this._type;
          }
          getIndex() {
            return this._index;
          }
          __setIndex(t) {
            this._index = t;
          }
          getTypeIndex() {
            return this._typeIndex;
          }
          __setTypeIndex(t) {
            this._typeIndex = t;
          }
          getName() {
            return this._name;
          }
          __getCollectionParent() {
            return this._collectionParent;
          }
          __setCollectionParent(t) {
            this._collectionParent = t;
          }
          __destroy() { }
        }
        class Collection {
          constructor(t, e) {
            (this._parent = t),
              (this._types = e),
              (this._items = []),
              (this._itemsByName = new Map()),
              (this._itemsByType = new Map());
          }
          get(t) {
            const e = this._getByItemOrNameOrIndex(t);
            return void 0 !== e ? this._items[e] : null;
          }
          getByType(t, e = 0) {
            const s = this._types.get(t);
            if (void 0 === s) return null;
            const i = this._itemsByType.get(s);
            return void 0 === i || e < 0 || e >= i.length ? null : i[e];
          }
          getByClass(t, e = 0) {
            const s = this._itemsByType.get(t);
            return void 0 !== s && e >= 0 && e < s.length ? s[e] : null;
          }
          add(t, e = "", s) {
            if ("" !== e && this._itemsByName.has(e))
              throw new Error(`Already added "${e}".`);
            const i = this._types.get(t);
            if (void 0 === t) throw new Error(`Type "${t}" not found.`);
            let n;
            try {
              n = new i(t, e, this._parent);
            } catch (s) {
              throw (
                (s instanceof Error &&
                  (s.message = `While adding "${e}" of type "${t}": ${s.message}`),
                  s)
              );
            }
            return this._addToLists(e, n, s), n;
          }
          addByClass(t, e = "", s) {
            if ("" !== e && this._itemsByName.has(e))
              throw new Error(`Already added "${e}".`);
            try {
              let i = "";
              for (const e of this._types.entries())
                if (e[1] === t) {
                  i = e[0];
                  break;
                }
              const n = new t(i, e, this._parent);
              return this._addToLists(e, n, s), n;
            } catch (t) {
              throw (
                (t instanceof Error &&
                  (t.message = `While adding "${e}": ${t.message}`),
                  t)
              );
            }
          }
          move(t, e, s) {
            const i = this._getByItemOrNameOrIndex(t);
            if (void 0 === i)
              throw new Error("While moving item, the item is not found.");
            const n = this._items[i],
              o = n.getName();
            if ("" !== o && e._itemsByName.has(o))
              throw new Error(`Already added "${o}".`);
            this._removeFromLists(i, o, n),
              e._addToLists(o, n, s),
              n.__setCollectionParent(e._parent);
          }
          remove(t) {
            const e = this._getByItemOrNameOrIndex(t);
            if (void 0 === e) return;
            const s = this._items[e],
              i = s.getName();
            this._removeFromLists(e, i, s), s.__destroy();
          }
          clear() {
            for (let t = this._items.length - 1; t >= 0; t--)
              this._items[t].__destroy();
            (this._items = []),
              this._itemsByName.clear(),
              this._itemsByType.clear();
          }
          get size() {
            return this._items.length;
          }
          _addToLists(t, e, s) {
            const i = void 0 !== s ? s.getIndex() : this._items.length;
            this._items.splice(i, 0, e),
              "" !== t && this._itemsByName.set(t, e),
              this._updateIndices(i, e);
          }
          _removeFromLists(t, e, s) {
            this._items.splice(t, 1),
              "" !== e && this._itemsByName.delete(e),
              this._updateIndices(t, s);
          }
          _updateIndices(t, e) {
            for (let e = t; e < this._items.length; e++)
              this._items[e].__setIndex(e);
            const s = e.constructor,
              i = this._itemsByType.set(s, []).get(s);
            let n = e.getTypeIndex();
            for (let t = 0; t < this._items.length; t++)
              this._items[t].constructor === s &&
                (this._items[t].__setTypeIndex(n),
                  i.push(this._items[t]),
                  (n += 1));
            0 === i.length && this._itemsByType.delete(s);
          }
          __destroy() {
            for (let t = this._items.length - 1; t >= 0; t--)
              this._items[t].__destroy();
          }
          _getByItemOrNameOrIndex(t) {
            if ("number" == typeof t) {
              if (t >= 0 && t < this._items.length) return t;
            } else {
              let e;
              e = "string" == typeof t ? this._itemsByName.get(t) : t;
              for (let t = this._items.length - 1; t >= 0; t--)
                if (this._items[t] === e) return t;
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DependencyGraph: function () {
              return DependencyGraph;
            },
          });
        class DependencyGraph {
          constructor() {
            (this._updateItemCallback = null),
              (this._compareItemCallback = null),
              (this._nodes = new Map()),
              (this._sortedNodes = []),
              (this._needsSorting = !1);
          }
          setUpdateItemCallback(t) {
            this._updateItemCallback = t;
          }
          setCompareItemCallback(t) {
            this._compareItemCallback = t;
          }
          addItem(t) {
            const e = new Node(t);
            this._nodes.set(t, e), (this._needsSorting = !0);
          }
          removeItem(t) {
            this._nodes.delete(t) && (this._needsSorting = !0);
          }
          needsSorting() {
            this._needsSorting = !0;
          }
          update() {
            if (this._needsSorting) {
              for (const t of this._nodes.values())
                (t.permanentMark = !1), (t.temporaryMark = !1);
              this._sortedNodes = [];
              const t = this._nodes.values();
              for (; ;) {
                const e = t.next();
                if (e.done) break;
                if (!this._visit(e.value)) break;
              }
              this._needsSorting = !1;
            }
            for (let t = 0, e = this._sortedNodes.length; t < e; t++)
              this._updateItemCallback(this._sortedNodes[t].item);
          }
          _visit(t) {
            if (t.permanentMark) return !0;
            if (t.temporaryMark)
              throw new Error("Dependency cycle in graph: " + t.item);
            t.temporaryMark = !0;
            for (const e of this._nodes.values()) {
              let s = !1;
              if (
                (this._compareItemCallback &&
                  (s = this._compareItemCallback(t.item, e.item)),
                  s)
              )
                try {
                  this._visit(e);
                } catch (e) {
                  throw (
                    (e instanceof Error &&
                      (e.message = `${e.message} ← ${t.item}`),
                      e)
                  );
                }
            }
            return (
              (t.temporaryMark = !1),
              (t.permanentMark = !0),
              this._sortedNodes.push(t),
              !0
            );
          }
        }
        class Node {
          constructor(t) {
            (this.item = t),
              (this.permanentMark = !1),
              (this.temporaryMark = !1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FastIterable: function () {
              return FastIterable;
            },
          });
        class FastIterable {
          getAt(t) {
            throw new Error();
          }
          get size() {
            throw new Error();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FPS: function () {
              return FPS;
            },
          });
        class FPS {
          constructor() {
            (this._numberOfSamples = 100),
              (this._samples = new Array(this._numberOfSamples)),
              (this._index = 0);
          }
          getNumberOfSamples() {
            return this._numberOfSamples;
          }
          setNumberOfSamples(t) {
            (this._numberOfSamples = t),
              (this._samples = new Array(this._numberOfSamples));
          }
          getFPS() {
            let t = 0;
            for (let e = 0; e < this._samples.length; e++)
              t += this._samples[e];
            return this._samples.length / t;
          }
          update(t) {
            (this._samples[this._index] = t),
              (this._index = (this._index + 1) % this._samples.length);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Freezable: function () {
              return Freezable;
            },
          });
        class Freezable {
          constructor() {
            this._frozen = !1;
          }
          throwIfFrozen() {
            if (this._frozen) throw new TypeError("The object is frozen.");
          }
          isFrozen() {
            return this._frozen;
          }
          freeze() {
            this._frozen = !0;
          }
          thaw() {
            this._frozen = !1;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MathUtils: function () {
              return MathUtils;
            },
          });
        class MathUtils {
          static get pi() {
            return 3.141592653589793;
          }
          static get twoPi() {
            return 6.283185307179586;
          }
          static get halfPi() {
            return 1.5707963267948966;
          }
          static angle(t, e) {
            return (
              (t = this.wrap(t, 0, 2 * Math.PI)),
              (e = this.wrap(e, 0, 2 * Math.PI)) - t > Math.PI
                ? t - e + 2 * Math.PI
                : t - e > Math.PI
                  ? e - t + 2 * Math.PI
                  : Math.abs(e - t)
            );
          }
          static clamp(t, e, s) {
            return Math.min(Math.max(e, t), s);
          }
          static clamp01(t) {
            return Math.min(Math.max(0, t), 1);
          }
          static wrap(t, e, s) {
            let i = ((t - e) % (s - e)) + e;
            return i < e && (i += s - e), i;
          }
          static lerp(t, e, s) {
            return (1 - s) * t + s * e;
          }
          static lerpAngle(t, e, s) {
            return (
              (t = this.wrap(t, -Math.PI, +Math.PI)),
              (e = this.wrap(e, -Math.PI, +Math.PI)) - t > Math.PI &&
              (t += 2 * Math.PI),
              t - e > Math.PI && (e += 2 * Math.PI),
              this.wrap(this.lerp(t, e, s), -Math.PI, +Math.PI)
            );
          }
          static radToDeg(t) {
            return 57.29577951308232 * t;
          }
          static degToRad(t) {
            return 0.01745329251994329 * t;
          }
          static ceilPow2(t) {
            return Math.pow(2, Math.ceil(Math.log(t) / Math.log(2)));
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Pool: function () {
              return Pool;
            },
          });
        var i = s(6);
        class Pool extends i.FastIterable {
          constructor(t) {
            super(),
              (this._type = t),
              (this._objects = []),
              (this._free = []),
              (this._freeLength = 0),
              (this._constructorFunction = () => new this._type()),
              (this._destructorFunction = () => { });
          }
          setConstructorFunction(t) {
            this._constructorFunction = t;
          }
          setDestructorFunction(t) {
            this._destructorFunction = t;
          }
          get() {
            let t = null;
            if (this._freeLength > 0)
              (t = this._objects[this._free[this._freeLength - 1]]),
                (this._freeLength -= 1);
            else {
              const e = this._objects.push(this._constructorFunction()) - 1;
              (this._objects[e]._poolIndex = e), (t = this._objects[e]);
            }
            return (t._poolUsed = !0), t;
          }
          release(t) {
            const e = t;
            void 0 !== e._poolIndex &&
              (this._freeLength >= this._free.length
                ? this._free.push(e._poolIndex)
                : (this._free[this._freeLength] = e._poolIndex),
                (this._freeLength += 1),
                (e._poolUsed = !1));
          }
          clean(t) {
            if (
              void 0 === t ||
              t >=
              (this._objects.length - this._freeLength) / this._objects.length
            ) {
              for (let t = 0; t < this._freeLength; t++) {
                const e = this._free[t];
                this._destructorFunction(this._objects[e]),
                  this._objects.splice(e, 1);
                for (let t = e, s = this._objects.length; t < s; t++)
                  this._objects[t]._poolIndex -= 1;
                for (let s = t + 1, i = this._freeLength; s < i; s++)
                  this._free[s] > e && (this._free[s] -= 1);
              }
              (this._free = []), (this._freeLength = 0);
            }
          }
          getAsArray() {
            return this._objects;
          }
          isUsed(t) {
            return t._poolUsed;
          }
          areAnyUsed() {
            return this._freeLength < this._objects.length;
          }
          getAt(t) {
            return this._objects[t];
          }
          get size() {
            return this._objects.length;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Reader: function () {
              return Reader;
            },
          });
        class Reader {
          constructor(t) {
            (this._dataView = new DataView(t)), (this._offset = 0);
          }
          isAtEnd() {
            return this._offset >= this._dataView.byteLength;
          }
          readByte() {
            const t = this._dataView.getUint8(this._offset);
            return (this._offset += 1), t;
          }
          readFloat32() {
            const t = this._dataView.getFloat32(this._offset, !0);
            return (this._offset += 4), t;
          }
          readFloat64() {
            const t = this._dataView.getFloat64(this._offset, !0);
            return (this._offset += 8), t;
          }
          readUInt8() {
            const t = this._dataView.getUint8(this._offset);
            return (this._offset += 1), t;
          }
          readUInt16() {
            const t = this._dataView.getUint16(this._offset, !0);
            return (this._offset += 2), t;
          }
          readUInt32() {
            const t = this._dataView.getUint32(this._offset, !0);
            return (this._offset += 4), t;
          }
          readUInt64() {
            const t = Number(this._dataView.getBigUint64(this._offset, !0));
            return (this._offset += 8), Number.isSafeInteger(t) ? t : NaN;
          }
          readInt8() {
            const t = this._dataView.getInt8(this._offset);
            return (this._offset += 1), t;
          }
          readInt16() {
            const t = this._dataView.getInt16(this._offset, !0);
            return (this._offset += 2), t;
          }
          readInt32() {
            const t = this._dataView.getInt32(this._offset, !0);
            return (this._offset += 4), t;
          }
          readInt64() {
            const t = Number(this._dataView.getBigInt64(this._offset, !0));
            return (this._offset += 8), Number.isSafeInteger(t) ? t : NaN;
          }
          readLine() {
            const t = [];
            for (; ;) {
              const e = this.readByte(),
                s = String.fromCharCode(e);
              if ("\r" !== s) {
                if ("\n" === s) break;
                t.push(e);
              }
            }
            if ("undefined" != typeof TextEncoder) {
              const e = new TextDecoder(),
                s = new Uint8Array(t);
              return e.decode(s);
            }
            return this._utf8ArrayToStr(t);
          }
          readString(t) {
            const e = [];
            for (; ;) {
              const s = this.readByte();
              if (void 0 === t && 0 === s) break;
              if ((e.push(s), void 0 !== t && e.length === t)) break;
            }
            if ("undefined" != typeof TextEncoder) {
              const t = new TextDecoder(),
                s = new Uint8Array(e);
              return t.decode(s);
            }
            return this._utf8ArrayToStr(e);
          }
          _utf8ArrayToStr(t) {
            let e = 0,
              s = 0,
              i = 0,
              n = 0,
              o = "",
              r = 0;
            const a = t.length;
            for (; r < a;)
              switch (((e = t[r]), (r += 1), e >> 4)) {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                  o += String.fromCharCode(e);
                  break;
                case 12:
                case 13:
                  (s = 0 | t[r]),
                    (r += 1),
                    (o += String.fromCharCode(((31 & e) << 6) | (63 & s)));
                  break;
                case 14:
                  (s = 0 | t[r]),
                    (r += 1),
                    (i = 0 | t[r]),
                    (r += 1),
                    (o += String.fromCharCode(
                      ((15 & e) << 12) | ((63 & s) << 6) | ((63 & i) << 0),
                    ));
                  break;
                case 15:
                  (s = 0 | t[r]),
                    (r += 1),
                    (i = 0 | t[r]),
                    (r += 1),
                    (n = 0 | t[r]),
                    (r += 1),
                    (o += String.fromCharCode(
                      ((7 & e) << 18) |
                      ((63 & s) << 12) |
                      ((63 & i) << 6) |
                      ((63 & n) << 0),
                    ));
              }
            return o;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Sort: function () {
              return Sort;
            },
          });
        class Sort {
          static getIndex(t, e, s) {
            let i = 0,
              n = e.length;
            if (void 0 === s)
              for (; i < n;) {
                const s = (i + n) >>> 1;
                e[s] < t ? (i = s + 1) : (n = s);
              }
            else
              for (; i < n;) {
                const o = (i + n) >>> 1;
                s(e[o], t) ? (i = o + 1) : (n = o);
              }
            return i;
          }
          static add(t, e, s, i) {
            let n = this.getIndex(t, e, s);
            if (void 0 === i) for (; n < e.length && e[n] === t;) n += 1;
            else for (; n < e.length && i(e[n], t);) n += 1;
            e.splice(n, 0, t);
          }
          static remove(t, e, s, i) {
            const n = this.getIndex(t, e, s);
            let o = !1;
            return (
              n < e.length &&
              ((void 0 === i && e[n] === t) ||
                (void 0 !== i && i(e[n], t))) &&
              (o = !0),
              o && e.splice(n, 1),
              o
            );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Tile: function () {
              return Tile;
            },
          });
        class Tile {
          constructor(t) {
            (this._parent = t),
              (this._children = []),
              (this._active = !1),
              (this._loaded = !1),
              (this._destroyed = !1),
              (this._transitioning = !1);
          }
          getParent() {
            return this._parent;
          }
          async forceLoad() {
            (this._transitioning = !0),
              this._destroyed || (await this.load()),
              (this._loaded = !0),
              this._destroyed || (await this.activate()),
              (this._active = !0),
              (this._transitioning = !1);
          }
          check() {
            return (
              this._destroyed ||
              this._transitioning ||
              (0 === this._children.length && this.checkSplit()
                ? this._split()
                : this._children.length > 0 &&
                this.checkJoin() &&
                this._join()),
              this._transitioning
            );
          }
          get children() {
            return this._children;
          }
          createNewTile(t, e, s) {
            return null;
          }
          checkSplit() {
            return !1;
          }
          checkJoin() {
            return !1;
          }
          async load() { }
          async unload() { }
          async activate() { }
          async deactivate() { }
          destroy() {
            this._destroyed = !0;
            for (let t = 0; t < this._children.length; t++)
              this._children[t].destroy();
            this._transitioning ||
              (this._active
                ? this.deactivate()
                  .then(() => {
                    this.unload();
                  })
                  .catch((t) => {
                    throw t;
                  })
                : this._loaded && this.unload());
          }
          _split() {
            const t = [],
              e = [];
            this._splitAndLoad(t, e),
              Promise.all(t)
                .then(() => {
                  const t = [];
                  for (let s = 0; s < e.length; s++)
                    e[s]._loaded && !e[s]._destroyed
                      ? t.push(
                        e[s]
                          .activate()
                          .then(async () => {
                            if (this._destroyed)
                              return this.deactivate()
                                .then(() => {
                                  this.unload();
                                })
                                .catch((t) => {
                                  throw t;
                                });
                            (e[s]._active = !0), (e[s]._transitioning = !1);
                          })
                          .catch((t) => {
                            throw t;
                          }),
                      )
                      : (e[s]._transitioning = !1);
                  return (
                    this._active &&
                    t.push(
                      this.deactivate()
                        .then(() => {
                          this._active = !1;
                        })
                        .catch((t) => {
                          throw t;
                        }),
                    ),
                    t
                  );
                })
                .then(() => {
                  this._loaded
                    ? this.unload()
                      .then(() => {
                        (this._loaded = !1), (this._transitioning = !1);
                      })
                      .catch((t) => {
                        throw t;
                      })
                    : (this._transitioning = !1);
                })
                .catch((t) => {
                  throw t;
                });
          }
          _join() {
            if (this._checkIfDescendantsAreTransitioning()) return;
            const t = [];
            (this._transitioning = !0),
              this._markDescendantsAsTransitioning(t),
              this.load()
                .then(async () => {
                  if (this._destroyed) return this.unload();
                  this._loaded = !0;
                })
                .then(() => {
                  const e = [];
                  for (let s = 0; s < t.length; s++)
                    e.push(
                      t[s]
                        .deactivate()
                        .then(() => {
                          t[s]._active = !1;
                        })
                        .catch((t) => {
                          throw t;
                        }),
                    );
                  return (
                    this._destroyed ||
                    e.push(
                      this.activate()
                        .then(async () => {
                          if (this._destroyed)
                            return this.deactivate()
                              .then(() => {
                                this.unload();
                              })
                              .catch((t) => {
                                throw t;
                              });
                          this._active = !0;
                        })
                        .catch((t) => {
                          throw t;
                        }),
                    ),
                    Promise.all(e)
                  );
                })
                .then(() => {
                  const e = [];
                  for (let s = 0; s < t.length; s++)
                    e.push(
                      t[s]
                        .unload()
                        .then(() => {
                          t[s]._loaded = !1;
                        })
                        .catch((t) => {
                          throw t;
                        }),
                    );
                  return Promise.all(e);
                })
                .then(() => {
                  (this._children = []), (this._transitioning = !1);
                })
                .catch((t) => {
                  throw t;
                });
          }
          _splitAndLoad(t, e) {
            this._transitioning = !0;
            for (let s = 0; s < 2; s++)
              for (let i = 0; i < 2; i++) {
                const n = this.createNewTile(this, s, i);
                null !== n &&
                  (this._children.push(n),
                    n.checkSplit()
                      ? n._splitAndLoad(t, e)
                      : ((n._transitioning = !0),
                        t.push(
                          n
                            .load()
                            .then(async () => {
                              if (n._destroyed) return n.unload();
                              n._loaded = !0;
                            })
                            .catch((t) => {
                              throw t;
                            }),
                        )),
                    e.push(n));
              }
          }
          _checkIfDescendantsAreTransitioning() {
            for (let t = 0; t < this._children.length; t++) {
              const e = this._children[t];
              if (e._transitioning) return !0;
              if (e._checkIfDescendantsAreTransitioning()) return !0;
            }
            return !1;
          }
          _markDescendantsAsTransitioning(t) {
            for (let e = 0; e < this._children.length; e++) {
              const s = this._children[e];
              (s._transitioning = !0),
                s._active && t.push(s),
                s._markDescendantsAsTransitioning(t);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TimeUtils: function () {
              return TimeUtils;
            },
          });
        class TimeUtils {
          static now() {
            return TimeUtils.unixToEt(Date.now() / 1e3);
          }
          static etToUnix(t) {
            let e = 0;
            for (let s = 0; s < i.length; s++)
              t + 946727957.816 + e >= i[s] + 1 && (e -= 1);
            return t + 946727957.816 + e;
          }
          static unixToEt(t) {
            let e = 0;
            for (let s = 0; s < i.length; s++) t >= i[s] + 1 && (e += 1);
            return t - 946727957.816 + e;
          }
          static get leapSeconds() {
            return i;
          }
        }
        const i = [
          Date.UTC(1972, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1972, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1973, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1974, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1975, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1976, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1977, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1978, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1979, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1981, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1982, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1983, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1985, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1987, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1989, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1990, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1992, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1993, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1994, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1995, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(1997, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(1998, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(2005, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(2008, 11, 31, 23, 59, 59) / 1e3,
          Date.UTC(2012, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(2015, 5, 30, 23, 59, 59) / 1e3,
          Date.UTC(2016, 11, 31, 23, 59, 59) / 1e3,
        ];
      },
      function (t, e, s) {
        "use strict";
        async function i(t, e, s) {
          return new Promise((i, n) => {
            let o = 0;
            const r = setInterval(() => {
              t() && (clearInterval(r), i()),
                (o += e),
                o >= s && (clearInterval(r), n(new Error()));
            }, 1e3 * e);
          });
        }
        s.r(e),
          s.d(e, {
            waitUntil: function () {
              return i;
            },
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AER: function () {
              return AER;
            },
          });
        var i = s(6);
        class AER extends i.Freezable {
          static get pool() {
            return n;
          }
          constructor(t = 0, e = 0, s = 0) {
            super(),
              (this._azimuth = t),
              (this._elevation = e),
              (this._range = s);
          }
          get azimuth() {
            return this._azimuth;
          }
          set azimuth(t) {
            this.throwIfFrozen(), (this._azimuth = t);
          }
          get elevation() {
            return this._elevation;
          }
          set elevation(t) {
            this.throwIfFrozen(), (this._elevation = t);
          }
          get range() {
            return this._range;
          }
          set range(t) {
            this.throwIfFrozen(), (this._range = t);
          }
          toString(t = !1) {
            return t
              ? "[" +
              i.MathUtils.radToDeg(this._azimuth) +
              ", " +
              i.MathUtils.radToDeg(this._elevation) +
              ", " +
              this._range +
              "]"
              : "[" +
              this._azimuth +
              ", " +
              this._elevation +
              ", " +
              this._range +
              "]";
          }
          copy(t) {
            this.throwIfFrozen(),
              (this._azimuth = t._azimuth),
              (this._elevation = t._elevation),
              (this._range = t._range);
          }
          set(t, e, s) {
            this.throwIfFrozen(),
              (this._azimuth = t),
              (this._elevation = e),
              (this._range = s);
          }
          setFromVector(t) {
            this.throwIfFrozen(),
              (this._range = t.magnitude()),
              (this._elevation = Math.asin(t.z / this._range)),
              (this._azimuth = Math.atan2(t.y, t.x));
          }
        }
        const n = new i.Pool(AER);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Color: function () {
              return Color;
            },
          });
        var i = s(6);
        class Color extends i.Freezable {
          static get pool() {
            return n;
          }
          static get Black() {
            return o;
          }
          static get Clear() {
            return r;
          }
          constructor(t = 1, e = 1, s = 1, i = 1) {
            super(), (this._r = t), (this._g = e), (this._b = s), (this._a = i);
          }
          get r() {
            return this._r;
          }
          set r(t) {
            this.throwIfFrozen(), (this._r = t);
          }
          get g() {
            return this._g;
          }
          set g(t) {
            this.throwIfFrozen(), (this._g = t);
          }
          get b() {
            return this._b;
          }
          set b(t) {
            this.throwIfFrozen(), (this._b = t);
          }
          get a() {
            return this._a;
          }
          set a(t) {
            this.throwIfFrozen(), (this._a = t);
          }
          toString() {
            return (
              "[" +
              this._r +
              ", " +
              this._g +
              ", " +
              this._b +
              ", " +
              this._a +
              "]"
            );
          }
          copy(t) {
            this.throwIfFrozen(),
              (this._r = t._r),
              (this._g = t._g),
              (this._b = t._b),
              (this._a = t._a);
          }
          set(t, e, s, i = 1) {
            this.throwIfFrozen(),
              (this._r = t),
              (this._g = e),
              (this._b = s),
              (this._a = i);
          }
          add(t, e) {
            this.throwIfFrozen(),
              (this._r = t._r + e._r),
              (this._g = t._g + e._g),
              (this._b = t._b + e._b),
              (this._a = t._a + e._a);
          }
          sub(t, e) {
            this.throwIfFrozen(),
              (this._r = t._r - e._r),
              (this._g = t._g - e._g),
              (this._b = t._b - e._b),
              (this._a = t._a - e._a);
          }
          mult(t, e) {
            this.throwIfFrozen(),
              (this._r = t._r * e),
              (this._g = t._g * e),
              (this._b = t._b * e),
              (this._a = t._a * e);
          }
          addMult(t, e, s) {
            this.throwIfFrozen(),
              (this._r = t._r + e._r * s),
              (this._g = t._g + e._g * s),
              (this._b = t._b + e._b * s),
              (this._a = t._a + e._a * s);
          }
          div(t, e) {
            this.throwIfFrozen(),
              (this._r = t._r / e),
              (this._g = t._g / e),
              (this._b = t._b / e),
              (this._a = t._a / e);
          }
          scale(t, e) {
            this.throwIfFrozen(),
              (this._r = t._r * e._r),
              (this._g = t._g * e._g),
              (this._b = t._b * e._b),
              (this._a = t._a * e._a);
          }
          value() {
            return (this._r + this._g + this._b) / 3;
          }
          min() {
            return Math.min(this._r, this._g, this._b);
          }
          max() {
            return Math.max(this._r, this._g, this._b);
          }
          lerp(t, e, s) {
            this.throwIfFrozen(),
              (this._r = i.MathUtils.lerp(t._r, e._r, s)),
              (this._g = i.MathUtils.lerp(t._g, e._g, s)),
              (this._b = i.MathUtils.lerp(t._b, e._b, s)),
              (this._a = i.MathUtils.lerp(t._a, e._a, s));
          }
        }
        const n = new i.Pool(Color),
          o = new Color(0, 0, 0, 1);
        o.freeze();
        const r = new Color(0, 0, 0, 1);
        r.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FastMapEntry: function () {
              return FastMapEntry;
            },
            FastMap: function () {
              return FastMap;
            },
          });
        var i = s(6);
        class FastMapEntry {
          constructor(t, e) {
            (this.key = t), (this.value = e);
          }
        }
        class FastMap extends i.FastIterable {
          constructor(t) {
            if (
              (super(),
                (this._entries = []),
                (this._keyMap = new Map()),
                void 0 !== t)
            )
              for (const e of t)
                this._entries.push(new FastMapEntry(e.key, e.value)),
                  this._keyMap.set(e.key, this._entries.length - 1);
          }
          has(t) {
            return this._keyMap.has(t);
          }
          get(t) {
            const e = this._keyMap.get(t);
            if (void 0 !== e) return this._entries[e].value;
          }
          set(t, e) {
            const s = this._keyMap.get(t);
            void 0 !== s
              ? (this._entries[s].value = e)
              : (this._entries.push(new FastMapEntry(t, e)),
                this._keyMap.set(t, this._entries.length - 1));
          }
          delete(t) {
            const e = this._keyMap.get(t);
            if (void 0 !== e) {
              this._entries.splice(e, 1), this._keyMap.delete(t);
              for (const t of this._keyMap)
                t[1] > e && this._keyMap.set(t[0], t[1] - 1);
              return !0;
            }
            return !1;
          }
          clear() {
            (this._entries = []), this._keyMap.clear();
          }
          getAt(t) {
            return this._entries[t];
          }
          get size() {
            return this._entries.length;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FastSet: function () {
              return FastSet;
            },
          });
        var i = s(6);
        class FastSet extends i.FastIterable {
          constructor(t) {
            if (
              (super(),
                (this._values = []),
                (this._valueMap = new Map()),
                void 0 !== t)
            )
              for (const e of t)
                this._values.push(e),
                  this._valueMap.set(e, this._values.length - 1);
          }
          has(t) {
            return this._valueMap.has(t);
          }
          add(t) {
            return (
              void 0 === this._valueMap.get(t) &&
              (this._values.push(t),
                this._valueMap.set(t, this._values.length - 1)),
              this
            );
          }
          delete(t) {
            const e = this._valueMap.get(t);
            if (void 0 !== e) {
              this._values.splice(e, 1), this._valueMap.delete(t);
              for (const t of this._valueMap)
                t[1] > e && this._valueMap.set(t[0], t[1] - 1);
              return !0;
            }
            return !1;
          }
          clear() {
            (this._values = []), this._valueMap.clear();
          }
          getAt(t) {
            return this._values[t];
          }
          get size() {
            return this._values.length;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Geometry: function () {
              return Geometry;
            },
          });
        s(6);
        class Geometry {
          static getLineSphereIntersectionWithSphereAtOrigin(t, e, s) {
            const i = t.dot(t),
              n = t.dot(e),
              o = e.dot(e),
              r = n * n + (s * s - i) * o;
            return r < 0 ? Number.NaN : (-n - Math.sqrt(r)) / o;
          }
          static getLineSphereIntersectionWithLineStartAtOrigin(t, e, s, i) {
            const n = e.dot(e),
              o = e.dot(s),
              r = o * o + (i * i - s.dot(s)) * n;
            if (r < 0) t.min = t.max = Number.NaN;
            else {
              const e = Math.sqrt(r);
              (t.min = (o - e) / n), (t.max = (o + e) / n);
            }
          }
          static getLLAFromXYZOnSphere(t, e, s) {
            const i = e.magnitudeXY();
            (t.lon = Math.atan2(e.y, e.x)),
              (t.lat = Math.atan(e.z / i)),
              (t.alt = e.magnitude() - s);
          }
          static getXYZFromLLAOnSphere(t, e, s) {
            (t.x = (s + e.alt) * Math.cos(e.lat) * Math.cos(e.lon)),
              (t.y = (s + e.alt) * Math.cos(e.lat) * Math.sin(e.lon)),
              (t.z = (s + e.alt) * Math.sin(e.lat));
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Interval: function () {
              return Interval;
            },
          });
        var i = s(6);
        class Interval extends i.Freezable {
          static get pool() {
            return n;
          }
          static get Infinite() {
            return o;
          }
          constructor(t = 0, e = 0) {
            super(), (this._min = t), (this._max = e);
          }
          get min() {
            return this._min;
          }
          set min(t) {
            this.throwIfFrozen(), (this._min = t);
          }
          get max() {
            return this._max;
          }
          set max(t) {
            this.throwIfFrozen(), (this._max = t);
          }
          toString() {
            return "[" + this._min + ", " + this._max + "]";
          }
          copy(t) {
            this.throwIfFrozen(), (this._min = t._min), (this._max = t._max);
          }
          set(t, e) {
            this.throwIfFrozen(), (this._min = t), (this._max = e);
          }
          length() {
            return this._max - this._min;
          }
          clamp(t) {
            return Math.min(Math.max(this._min, t), this._max);
          }
          expandTo(t) {
            this.throwIfFrozen(),
              (this._min = Math.min(this._min, t)),
              (this._max = Math.max(this._max, t));
          }
          contains(t) {
            return this._min <= t && t < this._max;
          }
          intersects(t) {
            return this._min < t._max && t._min < this._max;
          }
          intersection(t, e) {
            this.throwIfFrozen(),
              (this._min = Math.max(t._min, e._min)),
              (this._max = Math.min(t._max, e._max)),
              this._max < this._min && (this._max = this._min);
          }
          union(t, e) {
            this.throwIfFrozen(),
              (this._min = Math.min(t._min, e._min)),
              (this._max = Math.max(t._max, e._max));
          }
        }
        const n = new i.Pool(Interval),
          o = new Interval(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);
        o.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitalElements: function () {
              return OrbitalElements;
            },
          });
        var i = s(6);
        class OrbitalElements {
          constructor() {
            (this.epoch = 0),
              (this.eccentricity = 0),
              (this.semiMajorAxis = 0),
              (this.meanAngularMotion = 0),
              (this.meanAnomalyAtEpoch = 0),
              (this.orbitOrientation = new i.Quaternion());
          }
          copy(t) {
            (this.epoch = t.epoch),
              (this.eccentricity = t.eccentricity),
              (this.semiMajorAxis = t.semiMajorAxis),
              (this.meanAnomalyAtEpoch = t.meanAnomalyAtEpoch),
              (this.meanAngularMotion = t.meanAngularMotion),
              this.orbitOrientation.copy(t.orbitOrientation);
          }
          projectFromMeanAnomaly(t, e, s) {
            if (this.eccentricity < 1) {
              const i = this.getEccentricAnomalyFromMeanAnomaly(s),
                n = this.semiMajorAxis * (1 - this.eccentricity * Math.cos(i)),
                o =
                  (this.meanAngularMotion *
                    this.semiMajorAxis *
                    this.semiMajorAxis) /
                  n;
              (t.x = this.semiMajorAxis * (Math.cos(i) - this.eccentricity)),
                (t.y =
                  this.semiMajorAxis *
                  Math.sqrt(1 - this.eccentricity * this.eccentricity) *
                  Math.sin(i)),
                (e.x = -o * Math.sin(i)),
                (e.y =
                  o *
                  Math.sqrt(1 - this.eccentricity * this.eccentricity) *
                  Math.cos(i));
            } else {
              const i = this.getEccentricAnomalyFromMeanAnomaly(s),
                n =
                  -this.semiMajorAxis * (1 - this.eccentricity * Math.cosh(i)),
                o =
                  (this.meanAngularMotion *
                    this.semiMajorAxis *
                    this.semiMajorAxis) /
                  n;
              (t.x = this.semiMajorAxis * (this.eccentricity - Math.cosh(i))),
                (t.y =
                  this.semiMajorAxis *
                  Math.sqrt(this.eccentricity * this.eccentricity - 1) *
                  Math.sinh(i)),
                (e.x = -o * Math.sinh(i)),
                (e.y =
                  o *
                  Math.sqrt(this.eccentricity * this.eccentricity - 1) *
                  Math.cosh(i));
            }
            (t.z = 0),
              (e.z = 0),
              t.rotate(this.orbitOrientation, t),
              e.rotate(this.orbitOrientation, e);
          }
          project(t, e, s) {
            let n =
              this.meanAnomalyAtEpoch +
              this.meanAngularMotion * (s - this.epoch);
            this.eccentricity < 1 &&
              (n = i.MathUtils.wrap(n, -i.MathUtils.pi, +i.MathUtils.pi)),
              this.projectFromMeanAnomaly(t, e, n);
          }
          getTrueAnomalyFromPosition(t) {
            const e = i.Vector3.pool.get();
            e.rotateInverse(this.orbitOrientation, t);
            const s = Math.atan2(e.y, e.x);
            return i.Vector3.pool.release(e), s;
          }
          getMeanAnomalyFromTrueAnomaly(t) {
            let e = 0,
              s = 0;
            return (
              this.eccentricity < 1
                ? ((e =
                  2 *
                  Math.atan(
                    Math.tan(t / 2) *
                    Math.sqrt(
                      (1 - this.eccentricity) / (1 + this.eccentricity),
                    ),
                  )),
                  (s = e - this.eccentricity * Math.sin(e)))
                : ((e =
                  2 *
                  Math.atanh(
                    Math.tan(t / 2) *
                    Math.sqrt(
                      (this.eccentricity - 1) / (1 + this.eccentricity),
                    ),
                  )),
                  (s = this.eccentricity * Math.sinh(e) - e)),
              s
            );
          }
          getEccentricAnomalyFromMeanAnomaly(t) {
            if (this.eccentricity < 1) {
              let e = t;
              this.eccentricity >= 0.8 && (e = Math.sign(t) * i.MathUtils.pi);
              for (let s = 0; s < 20; s++) {
                const s =
                  (e - this.eccentricity * Math.sin(e) - t) /
                  (this.eccentricity * Math.cos(e) - 1);
                if (((e += s), Math.abs(s) < 0.00174532925)) break;
              }
              return e;
            }
            {
              let e = Math.log((2 * Math.abs(t)) / Math.E + 1.8);
              this.eccentricity <= 1.2 &&
                (e = Math.log((2 * Math.abs(t)) / Math.E + 1.8)),
                t < 0 && (e *= -1);
              for (let s = 0; s < 20; s++) {
                const s =
                  (e - this.eccentricity * Math.sinh(e) + t) /
                  (this.eccentricity * Math.cosh(e) - 1);
                if (((e += s), Math.abs(s) < 0.00174532925)) break;
              }
              return e;
            }
          }
          getMeanAnomalyFromEccentricAnomaly(t) {
            if (this.eccentricity < 1) {
              const e = t - this.eccentricity * Math.sin(t);
              return i.MathUtils.wrap(e, -Math.PI, +Math.PI);
            }
            return this.eccentricity * Math.sinh(t) - t;
          }
          getTrueAnomalyFromEccentricAnomaly(t) {
            return this.eccentricity < 1
              ? 2 *
              Math.atan(
                Math.sqrt(
                  (1 + this.eccentricity) / (1 - this.eccentricity),
                ) * Math.tan(t / 2),
              )
              : 2 *
              Math.atan(
                Math.sqrt(
                  (1 + this.eccentricity) / (this.eccentricity - 1),
                ) * Math.tanh(t / 2),
              );
          }
          getEccentricAnomalyFromTrueAnomaly(t) {
            if (this.eccentricity < 1) {
              const e =
                2 *
                Math.atan2(
                  Math.tan(t / 2),
                  Math.sqrt((1 + this.eccentricity) / (1 - this.eccentricity)),
                );
              return i.MathUtils.wrap(e, -Math.PI, +Math.PI);
            }
            return (
              2 *
              Math.atanh(
                Math.sqrt((this.eccentricity - 1) / (this.eccentricity + 1)) *
                Math.tan(t / 2),
              )
            );
          }
          getInclination() {
            const t = i.Vector3.pool.get();
            this.orbitOrientation.getAxis(t, 2);
            const e = t.angle(i.Vector3.ZAxis);
            return i.Vector3.pool.release(t), e;
          }
          getLongitudeOfAscendingNode() {
            const t = i.Vector3.pool.get();
            this.orbitOrientation.getAxis(t, 2);
            const e = Math.atan2(t.x, -t.y);
            return (
              i.Vector3.pool.release(t),
              i.MathUtils.wrap(e, 0, i.MathUtils.twoPi)
            );
          }
          getArgumentOfPeriapsis() {
            const t = i.Vector3.pool.get(),
              e = i.Vector3.pool.get();
            this.orbitOrientation.getAxis(t, 2),
              t.set(-t.y, t.x, 0),
              this.orbitOrientation.getAxis(e, 0);
            const s = t.angle(e);
            return (
              i.Vector3.pool.release(e),
              i.Vector3.pool.release(t),
              i.MathUtils.wrap(s, 0, i.MathUtils.twoPi)
            );
          }
          getPeriod() {
            return i.MathUtils.twoPi / this.meanAngularMotion;
          }
          getPeriapsis() {
            return this.semiMajorAxis * (1 - this.eccentricity);
          }
          getApoapsis() {
            return this.semiMajorAxis * (1 + this.eccentricity);
          }
          setOrbitOrientationFromElements(t, e, s) {
            const n = i.Vector3.pool.get(),
              o = i.Vector3.pool.get(),
              r = i.Quaternion.pool.get();
            n.set(Math.cos(e), Math.sin(e), 0),
              o.set(
                Math.sin(e) * Math.sin(t),
                -Math.cos(e) * Math.sin(t),
                Math.cos(t),
              ),
              this.orbitOrientation.setFromAxes(n, void 0, o),
              r.setFromAxisAngle(o, s),
              this.orbitOrientation.mult(r, this.orbitOrientation),
              i.Quaternion.pool.release(r),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(n);
          }
          setFromPositionAndVelocity(t, e, s, n) {
            const o = 1 / n;
            this.epoch = s;
            const r = i.Vector3.pool.get();
            r.cross(t, e);
            const a = i.Vector3.pool.get(),
              l = i.Vector3.pool.get();
            l.normalize(t),
              a.cross(e, r),
              a.mult(a, o),
              a.sub(a, l),
              (this.eccentricity = a.magnitude());
            const c = r.dot(r) * o;
            (this.semiMajorAxis =
              c / (1 - this.eccentricity * this.eccentricity)),
              this.eccentricity > 1 && (this.semiMajorAxis *= -1);
            let h = Math.acos(
              i.MathUtils.clamp(a.dot(l) / this.eccentricity, -1, 1),
            );
            t.dot(e) < 0 && (h *= -1),
              h < -Math.PI && (h += i.MathUtils.twoPi),
              h >= Math.PI && (h -= i.MathUtils.twoPi),
              a.normalize(a),
              r.normalize(r),
              this.orbitOrientation.setFromAxes(a, void 0, r),
              i.Vector3.pool.release(l),
              i.Vector3.pool.release(r),
              i.Vector3.pool.release(a);
            const u = this.getEccentricAnomalyFromTrueAnomaly(h);
            (this.meanAnomalyAtEpoch =
              this.getMeanAnomalyFromEccentricAnomaly(u)),
              (this.meanAngularMotion = Math.sqrt(
                n /
                (this.semiMajorAxis *
                  this.semiMajorAxis *
                  this.semiMajorAxis),
              ));
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Rect: function () {
              return Rect;
            },
          });
        var i = s(6);
        class Rect extends i.Freezable {
          static get pool() {
            return n;
          }
          constructor(t = 0, e = 0, s = 0, n = 0) {
            super(),
              (this._origin = new i.Vector2(t, e)),
              (this._size = new i.Vector2(s, n));
          }
          freeze() {
            this._origin.freeze(), this._size.freeze();
          }
          thaw() {
            this._origin.thaw(), this._size.thaw();
          }
          get origin() {
            return this._origin;
          }
          get size() {
            return this._size;
          }
          toString() {
            return (
              "[Origin: (" +
              this._origin.x +
              ", " +
              this._origin.y +
              "), Size: (" +
              this._size.x +
              ", " +
              this._size.y +
              ")]"
            );
          }
          copy(t) {
            this._origin.copy(t._origin), this._size.copy(t._size);
          }
          set(t, e, s, i) {
            this._origin.set(t, e), this._size.set(s, i);
          }
          contains(t) {
            return (
              this._origin.x <= t.x &&
              t.x < this._origin.x + this._size.x &&
              this._origin.y <= t.y &&
              t.y < this._origin.y + this._size.y
            );
          }
          intersects(t) {
            return (
              this._origin.x + this._size.x > t._origin.x &&
              t._origin.x + t._size.x > this._origin.x &&
              this._origin.y + this._size.y > t._origin.y &&
              t._origin.y + t._size.y > this._origin.y
            );
          }
        }
        const n = new i.Pool(Rect);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Quaternion: function () {
              return Quaternion;
            },
          });
        var i = s(6);
        class Quaternion extends i.Freezable {
          static get pool() {
            return n;
          }
          static get NaN() {
            return r;
          }
          static get Identity() {
            return o;
          }
          static fromAxisAngle(t, e) {
            const s = new Quaternion();
            return s.setFromAxisAngle(t, e), s;
          }
          static fromAxes(t, e, s) {
            const i = new Quaternion();
            return i.setFromAxes(t, e, s), i;
          }
          static fromEuler(t, e, s) {
            const i = new Quaternion();
            return i.setFromEuler(t, e, s), i;
          }
          static fromVectorFromTo(t, e) {
            const s = new Quaternion();
            return s.setFromVectorFromTo(t, e), s;
          }
          static fromFromAxis(t, e) {
            const s = new Quaternion();
            return s.setFromAxis(t, e), s;
          }
          constructor(t = 1, e = 0, s = 0, i = 0) {
            super(), (this._w = t), (this._x = e), (this._y = s), (this._z = i);
          }
          get w() {
            return this._w;
          }
          set w(t) {
            this.throwIfFrozen(), (this._w = t);
          }
          get x() {
            return this._x;
          }
          set x(t) {
            this.throwIfFrozen(), (this._x = t);
          }
          get y() {
            return this._y;
          }
          set y(t) {
            this.throwIfFrozen(), (this._y = t);
          }
          get z() {
            return this._z;
          }
          set z(t) {
            this.throwIfFrozen(), (this._z = t);
          }
          getAngle() {
            return 2 * Math.acos(this._w);
          }
          copy(t) {
            this.throwIfFrozen(),
              (this._w = t._w),
              (this._x = t._x),
              (this._y = t._y),
              (this._z = t._z);
          }
          copyFromThreeJs(t) {
            this.throwIfFrozen(),
              (this._w = t.w),
              (this._x = t.x),
              (this._y = t.y),
              (this._z = t.z);
          }
          set(t, e, s, i) {
            this.throwIfFrozen(),
              (this._w = t),
              (this._x = e),
              (this._y = s),
              (this._z = i);
          }
          setFromAxisAngle(t, e) {
            this.throwIfFrozen();
            const s = Math.sin(e / 2);
            (this._w = Math.cos(e / 2)),
              (this._x = s * t.x),
              (this._y = s * t.y),
              (this._z = s * t.z);
          }
          setFromAxes(t, e, s) {
            let n;
            this.throwIfFrozen(),
              void 0 === t
                ? ((n = t = i.Vector3.pool.get()), t.cross(e, s))
                : void 0 === e
                  ? ((n = e = i.Vector3.pool.get()), e.cross(s, t))
                  : void 0 === s &&
                  ((n = s = i.Vector3.pool.get()), s.cross(t, e));
            const o = t.x + e.y + s.z;
            if (o > 0) {
              const i = 2 * Math.sqrt(o + 1);
              (this._w = 0.25 * i),
                (this._x = (e.z - s.y) / i),
                (this._y = (s.x - t.z) / i),
                (this._z = (t.y - e.x) / i);
            } else if (t.x > e.y && t.x > s.z) {
              const i = 2 * Math.sqrt(1 + t.x - e.y - s.z);
              (this._w = (e.z - s.y) / i),
                (this._x = 0.25 * i),
                (this._y = (e.x + t.y) / i),
                (this._z = (s.x + t.z) / i);
            } else if (e.y > s.z) {
              const i = 2 * Math.sqrt(1 + e.y - s.z - t.x);
              (this._w = (s.x - t.z) / i),
                (this._x = (e.x + t.y) / i),
                (this._y = 0.25 * i),
                (this._z = (s.y + e.z) / i);
            } else {
              const i = 2 * Math.sqrt(1 + s.z - t.x - e.y);
              (this._w = (t.y - e.x) / i),
                (this._x = (s.x + t.z) / i),
                (this._y = (s.y + e.z) / i),
                (this._z = 0.25 * i);
            }
            i.Vector3.pool.release(n);
          }
          setFromEuler(t, e, s) {
            this.throwIfFrozen();
            const i = 0.5 * t,
              n = 0.5 * e,
              o = 0.5 * s,
              r = Math.cos(i),
              a = Math.sin(i),
              l = Math.cos(n),
              c = Math.sin(n),
              h = Math.cos(o),
              u = Math.sin(o);
            (this._w = r * l * h + a * c * u),
              (this._x = a * l * h - r * c * u),
              (this._y = r * c * h + a * l * u),
              (this._z = r * l * u - a * c * h);
          }
          setFromVectorFromTo(t, e) {
            const s = i.Vector3.pool.get(),
              n = t.dot(e);
            if (n >= 1) this.set(1, 0, 0, 0);
            else if (n <= -1) this.set(0, 1, 0, 0);
            else {
              s.cross(t, e), s.normalize(s);
              const i = Math.acos(n);
              this.setFromAxisAngle(s, i);
            }
            i.Vector3.pool.release(s);
          }
          setFromAxis(t, e) {
            const s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get();
            s.normalize(t),
              n.cross(s, i.Vector3.XAxis),
              n.isZero() && n.cross(s, i.Vector3.YAxis),
              n.normalize(n),
              0 === e
                ? this.setFromAxes(s, n, void 0)
                : 1 === e
                  ? this.setFromAxes(void 0, s, n)
                  : 2 === e && this.setFromAxes(n, void 0, s),
              i.Vector3.pool.release(s),
              i.Vector3.pool.release(n);
          }
          toString() {
            return (
              "[" +
              this._w +
              ", " +
              this._x +
              ", " +
              this._y +
              ", " +
              this._z +
              "]"
            );
          }
          isNaN() {
            return !(this._w <= 0 || this._w > 0);
          }
          magnitude() {
            return Math.sqrt(
              this._w * this._w +
              this._x * this._x +
              this._y * this._y +
              this._z * this._z,
            );
          }
          normalize(t) {
            this.throwIfFrozen();
            const e = t.magnitude();
            e > 0 &&
              ((this._w = t._w / e),
                (this._x = t._x / e),
                (this._y = t._y / e),
                (this._z = t._z / e));
          }
          inverse(t) {
            this.throwIfFrozen(),
              (this._w = t._w),
              (this._x = -t._x),
              (this._y = -t._y),
              (this._z = -t._z);
          }
          mult(t, e) {
            this.throwIfFrozen();
            const s = Quaternion.pool.get();
            (s._w = t._w * e._w - t._x * e._x - t._y * e._y - t._z * e._z),
              (s._x = t._w * e._x + t._x * e._w + t._y * e._z - t._z * e._y),
              (s._y = t._w * e._y - t._x * e._z + t._y * e._w + t._z * e._x),
              (s._z = t._w * e._z + t._x * e._y - t._y * e._x + t._z * e._w),
              this.copy(s),
              Quaternion.pool.release(s);
          }
          multInverseL(t, e) {
            this.throwIfFrozen();
            const s = Quaternion.pool.get();
            (s._w = t._w * e._w + t._x * e._x + t._y * e._y + t._z * e._z),
              (s._x = t._w * e._x - t._x * e._w - t._y * e._z + t._z * e._y),
              (s._y = t._w * e._y + t._x * e._z - t._y * e._w - t._z * e._x),
              (s._z = t._w * e._z - t._x * e._y + t._y * e._x - t._z * e._w),
              this.copy(s),
              Quaternion.pool.release(s);
          }
          multInverseR(t, e) {
            this.throwIfFrozen();
            const s = Quaternion.pool.get();
            (s._w = +t._w * e._w + t._x * e._x + t._y * e._y + t._z * e._z),
              (s._x = -t._w * e._x + t._x * e._w - t._y * e._z + t._z * e._y),
              (s._y = -t._w * e._y + t._x * e._z + t._y * e._w - t._z * e._x),
              (s._z = -t._w * e._z - t._x * e._y + t._y * e._x + t._z * e._w),
              this.copy(s),
              Quaternion.pool.release(s);
          }
          scaleAngle(t, e) {
            this.throwIfFrozen();
            const s = Math.acos(t._w),
              i = Math.sin(s);
            if (0 === i) return void this.copy(t);
            const n = Math.sin(s * e);
            (this._w = Math.cos(s * e)),
              (this._x = (t._x / i) * n),
              (this._y = (t._y / i) * n),
              (this._z = (t._z / i) * n);
          }
          angle(t) {
            return (
              2 *
              Math.acos(
                this._w * t._w +
                this._x * t._x +
                this._y * t._y +
                this._z * t._z,
              )
            );
          }
          slerp(t, e, s) {
            this.throwIfFrozen();
            let i = t._w * e._w + t._x * e._x + t._y * e._y + t._z * e._z,
              n = 1;
            if ((i < 0 && ((n = -1), (i = -i)), i <= 0.9995)) {
              const o = Math.acos(i),
                r = (n * Math.sin((1 - s) * o)) / Math.sin(o),
                a = Math.sin(s * o) / Math.sin(o);
              (this._w = r * t._w + a * e._w),
                (this._x = r * t._x + a * e._x),
                (this._y = r * t._y + a * e._y),
                (this._z = r * t._z + a * e._z);
            } else {
              const i = n * (1 - s),
                o = s;
              (this._w = i * t._w + o * e._w),
                (this._x = i * t._x + o * e._x),
                (this._y = i * t._y + o * e._y),
                (this._z = i * t._z + o * e._z),
                this.normalize(this);
            }
          }
          getAxis(t, e) {
            void 0 === e
              ? (t.set(this._x, this._y, this._z), t.normalize(t))
              : 0 === e
                ? ((t.x =
                  this._w * this._w +
                  this._x * this._x -
                  this._y * this._y -
                  this._z * this._z),
                  (t.y = 2 * this._w * this._z + 2 * this._x * this._y),
                  (t.z = 2 * this._x * this._z - 2 * this._w * this._y))
                : 1 === e
                  ? ((t.x = 2 * this._y * this._x - 2 * this._w * this._z),
                    (t.y =
                      this._w * this._w -
                      this._x * this._x +
                      this._y * this._y -
                      this._z * this._z),
                    (t.z = 2 * this._x * this._w + 2 * this._y * this._z))
                  : 2 === e &&
                  ((t.x = 2 * this._y * this._w + 2 * this._z * this._x),
                    (t.y = 2 * this._z * this._y - 2 * this._w * this._x),
                    (t.z =
                      this._w * this._w -
                      this._x * this._x -
                      this._y * this._y +
                      this._z * this._z));
          }
        }
        const n = new i.Pool(Quaternion),
          o = new Quaternion();
        o.freeze();
        const r = new Quaternion(
          Number.NaN,
          Number.NaN,
          Number.NaN,
          Number.NaN,
        );
        r.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Vector2: function () {
              return Vector2;
            },
          });
        var i = s(6);
        class Vector2 extends i.Freezable {
          static get pool() {
            return n;
          }
          static get NaN() {
            return l;
          }
          static get Zero() {
            return o;
          }
          static get XAxis() {
            return r;
          }
          static get YAxis() {
            return a;
          }
          constructor(t = 0, e = 0) {
            super(), (this._x = t), (this._y = e);
          }
          get x() {
            return this._x;
          }
          set x(t) {
            this.throwIfFrozen(), (this._x = t);
          }
          get y() {
            return this._y;
          }
          set y(t) {
            this.throwIfFrozen(), (this._y = t);
          }
          toString() {
            return "[" + this._x + ", " + this._y + "]";
          }
          equals(t) {
            return this._x === t._x && this._y === t._y;
          }
          isZero() {
            return 0 === this._x && 0 === this._y;
          }
          isNaN() {
            return !(
              (this._x <= 0 || this._x > 0) &&
              (this._y <= 0 || this._y > 0)
            );
          }
          copy(t) {
            this.throwIfFrozen(), (this._x = t._x), (this._y = t._y);
          }
          copyFromThreeJs(t) {
            this.throwIfFrozen(), (this._x = t.x), (this._y = t.y);
          }
          set(t, e) {
            this.throwIfFrozen(), (this._x = t), (this._y = e);
          }
          neg(t) {
            this.throwIfFrozen(), (this._x = -t._x), (this._y = -t._y);
          }
          add(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x + e._x),
              (this._y = t._y + e._y);
          }
          sub(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x - e._x),
              (this._y = t._y - e._y);
          }
          mult(t, e) {
            this.throwIfFrozen(), (this._x = t._x * e), (this._y = t._y * e);
          }
          addMult(t, e, s) {
            this.throwIfFrozen(),
              (this._x = t._x + e._x * s),
              (this._y = t._y + e._y * s);
          }
          div(t, e) {
            this.throwIfFrozen(), (this._x = t._x / e), (this._y = t._y / e);
          }
          scale(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x * e._x),
              (this._y = t._y * e._y);
          }
          scaleInv(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x / e._x),
              (this._y = t._y / e._y);
          }
          dot(t) {
            return this._x * t._x + this._y * t._y;
          }
          cross(t) {
            return this._x * t._y - this._y * t._x;
          }
          magnitudeSqr() {
            return this._x * this._x + this._y * this._y;
          }
          magnitude() {
            return Math.sqrt(this.magnitudeSqr());
          }
          normalize(t) {
            this.throwIfFrozen();
            const e = t.magnitude();
            e > 0 && ((this._x = t._x / e), (this._y = t._y / e));
          }
          setMagnitude(t, e) {
            this.throwIfFrozen(),
              this.normalize(t),
              (this._x *= e),
              (this._y *= e);
          }
          distance(t) {
            const e = this._x - t._x,
              s = this._y - t._y;
            return Math.sqrt(e * e + s * s);
          }
          angle(t) {
            const e = this.magnitude() * t.magnitude();
            return e > 0
              ? Math.acos(i.MathUtils.clamp(this.dot(t) / e, -1, 1))
              : Number.NaN;
          }
          clamp(t, e, s) {
            this.throwIfFrozen(),
              (this._x = i.MathUtils.clamp(t._x, e._x, s._x)),
              (this._y = i.MathUtils.clamp(t._y, e._y, s._y));
          }
          lerp(t, e, s) {
            this.throwIfFrozen(),
              (this._x = i.MathUtils.lerp(t._x, e._x, s)),
              (this._y = i.MathUtils.lerp(t._y, e._y, s));
          }
        }
        const n = new i.Pool(Vector2),
          o = new Vector2();
        o.freeze();
        const r = new Vector2(1, 0);
        r.freeze();
        const a = new Vector2(0, 1);
        a.freeze();
        const l = new Vector2(Number.NaN, Number.NaN);
        l.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Vector3: function () {
              return Vector3;
            },
          });
        var i = s(6);
        class Vector3 extends i.Freezable {
          static get pool() {
            return n;
          }
          static get NaN() {
            return d;
          }
          static get Zero() {
            return o;
          }
          static get XAxis() {
            return r;
          }
          static get YAxis() {
            return a;
          }
          static get ZAxis() {
            return l;
          }
          static get XAxisNeg() {
            return c;
          }
          static get YAxisNeg() {
            return h;
          }
          static get ZAxisNeg() {
            return u;
          }
          static fromAER(t) {
            const e = new Vector3();
            return e.setFromAER(t), e;
          }
          constructor(t = 0, e = 0, s = 0) {
            super(), (this._x = t), (this._y = e), (this._z = s);
          }
          get x() {
            return this._x;
          }
          set x(t) {
            this.throwIfFrozen(), (this._x = t);
          }
          get y() {
            return this._y;
          }
          set y(t) {
            this.throwIfFrozen(), (this._y = t);
          }
          get z() {
            return this._z;
          }
          set z(t) {
            this.throwIfFrozen(), (this._z = t);
          }
          toString() {
            return "[" + this._x + ", " + this._y + ", " + this._z + "]";
          }
          equals(t) {
            return this._x === t._x && this._y === t._y && this._z === t._z;
          }
          isZero() {
            return 0 === this._x && 0 === this._y && 0 === this._z;
          }
          isNaN() {
            return !(
              (this._x <= 0 || this._x > 0) &&
              (this._y <= 0 || this._y > 0) &&
              (this._z <= 0 || this._z > 0)
            );
          }
          copy(t) {
            this.throwIfFrozen(),
              (this._x = t._x),
              (this._y = t._y),
              (this._z = t._z);
          }
          copyFromThreeJs(t) {
            this.throwIfFrozen(),
              (this._x = t.x),
              (this._y = t.y),
              (this._z = t.z);
          }
          set(t, e, s) {
            this.throwIfFrozen(), (this._x = t), (this._y = e), (this._z = s);
          }
          setFromAER(t) {
            this.throwIfFrozen();
            const e = Math.cos(t.elevation);
            (this._x = t.range * e * Math.cos(t.azimuth)),
              (this._y = t.range * e * Math.sin(t.azimuth)),
              (this._z = t.range * Math.sin(t.elevation));
          }
          neg(t) {
            this.throwIfFrozen(),
              (this._x = -t._x),
              (this._y = -t._y),
              (this._z = -t._z);
          }
          add(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x + e._x),
              (this._y = t._y + e._y),
              (this._z = t._z + e._z);
          }
          sub(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x - e._x),
              (this._y = t._y - e._y),
              (this._z = t._z - e._z);
          }
          mult(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x * e),
              (this._y = t._y * e),
              (this._z = t._z * e);
          }
          addMult(t, e, s) {
            this.throwIfFrozen(),
              (this._x = t._x + e._x * s),
              (this._y = t._y + e._y * s),
              (this._z = t._z + e._z * s);
          }
          div(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x / e),
              (this._y = t._y / e),
              (this._z = t._z / e);
          }
          scale(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x * e._x),
              (this._y = t._y * e._y),
              (this._z = t._z * e._z);
          }
          scaleInv(t, e) {
            this.throwIfFrozen(),
              (this._x = t._x / e._x),
              (this._y = t._y / e._y),
              (this._z = t._z / e._z);
          }
          dot(t) {
            return this._x * t._x + this._y * t._y + this._z * t._z;
          }
          cross(t, e) {
            this.throwIfFrozen();
            const s = t._y * e._z - t._z * e._y,
              i = t._z * e._x - t._x * e._z,
              n = t._x * e._y - t._y * e._x;
            (this._x = s), (this._y = i), (this._z = n);
          }
          magnitudeSqr() {
            return this._x * this._x + this._y * this._y + this._z * this._z;
          }
          magnitude() {
            return Math.sqrt(this.magnitudeSqr());
          }
          magnitudeXY() {
            return Math.sqrt(this._x * this._x + this._y * this._y);
          }
          normalize(t) {
            this.throwIfFrozen();
            const e = t.magnitude();
            e > 0
              ? ((this._x = t._x / e),
                (this._y = t._y / e),
                (this._z = t._z / e))
              : this.copy(t);
          }
          setMagnitude(t, e) {
            this.throwIfFrozen(),
              this.normalize(t),
              (this._x *= e),
              (this._y *= e),
              (this._z *= e);
          }
          distance(t) {
            const e = this._x - t._x,
              s = this._y - t._y,
              i = this._z - t._z;
            return Math.sqrt(e * e + s * s + i * i);
          }
          angle(t) {
            const e = this.magnitude() * t.magnitude();
            return e > 0
              ? Math.acos(i.MathUtils.clamp(this.dot(t) / e, -1, 1))
              : Number.NaN;
          }
          angleAroundAxis(t, e) {
            const s = Vector3.pool.get(),
              i = Vector3.pool.get();
            s.addMult(this, e, -this.dot(e)), i.addMult(t, e, -t.dot(e));
            let n = s.angle(i);
            return (
              s.cross(s, i),
              s.dot(e) < 0 && (n *= -1),
              Vector3.pool.release(s),
              Vector3.pool.release(i),
              n
            );
          }
          clamp(t, e, s) {
            this.throwIfFrozen(),
              (this._x = i.MathUtils.clamp(t._x, e._x, s._x)),
              (this._y = i.MathUtils.clamp(t._y, e._y, s._y)),
              (this._z = i.MathUtils.clamp(t._z, e._z, s._z));
          }
          lerp(t, e, s) {
            this.throwIfFrozen(),
              (this._x = i.MathUtils.lerp(t._x, e._x, s)),
              (this._y = i.MathUtils.lerp(t._y, e._y, s)),
              (this._z = i.MathUtils.lerp(t._z, e._z, s));
          }
          slerp(t, e, s) {
            this.throwIfFrozen();
            const n = t.magnitude(),
              o = e.magnitude();
            if (n > 0 && o > 0) {
              const r = Math.acos(i.MathUtils.clamp(t.dot(e) / (n * o), -1, 1));
              if (Math.abs(r) > 0.01745327777) {
                const i = 1 / Math.sin(r),
                  a = Math.sin((1 - s) * r) * i,
                  l = Math.sin(s * r) * i;
                this.set(
                  (t.x * a) / n + (e.x * l) / o,
                  (t.y * a) / n + (e.y * l) / o,
                  (t.z * a) / n + (e.z * l) / o,
                ),
                  this.mult(this, (1 - s) * n + s * o);
              } else this.lerp(t, e, s);
            } else this.lerp(t, e, s);
          }
          rotate(t, e) {
            this.throwIfFrozen();
            const s = t.w * e._x + t.y * e._z - t.z * e._y,
              i = t.w * e._y + t.z * e._x - t.x * e._z,
              n = t.w * e._z + t.x * e._y - t.y * e._x,
              o = -t.x * e._x - t.y * e._y - t.z * e._z;
            (this._x = s * t.w - o * t.x - i * t.z + n * t.y),
              (this._y = i * t.w - o * t.y - n * t.x + s * t.z),
              (this._z = n * t.w - o * t.z - s * t.y + i * t.x);
          }
          rotateInverse(t, e) {
            this.throwIfFrozen();
            const s = t.w * e._x - t.y * e._z + t.z * e._y,
              i = t.w * e._y - t.z * e._x + t.x * e._z,
              n = t.w * e._z - t.x * e._y + t.y * e._x,
              o = t.x * e._x + t.y * e._y + t.z * e._z;
            (this._x = s * t.w + o * t.x + i * t.z - n * t.y),
              (this._y = i * t.w + o * t.y + n * t.x - s * t.z),
              (this._z = n * t.w + o * t.z + s * t.y - i * t.x);
          }
          setNormalTo(t, e) {
            const s =
              e._x * (t._y * t._y + t._z * t._z) -
              t._x * (t._y * e._y + t._z * e._z),
              i =
                e._y * (t._z * t._z + t._x * t._x) -
                t._y * (t._z * e._z + t._x * e._x),
              n =
                e._z * (t._x * t._x + t._y * t._y) -
                t._z * (t._x * e._x + t._y * e._y);
            (this._x = s), (this._y = i), (this._z = n), this.normalize(this);
          }
        }
        const n = new i.Pool(Vector3),
          o = new Vector3();
        o.freeze();
        const r = new Vector3(1, 0, 0);
        r.freeze();
        const a = new Vector3(0, 1, 0);
        a.freeze();
        const l = new Vector3(0, 0, 1);
        l.freeze();
        const c = new Vector3(-1, 0, 0);
        r.freeze();
        const h = new Vector3(0, -1, 0);
        a.freeze();
        const u = new Vector3(0, 0, -1);
        l.freeze();
        const d = new Vector3(Number.NaN, Number.NaN, Number.NaN);
        d.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Cache: function () {
              return Cache;
            },
          });
        var i = s(6);
        class Cache extends i.FastIterable {
          constructor(t = null, e = null) {
            super(),
              (this._keysToEntries = new i.FastMap()),
              (this._itemToKeys = new Map()),
              (this._itemConstructor = t),
              (this._itemDestructor = e);
          }
          get(t) {
            const e = this._keysToEntries.get(t);
            if (void 0 === e) {
              const e = { item: this._itemConstructor(t), count: 1 };
              return (
                this._keysToEntries.set(t, e),
                this._itemToKeys.set(e.item, t),
                e.item
              );
            }
            return (e.count += 1), e.item;
          }
          release(t) {
            const e = this._itemToKeys.get(t);
            if (void 0 !== e) {
              const s = this._keysToEntries.get(e);
              (s.count -= 1),
                0 === s.count &&
                (this._itemDestructor(s.item),
                  this._keysToEntries.delete(e),
                  this._itemToKeys.delete(t));
            }
          }
          getAt(t) {
            return this._keysToEntries.getAt(t).value.item;
          }
          get size() {
            return this._keysToEntries.size;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ComponentRef: function () {
              return ComponentRef;
            },
          });
        var i = s(6);
        class ComponentRef extends i.BaseRef {
          constructor(t) {
            super(t),
              (this._entityName = ""),
              (this._componentName = ""),
              (this._componentType = ""),
              (this._componentTypeIndex = 0);
          }
          getEntityName() {
            return this._entityName;
          }
          getComponentName() {
            return this._componentName;
          }
          getComponentType() {
            return this._componentType;
          }
          getComponentTypeIndex() {
            return this._componentTypeIndex;
          }
          setByName(t, e) {
            (this._entityName = t),
              (this._componentName = e),
              (this._componentType = "");
          }
          setByType(t, e, s = 0) {
            (this._entityName = t),
              (this._componentType = e),
              (this._componentTypeIndex = s),
              (this._componentName = "");
          }
          update() {
            if (
              "" === this._entityName ||
              ("" === this._componentName && "" === this._componentType)
            )
              this._setRef(null);
            else if ("" !== this._componentName) {
              const t = this._scene.getEntity(this._entityName);
              if (null !== t && t.isEnabled()) {
                const e = t.getComponent(this._componentName);
                this._setRef(e);
              } else this._setRef(null);
            } else {
              const t = this._scene.getEntity(this._entityName);
              if (null !== t && t.isEnabled()) {
                const e = t.getComponentByType(
                  this._componentType,
                  this._componentTypeIndex,
                );
                this._setRef(e);
              } else this._setRef(null);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ControllerRef: function () {
              return ControllerRef;
            },
          });
        var i = s(6);
        class ControllerRef extends i.BaseRef {
          constructor(t) {
            super(t),
              (this._entityName = ""),
              (this._controllerName = ""),
              (this._controllerType = ""),
              (this._controllerTypeIndex = 0);
          }
          getEntityName() {
            return this._entityName;
          }
          getControllerName() {
            return this._controllerName;
          }
          getControllerType() {
            return this._controllerType;
          }
          getControllerTypeIndex() {
            return this._controllerTypeIndex;
          }
          setByName(t, e) {
            (this._entityName = t),
              (this._controllerName = e),
              (this._controllerType = "");
          }
          setByType(t, e, s = 0) {
            (this._entityName = t),
              (this._controllerType = e),
              (this._controllerTypeIndex = s),
              (this._controllerName = "");
          }
          update() {
            if (
              "" === this._entityName ||
              ("" === this._controllerName && "" === this._controllerType)
            )
              this._setRef(null);
            else if ("" !== this._controllerName) {
              const t = this._scene.getEntity(this._entityName);
              if (null !== t && t.isEnabled()) {
                const e = t.getController(this._controllerName);
                this._setRef(e);
              } else this._setRef(null);
            } else {
              const t = this._scene.getEntity(this._entityName);
              if (null !== t && t.isEnabled()) {
                const e = t.getControllerByType(
                  this._controllerType,
                  this._controllerTypeIndex,
                );
                this._setRef(e);
              } else this._setRef(null);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CubeMap: function () {
              return CubeMap;
            },
          });
        var i = s(6);
        class CubeMap {
          static xyzToUVFace(t, e, s = this._defaultCubeMapFaceFrames) {
            let n;
            for (let o = 0; o < 6; o++) {
              const r = s[o],
                a = r[2];
              let l = 0,
                c = 0,
                h = 0,
                u = !1;
              a === i.Vector3.XAxis || a === i.Vector3.XAxisNeg
                ? ((l = e.x),
                  (c = e.y),
                  (h = e.z),
                  (u = a === i.Vector3.XAxisNeg))
                : a === i.Vector3.YAxis || a === i.Vector3.YAxisNeg
                  ? ((l = e.y),
                    (c = e.z),
                    (h = e.x),
                    (u = a === i.Vector3.YAxisNeg))
                  : ((l = e.z),
                    (c = e.x),
                    (h = e.y),
                    (u = a === i.Vector3.ZAxisNeg)),
                Math.abs(l) >= Math.abs(c) &&
                Math.abs(l) >= Math.abs(h) &&
                ((l >= 0 && !u) || (l < 0 && u)) &&
                ((n = r), (t.z = o));
            }
            if (void 0 === n) return void t.set(NaN, NaN, NaN);
            let o = n[2].x * e.x + n[2].y * e.y + n[2].z * e.z;
            o < 0 && (o = 1),
              (t.x = (n[0].x * e.x + n[0].y * e.y + n[0].z * e.z) / o),
              (t.y = (n[1].x * e.x + n[1].y * e.y + n[1].z * e.z) / o),
              (t.x = 0.5 * (t.x + 1)),
              (t.y = 0.5 * (t.y + 1));
          }
        }
        CubeMap._defaultCubeMapFaceFrames = [
          [i.Vector3.YAxis, i.Vector3.ZAxis, i.Vector3.XAxis],
          [i.Vector3.XAxisNeg, i.Vector3.ZAxis, i.Vector3.YAxis],
          [i.Vector3.YAxisNeg, i.Vector3.ZAxis, i.Vector3.XAxisNeg],
          [i.Vector3.XAxis, i.Vector3.ZAxis, i.Vector3.YAxisNeg],
          [i.Vector3.YAxis, i.Vector3.XAxisNeg, i.Vector3.ZAxis],
          [i.Vector3.YAxis, i.Vector3.XAxis, i.Vector3.ZAxisNeg],
        ];
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            EntityRef: function () {
              return EntityRef;
            },
          });
        var i = s(6);
        class EntityRef extends i.BaseRef {
          constructor(t, e) {
            super(t), (this._name = void 0 !== e ? e : "");
          }
          getName() {
            return this._name;
          }
          setName(t) {
            this._name = t;
          }
          update() {
            if ("" === this._name) null !== this._ref && this._setRef(null);
            else if (
              null === this._ref ||
              this._ref.isDestroyed() ||
              !this._ref.isEnabled() ||
              this._ref.getName() !== this._name
            ) {
              const t = this._scene.getEntity(this._name);
              this._setRef(t);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LatLonAlt: function () {
              return LatLonAlt;
            },
          });
        var i = s(6);
        class LatLonAlt extends i.Freezable {
          static get pool() {
            return n;
          }
          constructor(t = 0, e = 0, s = 0) {
            super(), (this._lat = t), (this._lon = e), (this._alt = s);
          }
          get lat() {
            return this._lat;
          }
          set lat(t) {
            this.throwIfFrozen(), (this._lat = t);
          }
          get lon() {
            return this._lon;
          }
          set lon(t) {
            this.throwIfFrozen(), (this._lon = t);
          }
          get alt() {
            return this._alt;
          }
          set alt(t) {
            this.throwIfFrozen(), (this._alt = t);
          }
          toString(t = !1) {
            return t
              ? "[" +
              i.MathUtils.radToDeg(this._lat) +
              ", " +
              i.MathUtils.radToDeg(this._lon) +
              ", " +
              this._alt +
              "]"
              : "[" + this._lat + ", " + this._lon + ", " + this._alt + "]";
          }
          copy(t) {
            this.throwIfFrozen(),
              (this._lat = t._lat),
              (this._lon = t._lon),
              (this._alt = t._alt);
          }
          set(t, e, s) {
            this.throwIfFrozen(),
              (this._lat = t),
              (this._lon = e),
              (this._alt = s);
          }
        }
        const n = new i.Pool(LatLonAlt);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LineMesh: function () {
              return LineMesh;
            },
          });
        var i = s(6);
        class LineMesh {
          constructor(t) {
            (this._component = t),
              (this._alphaMultiplier = 1),
              (this._position = new i.Vector3()),
              (this._orientation = new i.Quaternion()),
              (this._scale = 1),
              (this._dashGapLength = 0),
              (this._dashLength = 1),
              (this._glowWidth = 0),
              (this._threeJsObjects = []),
              (this._threeJsMaterial = null),
              (this._threeJsMaterial = t
                .getEntity()
                .getScene()
                .getEngine()
                .getMaterialManager()
                .getPreloaded("line")),
              t.getThreeJsMaterials().push(this._threeJsMaterial),
              (this._threeJsMaterial.uniforms.alphaMultiplier.value =
                this._alphaMultiplier),
              (this._threeJsMaterial.uniforms.dashLength.value =
                this._dashLength),
              (this._threeJsMaterial.uniforms.dashGapLength.value =
                this._dashGapLength),
              (this._threeJsMaterial.uniforms.glowWidth.value =
                this._glowWidth);
          }
          setPositions(t) {
            if (t.length % 2 != 0)
              throw new Error(
                "Number of positions in the LineMesh must be even.",
              );
            this._adjustVerticesInGeometries(2 * t.length);
            const e = i.Vector3.pool.get(),
              s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get(),
              o = i.Vector3.pool.get(),
              r = i.Vector3.pool.get();
            let a = 0;
            for (let n = 0; n < this._threeJsObjects.length; n++) {
              const o =
                this._threeJsObjects[n].geometry.getAttribute("position"),
                l = o.array;
              for (
                let o = 0;
                o < l.length / (2 * LineMesh._floatsPerVertex);
                o++
              ) {
                const c = o + n * (LineMesh._verticesPerGeometry / 2);
                (l[2 * o * LineMesh._floatsPerVertex + 0] = t[c].x),
                  (l[2 * o * LineMesh._floatsPerVertex + 1] = t[c].y),
                  (l[2 * o * LineMesh._floatsPerVertex + 2] = t[c].z),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 0] = t[c].x),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 1] = t[c].y),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 2] = t[c].z),
                  c % 2 == 0
                    ? t[c].equals(t[i.MathUtils.wrap(c - 1, 0, t.length)])
                      ? (e.copy(t[i.MathUtils.wrap(c - 2, 0, t.length)]),
                        s.copy(t[c + 1]))
                      : (e.copy(t[c]), s.copy(t[c + 1]), (a = 0))
                    : c % 2 == 1 &&
                    (t[c].equals(t[i.MathUtils.wrap(c + 1, 0, t.length)])
                      ? (e.copy(t[c - 1]),
                        s.copy(t[i.MathUtils.wrap(c + 2, 0, t.length)]))
                      : (e.copy(t[c - 1]), s.copy(t[c])),
                      r.sub(t[c], t[c - 1]),
                      (a += r.magnitude())),
                  (l[2 * o * LineMesh._floatsPerVertex + 3] = e.x),
                  (l[2 * o * LineMesh._floatsPerVertex + 4] = e.y),
                  (l[2 * o * LineMesh._floatsPerVertex + 5] = e.z),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 3] = e.x),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 4] = e.y),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 5] = e.z),
                  (l[2 * o * LineMesh._floatsPerVertex + 6] = s.x),
                  (l[2 * o * LineMesh._floatsPerVertex + 7] = s.y),
                  (l[2 * o * LineMesh._floatsPerVertex + 8] = s.z),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 6] = s.x),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 7] = s.y),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 8] = s.z),
                  (l[2 * o * LineMesh._floatsPerVertex + 14] = a),
                  (l[(2 * o + 1) * LineMesh._floatsPerVertex + 14] = a);
              }
              o.data.needsUpdate = !0;
            }
            i.Vector3.pool.release(n),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(e),
              i.Vector3.pool.release(s),
              i.Vector3.pool.release(r);
          }
          setColors(t) {
            if (t.length % 2 != 0)
              throw new Error("Number of colors in the LineMesh must be even.");
            this._adjustVerticesInGeometries(2 * t.length);
            for (let e = 0; e < this._threeJsObjects.length; e++) {
              const s = this._threeJsObjects[e].geometry.getAttribute("color"),
                i = s.array;
              for (
                let s = 0;
                s < i.length / (2 * LineMesh._floatsPerVertex);
                s++
              ) {
                const n = s + e * (LineMesh._verticesPerGeometry / 2);
                (i[2 * s * LineMesh._floatsPerVertex + 9] = t[n].r),
                  (i[2 * s * LineMesh._floatsPerVertex + 10] = t[n].g),
                  (i[2 * s * LineMesh._floatsPerVertex + 11] = t[n].b),
                  (i[2 * s * LineMesh._floatsPerVertex + 12] = t[n].a),
                  (i[(2 * s + 1) * LineMesh._floatsPerVertex + 9] = t[n].r),
                  (i[(2 * s + 1) * LineMesh._floatsPerVertex + 10] = t[n].g),
                  (i[(2 * s + 1) * LineMesh._floatsPerVertex + 11] = t[n].b),
                  (i[(2 * s + 1) * LineMesh._floatsPerVertex + 12] = t[n].a);
              }
              s.data.needsUpdate = !0;
            }
          }
          setWidths(t) {
            if ("number" == typeof t)
              for (let e = 0; e < this._threeJsObjects.length; e++) {
                const s =
                  this._threeJsObjects[e].geometry.getAttribute("width"),
                  i = s.array;
                for (
                  let e = 0;
                  e < i.length / (2 * LineMesh._floatsPerVertex);
                  e++
                )
                  (i[2 * e * LineMesh._floatsPerVertex + 13] = t),
                    (i[(2 * e + 1) * LineMesh._floatsPerVertex + 13] = -t);
                s.data.needsUpdate = !0;
              }
            else {
              if (t.length % 2 != 0)
                throw new Error(
                  "Number of widths in the LineMesh must be even.",
                );
              this._adjustVerticesInGeometries(2 * t.length);
              for (let e = 0; e < this._threeJsObjects.length; e++) {
                const s =
                  this._threeJsObjects[e].geometry.getAttribute("width"),
                  i = s.array;
                for (
                  let s = 0;
                  s < i.length / (2 * LineMesh._floatsPerVertex);
                  s++
                ) {
                  const n = s + e * (LineMesh._verticesPerGeometry / 2);
                  (i[2 * s * LineMesh._floatsPerVertex + 13] = t[n]),
                    (i[(2 * s + 1) * LineMesh._floatsPerVertex + 13] = -t[n]);
                }
                s.data.needsUpdate = !0;
              }
            }
          }
          setDashLength(t, e) {
            (this._dashLength = t),
              (this._dashGapLength = e),
              i.ThreeJsHelper.setUniformNumber(
                this._threeJsMaterial,
                "dashLength",
                this._dashLength,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this._threeJsMaterial,
                "dashGapLength",
                this._dashGapLength,
              );
          }
          setGlowWidth(t) {
            (this._glowWidth = t),
              i.ThreeJsHelper.setUniformNumber(
                this._threeJsMaterial,
                "glowWidth",
                this._glowWidth,
              );
          }
          setScale(t) {
            (this._scale = t),
              i.ThreeJsHelper.setScale(this._threeJsObjects, t);
          }
          getAlphaMultiplier() {
            return this._alphaMultiplier;
          }
          setAlphaMultiplier(t) {
            (this._alphaMultiplier = t),
              i.ThreeJsHelper.setUniformNumber(
                this._threeJsMaterial,
                "alphaMultiplier",
                this._alphaMultiplier,
              );
          }
          prepareForRender(t) {
            const e = i.Vector2.pool.get();
            if ("spout" === t.getType()) {
              const s = t;
              e.set(0.1 * s.getRenderWidth(), 0.5 * s.getRenderWidth() * 0.1);
            } else e.copy(t.getViewport().getBounds().size);
            i.ThreeJsHelper.setUniformVector2(
              this._threeJsMaterial,
              "pixelSize",
              e,
            ),
              i.Vector2.pool.release(e);
          }
          _adjustVerticesInGeometries(t) {
            const e = Math.ceil(t / LineMesh._verticesPerGeometry);
            for (; this._threeJsObjects.length > e;) {
              const t = this._threeJsObjects[this._threeJsObjects.length - 1];
              i.ThreeJsHelper.destroyObject(t),
                this._threeJsObjects.splice(this._threeJsObjects.length - 1, 1);
              for (
                let e = 0, s = this._component.getThreeJsObjects().length;
                e < s;
                e++
              )
                if (this._component.getThreeJsObjects()[e] === t) {
                  this._component.getThreeJsObjects().splice(e, 1);
                  break;
                }
            }
            if (this._threeJsObjects.length < e) {
              this._threeJsObjects.length > 0 &&
                this._setupThreeJsGeometry(
                  this._threeJsObjects[this._threeJsObjects.length - 1]
                    .geometry,
                  LineMesh._verticesPerGeometry,
                );
              for (let s = this._threeJsObjects.length; s < e; s++) {
                const e = i.ThreeJsHelper.createMeshObject(
                  this._component,
                  this._threeJsMaterial,
                  [],
                  !1,
                );
                this._threeJsObjects.push(e),
                  this._component.getThreeJsObjects().push(e);
                const n = Math.min(
                  t - s * LineMesh._verticesPerGeometry,
                  LineMesh._verticesPerGeometry,
                );
                this._setupThreeJsGeometry(e.geometry, n),
                  i.ThreeJsHelper.setPosition(e, this._position),
                  i.ThreeJsHelper.setOrientation(e, this._orientation),
                  i.ThreeJsHelper.setScale(e, this._scale),
                  (e.frustumCulled = !1);
              }
            } else if (e > 0) {
              const s = this._threeJsObjects[e - 1].geometry,
                i = t - (e - 1) * LineMesh._verticesPerGeometry;
              s.getAttribute("position").array.length !==
                i * LineMesh._floatsPerVertex &&
                this._setupThreeJsGeometry(s, i);
            }
          }
          _setupThreeJsGeometry(t, e) {
            const s = new Float32Array(e * LineMesh._floatsPerVertex),
              n = new i.THREE.InterleavedBuffer(s, LineMesh._floatsPerVertex);
            t.setAttribute(
              "position",
              new i.THREE.InterleavedBufferAttribute(n, 3, 0, !1),
            ),
              t.setAttribute(
                "positionPrev",
                new i.THREE.InterleavedBufferAttribute(n, 3, 3, !1),
              ),
              t.setAttribute(
                "positionNext",
                new i.THREE.InterleavedBufferAttribute(n, 3, 6, !1),
              ),
              t.setAttribute(
                "color",
                new i.THREE.InterleavedBufferAttribute(n, 4, 9, !1),
              ),
              t.setAttribute(
                "width",
                new i.THREE.InterleavedBufferAttribute(n, 1, 13, !1),
              ),
              t.setAttribute(
                "dashOffset",
                new i.THREE.InterleavedBufferAttribute(n, 1, 14, !1),
              );
            const o = new Uint16Array((6 * e) / 4);
            for (let t = 0; t < e / 4; t++)
              (o[6 * t + 0] = 4 * t),
                (o[6 * t + 1] = 4 * t + 2),
                (o[6 * t + 2] = 4 * t + 3),
                (o[6 * t + 3] = 4 * t),
                (o[6 * t + 4] = 4 * t + 3),
                (o[6 * t + 5] = 4 * t + 1);
            t.setIndex(new i.THREE.BufferAttribute(o, 1));
          }
        }
        (LineMesh._floatsPerVertex = 15),
          (LineMesh._verticesPerGeometry = 65536);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MaterialUtilsPhong: function () {
              return MaterialUtilsPhong;
            },
          });
        var i = s(6);
        class MaterialUtilsPhong {
          static get() {
            null === MaterialUtilsPhong._material &&
              (MaterialUtilsPhong._material = new i.THREE.ShaderMaterial({
                uniforms: {
                  entityPos: new i.THREE.Uniform(new i.THREE.Vector3()),
                  ambientLightColor: new i.THREE.Uniform(new i.THREE.Color()),
                  lightPositions: new i.THREE.Uniform([
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                  ]),
                  lightColors: new i.THREE.Uniform([
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                  ]),
                  lightRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                  numLights: new i.THREE.Uniform(0),
                  color: new i.THREE.Uniform(new i.THREE.Color(1, 1, 1)),
                  specularColor: new i.THREE.Uniform(
                    new i.THREE.Color(1, 1, 1),
                  ),
                  specularIntensity: new i.THREE.Uniform(0),
                  specularHardness: new i.THREE.Uniform(50),
                  colorTexture: new i.THREE.Uniform(null),
                  normalTexture: new i.THREE.Uniform(null),
                  specularTexture: new i.THREE.Uniform(null),
                  nightTexture: new i.THREE.Uniform(null),
                  decalTexture: new i.THREE.Uniform(null),
                  normalScale: new i.THREE.Uniform(new i.THREE.Vector2()),
                  numShadowEntities: new i.THREE.Uniform(0),
                  shadowEntityPositions: new i.THREE.Uniform([
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                  ]),
                  shadowEntityRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                  shadowEntitySunsetIntensity: new i.THREE.Uniform([
                    0, 0, 0, 0, 0,
                  ]),
                  shadowEntitySunsetColors: new i.THREE.Uniform([
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                  ]),
                  shadowRingsInnerRadius: new i.THREE.Uniform(0),
                  shadowRingsOuterRadius: new i.THREE.Uniform(0),
                  shadowRingsTexture: new i.THREE.Uniform(null),
                  shadowRingsNormal: new i.THREE.Uniform(new i.THREE.Vector3()),
                  atmospherePosition: new i.THREE.Uniform(
                    new i.THREE.Vector3(0, 0, 0),
                  ),
                  atmosphereOrientation: new i.THREE.Uniform(
                    new i.THREE.Vector4(1, 0, 0, 0),
                  ),
                  atmosphereEquatorialRadius: new i.THREE.Uniform(1),
                  atmospherePolarRadius: new i.THREE.Uniform(1),
                  atmosphereDensity: new i.THREE.Uniform(0),
                  atmosphereScaleHeight: new i.THREE.Uniform(1),
                  atmosphereEmissivity: new i.THREE.Uniform(0),
                  atmosphereColor: new i.THREE.Uniform(
                    new i.THREE.Vector3(0, 0, 0),
                  ),
                  atmosphereSunBrightness: new i.THREE.Uniform(1),
                  atmosphereSunsetColor: new i.THREE.Uniform(
                    new i.THREE.Vector3(0, 0, 0),
                  ),
                  atmosphereSunsetIntensity: new i.THREE.Uniform(0),
                  atmosphereGroundIsSpheroid: new i.THREE.Uniform(0),
                  ...i.ShaderChunkLogDepth.ThreeUniforms,
                },
                vertexShader: `\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tattribute vec4 tangent;\n\t\t\t\t\t\tvarying vec4 viewTangent;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef normalUVs\n\t\t\t\t\t\tattribute vec2 normalUV;\n\t\t\t\t\t\tvarying vec2 vNormalUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef specularUVs\n\t\t\t\t\t\tattribute vec2 specularUV;\n\t\t\t\t\t\tvarying vec2 vSpecularUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef nightUVs\n\t\t\t\t\t\tattribute vec2 nightUV;\n\t\t\t\t\t\tvarying vec2 vNightUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef decalUVs\n\t\t\t\t\t\tattribute vec2 decalUV;\n\t\t\t\t\t\tvarying vec2 vDecalUV;\n\t\t\t\t\t#endif\n\t\t\t\t\tvarying vec2 vColorUV;\n\t\t\t\t\tvarying vec3 cameraSpacePosition;\n\t\t\t\t\tvarying vec3 cameraSpaceNormal;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\t\tviewTangent = vec4((modelMatrix * vec4(tangent.xyz, 0.0)).xyz, tangent.w);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tvColorUV = uv;\n\t\t\t\t\t\t#ifdef normalUVs\n\t\t\t\t\t\t\tvNormalUV = normalUV;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#ifdef specularUVs\n\t\t\t\t\t\t\tvSpecularUV = specularUV;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#ifdef nightUVs\n\t\t\t\t\t\t\tvNightUV = nightUV;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#ifdef decalUVs\n\t\t\t\t\t\t\tvDecalUV = decalUV;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tcameraSpacePosition = (modelMatrix * vec4(position, 1.)).xyz;\n\t\t\t\t\t\tcameraSpaceNormal = (modelMatrix * vec4(normal, 0.)).xyz;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t\t\t}`,
                fragmentShader: `\n\t\t\t\t\tprecision highp float;\n\n\t\t\t\t\t#ifndef saturate\n\t\t\t\t\t\t#define saturate(a) clamp(a, 0.0, 1.0)\n\t\t\t\t\t#endif\n\t\t\t\t\tuniform mat3 normalMatrix;\n\n\t\t\t\t\t// External lighting and camera.\n\t\t\t\t\tuniform vec3 entityPos;\n\n\t\t\t\t\t// Lights\n\t\t\t\t\tuniform vec3 ambientLightColor;\n\t\t\t\t\tuniform vec3 lightPositions[5];\n\t\t\t\t\tuniform vec3 lightColors[5];\n\t\t\t\t\tuniform float lightRadii[5];\n\t\t\t\t\tuniform int numLights;\n\n\t\t\t\t\t// Shading.\n\t\t\t\t\tuniform vec3 color;\n\t\t\t\t\tuniform vec3 specularColor;\n\t\t\t\t\tuniform float specularIntensity;\n\t\t\t\t\tuniform float specularHardness;\n\n\t\t\t\t\t// Shadow Entities.\n\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\tuniform int numShadowEntities;\n\t\t\t\t\t\tuniform vec3 shadowEntityPositions[5];\n\t\t\t\t\t\tuniform float shadowEntityRadii[5];\n\t\t\t\t\t\tuniform float shadowEntitySunsetIntensity[5];\n\t\t\t\t\t\tuniform vec3 shadowEntitySunsetColors[5];\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef shadowRings\n\t\t\t\t\t\tuniform float shadowRingsInnerRadius;\n\t\t\t\t\t\tuniform float shadowRingsOuterRadius;\n\t\t\t\t\t\tuniform sampler2D shadowRingsTexture;\n\t\t\t\t\t\tuniform vec3 shadowRingsNormal;\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// Textures.\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tuniform sampler2D normalTexture;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef specularMap\n\t\t\t\t\t\tuniform sampler2D specularTexture;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef nightMap\n\t\t\t\t\t\tuniform sampler2D nightTexture;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef decalMap\n\t\t\t\t\t\tuniform sampler2D decalTexture;\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// Modifications on the textures.\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tuniform vec2 normalScale;\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// The varying attributes.\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tvarying vec4 viewTangent;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef normalUVs\n\t\t\t\t\t\tvarying vec2 vNormalUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef specularUVs\n\t\t\t\t\t\tvarying vec2 vSpecularUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef nightUVs\n\t\t\t\t\t\tvarying vec2 vNightUV;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef decalUVs\n\t\t\t\t\t\tvarying vec2 vDecalUV;\n\t\t\t\t\t#endif\n\t\t\t\t\tvarying vec2 vColorUV;\n\t\t\t\t\tvarying vec3 cameraSpacePosition;\n\t\t\t\t\tvarying vec3 cameraSpaceNormal;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tvec3 getNormalFromMap() {\n\t\t\t\t\t\t\tvec3 normal = normalize(cameraSpaceNormal);\n\t\t\t\t\t\t\tvec3 tangent = normalize(viewTangent.xyz);\n\t\t\t\t\t\t\tvec3 bitangent = normalize(cross(normal, tangent));\n\t\t\t\t\t\t\tif (viewTangent.w < 0.0) {\n\t\t\t\t\t\t\t\tbitangent *= -1.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmat3 transform = mat3(tangent, bitangent, normal);\n\t\t\t\t\t\t\t#ifdef normalUVs\n\t\t\t\t\t\t\t\tvec2 uv = vNormalUV;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvec2 uv = vColorUV;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tvec3 normalFromMap = texture2D(normalTexture, uv).rgb * 2.0 - 1.0;\n\t\t\t\t\t\t\tnormalFromMap.xy *= vec2(1, -1);\n\t\t\t\t\t\t\tnormalFromMap.xy *= normalScale;\n\t\t\t\t\t\t\treturn normalize(transform * normalFromMap);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef colorTextureEnvironment\n\t\t\t\t\t\tvec4 getColorFromEnvironmentMap(sampler2D environmentTexture, vec3 positionDir, vec3 normal) {\n\t\t\t\t\t\t\tvec3 r = reflect(positionDir, normal);\n\t\t\t\t\t\t\tfloat m = 2. * sqrt(r.x * r.x + r.y * r.y + (r.z + 1.) * (r.z + 1.));\n\t\t\t\t\t\t\tvec2 uv = r.xy / m + .5;\n\t\t\t\t\t\t\treturn vec4(texture2D(environmentTexture, uv).rgb, 1.);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\tvec3 applyRayleighScattering(vec3 color, float amount) {\n\t\t\t\t\t\t\tfloat value = (color.r + color.g + color.b);\n\t\t\t\t\t\t\tif (value > 0.0) {\n\t\t\t\t\t\t\t\tfloat rFactor = 1.0; // 6.3^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tfloat gFactor = 1.602; // 5.6^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tfloat bFactor = 3.228; // 4.7^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tcolor.r *= pow(rFactor, -amount);\n\t\t\t\t\t\t\t\tcolor.g *= pow(gFactor, -amount);\n\t\t\t\t\t\t\t\tcolor.b *= pow(bFactor, -amount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn color;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvec3 getLightColorFromShadowEntities(vec3 lightColor, vec3 lightDir, vec3 lightPosition, float lightRadius, vec3 normal) {\n\t\t\t\t\t\t\tvec3 color = lightColor;\n\t\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\t\tif (i >= numShadowEntities) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvec3 origin = cameraSpacePosition - shadowEntityPositions[i];\n\t\t\t\t\t\t\t\tvec3 axis = normalize(shadowEntityPositions[i] - lightPosition);\n\t\t\t\t\t\t\t\tfloat sd = dot(origin, axis);\n\t\t\t\t\t\t\t\tif (sd > 0.0) {\n\t\t\t\t\t\t\t\t\tfloat e = length(origin - sd * axis);\n\t\t\t\t\t\t\t\t\tfloat ld = dot(cameraSpacePosition - lightPosition, axis);\n\t\t\t\t\t\t\t\t\tfloat lr = lightRadius;\n\t\t\t\t\t\t\t\t\tfloat sr = shadowEntityRadii[i];\n\t\t\t\t\t\t\t\t\tfloat e0 = (ld * sr - sd * lr) / (ld - sd);\n\t\t\t\t\t\t\t\t\tfloat e1 = (ld * sr + sd * lr) / (ld - sd);\n\t\t\t\t\t\t\t\t\tfloat lightLevel = 0.0;\n\t\t\t\t\t\t\t\t\tif (e1 < 0.0 || sd < 0.0) { // light in front of shadow entity\n\t\t\t\t\t\t\t\t\t\tlightLevel = 1.0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (e0 < e1) {\n\t\t\t\t\t\t\t\t\t\te0 /= max(1.0, shadowEntitySunsetIntensity[i] * 2.0);\n\t\t\t\t\t\t\t\t\t\tlightLevel = (e - e0) / (e1 - e0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tlightLevel = e < e0 ? 0.0 : 1.0; // 0 radius light.\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcolor = saturate(lightLevel) * applyRayleighScattering(color, saturate(1.5 - lightLevel) * saturate(shadowEntitySunsetIntensity[i]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn color;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef shadowRings\n\t\t\t\t\t\tvec3 getLightColorFromShadowRings(vec3 lightColor, vec3 lightDir) {\n\t\t\t\t\t\t\tvec3 position = cameraSpacePosition - entityPos;\n\t\t\t\t\t\t\tfloat d = dot(position, shadowRingsNormal) / dot(lightDir, shadowRingsNormal);\n\t\t\t\t\t\t\thighp vec3 pointOnDisc = -d * lightDir + position;\n\t\t\t\t\t\t\tfloat lengthOnDisc = length(pointOnDisc - dot(pointOnDisc, shadowRingsNormal) * shadowRingsNormal);\n\t\t\t\t\t\t\tfloat u = (lengthOnDisc - shadowRingsInnerRadius) / (shadowRingsOuterRadius - shadowRingsInnerRadius);\n\t\t\t\t\t\t\tfloat shadow = 1.0 - texture2D(shadowRingsTexture, vec2(u, 0.0), 0.0).a;\n\t\t\t\t\t\t\tif (shadowRingsInnerRadius <= lengthOnDisc && lengthOnDisc <= shadowRingsOuterRadius && d > 0.0) {\n\t\t\t\t\t\t\t\treturn lightColor * saturate(shadow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\treturn lightColor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// ATMOSPHERE\n\n\t\t\t\t\t#ifdef atmosphere\n\t\t\t\t\t\tuniform vec3 atmospherePosition;\n\t\t\t\t\t\tuniform vec4 atmosphereOrientation;\n\t\t\t\t\t\tuniform float atmosphereEquatorialRadius;\n\t\t\t\t\t\tuniform float atmospherePolarRadius;\n\t\t\t\t\t\tuniform float atmosphereDensity;\n\t\t\t\t\t\tuniform float atmosphereScaleHeight;\n\t\t\t\t\t\tuniform vec3 atmosphereColor;\n\t\t\t\t\t\tuniform float atmosphereEmissivity;\n\t\t\t\t\t\tuniform float atmosphereSunBrightness;\n\t\t\t\t\t\tuniform vec3 atmosphereSunsetColor;\n\t\t\t\t\t\tuniform float atmosphereSunsetIntensity;\n\t\t\t\t\t\tuniform float atmosphereGroundIsSpheroid;\n\n\t\t\t\t\t\tconst int atmosphereNumIterations = 5;\n\n\t\t\t\t\t\t// Inverse rotate a vector by a quaternion.\n\t\t\t\t\t\tvec3 quatRotInv(vec4 q, vec3 v) {\n\t\t\t\t\t\t\tfloat tx = q.w * v.x - q.y * v.z + q.z * v.y;\n\t\t\t\t\t\t\tfloat ty = q.w * v.y - q.z * v.x + q.x * v.z;\n\t\t\t\t\t\t\tfloat tz = q.w * v.z - q.x * v.y + q.y * v.x;\n\t\t\t\t\t\t\tfloat tw = q.x * v.x + q.y * v.y + q.z * v.z;\n\t\t\t\t\t\t\tfloat x = tx * q.w + tw * q.x + ty * q.z - tz * q.y;\n\t\t\t\t\t\t\tfloat y = ty * q.w + tw * q.y + tz * q.x - tx * q.z;\n\t\t\t\t\t\t\tfloat z = tz * q.w + tw * q.z + tx * q.y - ty * q.x;\n\t\t\t\t\t\t\treturn vec3(x, y, z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Given an origin and direction, computes the sampling start and end as distance from the origin in the direction.\n\t\t\t\t\t\tvoid getStartEndSamples(out float start, out float end, vec3 origin, vec3 direction, float maxDistance, float groundRadius, float atmosphereScaleHeight) {\n\t\t\t\t\t\t\t// Get the along the ray perpendicular to the sphere.\n\t\t\t\t\t\t\tfloat perpD = -dot(origin, direction);\n\t\t\t\t\t\t\tvec3 perp = origin + direction * perpD;\n\n\t\t\t\t\t\t\t// Figure out the sample distance.\n\t\t\t\t\t\t\tfloat atmosphereRadius = groundRadius + atmosphereScaleHeight * 6.0;\n\t\t\t\t\t\t\tfloat chordHalfLength = sqrt(max(0.0, atmosphereRadius * atmosphereRadius - dot(perp, perp)));\n\n\t\t\t\t\t\t\t// Figure out starting and ending sample points.\n\t\t\t\t\t\t\tstart = max(0.0, perpD - chordHalfLength);\n\t\t\t\t\t\t\tend = min(maxDistance, perpD + chordHalfLength);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Gets the density of the atmosphere at a given position.\n\t\t\t\t\t\tfloat getDensity(vec3 position, float radius, float density, float atmosphereScaleHeight) {\n\t\t\t\t\t\t\treturn density * exp((radius - length(position)) / atmosphereScaleHeight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Returns 0 if the ray does not intersect and 1.0 if the ray very intersects (with a gradient inbetween).\n\t\t\t\t\t\tfloat getDayLevel(vec3 origin, vec3 direction, float radius, float scaleHeight) {\n\t\t\t\t\t\t\tfloat blendHeight = scaleHeight * radius / 200.0;\n\t\t\t\t\t\t\tfloat perpD = -dot(origin, direction);\n\t\t\t\t\t\t\tfloat depth = radius - sqrt(dot(origin, origin) - sign(perpD) * perpD * perpD);\n\t\t\t\t\t\t\tif (depth < 0.0) { // day\n\t\t\t\t\t\t\t\treturn 1.0 - max(0.0, 0.25 * depth / blendHeight + 0.25);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse { // night\n\t\t\t\t\t\t\t\treturn 1.0 - min(1.0, 0.75 * depth / blendHeight + 0.25);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Adjusts the color if one of the RGB values is greater than 1.0.\n\t\t\t\t\t\tvec3 adjustOverbrightness(vec3 color) {\n\t\t\t\t\t\t\tfloat maxColor = max(color.r, max(color.g, color.b));\n\t\t\t\t\t\t\tif (maxColor > 1.0) {\n\t\t\t\t\t\t\t\tfloat f = (maxColor - 1.0) / maxColor;\n\t\t\t\t\t\t\t\tcolor.r = min(1.0, pow(color.r / maxColor, 1.0 / maxColor));\n\t\t\t\t\t\t\t\tcolor.g = min(1.0, pow(color.g / maxColor, 1.0 / maxColor));\n\t\t\t\t\t\t\t\tcolor.b = min(1.0, pow(color.b / maxColor, 1.0 / maxColor));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn color;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfloat easeInOut(float x, float sharpness) {\n\t\t\t\t\t\t\tfloat b = sharpness;\n\t\t\t\t\t\t\tif (x < 0.5) {\n\t\t\t\t\t\t\t\treturn max(0.0, (pow(b, 2.0 * x) - 1.0) / (2.0 * (b - 1.0)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\treturn min(1.0, 1.0 - (pow(b, 2.0 * (1.0 - x)) - 1.0) / (2.0 * (b - 1.0)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Calculates a glow around the light direction.\n\t\t\t\t\t\tfloat glow(float spread, float amount, float lightDotCamera) {\n\t\t\t\t\t\t\treturn amount * spread / (1.0 + spread - lightDotCamera);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstruct AtmosphereInfo {\n\t\t\t\t\t\t\tfloat spheroidRatio;\n\t\t\t\t\t\t\thighp vec3 position;\n\t\t\t\t\t\t\thighp vec3 cameraPosition;\n\t\t\t\t\t\t\thighp vec3 cameraToPosition;\n\t\t\t\t\t\t\tfloat cameraToPositionDist;\n\t\t\t\t\t\t\thighp vec3 cameraToPositionUnit;\n\t\t\t\t\t\t\tfloat start;\n\t\t\t\t\t\t\tfloat end;\n\t\t\t\t\t\t\tfloat totalDensity;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Get atmosphere info that is independent of any light.\n\t\t\t\t\t\tAtmosphereInfo getAtmosphereInfo() {\n\n\t\t\t\t\t\t\tAtmosphereInfo atmosphereInfo;\n\n\t\t\t\t\t\t\t// Get position and camera in the atmosphere frame.\n\t\t\t\t\t\t\tatmosphereInfo.position = quatRotInv(atmosphereOrientation, cameraSpacePosition - atmospherePosition);\n\t\t\t\t\t\t\tatmosphereInfo.cameraPosition = quatRotInv(atmosphereOrientation, -atmospherePosition);\n\n\t\t\t\t\t\t\t// Convert everything into a sphere frame.\n\t\t\t\t\t\t\tatmosphereInfo.spheroidRatio = atmosphereEquatorialRadius / atmospherePolarRadius;\n\t\t\t\t\t\t\tatmosphereInfo.position.z *= atmosphereInfo.spheroidRatio;\n\t\t\t\t\t\t\tatmosphereInfo.cameraPosition.z *= atmosphereInfo.spheroidRatio;\n\n\t\t\t\t\t\t\t// Make sure the position is right on the ground.\n\t\t\t\t\t\t\tatmosphereInfo.position = normalize(atmosphereInfo.position / 1.0e8) * atmosphereEquatorialRadius;\n\n\t\t\t\t\t\t\t// Get some shortcut vectors.\n\t\t\t\t\t\t\tatmosphereInfo.cameraToPosition = atmosphereInfo.position - atmosphereInfo.cameraPosition;\n\t\t\t\t\t\t\tatmosphereInfo.cameraToPositionDist = length(atmosphereInfo.cameraToPosition / 1.0e8) * 1.0e8;\n\t\t\t\t\t\t\tatmosphereInfo.cameraToPositionUnit = atmosphereInfo.cameraToPosition / atmosphereInfo.cameraToPositionDist;\n\n\t\t\t\t\t\t\t// Get the start and end of the sampling from the camera to the position.\n\t\t\t\t\t\t\tgetStartEndSamples(atmosphereInfo.start, atmosphereInfo.end, atmosphereInfo.cameraPosition, atmosphereInfo.cameraToPositionUnit, atmosphereInfo.cameraToPositionDist, atmosphereEquatorialRadius, atmosphereScaleHeight);\n\t\t\t\t\t\t\tfloat step = 1.0 / float(atmosphereNumIterations - 1);\n\t\t\t\t\t\t\tfloat stepDist = step * (atmosphereInfo.end - atmosphereInfo.start);\n\n\t\t\t\t\t\t\t// Do the sampling.\n\t\t\t\t\t\t\tatmosphereInfo.totalDensity = 0.0;\n\t\t\t\t\t\t\tfloat segmentStart = atmosphereInfo.start;\n\t\t\t\t\t\t\tfor (int j = 0; j < atmosphereNumIterations; j++) {\n\t\t\t\t\t\t\t\t// Get the distance that this segment covers.\n\t\t\t\t\t\t\t\tfloat segDist = stepDist;\n\t\t\t\t\t\t\t\tif (j == 0 || j == atmosphereNumIterations - 1) {\n\t\t\t\t\t\t\t\t\tsegDist *= 0.5;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Get the segment start that we're looking at.\n\t\t\t\t\t\t\t\tvec3 p = atmosphereInfo.cameraPosition + segmentStart * atmosphereInfo.cameraToPositionUnit;\n\n\t\t\t\t\t\t\t\t// Get the density at that segment start. It'll be the density for the whole segment.\n\t\t\t\t\t\t\t\tfloat densityAtP = getDensity(p, atmosphereEquatorialRadius, atmosphereDensity, atmosphereScaleHeight);\n\n\t\t\t\t\t\t\t\t// Add it to the total density.\n\t\t\t\t\t\t\t\tatmosphereInfo.totalDensity += densityAtP * segDist;\n\n\t\t\t\t\t\t\t\t// Next step.\n\t\t\t\t\t\t\t\tsegmentStart += stepDist;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn atmosphereInfo;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvec4 getAtmosphereEmissiveColor(AtmosphereInfo atmosphereInfo, vec3 color, float emissivity) {\n\n\t\t\t\t\t\t\t// Scale the total density with the emissivity.\n\t\t\t\t\t\t\tatmosphereInfo.totalDensity *= emissivity;\n\n\t\t\t\t\t\t\t// Apply the total density to the transparency of the atmosphere.\n\t\t\t\t\t\t\tvec4 outColor = vec4(0.0);\n\t\t\t\t\t\t\toutColor.a = clamp(pow(3.0 * atmosphereInfo.totalDensity, 0.3), 0.0, 1.0);\n\n\t\t\t\t\t\t\t// Multiply it all together with the source light color.\n\t\t\t\t\t\t\toutColor.rgb = emissivity * color * clamp(pow(15.0 * atmosphereInfo.totalDensity / (atmosphereDensity * atmosphereEquatorialRadius), 0.2), 0.75, 1.0);\n\n\t\t\t\t\t\t\t// Make it more opaque when lower down.\n\t\t\t\t\t\t\toutColor.a *= 1.0 + 0.5 * getDensity(atmosphereInfo.cameraPosition, atmosphereEquatorialRadius, 1.0, atmosphereScaleHeight);\n\n\t\t\t\t\t\t\t// Clamp it to make it clean.\n\t\t\t\t\t\t\toutColor.a = clamp(outColor.a, 0.0, 1.0);\n\n\t\t\t\t\t\t\t// Return the color.\n\t\t\t\t\t\t\treturn outColor;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Adjust the incoming light for the atmosphere.\n\t\t\t\t\t\tvec4 getAtmosphereColor(AtmosphereInfo atmosphereInfo, vec3 incomingLight, vec3 lightPosition) {\n\n\t\t\t\t\t\t\t// The color starts out in full brightness (as if emissivity was 1.0).\n\t\t\t\t\t\t\tvec4 outColor = getAtmosphereEmissiveColor(atmosphereInfo, incomingLight * atmosphereColor, 1.0);\n\n\t\t\t\t\t\t\t// Get the light position in the sphere entity-space.\n\t\t\t\t\t\t\tlightPosition = quatRotInv(atmosphereOrientation, lightPosition);\n\t\t\t\t\t\t\tlightPosition.z *= atmosphereInfo.spheroidRatio;\n\t\t\t\t\t\t\thighp vec3 lightToPosition = atmosphereInfo.position - lightPosition;\n\t\t\t\t\t\t\thighp vec3 lightToPositionUnit = normalize(lightToPosition / 1.0e8);\n\n\t\t\t\t\t\t\t// Get the day level, from 0 to 1, and apply it to the alpha.\n\t\t\t\t\t\t\tfloat ambientLightIntensity = min(1.0, length(ambientLightColor));\n\t\t\t\t\t\t\tvec3 dayRefUp = normalize(atmosphereInfo.cameraPosition + atmosphereInfo.end * atmosphereInfo.cameraToPositionUnit);\n\t\t\t\t\t\t\tfloat dayLevel = -dot(lightToPositionUnit, dayRefUp);\n\t\t\t\t\t\t\tfloat lightIntensity = mix(dayLevel, 0.0, ambientLightIntensity);\n\t\t\t\t\t\t\toutColor.a *= easeInOut(0.25 * 700.0 * atmosphereDensity + 1.0 * lightIntensity, 2.0);\n\n\t\t\t\t\t\t\t// Add broader sun glare.\n\t\t\t\t\t\t\tfloat lightDotCamera = max(0.0, -dot(lightToPositionUnit, atmosphereInfo.cameraToPositionUnit));\n\t\t\t\t\t\t\toutColor.rgb *= incomingLight * (1.0 + atmosphereSunBrightness * outColor.a * glow(0.04, 0.125, lightDotCamera));\n\n\t\t\t\t\t\t\t// Apply the sunset.\n\t\t\t\t\t\t\tfloat sunsetAmount = mix(atmosphereSunsetIntensity * easeInOut(0.5 * (1.0 - abs(dayLevel)), 4.0), 0.0, ambientLightIntensity);\n\t\t\t\t\t\t\toutColor.rgb *= mix(vec3(1.0), atmosphereSunsetColor, clamp(sunsetAmount, 0.0, 1.0));\n\n\t\t\t\t\t\t\t// Adjust for values that are greater than one.\n\t\t\t\t\t\t\toutColor.rgb = adjustOverbrightness(outColor.rgb);\n\n\t\t\t\t\t\t\treturn outColor;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvoid main(void) {\n\t\t\t\t\t\t// Get the camera direction to the position.\n\t\t\t\t\t\tvec3 positionDir = normalize(cameraSpacePosition);\n\n\t\t\t\t\t\t// Calculate the normal.\n\t\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\t\tvec3 normal = getNormalFromMap();\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tvec3 normal = normalize(cameraSpaceNormal);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// The diffuse light.\n\t\t\t\t\t\tvec3 diffuseLight = ambientLightColor;\n\t\t\t\t\t\tvec3 specularLight = vec3(0, 0, 0);\n\n\t\t\t\t\t\t// Atmosphere emissive shading.\n\t\t\t\t\t\t#ifdef atmosphere\n\t\t\t\t\t\t\tAtmosphereInfo atmosphereInfo = getAtmosphereInfo();\n\t\t\t\t\t\t\tvec4 atmosphereColor = getAtmosphereEmissiveColor(atmosphereInfo, atmosphereColor, atmosphereEmissivity);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// For each light,\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tif (i >= numLights) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Get lighting angles.\n\t\t\t\t\t\t\tvec3 lightDir = normalize(cameraSpacePosition - lightPositions[i]);\n\t\t\t\t\t\t\tfloat lightCosAngle = -dot(lightDir, normal);\n\n\t\t\t\t\t\t\t// Make the shadows a bit sharper, depending on atmospheres.\n\t\t\t\t\t\t\tfloat sharpness = 3.0;\n\t\t\t\t\t\t\t#ifdef atmosphere\n\t\t\t\t\t\t\t\tsharpness /= 1.0 + 700.0 * atmosphereDensity;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tlightCosAngle = 2.0 * (1.0 + exp(-sharpness)) / (1.0 + exp(-sharpness * lightCosAngle)) - 1.0;\n\n\t\t\t\t\t\t\t// Get the incoming light after shadows.\n\t\t\t\t\t\t\tvec3 incomingLight = lightColors[i];\n\t\t\t\t\t\t\t#if !defined(colorMapEmmissive) | !defined(nightMapEmmissive) | !defined(decalMapEmmissive)\n\t\t\t\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\t\t\t\tincomingLight = getLightColorFromShadowEntities(incomingLight, lightDir, lightPositions[i], lightRadii[i], normal);\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t\t#ifdef shadowRings\n\t\t\t\t\t\t\t\t\tincomingLight = getLightColorFromShadowRings(incomingLight, lightDir);\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t// Diffuse shading.\n\t\t\t\t\t\t\tdiffuseLight += incomingLight * saturate(lightCosAngle);\n\n\t\t\t\t\t\t\t// Specular shading.\n\t\t\t\t\t\t\tvec3 reflectedLightDir = reflect(lightDir, normal);\n\t\t\t\t\t\t\tvec3 halfVector = normalize(-lightDir - positionDir);\n\t\t\t\t\t\t\tfloat phongHighlight = 0.25 * pow(saturate(-dot(reflectedLightDir, positionDir)), specularHardness / 2.0);\n\t\t\t\t\t\t\tfloat blinnHighlight = 4.0 * pow(saturate(dot(halfVector, normal)), specularHardness);\n\t\t\t\t\t\t\tfloat specularAngle = phongHighlight + pow(1.0 - saturate(-dot(positionDir, normal)), specularHardness / 12.0) * blinnHighlight;\n\t\t\t\t\t\t\tspecularLight += saturate(lightCosAngle * 20.0) * specularAngle * incomingLight;\t\n\n\t\t\t\t\t\t\t// Atmosphere shading.\n\t\t\t\t\t\t\t#ifdef atmosphere\n\t\t\t\t\t\t\t\tif (length(lightPositions[i]) > 0.0) { // don't use a camera light\n\t\t\t\t\t\t\t\t\tatmosphereColor += getAtmosphereColor(atmosphereInfo, incomingLight, lightPositions[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdiffuseLight = saturate(diffuseLight);\n\n\t\t\t\t\t\t// If there's ambience, remove the direct light components.\n\t\t\t\t\t\tspecularLight *= vec3(1, 1, 1) - ambientLightColor;\n\n\t\t\t\t\t\t// Main Color map.\n\t\t\t\t\t\tvec4 colorPixel = vec4(1, 0, 1, 1);\n\t\t\t\t\t\t#ifdef colorTextureEnvironment\n\t\t\t\t\t\t\tcolorPixel = getColorFromEnvironmentMap(colorTexture, positionDir, normal);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tcolorPixel = texture2D(colorTexture, vColorUV) * vec4(color, 1);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#ifdef baseColor\n\t\t\t\t\t\t\tcolorPixel = vec4(color, 1);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Apply diffuse shading.\n\t\t\t\t\t\t#ifndef colorMapEmmissive\n\t\t\t\t\t\t\tcolorPixel *= vec4(diffuseLight, 1.0);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tgl_FragColor = colorPixel;\n\n\t\t\t\t\t\t// Specular Map\n\t\t\t\t\t\tvec3 specularPixel = specularColor * specularIntensity;\n\t\t\t\t\t\t#ifdef specularMap\n\t\t\t\t\t\t\t#ifdef specularUVs\n\t\t\t\t\t\t\t\tvec2 specularUV = vSpecularUV;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvec2 specularUV = vColorUV;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tspecularPixel = specularColor * texture2D(specularTexture, specularUV).r;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Apply specular Shading\n\t\t\t\t\t\tgl_FragColor.rgb += specularLight * specularPixel;\n\n\t\t\t\t\t\t// Night-Side Map\n\t\t\t\t\t\t#ifdef nightMap\n\t\t\t\t\t\t\tfloat ambientLightIntensity = min(1.0, length(ambientLightColor));\n\t\t\t\t\t\t\t#ifdef nightUVs\n\t\t\t\t\t\t\t\tvec2 nightUV = vNightUV;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvec2 nightUV = vColorUV;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tvec4 nightPixel = texture2D(nightTexture, nightUV);\n\t\t\t\t\t\t\t#ifndef nightMapEmmissive\n\t\t\t\t\t\t\t\tnightPixel *= vec4(diffuseLight, 1.0);\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tgl_FragColor = mix(gl_FragColor, nightPixel, 1.0 - min(1.0, length(ambientLightColor + diffuseLight)));//(1.0 - ambientLightIntensity) * saturate(0.5 - length(diffuseLight)));\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Decal Map\n\t\t\t\t\t\t#ifdef decalMap\n\t\t\t\t\t\t\t#ifdef decalUVs\n\t\t\t\t\t\t\t\tvec2 decalUV = vDecalUV;\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvec2 decalUV = vColorUV;\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tvec4 decalPixel = texture2D(decalTexture, decalUV);\n\t\t\t\t\t\t\t#ifndef decalMapEmmissive\n\t\t\t\t\t\t\t\tdecalPixel *= vec4(diffuseLight, 1.0);\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, decalPixel.rgb, decalPixel.a);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Atmosphere\n\t\t\t\t\t\t#ifdef atmosphere\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, atmosphereColor.rgb, clamp(atmosphereColor.a, 0.0, 1.0));\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t\t\t}`,
              }));
            const t = MaterialUtilsPhong._material.clone();
            for (
              let e = 0;
              e < t.uniforms.shadowEntityPositions.value.length;
              e++
            )
              t.uniforms.shadowEntityPositions.value[e] =
                MaterialUtilsPhong._material.uniforms.shadowEntityPositions.value[
                  e
                ].clone();
            for (
              let e = 0;
              e < t.uniforms.shadowEntitySunsetColors.value.length;
              e++
            )
              t.uniforms.shadowEntitySunsetColors.value[e] =
                MaterialUtilsPhong._material.uniforms.shadowEntitySunsetColors.value[
                  e
                ].clone();
            return (
              i.ThreeJsHelper.setupLogDepthBuffering(t),
              (t.extensions.derivatives = !0),
              (t.needsUpdate = !0),
              t
            );
          }
        }
        MaterialUtilsPhong._material = null;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MaterialUtilsStandard: function () {
              return MaterialUtilsStandard;
            },
          });
        var i = s(6);
        class MaterialUtilsStandard {
          static get() {
            null === MaterialUtilsStandard._material &&
              (MaterialUtilsStandard._material = new i.THREE.ShaderMaterial({
                uniforms: {
                  ambientLightColor: new i.THREE.Uniform(new i.THREE.Color()),
                  lightPositions: new i.THREE.Uniform([
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                    new i.THREE.Vector3(1, 0, 0),
                  ]),
                  lightColors: new i.THREE.Uniform([
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                    new i.THREE.Vector3(0, 0, 0),
                  ]),
                  lightRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                  numLights: new i.THREE.Uniform(0),
                  environmentIntensity: new i.THREE.Uniform(1),
                  gammaCorrectionFactor: new i.THREE.Uniform(1),
                  entityPos: new i.THREE.Uniform(new i.THREE.Vector3()),
                  color: new i.THREE.Uniform(new i.THREE.Color(1, 1, 1)),
                  metalness: new i.THREE.Uniform(0),
                  roughness: new i.THREE.Uniform(0),
                  emissiveColor: new i.THREE.Uniform(
                    new i.THREE.Color(0, 0, 0),
                  ),
                  alphaMultiplier: new i.THREE.Uniform(1),
                  colorTexture: new i.THREE.Uniform(null),
                  roughnessTexture: new i.THREE.Uniform(null),
                  metalnessTexture: new i.THREE.Uniform(null),
                  normalTexture: new i.THREE.Uniform(null),
                  emissiveTexture: new i.THREE.Uniform(null),
                  numShadowEntities: new i.THREE.Uniform(0),
                  shadowEntityPositions: new i.THREE.Uniform([
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                  ]),
                  shadowEntityRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                  shadowEntitySunsetIntensity: new i.THREE.Uniform([
                    0, 0, 0, 0, 0,
                  ]),
                  shadowEntitySunsetColors: new i.THREE.Uniform([
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                    new i.THREE.Vector3(),
                  ]),
                  envTexture: new i.THREE.Uniform(null),
                  maxMipLevel: new i.THREE.Uniform(0),
                  dynEnvTexture: new i.THREE.Uniform(null),
                  dynEnvFaceSize: new i.THREE.Uniform(0),
                  normalScale: new i.THREE.Uniform(new i.THREE.Vector2()),
                  ...i.ShaderChunkLogDepth.ThreeUniforms,
                },
                vertexShader: `\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tattribute vec4 tangent;\n\t\t\t\t\t\tvarying vec4 localTangent;\n\t\t\t\t\t\tvarying vec3 localNormal;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 modelNormal;\n\t\t\t\t\t#endif\n\t\t\t\t\t#if defined(normalMap) || defined(colorMap) || defined(roughnessMap) || defined(metalnessMap) || defined(emissiveMap)\n\t\t\t\t\t\tvarying vec2 localUV;\n\t\t\t\t\t#endif\n\t\t\t\t\tvarying vec3 cameraSpacePosition;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\t\tlocalTangent = tangent;\n\t\t\t\t\t\t\tlocalNormal = normal;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tmodelNormal = normalize((modelMatrix * vec4(normal, 0.)).xyz);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if defined(normalMap) || defined(colorMap) || defined(roughnessMap) || defined(metalnessMap) || defined(emissiveMap)\n\t\t\t\t\t\t\tlocalUV = uv;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tcameraSpacePosition = (modelMatrix * vec4(position, 1.)).xyz;\n\t\t\t\t\t\tvec4 viewPosition = modelViewMatrix * vec4(position, 1.);\n\t\t\t\t\t\tgl_Position = projectionMatrix * viewPosition;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t\t\t}`,
                fragmentShader: `\n\t\t\t\t\tprecision highp float;\n\n\t\t\t\t\t#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\t\t\t\t\t#define EPSILON 1e-6\n\t\t\t\t\t#define PI 3.14159265359\n\t\t\t\t\t#define RECIPROCAL_PI 0.31830988618\n\t\t\t\t\t#define RECIPROCAL_PI2 0.15915494\n\t\t\t\t\t#ifndef saturate\n\t\t\t\t\t\t#define saturate(a) clamp( a, 0.0, 1.0 )\n\t\t\t\t\t#endif\n\n\t\t\t\t\tfloat pow2( float x ) { return x*x; }\n\n\t\t\t\t\tuniform mat4 modelMatrix;\n\n\t\t\t\t\t// Lights\n\t\t\t\t\tuniform vec3 ambientLightColor;\n\t\t\t\t\tuniform vec3 lightPositions[5];\n\t\t\t\t\tuniform vec3 lightColors[5];\n\t\t\t\t\tuniform float lightRadii[5];\n\t\t\t\t\tuniform int numLights;\n\t\t\t\t\tuniform float environmentIntensity;\n\t\t\t\t\tuniform float gammaCorrectionFactor;\n\n\t\t\t\t\t// External lighting and camera.\n\t\t\t\t\tuniform vec3 entityPos;\n\n\t\t\t\t\t// Textures.\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\tuniform sampler2D roughnessTexture;\n\t\t\t\t\tuniform sampler2D metalnessTexture;\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tuniform sampler2D normalTexture;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef emissiveMap\n\t\t\t\t\t\tuniform sampler2D emissiveTexture;\n\t\t\t\t\t#endif\n\t\t\t\t\t#ifdef dynEnvMap\n\t\t\t\t\t\tuniform sampler2D dynEnvTexture;\n\t\t\t\t\t\tuniform float dynEnvFaceSize;\n\t\t\t\t\t#elif defined( envMap )\n\t\t\t\t\t\t#ifdef envIsCube\n\t\t\t\t\t\t\tuniform samplerCube envTexture;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tuniform sampler2D envTexture;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tuniform vec2 normalScale;\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// Shadow Entities.\n\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\tuniform int numShadowEntities;\n\t\t\t\t\t\tuniform vec3 shadowEntityPositions[5];\n\t\t\t\t\t\tuniform float shadowEntityRadii[5];\n\t\t\t\t\t\tuniform float shadowEntitySunsetIntensity[5];\n\t\t\t\t\t\tuniform vec3 shadowEntitySunsetColors[5];\n\t\t\t\t\t#endif\n\n\t\t\t\t\t// Scalars\n\t\t\t\t\tuniform vec3 color;\n\t\t\t\t\tuniform float roughness;\n\t\t\t\t\tuniform float metalness;\n\t\t\t\t\tuniform vec3 emissiveColor;\n\t\t\t\t\tuniform float alphaMultiplier;\n\n\t\t\t\t\t// The varying attributes.\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tvarying vec4 localTangent;\n\t\t\t\t\t\tvarying vec3 localNormal;\n\t\t\t\t\t#else\n\t\t\t\t\t\tvarying vec3 modelNormal;\n\t\t\t\t\t#endif\n\t\t\t\t\t#if defined(normalMap) || defined(colorMap) || defined(roughnessMap) || defined(metalnessMap) || defined(emissiveMap)\n\t\t\t\t\t\tvarying vec2 localUV;\n\t\t\t\t\t#endif\n\t\t\t\t\tvarying vec3 cameraSpacePosition;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\t\t\tstruct PhysicalMaterial {\n\t\t\t\t\t\tvec3 diffuseColor;\n\t\t\t\t\t\tvec3 specularColor;\n\t\t\t\t\t\tfloat specularRoughness;\n\t\t\t\t\t};\n\t\t\t\t\tstruct IncidentLight {\n\t\t\t\t\t\tvec3 color;\n\t\t\t\t\t\tvec3 direction;\n\t\t\t\t\t};\n\n\t\t\t\t\tstruct ReflectedLight {\n\t\t\t\t\t\tvec3 directDiffuse;\n\t\t\t\t\t\tvec3 directSpecular;\n\t\t\t\t\t\tvec3 indirectDiffuse;\n\t\t\t\t\t\tvec3 indirectSpecular;\n\t\t\t\t\t};\n\n\t\t\t\t\tstruct GeometricContext {\n\t\t\t\t\t\tvec3 normal;\n\t\t\t\t\t\tvec3 viewDir;\n\t\t\t\t\t};\n\n\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\tvec3 getNormalFromMap() {\n\t\t\t\t\t\t\tvec3 normal = normalize(localNormal);\n\t\t\t\t\t\t\tvec3 tangent = normalize(localTangent.xyz);\n\t\t\t\t\t\t\tvec3 bitangent = normalize(cross(normal, tangent));\n\t\t\t\t\t\t\tif (localTangent.w < 0.0) {\n\t\t\t\t\t\t\t\tbitangent *= -1.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmat3 transform = mat3(tangent, bitangent, normal);\n\t\t\t\t\t\t\tvec3 normalFromMap = texture2D(normalTexture, localUV).rgb * 2.0 - 1.0;\n\t\t\t\t\t\t\tnormalFromMap.xy *= vec2(1, -1);\n\t\t\t\t\t\t\tnormalFromMap.xy *= normalScale;\n\t\t\t\t\t\t\treturn normalize(transform * normalFromMap);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\tvec3 applyRayleighScattering(vec3 color, float amount) {\n\t\t\t\t\t\t\tfloat value = (color.r + color.g + color.b);\n\t\t\t\t\t\t\tif (value > 0.0) {\n\t\t\t\t\t\t\t\tfloat rFactor = 1.0; // 6.3^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tfloat gFactor = 1.602; // 5.6^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tfloat bFactor = 3.228; // 4.7^-4 / 6.3^-4\n\t\t\t\t\t\t\t\tcolor.r *= pow(rFactor, -amount);\n\t\t\t\t\t\t\t\tcolor.g *= pow(gFactor, -amount);\n\t\t\t\t\t\t\t\tcolor.b *= pow(bFactor, -amount);\n\t\t\t\t\t\t\t\tcolor = value * color / (color.r + color.g + color.b);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn color;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvec3 getLightColorFromShadowEntities(vec3 lightColor, vec3 lightDir, vec3 lightPosition, float lightRadius, vec3 normal) {\n\t\t\t\t\t\t\tvec3 color = lightColor;\n\t\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\t\tif (i >= numShadowEntities) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvec3 origin = cameraSpacePosition - shadowEntityPositions[i];\n\t\t\t\t\t\t\t\tvec3 axis = normalize(shadowEntityPositions[i] - lightPosition);\n\t\t\t\t\t\t\t\tfloat sd = dot(origin, axis);\n\t\t\t\t\t\t\t\tif (sd > 0.0) {\n\t\t\t\t\t\t\t\t\tfloat e = length(origin - sd * axis);\n\t\t\t\t\t\t\t\t\tfloat ld = dot(cameraSpacePosition - lightPosition, axis);\n\t\t\t\t\t\t\t\t\tfloat lr = lightRadius;\n\t\t\t\t\t\t\t\t\tfloat sr = shadowEntityRadii[i];\n\t\t\t\t\t\t\t\t\tfloat e0 = (ld * sr - sd * lr) / (ld - sd);\n\t\t\t\t\t\t\t\t\tfloat e1 = (ld * sr + sd * lr) / (ld - sd);\n\t\t\t\t\t\t\t\t\tfloat lightLevel = 0.0;\n\t\t\t\t\t\t\t\t\tif (e1 < 0.0 || sd < 0.0) { // light in front of shadow entity\n\t\t\t\t\t\t\t\t\t\tlightLevel = 1.0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (e0 < e1) {\n\t\t\t\t\t\t\t\t\t\te0 -= (e1 - e0) * saturate(shadowEntitySunsetIntensity[i] / 3.0);\n\t\t\t\t\t\t\t\t\t\tlightLevel = pow(saturate((e - e0) / (e1 - e0)), 0.5); // soft light\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tlightLevel = e < e0 ? 0.0 : 1.0; // 0 radius light.\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcolor = lightLevel * mix(color, shadowEntitySunsetColors[i], (1.0 - lightLevel) * saturate(shadowEntitySunsetIntensity[i]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn color;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\t\t\t\t\t\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\t\t\t\t\t}\n\n\t\t\t\t\t// These use optimizations found in https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf.\n\n\t\t\t\t\t// The Smith-method geometry function. Calculates the ratio of incident light that is blocked by the microfacets to never reach the viewer.\n\t\t\t\t\t// alpha is the roughness^2\n\t\t\t\t\t// dotNL is the normal · the light vector.\n\t\t\t\t\t// dotNV is the normal · the view vector.\n\t\t\t\t\tfloat G_GGX_SmithCorrelated( float alpha, float dotNL, float dotNV ) {\n\t\t\t\t\t\tfloat a2 = pow2( alpha );\n\t\t\t\t\t\t// Get the light direction part of the geometry function.\n\t\t\t\t\t\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\t\t\t\t\t\t// Get the view direction part of the geometry function.\n\t\t\t\t\t\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\t\t\t\t\t\t// It would normally be be gv * gl, but this is using an optimization by Heitz (2014),\n\t\t\t\t\t\t// including the BRDF denominator, simplifying the results.\n\t\t\t\t\t\treturn 0.5 / max( gv + gl, EPSILON );\n\t\t\t\t\t}\n\n\t\t\t\t\t// The Trowbridge-Reitz normal distribution function. Calculates the relative surface area microfacets exactly aligned to the halfway vector, how "smooth" the surface is.\n\t\t\t\t\t// alpha is the roughness^2.\n\t\t\t\t\t// dotNH is the normal · the halfway vector.\n\t\t\t\t\tfloat D_GGX( float alpha, float dotNH ) {\n\t\t\t\t\t\tfloat a2 = pow2( alpha );\n\t\t\t\t\t\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\t\t\t\t\t\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\t\t\t\t\t}\n\n\t\t\t\t\t// The Schlick approximation for the Fresnel equation.\n\t\t\t\t\t// Since metallic and non-metallic surfaces have different equations, this function combines the two by approximation.\n\t\t\t\t\t// specularColor is the specular color at normal incidence.\n\t\t\t\t\t// dotLH is the light direction · the halfway vector.\n\t\t\t\t\tvec3 F_Schlick( vec3 specularColor, float dotLH ) {\n\t\t\t\t\t\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\t\t\t\t\t\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The specular part of the main BRDF function that describes the weighting function for the sum of every incoming light.\n\t\t\t\t\t// It uses the Cook-Torrance model.\n\t\t\t\t\tvec3 BRDF_Specular_GGX( IncidentLight incidentLight, GeometricContext geometry, vec3 specularColor, float roughness ) {\n\t\t\t\t\t\tfloat alpha = pow2( roughness );\n\t\t\t\t\t\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\t\t\t\t\t\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\t\t\t\t\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\t\t\t\t\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\t\t\t\t\t\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\t\t\t\t\t\tvec3 F = F_Schlick( specularColor, dotLH );\n\t\t\t\t\t\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\t\t\t\t\tfloat D = D_GGX( alpha, dotNH );\n\t\t\t\t\t\treturn F * ( G * D );\n\t\t\t\t\t}\n\n\t\t\t\t\t// The diffuse part of the main BRDF function.\n\t\t\t\t\tvec3 BRDF_Diffuse_Lambert( vec3 diffuseColor ) {\n\t\t\t\t\t\treturn RECIPROCAL_PI * diffuseColor;\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat BlinnExponentToGGXRoughness( float blinnExponent ) {\n\t\t\t\t\t\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat GGXRoughnessToBlinnExponent( float ggxRoughness ) {\n\t\t\t\t\t\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n\t\t\t\t\t}\n\n\t\t\t\t\tvec2 integrateSpecularBRDF( float dotNV, float roughness ) {\n\t\t\t\t\t\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\t\t\t\t\t\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\t\t\t\t\t\tvec4 r = roughness * c0 + c1;\n\t\t\t\t\t\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\t\t\t\t\t\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n\t\t\t\t\t}\n\n\t\t\t\t\tvec3 BRDF_Specular_GGX_Environment( GeometricContext geometry, vec3 specularColor, float roughness ) {\n\t\t\t\t\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\t\t\t\t\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\t\t\t\t\t\treturn specularColor * brdf.x + brdf.y;\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid BRDF_Specular_Multiscattering_Environment( GeometricContext geometry, vec3 specularColor, float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\t\t\t\t\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\t\t\t\t\tvec3 F = F_Schlick( specularColor, dotNV );\n\t\t\t\t\t\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\t\t\t\t\t\tvec3 FssEss = F * brdf.x + brdf.y;\n\t\t\t\t\t\tfloat Ess = brdf.x + brdf.y;\n\t\t\t\t\t\tfloat Ems = 1.0 - Ess;\n\t\t\t\t\t\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\t\t\t\t\t\tsingleScatter += FssEss;\n\t\t\t\t\t\tmultiScatter += Fms * Ems;\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat opacity = 1.0;\n\n\t\t\t\t\tuniform float reflectivity;\n\t\t\t\t\tuniform int maxMipLevel;\n\n\t\t\t\t\t// Returns the radiance: the incoming light * the cos(light angle to the normal)\n\t\t\t\t\tvec3 getIncomingLight( IncidentLight directLight, GeometricContext geometry) {\n\t\t\t\t\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\t\t\t\t\treturn (dotNL * directLight.color);\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat getSpecularMIPLevel( float blinnShininessExponent, int maxMIPLevel ) {\n\t\t\t\t\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\t\t\t\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\t\t\t\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t\t\t\t\t}\n\n\t\t\t\t\t#ifdef envIsCubeUV\n\t\t\t\t\t\t// These defines must match with PMREMGenerator\n\t\t\t\t\t\t#define cubeUV_maxMipLevel 8.0\n\t\t\t\t\t\t#define cubeUV_minMipLevel 4.0\n\t\t\t\t\t\t#define cubeUV_maxTileSize 256.0\n\t\t\t\t\t\t#define cubeUV_minTileSize 16.0\n\t\t\t\t\t\t// These shader functions convert between the UV coordinates of a single face of\n\t\t\t\t\t\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t\t\t\t\t\t// sampling a textureCube (not generally normalized ).\n\t\t\t\t\t\tfloat getFace( vec3 direction ) {\n\t\t\t\t\t\t\tvec3 absDirection = abs( direction );\n\t\t\t\t\t\t\tfloat face = - 1.0;\n\t\t\t\t\t\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\t\t\t\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\t\t\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\t\t\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn face;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// RH coordinate system; PMREM face-indexing convention\n\t\t\t\t\t\tvec2 getUV( vec3 direction, float face ) {\n\t\t\t\t\t\t\tvec2 uv;\n\t\t\t\t\t\t\tif ( face == 0.0 ) {\n\t\t\t\t\t\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\t\t\t\t\t\t\t} else if ( face == 1.0 ) {\n\t\t\t\t\t\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\t\t\t\t\t\t\t} else if ( face == 2.0 ) {\n\t\t\t\t\t\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\t\t\t\t\t\t\t} else if ( face == 3.0 ) {\n\t\t\t\t\t\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\t\t\t\t\t\t\t} else if ( face == 4.0 ) {\n\t\t\t\t\t\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn 0.5 * ( uv + 1.0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvec3 bilinearCubeUV( sampler2D environmentMap, vec3 direction, float mipInt ) {\n\t\t\t\t\t\t\tfloat face = getFace( direction );\n\t\t\t\t\t\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\t\t\t\t\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\t\t\t\t\t\tfloat faceSize = exp2( mipInt );\n\t\t\t\t\t\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\t\t\t\t\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\t\t\t\t\t\tvec2 f = fract( uv );\n\t\t\t\t\t\t\tuv += 0.5 - f;\n\t\t\t\t\t\t\tif ( face > 2.0 ) {\n\t\t\t\t\t\t\t\tuv.y += faceSize;\n\t\t\t\t\t\t\t\tface -= 3.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuv.x += face * faceSize;\n\t\t\t\t\t\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\t\t\t\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\t\t\t\t\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\t\t\t\t\t\tuv *= texelSize;\n\t\t\t\t\t\t\tvec3 tl = texture2D( environmentMap, uv ).rgb;\n\t\t\t\t\t\t\tuv.x += texelSize;\n\t\t\t\t\t\t\tvec3 tr = texture2D( environmentMap, uv ).rgb;\n\t\t\t\t\t\t\tuv.y += texelSize;\n\t\t\t\t\t\t\tvec3 br = texture2D( environmentMap, uv ).rgb;\n\t\t\t\t\t\t\tuv.x -= texelSize;\n\t\t\t\t\t\t\tvec3 bl = texture2D( environmentMap, uv ).rgb;\n\t\t\t\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\t\t\t\treturn mix( tm, bm, f.y );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#define r0 1.0\n\t\t\t\t\t\t#define v0 0.339\n\t\t\t\t\t\t#define m0 - 2.0\n\t\t\t\t\t\t#define r1 0.8\n\t\t\t\t\t\t#define v1 0.276\n\t\t\t\t\t\t#define m1 - 1.0\n\t\t\t\t\t\t#define r4 0.4\n\t\t\t\t\t\t#define v4 0.046\n\t\t\t\t\t\t#define m4 2.0\n\t\t\t\t\t\t#define r5 0.305\n\t\t\t\t\t\t#define v5 0.016\n\t\t\t\t\t\t#define m5 3.0\n\t\t\t\t\t\t#define r6 0.21\n\t\t\t\t\t\t#define v6 0.0038\n\t\t\t\t\t\t#define m6 4.0\n\t\t\t\t\t\tfloat roughnessToMip( float roughness ) {\n\t\t\t\t\t\t\tfloat mip = 0.0;\n\t\t\t\t\t\t\tif ( roughness >= r1 ) {\n\t\t\t\t\t\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t\t\t\t\t\t} else if ( roughness >= r4 ) {\n\t\t\t\t\t\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t\t\t\t\t\t} else if ( roughness >= r5 ) {\n\t\t\t\t\t\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t\t\t\t\t\t} else if ( roughness >= r6 ) {\n\t\t\t\t\t\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn mip;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvec4 textureCubeUV( sampler2D environmentMap, vec3 sampleDir, float roughness ) {\n\t\t\t\t\t\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\t\t\t\t\t\tfloat mipF = fract( mip );\n\t\t\t\t\t\t\tfloat mipInt = floor( mip );\n\t\t\t\t\t\t\tvec3 color0 = bilinearCubeUV( environmentMap, sampleDir, mipInt );\n\t\t\t\t\t\t\tif ( mipF == 0.0 ) {\n\t\t\t\t\t\t\t\treturn vec4( color0, 1.0 );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvec3 color1 = bilinearCubeUV( environmentMap, sampleDir, mipInt + 1.0 );\n\t\t\t\t\t\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#ifdef dynEnvMap\n\t\t\t\t\t\t// Converts an XY in cylindrical space to a face (z) with coordinates within that face (xy).\n\t\t\t\t\t\tvec3 xyzToUvFace(vec3 xyz, float pixelSize) {\n\t\t\t\t\t\t\t// Figure out which basis we're using.\n\t\t\t\t\t\t\tvec3 basis[3];\n\t\t\t\t\t\t\tfloat face;\n\t\t\t\t\t\t\tif (xyz.x * xyz.x >= xyz.y * xyz.y && xyz.x * xyz.x >= xyz.z * xyz.z) {\n\t\t\t\t\t\t\t\tif (xyz.x >= 0.0) {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(1, 0, 0);\n\t\t\t\t\t\t\t\t\tface = 0.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(0, -1, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(-1, 0, 0);\n\t\t\t\t\t\t\t\t\tface = 2.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyz.y * xyz.y >= xyz.x * xyz.x && xyz.y * xyz.y >= xyz.z * xyz.z) {\n\t\t\t\t\t\t\t\tif (xyz.y >= 0.0) {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(-1, 0, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(0, 1, 0);\n\t\t\t\t\t\t\t\t\tface = 1.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(1, 0, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(0, -1, 0);\n\t\t\t\t\t\t\t\t\tface = 3.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (xyz.z >= 0.0) {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(-1, 0, 0); basis[2] = vec3(0, 0, 1);\n\t\t\t\t\t\t\t\t\tface = 4.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(1, 0, 0); basis[2] = vec3(0, 0, -1);\n\t\t\t\t\t\t\t\t\tface = 5.0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Convert into the uv basis from the xyz basis.\n\t\t\t\t\t\t\tfloat z = basis[2].x * xyz.x + basis[2].y * xyz.y + basis[2].z * xyz.z;\n\t\t\t\t\t\t\tif (z < 0.0) {\n\t\t\t\t\t\t\t\tz = 1.0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvec2 uv = vec2(\n\t\t\t\t\t\t\t\t(basis[0].x * xyz.x + basis[0].y * xyz.y + basis[0].z * xyz.z) / z,\n\t\t\t\t\t\t\t\t(basis[1].x * xyz.x + basis[1].y * xyz.y + basis[1].z * xyz.z) / z);\n\n\t\t\t\t\t\t\t// Convert from -1 to +1, to 0 to 1.\n\t\t\t\t\t\t\tuv = 0.5 * (uv + vec2(1.0));\n\n\t\t\t\t\t\t\t// Convert to pixel-space.\n\t\t\t\t\t\t\tuv *= pixelSize;\n\n\t\t\t\t\t\t\t// Shrink to ignore 1 pixel borders.\n\t\t\t\t\t\t\tuv.x = (pixelSize - 2.0) / pixelSize * uv.x + 1.0;\n\t\t\t\t\t\t\tuv.y = (pixelSize - 2.0) / pixelSize * uv.y + 1.0;\n\n\t\t\t\t\t\t\t// Convert back to unit-space.\n\t\t\t\t\t\t\tuv /= pixelSize;\n\n\t\t\t\t\t\t\treturn vec3(uv, face);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Gets the dynamic environmental lighting given the outward direction.\n\t\t\t\t\t\tvec3 getEnvLight(vec3 direction, float roughness) {\n\t\t\t\t\t\t\t// Get the mip levels.\n\t\t\t\t\t\t\tfloat mipLevel = pow(roughness, 0.25) * (log2(dynEnvFaceSize) - 2.0);\n\t\t\t\t\t\t\tfloat mipLevel0 = floor(mipLevel);\n\t\t\t\t\t\t\tfloat mipLevel1 = floor(mipLevel) + 1.0;\n\t\t\t\t\t\t\tfloat mipLevelU = mipLevel - mipLevel0;\n\t\t\t\t\t\t\tfloat mipSizeX0 = pow(2.0, -mipLevel0);\n\t\t\t\t\t\t\tfloat mipOffsetY0 = 1.0 - pow(2.0, -mipLevel0);\n\t\t\t\t\t\t\tfloat mipSizeX1 = pow(2.0, -mipLevel1);\n\t\t\t\t\t\t\tfloat mipOffsetY1 = 1.0 - pow(2.0, -mipLevel1);\n\t\t\t\t\t\t\t// Get UV within a mip of cube faces.\n\t\t\t\t\t\t\tvec3 uvFace0 = xyzToUvFace(direction, dynEnvFaceSize * mipSizeX0);\n\t\t\t\t\t\t\tvec3 uvFace1 = xyzToUvFace(direction, dynEnvFaceSize * mipSizeX1);\n\t\t\t\t\t\t\tvec2 faceOffset = vec2(mod(uvFace0.z, 3.0) / 3.0, floor(uvFace0.z / 3.0) / 2.0);\n\t\t\t\t\t\t\tvec2 uvInMip0 = vec2(faceOffset.x + uvFace0.x / 3.0, faceOffset.y + uvFace0.y / 2.0);\n\t\t\t\t\t\t\tvec2 uvInMip1 = vec2(faceOffset.x + uvFace1.x / 3.0, faceOffset.y + uvFace1.y / 2.0);\n\t\t\t\t\t\t\t// Get the UVs within the textures.\n\t\t\t\t\t\t\tvec2 uv0 = vec2(uvInMip0.x * mipSizeX0 * 0.75, 0.5 * uvInMip0.y * mipSizeX0 + mipOffsetY0);\n\t\t\t\t\t\t\tvec2 uv1 = vec2(uvInMip1.x * mipSizeX1 * 0.75, 0.5 * uvInMip1.y * mipSizeX1 + mipOffsetY1);\n\t\t\t\t\t\t\tvec3 color0 = texture2D(dynEnvTexture, uv0).rgb;\n\t\t\t\t\t\t\tvec3 color1 = texture2D(dynEnvTexture, uv1).rgb;\n\t\t\t\t\t\t\treturn mix(color0, color1, mipLevelU) * environmentIntensity * ((PI - 1.0) * roughness + 1.0);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\tvec3 getLightProbeIndirectRadiance( GeometricContext geometry, float blinnShininessExponent, int maxMIPLevel ) {\n\t\t\t\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t\t\t\t\t#if defined( envMap )\n\t\t\t\t\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\t\t\t\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t\t\t\t\t\tvec3 queryReflectVec = vec3( reflectVec.x, reflectVec.yz );\n\t\t\t\t\t\t\t#ifdef envIsCube\n\t\t\t\t\t\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\t\t\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envTexture, queryReflectVec, specularMIPLevel );\n\t\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t\tvec4 envMapColor = textureCube( envTexture, queryReflectVec, specularMIPLevel );\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#elif defined( envIsCubeUV )\n\t\t\t\t\t\t\t\tvec4 envMapColor = textureCubeUV( envTexture, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tvec2 sampleUV;\n\t\t\t\t\t\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\t\t\t\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t\t\t\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\t\t\t\t\t\tvec4 envMapColor = texture2DLodEXT( envTexture, sampleUV, specularMIPLevel );\n\t\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t\tvec4 envMapColor = texture2D( envTexture, sampleUV, specularMIPLevel );\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\treturn envMapColor.rgb * environmentIntensity;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn vec3(0, 0, 0);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t}\n\n\t\t\t\t\t// Given the directLight, accumulates onto the reflectedLight the irradiance as the BRDF function.\n\t\t\t\t\tvoid RE_Direct_Physical( IncidentLight directLight, GeometricContext geometry, PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\t\t\t\t\tvec3 irradiance = getIncomingLight( directLight, geometry );\n\t\t\t\t\t\tirradiance *= PI;\n\t\t\t\t\t\tfloat clearCoatDHR = 0.0;\n\t\t\t\t\t\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\t\t\t\t\t\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid RE_IndirectDiffuse_Physical( vec3 irradiance, GeometricContext geometry, PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\t\t\t\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t\t\t\t\t}\n\n\t\t\t\t\tvoid RE_IndirectSpecular_Physical( vec3 radiance, vec3 irradiance, vec3 clearCoatRadiance, GeometricContext geometry, PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t\t\t\t\t\tfloat clearCoatDHR = 0.0;\n\t\t\t\t\t\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t\t\t\t\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t\t\t\t\t}\n\n\t\t\t\t\t#define RE_Direct RE_Direct_Physical\n\t\t\t\t\t#define Material_BlinnShininessExponent( material ) GGXRoughnessToBlinnExponent( material.specularRoughness )\n\t\t\t\t\t#define RE_IndirectDiffuse RE_IndirectDiffuse_Physical\n\t\t\t\t\t#define RE_IndirectSpecular RE_IndirectSpecular_Physical\n\n\t\t\t\t\tvoid main(void) {\n\t\t\t\t\t\tvec4 diffuseColor = vec4( color, 1.0 );\n\t\t\t\t\t\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t\t\t\t\t\t#ifdef colorMap\n\t\t\t\t\t\t\tvec4 texelColor = texture2D(colorTexture, localUV);\n\t\t\t\t\t\t\tdiffuseColor *= texelColor;\n\t\t\t\t\t\t\topacity = texelColor.a;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// PBR variables\n\t\t\t\t\t\tfloat roughnessFactor;\n\t\t\t\t\t\tfloat metalnessFactor;\n\n\t\t\t\t\t\troughnessFactor = roughness;\n\t\t\t\t\t\t#ifdef roughnessMap\n\t\t\t\t\t\t\troughnessFactor *= texture2D( roughnessTexture, localUV ).g;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tmetalnessFactor = metalness;\n\t\t\t\t\t\t#ifdef metalnessMap\n\t\t\t\t\t\t\tmetalnessFactor *= texture2D( metalnessTexture, localUV ).b;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\tPhysicalMaterial material;\n\t\t\t\t\t\tmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\t\t\t\t\t\tmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n\t\t\t\t\t\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n\n\t\t\t\t\t\tGeometricContext geometry;\n\t\t\t\t\t\tgeometry.viewDir = -normalize(cameraSpacePosition);\n\t\t\t\t\t\t#ifdef normalMap\n\t\t\t\t\t\t\tgeometry.normal = normalize((modelMatrix * vec4(getNormalFromMap(), 0.)).xyz);\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tgeometry.normal = modelNormal;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Env Light\n\t\t\t\t\t\tvec3 irradiance = ambientLightColor;\n\t\t\t\t\t\t#ifdef dynEnvMap\n\t\t\t\t\t\t\tirradiance += getEnvLight(geometry.normal, 1.0);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\tvec3 radiance = ambientLightColor / 2.0;\n\t\t\t\t\t\t#ifdef dynEnvMap\n\t\t\t\t\t\t\tradiance += getEnvLight(reflect(-geometry.viewDir, geometry.normal), material.specularRoughness);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Add emissivity.\n\t\t\t\t\t\tvec3 totalEmissiveRadiance = emissiveColor;\n\t\t\t\t\t\t#ifdef emissiveMap\n\t\t\t\t\t\t\ttotalEmissiveRadiance *= texture2D(emissiveTexture, localUV).rgb;\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// Add direct radiance.\n\t\t\t\t\t\tvec3 totalDirectIrradiance = ambientLightColor / 2.0;\n\t\t\t\t\t\t#ifdef dynEnvMap\n\t\t\t\t\t\t\ttotalDirectIrradiance += getEnvLight(reflect(-geometry.viewDir, geometry.normal), material.specularRoughness);\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// For each light,\n\t\t\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\t\t\tif (i >= numLights) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tIncidentLight directLight;\n\t\t\t\t\t\t\tdirectLight.color = lightColors[i];\n\t\t\t\t\t\t\tdirectLight.direction = -normalize(cameraSpacePosition - lightPositions[i]);\n\t\t\t\t\t\t\t#ifdef shadowEntities\n\t\t\t\t\t\t\t\tdirectLight.color = getLightColorFromShadowEntities(directLight.color, directLight.direction, lightPositions[i], lightRadii[i], geometry.normal);\n\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\tRE_Direct(directLight, geometry, material, reflectedLight);\n\n\t\t\t\t\t\t\tradiance += getLightProbeIndirectRadiance(geometry, Material_BlinnShininessExponent(material), maxMipLevel);\n\t\t\t\t\t\t\tRE_IndirectDiffuse(irradiance, geometry, material, reflectedLight);\n\t\t\t\t\t\t\tRE_IndirectSpecular(radiance, irradiance, vec3(0.0), geometry, material, reflectedLight);\n\n\t\t\t\t\t\t\t// Modify env light by total incoming light.\n\t\t\t\t\t\t\ttotalDirectIrradiance += getIncomingLight(directLight, geometry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multiply in the direct irradiance.\n\t\t\t\t\t\treflectedLight.indirectSpecular *= totalDirectIrradiance;\n\n\t\t\t\t\t\t// If there's ambience, remove the direct light components.\n\t\t\t\t\t\treflectedLight.directDiffuse *= vec3(1, 1, 1) - ambientLightColor;\n\t\t\t\t\t\treflectedLight.directSpecular *= vec3(1, 1, 1) - ambientLightColor;\n\n\t\t\t\t\t\t// Add the reflected light to the outgoing light.\n\t\t\t\t\t\tvec3 outgoingLight = totalEmissiveRadiance + reflectedLight.directDiffuse + reflectedLight.directSpecular + reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;\n\n\t\t\t\t\t\t// Set the frag color based on the total outgoing light.\n\t\t\t\t\t\tgl_FragColor = vec4( outgoingLight, opacity );\n\n\t\t\t\t\t\t// Gamma correction\n\t\t\t\t\t\tgl_FragColor = vec4( pow( abs(gl_FragColor.rgb), vec3( 1.0 / gammaCorrectionFactor ) ), gl_FragColor.a );\n\n\t\t\t\t\t\t// Convert to sRGB.\n\t\t\t\t\t\tgl_FragColor = LinearTosRGB(gl_FragColor);\n\n\t\t\t\t\t\t// Multiply the alphaMultiplier.\n\t\t\t\t\t\tgl_FragColor.a *= alphaMultiplier;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t\t\t}`,
              }));
            const t = MaterialUtilsStandard._material.clone();
            for (
              let e = 0;
              e < t.uniforms.shadowEntityPositions.value.length;
              e++
            )
              t.uniforms.shadowEntityPositions.value[e] =
                MaterialUtilsStandard._material.uniforms.shadowEntityPositions.value[
                  e
                ].clone();
            for (
              let e = 0;
              e < t.uniforms.shadowEntitySunsetColors.value.length;
              e++
            )
              t.uniforms.shadowEntitySunsetColors.value[e] =
                MaterialUtilsStandard._material.uniforms.shadowEntitySunsetColors.value[
                  e
                ].clone();
            return (
              i.ThreeJsHelper.setupLogDepthBuffering(t),
              i.Capabilities.hasGLExtension("EXT_shader_texture_lod") &&
              (t.extensions.shaderTextureLOD = !0),
              (t.extensions.derivatives = !0),
              (t.needsUpdate = !0),
              t
            );
          }
        }
        MaterialUtilsStandard._material = null;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MaterialUtils: function () {
              return MaterialUtils;
            },
          });
        var i = s(6);
        class MaterialUtils {
          static setLightSourceUniforms(t, e, s) {
            const n = e.getScene(),
              o = i.Color.pool.get();
            let r = 0;
            for (
              let i = 0, a = n.getNumLightSources();
              i < Math.min(a, 5);
              i++
            ) {
              const a = n.getLightSource(i);
              if (null !== a && a !== e.getComponentByType("lightSource")) {
                const e = a.getEntity().getCameraSpacePosition(s),
                  i = 1;
                o.mult(a.getColor(), i);
                const n =
                  null === a.getEntity().getComponentByType("camera")
                    ? a.getEntity().getOcclusionRadius()
                    : Number.NaN;
                for (let s = 0, i = t.length; s < i; s++)
                  void 0 !== t[s].uniforms.lightPositions &&
                    (t[s].uniforms.lightPositions.value[r].set(e.x, e.y, e.z),
                      t[s].uniforms.lightColors.value[r].set(o.r, o.g, o.b),
                      (t[s].uniforms.lightRadii.value[r] = n));
                r += 1;
              }
            }
            for (let e = 0, s = t.length; e < s; e++)
              void 0 !== t[e].uniforms.numLights &&
                (t[e].uniforms.numLights.value = r);
            i.Color.pool.release(o);
          }
          static setUniforms(t, e, s, n, o, r) {
            const a = s.getScene().getEngine().getTime(),
              l = s.getScene().getAmbientLightColor();
            MaterialUtils.setLightSourceUniforms(t, s, e);
            for (let c = 0, h = t.length; c < h; c++) {
              const h = t[c],
                u = h.uniforms;
              if (h instanceof i.THREE.RawShaderMaterial)
                void 0 !== u.time &&
                  (u.time.value = i.MathUtils.wrap(a, 0, 3600));
              else {
                const o = s.getCameraSpacePosition(e);
                if (
                  (u.entityPos.value.set(o.x, o.y, o.z),
                    u.ambientLightColor.value.setRGB(l.r, l.g, l.b),
                    void 0 !== n && n.length > 0)
                ) {
                  let t = 0;
                  for (let s = 0; s < n.length; s++) {
                    const i = n[s].get();
                    if (null !== i) {
                      const s = i.getCameraSpacePosition(e);
                      u.shadowEntityPositions.value[t].set(s.x, s.y, s.z),
                        (u.shadowEntityRadii.value[t] = i.getOcclusionRadius());
                      const n = i.get("atmosphere");
                      if (null !== n) {
                        const e = n.getSunsetColor();
                        u.shadowEntitySunsetColors.value[t].set(e.r, e.g, e.b),
                          (u.shadowEntitySunsetIntensity.value[t] =
                            n.getSunsetIntensity());
                      } else u.shadowEntitySunsetIntensity.value[t] = 0;
                      t += 1;
                    } else
                      (u.shadowEntityRadii.value[t] = 0),
                        (u.shadowEntitySunsetIntensity.value[t] = 0);
                  }
                  u.numShadowEntities.value = t;
                }
                if (t[c].defines.shadowRings) {
                  const t = s.get("rings");
                  if (null !== t) {
                    const e = i.Vector3.pool.get();
                    s.getOrientation().getAxis(e, 2),
                      (u.shadowRingsInnerRadius.value = t.getInnerRadius()),
                      (u.shadowRingsOuterRadius.value = t.getOuterRadius()),
                      (u.shadowRingsTexture.value = t.getTopTexture()),
                      u.shadowRingsNormal.value.set(e.x, e.y, e.z),
                      i.Vector3.pool.release(e);
                  }
                }
              }
              if (
                null === o ||
                "loaded" !== o.getLoadState() ||
                o.isExcludedFromCamera(e) ||
                void 0 === u.atmospherePosition
              )
                !0 === h.defines.atmosphere &&
                  (delete h.defines.atmosphere, (h.needsUpdate = !0));
              else {
                const t = o.getSpheroid(),
                  s = o.getEntity().getCameraSpacePosition(e),
                  i = o.getEntity().getOrientation(),
                  n = o.getColor(),
                  a = o.getSunsetColor();
                u.atmospherePosition.value.set(s.x, s.y, s.z),
                  u.atmosphereOrientation.value.set(i.x, i.y, i.z, i.w),
                  null !== t
                    ? ((u.atmosphereEquatorialRadius.value =
                      t.getEquatorialRadius()),
                      (u.atmospherePolarRadius.value = t.getPolarRadius()))
                    : ((u.atmosphereEquatorialRadius.value = 0),
                      (u.atmospherePolarRadius.value = 0)),
                  (u.atmosphereDensity.value = o.getDensity()),
                  (u.atmosphereScaleHeight.value = o.getScaleHeight()),
                  (u.atmosphereEmissivity.value = o.getEmissivity()),
                  u.atmosphereColor.value.set(n.r, n.g, n.b),
                  u.atmosphereSunsetColor.value.set(a.r, a.g, a.b),
                  (u.atmosphereSunsetIntensity.value = o.getSunsetIntensity()),
                  (u.atmosphereGroundIsSpheroid.value = r ? 1 : 0),
                  void 0 === h.defines.atmosphere &&
                  ((h.defines.atmosphere = !0), (h.needsUpdate = !0));
              }
            }
          }
        }
        (MaterialUtils.get = i.MaterialUtilsPhong.get),
          (MaterialUtils.getPBR = i.MaterialUtilsStandard.get);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ShaderFix: function () {
              return ShaderFix;
            },
          });
        var i = s(7),
          n = s(6);
        class ShaderFix {
          static fix(t) {
            const e = n.Capabilities.isWebGL2(),
              s = n.Capabilities.hasFragDepth();
            let o = "",
              r = "";
            e
              ? ((o +=
                "\n\t\t\t\t#define attribute in\n\t\t\t\t#define varying out\n\t\t\t\t#define texture2D texture\n\t\t\t\tprecision highp float;\n\t\t\t\tprecision highp int;\n\t\t\t\t#define L_EXT_frag_depth true\n\t\t\t\t"),
                (r +=
                  "\n\t\t\t\t#define varying in\n\t\t\t\tout highp vec4 pc_fragColor;\n\t\t\t\t#define gl_FragColor pc_fragColor\n\t\t\t\t#define gl_FragDepthEXT gl_FragDepth\n\t\t\t\t#define texture2D texture\n\t\t\t\t#define textureCube texture\n\t\t\t\t#define texture2DProj textureProj\n\t\t\t\t#define texture2DLodEXT textureLod\n\t\t\t\t#define texture2DProjLodEXT textureProjLod\n\t\t\t\t#define textureCubeLodEXT textureLod\n\t\t\t\t#define texture2DGradEXT textureGrad\n\t\t\t\t#define texture2DProjGradEXT textureProjGrad\n\t\t\t\t#define textureCubeGradEXT textureGrad\n\t\t\t\t#define L_EXT_frag_depth true\n\t\t\t\tprecision highp float;\n\t\t\t\tprecision highp int;\n\t\t\t\t"),
                (t.glslVersion = i.GLSL3))
              : (s &&
                ((o +=
                  "\n\t\t\t\t\t#extension GL_EXT_frag_depth : enable\n\t\t\t\t\t#define L_EXT_frag_depth true\n\t\t\t\t\t"),
                  (r +=
                    "\n\t\t\t\t\t#extension GL_EXT_frag_depth : enable\n\t\t\t\t\t#define L_EXT_frag_depth true\n\t\t\t\t\t")),
                (o +=
                  "\n\t\t\t\tprecision highp float;\n\t\t\t\tprecision highp int;\n\t\t\t\t"),
                (r +=
                  "\n\t\t\t\tprecision highp float;\n\t\t\t\tprecision highp int;\n\t\t\t\t"),
                (t.glslVersion = i.GLSL1)),
              (t.vertexShader = o + t.vertexShader),
              (t.fragmentShader = r + t.fragmentShader);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpriteParticles: function () {
              return SpriteParticles;
            },
          });
        var i = s(6);
        class SpriteParticles {
          constructor(t) {
            (this._component = t),
              (this._relativeToEntityOrientation = !0),
              (this._offsetArray = new Float32Array(0)),
              (this._colorArray = new Float32Array(0)),
              (this._scaleArray = new Float32Array(0)),
              (this._threeJsGeometry = null),
              (this._threeJsMaterial = null),
              (this._threeJsObject = null),
              (this._threeJsGeometry = new i.THREE.InstancedBufferGeometry()),
              this._threeJsGeometry.setAttribute(
                "position",
                new i.THREE.BufferAttribute(
                  new Float32Array([
                    -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1,
                  ]),
                  3,
                ),
              ),
              this._threeJsGeometry.setIndex(
                new i.THREE.BufferAttribute(
                  new Uint16Array([0, 1, 2, 2, 3, 0]),
                  1,
                ),
              ),
              this._threeJsGeometry.setAttribute(
                "offset",
                new i.THREE.InstancedBufferAttribute(this._offsetArray, 3),
              ),
              this._threeJsGeometry.setAttribute(
                "color",
                new i.THREE.InstancedBufferAttribute(this._colorArray, 4),
              ),
              this._threeJsGeometry.setAttribute(
                "scale",
                new i.THREE.InstancedBufferAttribute(this._scaleArray, 1),
              ),
              (this._threeJsMaterial = this._component
                .getEntity()
                .getScene()
                .getEngine()
                .getMaterialManager()
                .getPreloaded("sprite_particles")),
              (this._threeJsObject =
                i.ThreeJsHelper.createMeshObjectGivenGeometry(
                  t,
                  this._threeJsMaterial,
                  this._threeJsGeometry,
                ));
          }
          getThreeJsObject() {
            return this._threeJsObject;
          }
          getThreeJsMaterial() {
            return this._threeJsMaterial;
          }
          setParticleOffsets(t) {
            this._setAttribute("offset", t, 3);
          }
          setParticleColors(t) {
            this._setAttribute("color", t, 4);
          }
          setParticleScales(t) {
            this._setAttribute("scale", t, 1);
          }
          getRelativeToEntityOrientation() {
            return this._relativeToEntityOrientation;
          }
          setRelativeToEntityOrientation(t) {
            this._relativeToEntityOrientation = t;
          }
          prepareForRender(t) {
            i.ThreeJsHelper.setPositionToEntity(
              this._threeJsObject,
              this._component.getEntity(),
              t,
            ),
              this._relativeToEntityOrientation &&
              i.ThreeJsHelper.setOrientationToEntity(
                this._threeJsObject,
                this._component.getEntity(),
              );
          }
          _setAttribute(t, e, s) {
            let n = this._threeJsGeometry.getAttribute(t);
            n instanceof i.THREE.InstancedBufferAttribute &&
              n.count !== e.length / s &&
              ((this._offsetArray = new Float32Array((e.length / s) * 3)),
                (this._colorArray = new Float32Array((e.length / s) * 4)),
                (this._scaleArray = new Float32Array((e.length / s) * 1)),
                (this._threeJsGeometry.instanceCount = e.length / s),
                this._threeJsGeometry.setAttribute(
                  "offset",
                  new i.THREE.InstancedBufferAttribute(this._offsetArray, 3),
                ),
                this._threeJsGeometry.setAttribute(
                  "color",
                  new i.THREE.InstancedBufferAttribute(this._colorArray, 4),
                ),
                this._threeJsGeometry.setAttribute(
                  "scale",
                  new i.THREE.InstancedBufferAttribute(this._scaleArray, 1),
                )),
              (n = this._threeJsGeometry.getAttribute(t)),
              n instanceof i.THREE.InstancedBufferAttribute &&
              (n.copyArray(e), (n.needsUpdate = !0));
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TextureLOD: function () {
              return TextureLOD;
            },
          });
        s(6);
        class TextureLOD {
          constructor(t) {
            (this._engine = t.getEntity().getScene().getEngine()),
              (this._component = t),
              (this._uniform = null),
              (this._url = ""),
              (this._sizes = []),
              (this._currentSize = 0),
              (this._forcedSize = void 0),
              (this._useCompressed = !1),
              (this._loadedPromise = Promise.resolve()),
              (this._loading = !1);
          }
          getUrl() {
            return this._url;
          }
          setUrl(t) {
            (this._url = t), (this._currentSize = 0);
          }
          getUniform() {
            return this._uniform;
          }
          setUniform(t) {
            (this._uniform = t), (this._currentSize = 0);
          }
          getSizes() {
            return this._sizes.slice();
          }
          setSizes(t) {
            (this._sizes = t.slice()), (this._currentSize = 0);
          }
          getCurrentSize() {
            return this._currentSize;
          }
          getForcedSize() {
            return this._forcedSize;
          }
          setForcedSize(t) {
            this._forcedSize = t;
          }
          getUseCompression() {
            return this._useCompression;
          }
          setUseCompression(t) {
            (this._useCompression = t), (this._currentSize = 0);
          }
          getLoadedPromise() {
            return this._loadedPromise;
          }
          update() {
            if (this._loading || null === this._uniform) return;
            if (
              "" === this._url ||
              0 === this._sizes.length ||
              ("unloaded" === this._component.getLoadState() &&
                void 0 === this._forcedSize)
            )
              return void (
                null !== this._uniform.value &&
                (this._uniform.value.dispose(),
                  (this._uniform.value = null),
                  (this._currentSize = 0))
              );
            let t = this._sizes[0];
            t =
              void 0 !== this._forcedSize
                ? this._forcedSize
                : this._component
                  .getEntity()
                  .getGreatestPixelSpaceExtentsRadius();
            let e = 0;
            for (let s = 0, i = this._sizes.length; s < i; s++) {
              const n = this._sizes[s];
              s === i - 1 && (e = s);
              const o = this._engine.getConfig().getValue("maxTextureSize");
              if (
                n >= t ||
                ("number" == typeof o && n >= o && void 0 === this._forcedSize)
              ) {
                e = s;
                break;
              }
            }
            this._currentSize !== this._sizes[e] &&
              ((this._currentSize = this._sizes[e]),
                this._loadTexture(this._currentSize));
          }
          _loadTexture(t) {
            const e = this._url.replace("$SIZE", t.toString());
            this._loading = !0;
            const s = this._useCompression
              ? this._engine.getTextureLoaderCompressed()
              : this._engine.getTextureLoader();
            this._loadedPromise = s
              .loadIntoUniform(this._uniform, e, !0)
              .then(() => {
                this._loading = !1;
              })
              .catch((t) => {
                throw Error(t);
              });
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ThreeJsHelper: function () {
              return ThreeJsHelper;
            },
          });
        var i = s(6);
        class ThreeJsHelper {
          static createGeometry(t, e) {
            const s = new i.THREE.BufferGeometry();
            if (e) {
              let e = 0;
              for (let s = 0; s < t.length; s++) e += t[s].dimensions;
              const n = new i.THREE.InterleavedBuffer(new Float32Array(0), e);
              let o = 0;
              for (let e = 0; e < t.length; e++)
                s.setAttribute(
                  t[e].name,
                  new i.THREE.InterleavedBufferAttribute(n, t[e].dimensions, o),
                ),
                  (o += t[e].dimensions);
            } else
              for (let e = 0; e < t.length; e++)
                s.setAttribute(
                  t[e].name,
                  new i.THREE.BufferAttribute(
                    new Float32Array(0),
                    t[e].dimensions,
                  ),
                );
            return (
              s.setIndex(new i.THREE.BufferAttribute(new Uint16Array(0), 1)), s
            );
          }
          static setupObject(t, e) {
            (e.name = t + "." + Math.floor(1e4 * Math.random())),
              (e.matrixAutoUpdate = !1),
              (e.frustumCulled = !1),
              (e.visible = !1),
              t.getEntity().getScene().getThreeJsScene().add(e);
          }
          static createMeshObjectGivenGeometry(t, e, s) {
            const n = new i.THREE.Mesh(s, e);
            return this.setupObject(t, n), n;
          }
          static createMeshObject(t, e, s, i) {
            const n = this.createGeometry(s, i);
            return this.createMeshObjectGivenGeometry(t, e, n);
          }
          static destroyGeometry(t) {
            t.dispose();
          }
          static destroyObject(t) {
            for (; t.children.length > 0;)
              this.destroyObject(t.children[t.children.length - 1]);
            null !== t.parent && t.parent.remove(t),
              t instanceof i.THREE.Mesh && this.destroyGeometry(t.geometry);
          }
          static destroyMaterial(t) {
            const e = t.uniforms;
            for (const t in e)
              Object.prototype.hasOwnProperty.call(e, t) &&
                null !== e[t].value &&
                void 0 !== e[t].value.dispose &&
                e[t].value.dispose();
            t.dispose();
          }
          static destroyAllObjectsAndMaterials(t) {
            const e = t.getThreeJsObjects(),
              s = t.getThreeJsMaterials();
            for (let t = 0; t < e.length; t++) this.destroyObject(e[t]);
            for (let t = 0; t < s.length; t++) this.destroyMaterial(s[t]);
          }
          static setPosition(t, e) {
            if (t)
              if (Array.isArray(t))
                for (let s = 0, i = t.length; s < i; s++)
                  t[s].position.set(e.x, e.y, e.z);
              else t.position.set(e.x, e.y, e.z);
          }
          static setPositionToEntity(t, e, s, n, o) {
            if (!t) return;
            const r = e.getCameraSpacePosition(s);
            if ((this._tempThreeJsVector3.set(r.x, r.y, r.z), n)) {
              const t = i.Vector3.pool.get();
              o ? t.rotate(e.getOrientation(), n) : t.copy(n),
                (this._tempThreeJsVector3.x += t.x),
                (this._tempThreeJsVector3.y += t.y),
                (this._tempThreeJsVector3.z += t.z),
                i.Vector3.pool.release(t);
            }
            if (Array.isArray(t))
              for (let e = 0, s = t.length; e < s; e++)
                t[e].position.copy(this._tempThreeJsVector3);
            else t.position.copy(this._tempThreeJsVector3);
          }
          static setScale(t, e) {
            if (t)
              if (Array.isArray(t))
                for (let s = 0, i = t.length; s < i; s++)
                  "number" == typeof e
                    ? t[s].scale.set(e, e, e)
                    : t[s].scale.set(e.x, e.y, e.z);
              else
                "number" == typeof e
                  ? t.scale.set(e, e, e)
                  : t.scale.set(e.x, e.y, e.z);
          }
          static setOrientation(t, e) {
            if (t)
              if (
                (i.BaseComponent._tempThreeJsQuaternion.set(e.x, e.y, e.z, e.w),
                  Array.isArray(t))
              )
                for (let e = 0, s = t.length; e < s; e++)
                  t[e].setRotationFromQuaternion(
                    i.BaseComponent._tempThreeJsQuaternion,
                  );
              else
                t.setRotationFromQuaternion(
                  i.BaseComponent._tempThreeJsQuaternion,
                );
          }
          static setOrientationToBillboard(t, e, s) {
            if (!t) return;
            const n = i.Quaternion.pool.get(),
              o = i.Vector3.pool.get(),
              r = i.Vector3.pool.get();
            if (
              (o.normalize(e.getCameraSpacePosition(s)),
                s.getEntity().getOrientation().getAxis(r, 0),
                r.setNormalTo(o, r),
                n.setFromAxes(r, void 0, o),
                i.BaseComponent._tempThreeJsQuaternion.set(n.x, n.y, n.z, n.w),
                Array.isArray(t))
            )
              for (let e = 0, s = t.length; e < s; e++)
                t[e].setRotationFromQuaternion(
                  i.BaseComponent._tempThreeJsQuaternion,
                );
            else
              t.setRotationFromQuaternion(
                i.BaseComponent._tempThreeJsQuaternion,
              );
            i.Quaternion.pool.release(n),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(r);
          }
          static setOrientationToEntity(t, e, s) {
            if (!t) return;
            const n = e.getOrientation();
            if (void 0 === s)
              i.BaseComponent._tempThreeJsQuaternion.set(n.x, n.y, n.z, n.w);
            else {
              const t = i.Quaternion.pool.get();
              t.mult(n, s),
                i.BaseComponent._tempThreeJsQuaternion.set(t.x, t.y, t.z, t.w),
                i.Quaternion.pool.release(t);
            }
            if (Array.isArray(t))
              for (let e = 0, s = t.length; e < s; e++)
                t[e].setRotationFromQuaternion(
                  i.BaseComponent._tempThreeJsQuaternion,
                );
            else
              t.setRotationFromQuaternion(
                i.BaseComponent._tempThreeJsQuaternion,
              );
          }
          static useInDynEnvMap(t, e) {
            e ? t.layers.enable(1) : t.layers.disable(1);
          }
          static setVertices(t, e, s) {
            const n = t.getAttribute(e);
            n instanceof i.THREE.BufferAttribute &&
              (n.array.length === s.length
                ? (n.copyArray(s), (n.needsUpdate = !0))
                : t.setAttribute(
                  e,
                  new i.THREE.BufferAttribute(s, t.getAttribute(e).itemSize),
                ));
          }
          static setIndices(t, e) {
            const s = t.getIndex();
            s.array.length === e.length
              ? (s.copyArray(e), (s.needsUpdate = !0))
              : t.setIndex(new i.THREE.BufferAttribute(e, 1));
          }
          static computeTangents(t) {
            t.computeTangents();
          }
          static setRenderOrder(t, e) {
            t && (t.renderOrder = e);
          }
          static setupLogDepthBuffering(t) {
            i.Capabilities.hasFragDepth()
              ? ((t.defines.L_EXT_frag_depth = !0),
                (t.extensions.fragDepth = !0))
              : delete t.defines.L_EXT_frag_depth,
              (t.needsUpdate = !0);
          }
          static loadTexture(t, e, s, i) {
            const n = t.getEntity().getScene().getEngine();
            return (
              i ? n.getTextureLoaderCompressed() : n.getTextureLoader()
            ).loadTexture(e, s);
          }
          static loadTextureFromCanvas(t) {
            const e = new i.THREE.CanvasTexture(t);
            return (
              (e.magFilter = i.THREE.NearestFilter),
              (e.minFilter = i.THREE.NearestFilter),
              (e.flipY = !1),
              (e.needsUpdate = !0),
              e
            );
          }
          static async loadTextureIntoUniform(t, e, s, i, n, o) {
            if (!e) return;
            const r = t.getEntity().getScene().getEngine(),
              a = o ? r.getTextureLoaderCompressed() : r.getTextureLoader(),
              l = await a.loadTexture(i, n);
            if (t.getThreeJsMaterials().includes(e)) {
              const i = e.uniforms[s];
              if (void 0 === i)
                throw new Error(
                  `Material in ${t} doesn't have uniform name '${s}'.`,
                );
              null !== i.value && i.value.dispose(), (i.value = l);
            } else l.dispose();
          }
          static setOverlay(t, e) {
            t &&
              (t.depthFunc = e ? i.THREE.AlwaysDepth : i.THREE.LessEqualDepth);
          }
          static setTransparent(t, e) {
            t && ((t.transparent = e), (t.depthWrite = !e));
          }
          static setBlending(t, e) {
            if (t) {
              switch (e) {
                case "normal":
                  t.blending = i.THREE.NormalBlending;
                  break;
                case "additive":
                  t.blending = i.THREE.AdditiveBlending;
                  break;
                case "subtractive":
                  t.blending = i.THREE.SubtractiveBlending;
                  break;
                case "multiply":
                  t.blending = i.THREE.MultiplyBlending;
                  break;
                case "custom":
                  t.blending = i.THREE.CustomBlending;
                  break;
                default:
                  t.blending = i.THREE.NoBlending;
              }
              t.needsUpdate = !0;
            }
          }
          static setDefine(t, e, s) {
            s && !t.defines[e]
              ? ((t.defines[e] = !0), (t.needsUpdate = !0))
              : s ||
              !0 !== t.defines[e] ||
              (delete t.defines[e], (t.needsUpdate = !0));
          }
          static setUniformNumber(t, e, s) {
            t && (t.uniforms[e].value = s);
          }
          static setUniformVector2(t, e, s) {
            t && t.uniforms[e].value.set(s.x, s.y);
          }
          static setUniformVector3(t, e, s) {
            t && t.uniforms[e].value.set(s.x, s.y, s.z);
          }
          static setUniformColorRGB(t, e, s) {
            t && t.uniforms[e].value.set(s.r, s.g, s.b);
          }
          static setUniformColorRGBA(t, e, s, i = 1) {
            t && t.uniforms[e].value.set(s.r, s.g, s.b, s.a * i);
          }
          static setUniformQuaternion(t, e, s) {
            t && t.uniforms[e].value.set(s.x, s.y, s.z, s.w);
          }
          static setUniformTexture(t, e, s) {
            t &&
              (null !== t.uniforms[e].value && t.uniforms[e].value.dispose(),
                (t.uniforms[e].value = s));
          }
        }
        ThreeJsHelper._tempThreeJsVector3 = new i.THREE.Vector3();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Capabilities: function () {
              return Capabilities;
            },
          });
        class Capabilities {
          static isWebGL2() {
            return (
              "undefined" != typeof WebGL2RenderingContext &&
              n instanceof WebGL2RenderingContext
            );
          }
          static hasFragDepth() {
            return this.isWebGL2() || this.hasGLExtension("EXT_frag_depth");
          }
          static hasGLExtension(t) {
            if (null === n) return !1;
            let e = i.get(t);
            return (
              void 0 === e && ((e = null !== n.getExtension(t)), i.set(t, e)), e
            );
          }
          static __getCompressedTextureExtension() {
            return o;
          }
          static __setContext(t) {
            (n = t),
              r.forEach((t, e) => {
                (!0 !== this.hasGLExtension("WEBGL_compressed_texture_" + e) &&
                  !0 !==
                  this.hasGLExtension(
                    "WEBKIT_WEBGL_compressed_texture_" + e,
                  )) ||
                  ("" === o && (o = t));
              });
          }
        }
        const i = new Map();
        let n = null,
          o = "";
        const r = new Map([
          ["astc", "astc"],
          ["s3tc", "dxt"],
          ["pvrtc", "pvrtc"],
          ["etc", "etc2"],
          ["etc1", "etc1"],
        ]);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Config: function () {
              return Config;
            },
          });
        class Config {
          constructor() {
            (this._valueMap = new Map()),
              (this._callbacksMap = new Map()),
              this.setValue("maxTextureSize", 512),
              this.setValue("useTextureCompression", !0),
              this.setValue("fontFamily", "Arial"),
              this.setValue("fontSize", 16),
              this.setValue("gammaCorrection", 1);
          }
          getValue(t) {
            return this._valueMap.get(t);
          }
          setValue(t, e) {
            if (this._valueMap.get(t) !== e) {
              this._valueMap.set(t, e);
              const s = this._callbacksMap.get(t);
              if (s) for (let i = 0; i < s.length; i++) s[i](t, e);
            }
          }
          addEventListener(t, e) {
            let s = this._callbacksMap.get(t);
            void 0 === s && ((s = []), this._callbacksMap.set(t, s)), s.push(e);
          }
          removeEventListener(t, e) {
            const s = this._callbacksMap.get(t);
            if (s)
              for (let t = 0; t < s.length; t++)
                if (s[t] === e) {
                  s.splice(t, 1);
                  break;
                }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Download: function () {
              return Download;
            },
            Downloader: function () {
              return Downloader;
            },
          });
        var i = s(6);
        class Download {
          constructor(t, e, s) {
            (this.url = t),
              (this.actualUrl = e),
              (this.progress = 0),
              (this.totalBytes = 0),
              (this.content = void 0),
              (this.binary = s),
              (this.status = "downloading"),
              (this.errorMessage = "");
          }
        }
        class DownloadData {
          constructor(t, e, s) {
            (this.download = new Download(t, e, s)),
              (this.promise = null),
              (this.resolve = null),
              (this.progressCallbacks = []),
              (this.request = null);
          }
        }
        class Downloader {
          constructor() {
            (this._replacements = new Map()),
              (this._currentDownloads = new Map()),
              (this._downloadQueue = []),
              (this._maxCurrentDownloads = 20);
          }
          getReplacement(t) {
            return this._replacements.get(t);
          }
          setReplacement(t, e) {
            this._replacements.set(t, e);
          }
          cancel(t) {
            const e = this.processUrl(t);
            if (this._currentDownloads.has(e)) {
              const t = this._currentDownloads.get(e);
              void 0 !== t && null !== t.request && t.request.abort();
            } else {
              const t = this._downloadQueue.findIndex(
                ([t, s]) => s.download.actualUrl === e,
              );
              if (-1 !== t) {
                const e = this._downloadQueue[t][1];
                (e.download.content = void 0),
                  (e.download.status = "cancelled"),
                  this._downloadQueue.splice(t, 1),
                  e.resolve(e.download);
              }
            }
          }
          processUrl(t) {
            let e = t;
            for (const [t, s] of this._replacements) e = e.replace("$" + t, s);
            return e;
          }
          download(t, e, s) {
            const n = this.processUrl(t);
            let o = this._currentDownloads.get(n);
            if (void 0 !== o && null !== o.promise)
              return s && o.progressCallbacks.push(s), o.promise;
            const r = this._downloadQueue.findIndex(
              ([t, e]) => e.download.actualUrl === n,
            );
            return -1 !== r
              ? ((o = this._downloadQueue[r][1]),
                s && o.progressCallbacks.push(s),
                o.promise)
              : ((o = new DownloadData(t, n, e)),
                (o.promise = new Promise((t) => {
                  (o.resolve = t),
                    i.Sort.add(
                      [0, o],
                      this._downloadQueue,
                      (t, e) => t[0] < e[0],
                      (t, e) => t[0] === e[0],
                    ),
                    this.checkDownloadQueue();
                })),
                o.promise);
          }
          doRequest(t) {
            const e = new XMLHttpRequest();
            e.addEventListener("load", () => {
              200 <= e.status && e.status <= 299
                ? ((t.download.content = e.response),
                  (t.download.status = "completed"))
                : ((t.download.content = void 0),
                  (t.download.status = "failed")),
                this._currentDownloads.delete(t.download.actualUrl),
                this.checkDownloadQueue(),
                t.resolve(t.download);
            }),
              e.addEventListener("progress", (e) => {
                (t.download.progress = e.lengthComputable
                  ? e.loaded / e.total
                  : 0),
                  (t.download.totalBytes = e.lengthComputable ? e.total : 0);
                for (const e of t.progressCallbacks) e(t.download);
              }),
              e.addEventListener("abort", () => {
                (t.download.content = void 0),
                  (t.download.status = "cancelled"),
                  this._currentDownloads.delete(t.download.actualUrl),
                  this.checkDownloadQueue(),
                  t.resolve(t.download);
              }),
              e.addEventListener("error", () => {
                (t.download.content = void 0),
                  (t.download.status = "failed"),
                  (t.download.errorMessage = e.statusText),
                  this._currentDownloads.delete(t.download.actualUrl),
                  this.checkDownloadQueue(),
                  t.resolve(t.download);
              }),
              t.download.binary
                ? (e.responseType = "arraybuffer")
                : (e.responseType = "text"),
              (t.request = e),
              e.open("GET", t.download.actualUrl),
              e.send();
          }
          checkDownloadQueue() {
            if (
              this._currentDownloads.size < this._maxCurrentDownloads &&
              this._downloadQueue.length > 0
            ) {
              const [t, e] = this._downloadQueue.shift();
              this._currentDownloads.set(e.download.actualUrl, e),
                this.doRequest(e);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Engine: function () {
              return Engine;
            },
          });
        var i = s(6);
        class Engine {
          constructor(t) {
            if (!(t instanceof HTMLDivElement))
              throw new Error(
                "The root div param is not an actual div element.",
              );
            (this._rootDiv = t),
              (this._canvas = null),
              (this._renderSize = new i.Vector2()),
              this._renderSize.freeze(),
              (this._input = new i.Input(this)),
              (this._config = new i.Config()),
              (this._downloader = new i.Downloader()),
              (this._textureLoader = null),
              (this._textureLoaderCompressed = null),
              (this._materialManager = null),
              (this._scenes = new i.Collection(
                this,
                new Map([["scene", i.Scene]]),
              )),
              (this._viewports = new i.Collection(
                this,
                new Map([["viewport", i.Viewport]]),
              )),
              (this._lastAppTime = Date.now()),
              (this._realDeltaTime = 0),
              (this._fps = new i.FPS()),
              (this._fpsLimit = Number.POSITIVE_INFINITY),
              (this._time = 0),
              (this._timeRate = 0),
              (this._callbacks = []),
              (this._callbacksToRemove = []),
              (this._thisLoop = this._loop.bind(this)),
              (this._threeJsRenderer = null),
              (this._viewportDiv = null),
              "relative" !== this._rootDiv.style.position &&
              "absolute" !== this._rootDiv.style.position &&
              (this._rootDiv.style.position = "relative"),
              (this._rootDiv.style.userSelect = "none"),
              (this._rootDiv.style.webkitUserSelect = "none"),
              (this._rootDiv.style.touchAction = "none"),
              (this._canvas = document.createElement("canvas")),
              (this._canvas.style.position = "absolute"),
              (this._canvas.style.left = "0px"),
              (this._canvas.style.top = "0px"),
              (this._canvas.style.width = "100%"),
              (this._canvas.style.height = "100%"),
              this._rootDiv.appendChild(this._canvas),
              (this._viewportDiv = document.createElement("div")),
              (this._viewportDiv.style.position = "absolute"),
              (this._viewportDiv.style.left = "0px"),
              (this._viewportDiv.style.top = "0px"),
              (this._viewportDiv.style.width = "100%"),
              (this._viewportDiv.style.height = "100%"),
              (this._viewportDiv.style.overflow = "hidden"),
              this._rootDiv.appendChild(this._viewportDiv);
            try {
              (this._threeJsRenderer = new i.THREE.WebGLRenderer({
                canvas: this._canvas,
                antialias: !0,
              })),
                this._threeJsRenderer.setScissorTest(!0),
                this._threeJsRenderer.setPixelRatio(window.devicePixelRatio),
                (this._textureLoader = new i.TextureLoader(
                  this._downloader,
                  this._threeJsRenderer,
                )),
                (this._textureLoaderCompressed = new i.TextureLoaderCompressed(
                  this._downloader,
                  this._config,
                  this._threeJsRenderer,
                )),
                (i.THREE.Cache.enabled = !1);
              const t = this._threeJsRenderer
                .getContext()
                .getShaderInfoLog.bind(this._threeJsRenderer.getContext());
              (this._threeJsRenderer.getContext().getShaderInfoLog = (e) => {
                const s = t(e);
                return s.includes("GL_ARB_gpu_shader5") ? "" : s;
              }),
                i.Capabilities.__setContext(this._threeJsRenderer.getContext()),
                (this._materialManager = new i.MaterialManager(
                  this._downloader,
                ));
            } catch (t) {
              throw (console.log(t), t);
            }
            requestAnimationFrame(this._thisLoop);
          }
          getVersion() {
            return i.Version;
          }
          getRootDiv() {
            return this._rootDiv;
          }
          getRenderSize() {
            return this._renderSize;
          }
          getCanvas() {
            return this._canvas;
          }
          getViewportDiv() {
            return this._viewportDiv;
          }
          getConfig() {
            return this._config;
          }
          getInput() {
            return this._input;
          }
          getDownloader() {
            return this._downloader;
          }
          getTextureLoader() {
            return this._textureLoader;
          }
          getTextureLoaderCompressed() {
            return this._textureLoaderCompressed;
          }
          getMaterialManager() {
            return this._materialManager;
          }
          getScene(t) {
            return this._scenes.get(t);
          }
          getNumScenes() {
            return this._scenes.size;
          }
          addScene(t) {
            return this._scenes.add("scene", t);
          }
          removeScene(t) {
            this._scenes.remove(t);
          }
          get(t, e, s, i = 0) {
            const n = this._scenes.get(t);
            return void 0 === e || null === n ? n : n.get(e, s, i);
          }
          getViewport(t) {
            return this._viewports.get(t);
          }
          getNumViewports() {
            return this._viewports.size;
          }
          addViewport(t = "") {
            return this._viewports.add("viewport", t);
          }
          removeViewport(t) {
            this._viewports.remove(t);
          }
          getTime() {
            return this._time;
          }
          setTime(t) {
            this._time = t;
          }
          getTimeRate() {
            return this._timeRate;
          }
          setTimeRate(t) {
            this._timeRate = t;
          }
          getFPS() {
            return this._fps.getFPS();
          }
          getFPSLimit() {
            return this._fpsLimit;
          }
          setFPSLimit(t) {
            this._fpsLimit = t;
          }
          getDeltaTime() {
            return this._realDeltaTime;
          }
          isComponentTypeRegistered(t) {
            return i.Types.Components.has(t);
          }
          registerComponentType(t, e) {
            if (i.Types.Components.has(t))
              throw new Error("Already registered component type '" + t + "'.");
            i.Types.Components.set(t, e);
          }
          unregisterComponentType(t) {
            i.Types.Components.delete(t);
          }
          isControllerTypeRegistered(t) {
            return i.Types.Controllers.has(t);
          }
          registerControllerType(t, e) {
            if (i.Types.Controllers.has(t))
              throw new Error(
                "Already registered controller type '" + t + "'.",
              );
            i.Types.Controllers.set(t, e);
          }
          unregisterControllerType(t) {
            i.Types.Controllers.delete(t);
          }
          waitUntilNextFrame() {
            return new Promise((t) => {
              this.addCallback(() => {
                t();
              }, !1);
            });
          }
          addCallback(t, e) {
            this._callbacks.push({ callback: t, recurring: e });
          }
          removeCallback(t) {
            this._callbacksToRemove.push(t);
          }
          __getThreeJsRenderer() {
            return this._threeJsRenderer;
          }
          _loop() {
            try {
              const t = Date.now();
              if (
                ((this._realDeltaTime = (t - this._lastAppTime) / 1e3),
                  this._realDeltaTime < 1 / this._fpsLimit)
              )
                return void requestAnimationFrame(this._thisLoop);
              (this._lastAppTime = t),
                this._fps.update(this._realDeltaTime),
                (this._time += this._timeRate * this._realDeltaTime),
                (this._renderSize.x === this._rootDiv.clientWidth &&
                  this._renderSize.y === this._rootDiv.clientHeight) ||
                (this._renderSize.thaw(),
                  this._renderSize.set(
                    this._rootDiv.clientWidth,
                    this._rootDiv.clientHeight,
                  ),
                  this._renderSize.freeze(),
                  this._threeJsRenderer.setSize(
                    this._renderSize.x,
                    this._renderSize.y,
                    !1,
                  ));
              for (let t = 0; t < this._scenes.size; t++)
                this._scenes.get(t).__update();
              for (let t = 0; t < this._viewports.size; t++)
                this._viewports.get(t).__updateViewportVariables();
              for (let t = 0; t < this._scenes.size; t++)
                this._scenes.get(t).__updateVisuals();
              this._threeJsRenderer.setViewport(
                0,
                0,
                this._renderSize.x,
                this._renderSize.y,
              ),
                this._threeJsRenderer.setScissor(
                  0,
                  0,
                  this._renderSize.x,
                  this._renderSize.y,
                ),
                this._threeJsRenderer.clear();
              for (let t = 0; t < this._viewports.size; t++)
                this._viewports.get(t).__render();
              for (let t = 0, e = this._callbacksToRemove.length; t < e; t++)
                for (let e = 0, s = this._callbacks.length; e < s; e++)
                  if (
                    this._callbacks[e].callback === this._callbacksToRemove[t]
                  ) {
                    this._callbacks.splice(e, 1);
                    break;
                  }
              this._callbacksToRemove = [];
              for (let t = 0; t < this._callbacks.length; t++)
                this._callbacks[t].callback(),
                  this._callbacks[t].recurring ||
                  this._callbacksToRemove.push(this._callbacks[t].callback);
              this._input.__resetStatesForNextFrame();
            } catch (t) {
              throw (console.log(t), t);
            }
            requestAnimationFrame(this._thisLoop);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Entity: function () {
              return Entity;
            },
          });
        var i = s(6);
        class Entity extends i.CollectionItem {
          constructor(t, e, s) {
            super(t, e, s),
              (this._enabled = !0),
              (this._disabledByAncestor = !1),
              (this._destroyed = !1),
              (this._parent = null),
              (this._lastParent = null),
              (this._children = []),
              (this._parentingTable = []),
              (this._parentChangedCallbacks = []),
              (this._childChangedCallbacks = []),
              (this._state = new EntityState()),
              (this._lastState = new EntityState()),
              (this._cameraSpacePosition = new i.FastMap()),
              (this._normalSpacePosition = new i.FastMap()),
              (this._pixelSpacePosition = new i.FastMap()),
              (this._normalSpaceExtentsRadius = new i.FastMap()),
              (this._pixelSpaceExtentsRadius = new i.FastMap()),
              (this._greatestPixelSpaceExtentsRadius = 0),
              (this._components = new i.Collection(this, i.Types.Components)),
              (this._controllers = new i.Collection(this, i.Types.Controllers)),
              (this._occlusionRadius = 0),
              (this._extentsRadius = 0),
              (this._canOcclude = !0),
              (this._positionCoverage = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._positionCoverage.freeze(),
              (this._orientationCoverage = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._orientationCoverage.freeze(),
              (this._isInPositionCoverage = !1),
              (this._isInOrientationCoverage = !1);
          }
          getScene() {
            return this.__getCollectionParent();
          }
          isEnabled() {
            return this._enabled && !this._disabledByAncestor;
          }
          isDisabledByAncestor() {
            return this._disabledByAncestor;
          }
          setEnabled(t) {
            this._enabled !== t && ((this._enabled = t), this._updateEnabled());
          }
          _updateEnabled() {
            for (let t = 0; t < this._components.size; t++)
              this._components.get(t).__updateLoadState();
            for (let t = 0, e = this._children.length; t < e; t++)
              this._children[t]._updateDisabledByAncestor();
          }
          _updateDisabledByAncestor() {
            let t = !1,
              e = this._parent;
            for (; null !== e;) {
              if (!e._enabled || e._disabledByAncestor) {
                t = !0;
                break;
              }
              e = e._parent;
            }
            this._disabledByAncestor !== t &&
              ((this._disabledByAncestor = t), this._updateEnabled());
          }
          isDestroyed() {
            return this._destroyed;
          }
          getPosition() {
            return this._state.position;
          }
          setPosition(t) {
            this._state.position.thaw(),
              this._state.position.copy(t),
              this._state.position.freeze();
          }
          getVelocity() {
            return this._state.velocity;
          }
          setVelocity(t) {
            this._state.velocity.thaw(),
              this._state.velocity.copy(t),
              this._state.velocity.freeze();
          }
          getOrientation() {
            return this._state.orientation;
          }
          setOrientation(t) {
            this._state.orientation.thaw(),
              this._state.orientation.copy(t),
              this._state.orientation.freeze();
          }
          getAngularVelocity() {
            return this._state.angularVelocity;
          }
          setAngularVelocity(t) {
            this._state.angularVelocity.thaw(),
              this._state.angularVelocity.copy(t),
              this._state.angularVelocity.freeze();
          }
          getLastPosition() {
            return this._lastState.position;
          }
          getLastVelocity() {
            return this._lastState.velocity;
          }
          getLastOrientation() {
            return this._lastState.orientation;
          }
          getLastAngularVelocity() {
            return this._lastState.angularVelocity;
          }
          getPositionRelativeToEntity(t, e, s, n) {
            let o = this;
            if ((t.copy(e), void 0 === n)) {
              const e = this.getLowestCommonAncestor(s);
              if (null === e) return void t.copy(i.Vector3.NaN);
              for (t.add(t, o.getPosition()); o !== e;)
                (o = o.getParent()), t.add(t, o.getPosition());
              if (null !== s)
                for (o = s, t.sub(t, o.getPosition()); o !== e;)
                  (o = o.getParent()), t.sub(t, o.getPosition());
            } else {
              const e = this.getScene(),
                r = i.Vector3.pool.get(),
                a = this.getLowestCommonAncestorAtTime(s, n);
              if (null !== a) {
                for (o.getPositionAtTime(r, n), t.add(t, r); o !== a;) {
                  const s = o.getParentAtTime(n);
                  if (((o = e.getEntity(s)), null === o))
                    return void t.copy(i.Vector3.NaN);
                  o.getPositionAtTime(r, n), t.add(t, r);
                }
                if (null !== s)
                  for (
                    o = s, o.getPositionAtTime(r, n), t.sub(t, r);
                    o !== a;

                  ) {
                    const s = o.getParentAtTime(n);
                    if (((o = e.getEntity(s)), null === o))
                      return void t.copy(i.Vector3.NaN);
                    o.getPositionAtTime(r, n), t.sub(t, r);
                  }
              } else t.copy(i.Vector3.NaN);
              i.Vector3.pool.release(r);
            }
          }
          getVelocityRelativeToEntity(t, e, s, n) {
            let o = this;
            if ((t.copy(e), void 0 === n)) {
              const e = this.getLowestCommonAncestor(s);
              if (null === e) return void t.copy(i.Vector3.NaN);
              for (t.add(t, o.getVelocity()); o !== e;)
                (o = o.getParent()), t.add(t, o.getVelocity());
              if (null !== s)
                for (o = s, t.sub(t, o.getVelocity()); o !== e;)
                  (o = o.getParent()), t.sub(t, o.getVelocity());
            } else {
              const e = this.getScene(),
                r = i.Vector3.pool.get(),
                a = this.getLowestCommonAncestorAtTime(s, n);
              if (null !== a) {
                for (o.getVelocityAtTime(r, n), t.add(t, r); o !== a;) {
                  const s = o.getParentAtTime(n);
                  if (((o = e.getEntity(s)), null === o))
                    return void t.copy(i.Vector3.NaN);
                  o.getVelocityAtTime(r, n), t.add(t, r);
                }
                if (null !== s)
                  for (
                    o = s, o.getVelocityAtTime(r, n), t.sub(t, r);
                    o !== a;

                  ) {
                    const s = o.getParentAtTime(n);
                    if (((o = e.getEntity(s)), null === o))
                      return void t.copy(i.Vector3.NaN);
                    o.getVelocityAtTime(r, n), t.sub(t, r);
                  }
              } else t.copy(i.Vector3.NaN);
              i.Vector3.pool.release(r);
            }
          }
          getPositionAtTime(t, e) {
            if (this.isEnabled()) {
              void 0 === e || 0 === this._controllers.size
                ? t.copy(this._state.position)
                : t.set(Number.NaN, Number.NaN, Number.NaN);
              for (let s = 0; s < this._controllers.size; s++) {
                const i = this._controllers.get(s);
                i.hasModifiedState("position") &&
                  i.getCoverage().contains(e) &&
                  i.isEnabled() &&
                  i.__updatePositionAtTime(t, e);
              }
            } else t.set(Number.NaN, Number.NaN, Number.NaN);
          }
          getVelocityAtTime(t, e) {
            if (this.isEnabled()) {
              void 0 === e || 0 === this._controllers.size
                ? t.copy(this._state.velocity)
                : t.set(Number.NaN, Number.NaN, Number.NaN);
              for (let s = 0; s < this._controllers.size; s++) {
                const i = this._controllers.get(s);
                i.hasModifiedState("velocity") &&
                  i.getCoverage().contains(e) &&
                  i.isEnabled() &&
                  i.__updateVelocityAtTime(t, e);
              }
            } else t.set(Number.NaN, Number.NaN, Number.NaN);
          }
          getOrientationAtTime(t, e) {
            if (this.isEnabled()) {
              void 0 === e || 0 === this._controllers.size
                ? t.copy(this._state.orientation)
                : t.set(Number.NaN, Number.NaN, Number.NaN, Number.NaN);
              for (let s = 0; s < this._controllers.size; s++) {
                const i = this._controllers.get(s);
                i.hasModifiedState("orientation") &&
                  i.getCoverage().contains(e) &&
                  i.isEnabled() &&
                  i.__updateOrientationAtTime(t, e);
              }
            } else t.set(Number.NaN, Number.NaN, Number.NaN, Number.NaN);
          }
          getOcclusionRadius() {
            return this._occlusionRadius;
          }
          getExtentsRadius() {
            return this._extentsRadius;
          }
          setOcclusionRadius(t) {
            this._occlusionRadius = t;
          }
          setExtentsRadius(t) {
            this._extentsRadius = t;
          }
          getPositionCoverage() {
            return this._positionCoverage;
          }
          getOrientationCoverage() {
            return this._orientationCoverage;
          }
          isInPositionCoverage() {
            return this._isInPositionCoverage;
          }
          isInOrientationCoverage() {
            return this._isInOrientationCoverage;
          }
          __updateLastState() {
            this._lastState.position.thaw(),
              this._lastState.position.copy(this._state.position),
              this._lastState.position.freeze(),
              this._lastState.velocity.thaw(),
              this._lastState.velocity.copy(this._state.velocity),
              this._lastState.velocity.freeze(),
              this._lastState.orientation.thaw(),
              this._lastState.orientation.copy(this._state.orientation),
              this._lastState.orientation.freeze(),
              this._lastState.angularVelocity.thaw(),
              this._lastState.angularVelocity.copy(this._state.angularVelocity),
              this._lastState.angularVelocity.freeze();
          }
          __updateCoverage() {
            this._positionCoverage.thaw(),
              this._orientationCoverage.thaw(),
              this._positionCoverage.set(
                Number.POSITIVE_INFINITY,
                Number.NEGATIVE_INFINITY,
              ),
              this._orientationCoverage.set(
                Number.POSITIVE_INFINITY,
                Number.NEGATIVE_INFINITY,
              );
            let t = 0,
              e = 0;
            for (let s = 0; s < this._controllers.size; s++) {
              const i = this._controllers.get(s);
              i.isEnabled() &&
                (i.hasModifiedState("position") &&
                  (this._positionCoverage.union(
                    this._positionCoverage,
                    i.getCoverage(),
                  ),
                    t++),
                  i.hasModifiedState("orientation") &&
                  (this._orientationCoverage.union(
                    this._orientationCoverage,
                    i.getCoverage(),
                  ),
                    e++));
            }
            if (
              (0 === t &&
                this._positionCoverage.set(
                  Number.NEGATIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                ),
                0 === e &&
                this._orientationCoverage.set(
                  Number.NEGATIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                ),
                this._parentingTable.length > 0)
            ) {
              const t = this._parentingTable[0],
                e = this._parentingTable[this._parentingTable.length - 1];
              (this._positionCoverage.min = Math.max(
                this._positionCoverage.min,
                "" !== t[1] ? t[0] : Number.POSITIVE_INFINITY,
              )),
                (this._positionCoverage.max = Math.min(
                  this._positionCoverage.max,
                  "" !== e[1] ? Number.POSITIVE_INFINITY : e[0],
                ));
            }
            this._positionCoverage.freeze(), this._orientationCoverage.freeze();
          }
          canOcclude() {
            return this._canOcclude;
          }
          setCanOcclude(t) {
            this._canOcclude = t;
          }
          isOccludingPosition(t, e) {
            if (!this._canOcclude || !this.isInPositionCoverage()) return !1;
            const s = Math.min(
              this._occlusionRadius,
              this.getCameraSpacePosition(t).magnitude(),
            ),
              n = i.Interval.pool.get();
            i.Geometry.getLineSphereIntersectionWithLineStartAtOrigin(
              n,
              e,
              this.getCameraSpacePosition(t),
              s,
            );
            const o = n.min < n.max && 0 <= n.min + n.max && n.min + n.max < 2;
            return i.Interval.pool.release(n), o;
          }
          getParent() {
            return this._parent;
          }
          getParentAtTime(t) {
            const e = i.Sort.getIndex(t, this._parentingTable, r);
            return e < this._parentingTable.length &&
              t === this._parentingTable[e][0]
              ? this._parentingTable[e][1]
              : e > 0
                ? this._parentingTable[e - 1][1]
                : this._parentingTable.length > 0
                  ? ""
                  : null !== this._parent
                    ? this._parent.getName()
                    : "";
          }
          setParent(t) {
            if (t === this._parent) return;
            const e = i.Vector3.pool.get();
            if (
              (this.getPositionRelativeToEntity(e, i.Vector3.Zero, t),
                e.isNaN() || this.setPosition(e),
                i.Vector3.pool.release(e),
                null !== this._parent)
            )
              for (let t = 0; t < this._parent._children.length; t++) {
                this._parent._children[t] === this &&
                  this._parent._children.splice(t, 1);
              }
            const s = this._parent;
            (this._parent = t),
              null !== this._parent && this._parent._children.push(this),
              this._clearCameraReferences(),
              this._updateDisabledByAncestor();
            for (let t = 0, e = this._parentChangedCallbacks.length; t < e; t++)
              this._parentChangedCallbacks[t](this, s, this._parent);
            if (null !== s)
              for (let t = 0, e = s._childChangedCallbacks.length; t < e; t++)
                s._childChangedCallbacks[t](s, this, !1);
            if (null !== this._parent)
              for (
                let t = 0, e = this._parent._childChangedCallbacks.length;
                t < e;
                t++
              )
                this._parent._childChangedCallbacks[t](this._parent, this, !0);
          }
          _clearCameraReferences() {
            this._cameraSpacePosition.clear(),
              this._normalSpacePosition.clear(),
              this._pixelSpacePosition.clear(),
              this._normalSpaceExtentsRadius.clear(),
              this._pixelSpaceExtentsRadius.clear();
            for (let t = 0, e = this._components.size; t < e; t++) {
              this._components.get(t).__clearCameraDependentsBase();
            }
            for (let t = 0, e = this._children.length; t < e; t++)
              this._children[t]._clearCameraReferences();
          }
          getNumChildren() {
            return this._children.length;
          }
          getChild(t) {
            return this._children[t];
          }
          getLowestCommonAncestor(t) {
            if (null === t) return null;
            let e = this,
              s = t,
              i = 0,
              n = 0;
            for (; null !== e.getParent();) (i += 1), (e = e.getParent());
            for (; null !== s.getParent();) (n += 1), (s = s.getParent());
            for (e = this, s = t; i > n;) (i -= 1), (e = e.getParent());
            for (; n > i;) (n -= 1), (s = s.getParent());
            for (; e !== s && null !== e;)
              (e = e.getParent()), (s = s.getParent());
            return e;
          }
          getLowestCommonAncestorAtTime(t, e) {
            if (null === t) return null;
            let s = this,
              i = t,
              n = 0,
              o = 0;
            const r = this.getScene();
            for (; ;) {
              const t = s.getParentAtTime(e);
              if ("" === t) break;
              const i = r.getEntity(t);
              if (null === i) return null;
              (n += 1), (s = i);
            }
            for (; ;) {
              const t = i.getParentAtTime(e);
              if ("" === t) break;
              const s = r.getEntity(t);
              if (null === s) return null;
              (o += 1), (i = s);
            }
            for (s = this, i = t; n > o;) {
              n -= 1;
              const t = s.getParentAtTime(e),
                i = r.getEntity(t);
              if (null === i) return null;
              s = i;
            }
            for (; o > n;) {
              o -= 1;
              const t = i.getParentAtTime(e),
                s = r.getEntity(t);
              if (null === s) return null;
              i = s;
            }
            for (; s !== i && null !== s;) {
              const t = s.getParentAtTime(e),
                n = r.getEntity(t);
              if (null === n) return null;
              s = n;
              const o = i.getParentAtTime(e),
                a = r.getEntity(o);
              if (null === a) return null;
              i = a;
            }
            return s;
          }
          getNumParentingTableEntries() {
            return this._parentingTable.length;
          }
          getParentingTableEntry(t) {
            return this._parentingTable[t];
          }
          addParentingTableEntry(t, e) {
            i.Sort.add([t, e], this._parentingTable, n, o),
              this.__updateCoverage();
          }
          removeParentingTableEntry(t) {
            this._parentingTable.splice(t), this.__updateCoverage();
          }
          clearParentingTableEntries() {
            (this._parentingTable = []), this.__updateCoverage();
          }
          addParentChangedCallback(t) {
            this._parentChangedCallbacks.push(t);
          }
          removeParentChangedCallback(t) {
            const e = this._parentChangedCallbacks.indexOf(t);
            -1 !== e && this._parentChangedCallbacks.splice(e, 1);
          }
          addChildChangedCallback(t) {
            this._childChangedCallbacks.push(t);
          }
          removeChildChangedCallback(t) {
            const e = this._childChangedCallbacks.indexOf(t);
            -1 !== e && this._childChangedCallbacks.splice(e, 1);
          }
          getNumComponents() {
            return this._components.size;
          }
          getComponent(t) {
            return this._components.get(t);
          }
          getComponentByType(t, e = 0) {
            return this._components.getByType(t, e);
          }
          getComponentByClass(t, e = 0) {
            return this._components.getByClass(t, e);
          }
          addComponent(t, e, s) {
            return this._components.add(t, e, s);
          }
          addComponentByClass(t, e, s) {
            return this._components.addByClass(t, e, s);
          }
          removeComponent(t) {
            this._components.remove(t);
          }
          clearComponents() {
            this._components.clear();
          }
          getNumControllers() {
            return this._controllers.size;
          }
          getController(t) {
            return this._controllers.get(t);
          }
          getControllerByType(t, e = 0) {
            return this._controllers.getByType(t, e);
          }
          getControllerByClass(t, e = 0) {
            return this._controllers.getByClass(t, e);
          }
          addController(t, e, s) {
            const i = this._controllers.add(t, e, s);
            return this.__updateCoverage(), i;
          }
          addControllerByClass(t, e, s) {
            return this._controllers.addByClass(t, e, s);
          }
          removeController(t) {
            this._controllers.remove(t), this.__updateCoverage();
          }
          clearControllers() {
            this._controllers.clear(), this.__updateCoverage();
          }
          getCameraSpacePosition(t) {
            const e = this._cameraSpacePosition.get(t);
            return void 0 !== e ? e : i.Vector3.NaN;
          }
          getNormalSpacePosition(t) {
            const e = this._normalSpacePosition.get(t);
            return void 0 !== e ? e : i.Vector3.NaN;
          }
          getPixelSpacePosition(t) {
            const e = this._pixelSpacePosition.get(t);
            return void 0 !== e ? e : i.Vector2.NaN;
          }
          getNormalSpaceOcclusionRadius(t) {
            return 0 !== this._extentsRadius
              ? (this.getNormalSpaceExtentsRadius(t) * this._occlusionRadius) /
              this._extentsRadius
              : 0;
          }
          getNormalSpaceExtentsRadius(t) {
            const e = this._normalSpaceExtentsRadius.get(t);
            return void 0 !== e ? e : Number.NaN;
          }
          getPixelSpaceOcclusionRadius(t) {
            return 0 !== this._extentsRadius
              ? (this.getPixelSpaceExtentsRadius(t) * this._occlusionRadius) /
              this._extentsRadius
              : 0;
          }
          getPixelSpaceExtentsRadius(t) {
            const e = this._pixelSpaceExtentsRadius.get(t);
            return void 0 !== e ? e : Number.NaN;
          }
          getGreatestPixelSpaceOcclusionRadius() {
            return 0 !== this._extentsRadius
              ? (this.getGreatestPixelSpaceExtentsRadius() *
                this._occlusionRadius) /
              this._extentsRadius
              : 0;
          }
          getGreatestPixelSpaceExtentsRadius() {
            return this._greatestPixelSpaceExtentsRadius;
          }
          __setCameraDependentVariables(t, e) {
            const s = t.getViewport();
            if (null === s) return;
            let n = this._cameraSpacePosition.get(t);
            void 0 === n
              ? ((n = new i.Vector3()), this._cameraSpacePosition.set(t, n))
              : n.thaw(),
              n.copy(e),
              n.freeze();
            let o = this._normalSpacePosition.get(t);
            void 0 === o
              ? ((o = new i.Vector3()), this._normalSpacePosition.set(t, o))
              : o.thaw(),
              t.getNormalSpacePositionFromCameraSpacePosition(o, n),
              o.freeze();
            let r = this._pixelSpacePosition.get(t);
            void 0 === r
              ? ((r = new i.Vector2()), this._pixelSpacePosition.set(t, r))
              : r.thaw(),
              s.getPixelSpacePositionFromNormalSpacePosition(r, o),
              r.freeze();
            const a = t.getNormalSpaceRadiusFromRadius(
              this._extentsRadius,
              n.magnitude(),
            );
            this._normalSpaceExtentsRadius.set(t, a);
            const l = s.getPixelSpaceRadiusFromNormalSpaceRadius(a);
            this._pixelSpaceExtentsRadius.set(t, l);
          }
          __removeCameraDependents(t) {
            this._cameraSpacePosition.delete(t),
              this._normalSpacePosition.delete(t),
              this._pixelSpacePosition.delete(t),
              this._normalSpaceExtentsRadius.delete(t),
              this._pixelSpaceExtentsRadius.delete(t);
            for (let e = 0; e < this._components.size; e++)
              this._components.get(e).__removeCameraDependentsBase(t);
          }
          get(t, e = 0) {
            const s = this._components.getByType(t, e);
            return null !== s ? s : this._controllers.getByType(t, e);
          }
          getLoadedPromise() {
            const t = [];
            if (this.isEnabled()) {
              for (let e = 0; e < this._controllers.size; e++)
                t.push(this._controllers.get(e).getLoadedPromise());
              for (let e = 0; e < this._components.size; e++)
                t.push(this._components.get(e).getLoadedPromise());
            }
            return Promise.all(t).then();
          }
          toString() {
            return this.getName();
          }
          __destroy() {
            (this._destroyed = !0), super.__destroy();
            for (let t = 0; t < this._children.length; t++)
              this._children[t].setParent(null);
            null !== this._parent && this.setParent(null),
              this._controllers.__destroy(),
              this._components.__destroy();
          }
          __updateParent(t) {
            const e = this.getParentAtTime(t);
            if ("" !== e) {
              const t = this.getScene().getEntity(e);
              t !== this._parent && this.setParent(t);
            } else null !== this._parent && this.setParent(null);
            this._parent !== this._lastParent &&
              (this.getScene().getControllerDependencyGraph().needsSorting(),
                (this._lastParent = this._parent));
          }
          __updateIsInCoverages(t) {
            (this._isInPositionCoverage = this._positionCoverage.contains(t)),
              (this._isInOrientationCoverage =
                this._orientationCoverage.contains(t));
            for (let t = 0; t < this._components.size; t++)
              this._components.get(t).__updateLoadState();
          }
          __updateVisuals() {
            this._greatestPixelSpaceExtentsRadius = 0;
            for (
              let t = 0, e = this._pixelSpaceExtentsRadius.size;
              t < e;
              t++
            ) {
              const e = this._pixelSpaceExtentsRadius.getAt(t).value;
              this._greatestPixelSpaceExtentsRadius < e &&
                (this._greatestPixelSpaceExtentsRadius = e);
            }
            for (let t = 0, e = this._components.size; t < e; t++) {
              const e = this._components.get(t);
              e.isEnabled() && e.__updateBase();
            }
          }
          __updateCameraVariables(t, e, s) {
            if (this.isEnabled()) {
              const n = i.Vector3.pool.get();
              this === t.getEntity()
                ? n.set(0, 0, 0)
                : s
                  ? n.sub(e.getCameraSpacePosition(t), e.getPosition())
                  : n.add(e.getCameraSpacePosition(t), this._state.position),
                this.__setCameraDependentVariables(t, n),
                this._canOcclude &&
                this.getPixelSpaceOcclusionRadius(t) >= 1 &&
                t.__addToOccludingEntities(this),
                i.Vector3.pool.release(n);
              for (let e = 0, s = this._components.size; e < s; e++) {
                const s = this._components.get(e);
                s !== t && s.isEnabled() && s.__updateCameraVariablesBase(t);
              }
            }
            null === this._parent ||
              (!s && this !== t.getEntity()) ||
              this._parent.__updateCameraVariables(t, this, !0);
            for (let s = 0, i = this._children.length; s < i; s++) {
              const i = this._children[s];
              i !== e && i.__updateCameraVariables(t, this, !1);
            }
          }
          __prepareForRender(t) {
            for (let e = 0, s = this._components.size; e < s; e++) {
              const s = this._components.get(e);
              "__render" in s || s.__prepareForRenderBase(t);
            }
          }
        }
        class EntityState {
          constructor() {
            (this.position = new i.Vector3(Number.NaN, Number.NaN, Number.NaN)),
              this.position.freeze(),
              (this.velocity = new i.Vector3(
                Number.NaN,
                Number.NaN,
                Number.NaN,
              )),
              this.velocity.freeze(),
              (this.orientation = new i.Quaternion(
                Number.NaN,
                Number.NaN,
                Number.NaN,
                Number.NaN,
              )),
              this.orientation.freeze(),
              (this.angularVelocity = new i.Vector3(
                Number.NaN,
                Number.NaN,
                Number.NaN,
              )),
              this.angularVelocity.freeze();
          }
        }
        function n(t, e) {
          return t[0] < e[0];
        }
        function o(t, e) {
          return t[0] === e[0];
        }
        function r(t, e) {
          return t[0] < e;
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            EntityItem: function () {
              return EntityItem;
            },
          });
        var i = s(6);
        class EntityItem extends i.CollectionItem {
          constructor(t, e, s) {
            super(t, e, s), (this._enabled = !0), (this._destroyed = !1);
          }
          getEntity() {
            return this.__getCollectionParent();
          }
          isDestroyed() {
            return this._destroyed;
          }
          __destroy() {
            (this._destroyed = !0), super.__destroy();
          }
          isEnabled() {
            return this._enabled;
          }
          setEnabled(t) {
            this._enabled = t;
          }
          getLoadedPromise() {
            return Promise.resolve();
          }
          __update() { }
        }
      },
      /* 输入相关 */
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Input: function () {
              return Input;
            },
          });
        var i = s(6);
        class Touch {
          constructor() {
            (this.identifier = 0),
              (this.pressedPosition = new i.Vector2()),
              (this.pressedTime = 0),
              (this.lastFramePosition = new i.Vector2()),
              (this.thisFramePosition = new i.Vector2());
          }
        }
        class Input {
          constructor(t) {
            (this._engine = t),
              (this._activeViewport = null),
              (this._draggedOffset = new i.Vector2()),
              this._draggedOffset.freeze(),
              (this._zoomedOffset = 0),
              (this._rotatedOffset = 0),
              (this._shiftPressed = !1),
              (this._keysPressed = new Set()),
              (this._modifierKeysPressed = new Set()),
              (this._maxSelectTime = 0.5),
              (this._maxSelectDistance = 5),
              (this._cursorPosition = new i.Vector2()),
              (this._selected = !1),
              (this._selectedPosition = new i.Vector2()),
              this._selectedPosition.freeze(),
              (this._touches = []),
              window.addEventListener("blur", () => {
                (this._touches = []),
                  this._keysPressed.clear(),
                  this._modifierKeysPressed.clear(),
                  (this._shiftPressed = !1);
              }),
              window.addEventListener("keydown", (t) => {
                (t.target instanceof HTMLElement &&
                  ["INPUT", "SELECT", "TEXTAREA"].includes(t.target.tagName)) ||
                  ("Shift" === t.key
                    ? (this._shiftPressed = !0)
                    : n.has(t.key)
                      ? (this._modifierKeysPressed.add(t.key.toLowerCase()),
                        this._keysPressed.clear(),
                        (this._shiftPressed = !1))
                      : 0 === this._modifierKeysPressed.size &&
                      this._keysPressed.add(t.key.toLowerCase()));
              }),
              window.addEventListener("keyup", (t) => {
                "Shift" === t.key
                  ? (this._shiftPressed = !1)
                  : n.has(t.key)
                    ? this._modifierKeysPressed.delete(t.key.toLowerCase())
                    : this._keysPressed.delete(t.key.toLowerCase());
              }),
              this._engine.getRootDiv().addEventListener("mousedown", (t) => {
                if (
                  0 === t.button &&
                  (document.activeElement instanceof HTMLElement &&
                    document.activeElement.blur(),
                    0 === this._touches.length)
                ) {
                  const e = this._engine.getRootDiv().getBoundingClientRect();
                  let s = null;
                  for (let t = 0; t < this._touches.length; t++)
                    0 === this._touches[t].identifier && (s = this._touches[t]);
                  null === s && (s = new Touch()),
                    (s.identifier = 0),
                    s.pressedPosition.set(
                      t.clientX - e.left,
                      t.clientY - e.top,
                    ),
                    (s.pressedTime = Date.now()),
                    s.lastFramePosition.copy(s.pressedPosition),
                    s.thisFramePosition.copy(s.pressedPosition),
                    this._touches.push(s),
                    this._updateActiveViewport();
                }
              }),
              window.addEventListener("mousemove", (t) => {
                const e = this._engine.getRootDiv().getBoundingClientRect();
                if (
                  1 === this._touches.length &&
                  0 === this._touches[0].identifier
                ) {
                  const s = this._touches[0];
                  s.thisFramePosition.set(
                    t.clientX - e.left,
                    t.clientY - e.top,
                  ),
                    this._draggedOffset.thaw(),
                    this._draggedOffset.sub(
                      s.thisFramePosition,
                      s.lastFramePosition,
                    );
                  const i = Math.max(
                    Math.abs(s.thisFramePosition.x - s.pressedPosition.x),
                    Math.abs(s.thisFramePosition.y - s.pressedPosition.y),
                  );
                  (Date.now() - s.pressedTime) / 1e3 <= this._maxSelectTime &&
                    i <= this._maxSelectDistance &&
                    this._draggedOffset.set(0, 0),
                    this._draggedOffset.freeze();
                }
                this._touches.length <= 1 &&
                  this._cursorPosition.set(
                    t.clientX - e.left,
                    t.clientY - e.top,
                  );
              }),
              window.addEventListener("mouseup", (t) => {
                if (
                  0 === t.button &&
                  1 === this._touches.length &&
                  0 === this._touches[0].identifier
                ) {
                  const e = this._engine.getRootDiv().getBoundingClientRect(),
                    s = this._touches[0];
                  s.thisFramePosition.set(
                    t.clientX - e.left,
                    t.clientY - e.top,
                  );
                  const i = Math.max(
                    Math.abs(s.thisFramePosition.x - s.pressedPosition.x),
                    Math.abs(s.thisFramePosition.y - s.pressedPosition.y),
                  );
                  (Date.now() - s.pressedTime) / 1e3 <= this._maxSelectTime &&
                    i <= this._maxSelectDistance &&
                    ((this._selected = !0),
                      this._selectedPosition.thaw(),
                      this._selectedPosition.copy(s.thisFramePosition),
                      this._selectedPosition.freeze()),
                    this._touches.splice(0, 1);
                }
              }),
              this._engine.getRootDiv().addEventListener(
                "wheel",
                (t) => {
                  t.deltaY && (this._zoomedOffset += 0.1 * t.deltaY),
                    t.preventDefault();
                },
                { passive: !1 },
              ),
              this._engine.getRootDiv().addEventListener(
                "touchstart",
                (t) => {
                  const e = this._engine.getRootDiv().getBoundingClientRect();
                  for (let s = 0; s < t.changedTouches.length; s++) {
                    const i = t.changedTouches[s];
                    let n = null;
                    for (let t = 0; t < this._touches.length; t++)
                      this._touches[t].identifier === i.identifier &&
                        (n = this._touches[t]);
                    null === n && (n = new Touch()),
                      (n.identifier = i.identifier),
                      n.pressedPosition.thaw(),
                      n.pressedPosition.set(
                        i.pageX - window.pageXOffset - e.left,
                        i.pageY - window.pageYOffset - e.top,
                      ),
                      n.pressedPosition.freeze(),
                      (n.pressedTime = Date.now()),
                      n.lastFramePosition.copy(n.pressedPosition),
                      n.thisFramePosition.copy(n.pressedPosition),
                      this._touches.push(n),
                      1 === this._touches.length &&
                      this._cursorPosition.copy(n.thisFramePosition),
                      this._updateActiveViewport();
                  }
                },
                { passive: !1 },
              ),
              window.addEventListener("touchmove", (t) => {
                const e = this._engine.getRootDiv().getBoundingClientRect();
                for (let s = 0; s < t.changedTouches.length; s++) {
                  const n = t.changedTouches[s];
                  for (let t = 0; t < this._touches.length; t++) {
                    const o = this._touches[t];
                    if (o.identifier === n.identifier)
                      if (
                        (o.thisFramePosition.set(
                          n.pageX - window.pageXOffset - e.left,
                          n.pageY - window.pageYOffset - e.top,
                        ),
                          1 === this._touches.length)
                      ) {
                        this._draggedOffset.thaw(),
                          this._draggedOffset.sub(
                            o.thisFramePosition,
                            o.lastFramePosition,
                          );
                        const t = Math.max(
                          Math.abs(o.thisFramePosition.x - o.pressedPosition.x),
                          Math.abs(o.thisFramePosition.y - o.pressedPosition.y),
                        );
                        (Date.now() - o.pressedTime) / 1e3 <=
                          this._maxSelectTime &&
                          t <= this._maxSelectDistance &&
                          this._draggedOffset.set(0, 0),
                          this._draggedOffset.freeze(),
                          this._cursorPosition.copy(o.thisFramePosition);
                      } else if (2 === this._touches.length) {
                        const t = i.Vector2.pool.get();
                        t.sub(
                          this._touches[s].thisFramePosition,
                          this._touches[1 - s].thisFramePosition,
                        );
                        const e = i.Vector2.pool.get();
                        e.sub(
                          this._touches[s].thisFramePosition,
                          this._touches[s].lastFramePosition,
                        );
                        const n = e.dot(t) / t.magnitude() / e.magnitude(),
                          r = e.cross(t) / t.magnitude() / e.magnitude();
                        n < -0.7
                          ? (this._zoomedOffset += -(n + 0.7) * e.magnitude())
                          : n > 0.7
                            ? (this._zoomedOffset += -(n - 0.7) * e.magnitude())
                            : Math.abs(r) > 0.3 &&
                            (this._rotatedOffset += r * e.magnitude()),
                          i.Vector2.pool.release(e),
                          i.Vector2.pool.release(t);
                        const a = Math.max(
                          Math.abs(o.thisFramePosition.x - o.pressedPosition.x),
                          Math.abs(o.thisFramePosition.y - o.pressedPosition.y),
                        );
                        (Date.now() - o.pressedTime) / 1e3 <=
                          this._maxSelectTime &&
                          a <= this._maxSelectDistance &&
                          ((this._zoomedOffset = 0), (this._rotatedOffset = 0));
                      }
                  }
                }
              }),
              window.addEventListener("touchend", (t) => {
                const e = this._engine.getRootDiv().getBoundingClientRect();
                for (let s = 0; s < t.changedTouches.length; s++) {
                  const i = t.changedTouches[s];
                  for (let t = 0; t < this._touches.length; t++) {
                    const s = this._touches[t];
                    if (s.identifier === i.identifier) {
                      if (
                        (s.thisFramePosition.set(
                          i.pageX - window.pageXOffset - e.left,
                          i.pageY - window.pageYOffset - e.top,
                        ),
                          1 === this._touches.length)
                      ) {
                        const t = Math.max(
                          Math.abs(s.thisFramePosition.x - s.pressedPosition.x),
                          Math.abs(s.thisFramePosition.y - s.pressedPosition.y),
                        );
                        (Date.now() - s.pressedTime) / 1e3 <=
                          this._maxSelectTime &&
                          t <= this._maxSelectDistance &&
                          ((this._selected = !0),
                            this._selectedPosition.thaw(),
                            this._selectedPosition.copy(s.thisFramePosition),
                            this._selectedPosition.freeze());
                      }
                      this._touches.splice(t, 1);
                    }
                  }
                }
              }),
              window.addEventListener("touchcancel", () => { });
          }
          getActiveViewport() {
            return this._activeViewport;
          }
          getDraggedOffset() {
            return this._draggedOffset;
          }
          getZoomedOffset() {
            return this._zoomedOffset;
          }
          getRotatedOffset() {
            return this._rotatedOffset;
          }
          isShiftPressed() {
            return this._shiftPressed;
          }
          isKeyPressed(t) {
            return this._keysPressed.has(t);
          }
          isSelected() {
            return this._selected;
          }
          getSelectedPosition() {
            return this._selectedPosition;
          }
          getCursorPosition() {
            return this._cursorPosition;
          }
          __setActiveViewport(t) {
            this._activeViewport = t;
          }
          __resetStatesForNextFrame() {
            for (let t = 0; t < this._touches.length; t++)
              this._touches[t].lastFramePosition.copy(
                this._touches[t].thisFramePosition,
              );
            (this._selected = !1),
              (this._altSelected = !1),
              this._draggedOffset.thaw(),
              this._draggedOffset.set(0, 0),
              this._draggedOffset.freeze(),
              (this._zoomedOffset = 0),
              (this._rotatedOffset = 0);
          }
          _updateActiveViewport() {
            this._activeViewport = null;
            for (let t = this._engine.getNumViewports() - 1; t >= 0; t--) {
              const e = this._engine.getViewport(t).getBounds();
              if (
                this._engine.getViewport(t).isEnabled() &&
                e.contains(this._touches[0].pressedPosition)
              ) {
                this._activeViewport = this._engine.getViewport(t);
                break;
              }
            }
          }
        }
        const n = new Set([
          "Alt",
          "AltGraph",
          "CapsLock",
          "Control",
          "Fn",
          "FnLock",
          "Hyper",
          "Meta",
          "NumLock",
          "ScrollLock",
          "Shift",
          "Super",
          "Symbol",
          "SymbolLock",
        ]);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MaterialManager: function () {
              return MaterialManager;
            },
          });
        var i = s(6),
          n = s(67),
          o = s(68),
          r = s(69),
          a = s(70),
          l = s(71),
          c = s(72),
          h = s(73),
          u = s(74);
        class Resource {
          constructor(t) {
            (this.value = t), (this.useCount = 0);
          }
        }
        class MaterialManager {
          constructor(t) {
            (this._downloader = t),
              (this._cache = new Map()),
              (this._clonedMaterials = new Map()),
              (this._promises = new Map()),
              this._preload();
          }
          async get(t) {
            let e = this._cache.get(t);
            if (void 0 === e) {
              const s = this._promises.get(t);
              void 0 !== s && (e = await s);
            }
            if (void 0 === e) {
              const s = await this._downloader.download(t, !1);
              if ("completed" !== s.status || "string" != typeof s.content)
                throw new Error('Failed to download material "' + t + '".');
              const i = JSON.parse(s.content);
              (e = new Resource(await this._load(t, i))), this._cache.set(t, e);
            }
            return (e.useCount += 1), this._clone(e.value, t);
          }
          getPreloaded(t) {
            const e = this._cache.get(t);
            if (void 0 === e)
              throw new Error('Invalid pre-loaded material "' + t + '".');
            return (e.useCount += 1), this._clone(e.value, t);
          }
          release(t) {
            const e = this._clonedMaterials.get(t);
            if (void 0 === e) return;
            this._clonedMaterials.delete(t);
            const s = this._cache.get(e);
            s &&
              ((s.useCount -= 1),
                0 === s.useCount &&
                (this._unload(s.value), this._cache.delete(e)));
          }
          _unload(t) {
            const e = t.uniforms;
            for (const t in e)
              Object.prototype.hasOwnProperty.call(e, t) &&
                null !== e[t].value &&
                void 0 !== e[t].value.dispose &&
                e[t].value.dispose();
            t.dispose();
          }
          _preload() {
            const t = new Map();
            t.set("basic", n.BasicShader),
              t.set("basic_alpha", o.BasicAlphaShader),
              t.set("connected_sprite", r.ConnectedSpriteShader),
              t.set("line", a.LineShader),
              t.set("plumes", l.PlumesShader),
              t.set("sprite", c.SpriteShader),
              t.set("sprite_particles", h.SpriteParticlesShader),
              t.set("trail", u.TrailShader);
            for (const [e, s] of t) {
              const t = this._load(e, s),
                i = new Resource(t);
              (i.useCount += 1), this._cache.set(e, i);
            }
          }
          _load(t, e) {
            try {
              const t = {};
              if (e.uniforms)
                for (const [s, n] of Object.entries(e.uniforms))
                  [
                    "modelMatrix",
                    "modelViewMatrix",
                    "projectionMatrix",
                    "viewMatrix",
                    "normalMatrix",
                    "cameraPosition",
                  ].includes(s) ||
                    (t[s] = new i.THREE.Uniform(
                      this._getUniformValueFromType(n),
                    ));
              let s = !1,
                n = !0,
                o = i.THREE.FrontSide,
                r = i.THREE.NoBlending;
              if (e.properties) {
                switch (
                (!0 === e.properties.transparent && (s = !0),
                  !1 === e.properties.depthWrite && (n = !1),
                  e.properties.side)
                ) {
                  case "front":
                    o = i.THREE.FrontSide;
                    break;
                  case "back":
                    o = i.THREE.BackSide;
                    break;
                  case "double":
                    o = i.THREE.DoubleSide;
                }
                switch (e.properties.blending) {
                  case "normal":
                    r = i.THREE.NormalBlending;
                    break;
                  case "additive":
                    r = i.THREE.AdditiveBlending;
                    break;
                  case "subtractive":
                    r = i.THREE.SubtractiveBlending;
                    break;
                  case "multiply":
                    r = i.THREE.MultiplyBlending;
                    break;
                  case "custom":
                    r = i.THREE.CustomBlending;
                }
              }
              if (
                "object" != typeof e.vertex ||
                "string" != typeof e.vertex.code
              )
                throw new Error("Missing vertex stage code.");
              if (
                "object" != typeof e.fragment ||
                "string" != typeof e.fragment.code
              )
                throw new Error("Missing fragment stage code.");
              if (Array.isArray(e.vertex.extensions)) {
                let t = "";
                for (const s of e.vertex.extensions)
                  i.Capabilities.hasGLExtension(s) &&
                    (t += "#extension GL_" + s + ": enable\n");
                for (const s of e.vertex.extensions)
                  i.Capabilities.hasGLExtension(s) &&
                    (t += "#define L_" + s + " true\n"),
                    i.Capabilities.isWebGL2() &&
                    "EXT_frag_depth" === s &&
                    (t += "#define L_" + s + " true\n");
                e.vertex.code = t + e.vertex.code;
              }
              if (Array.isArray(e.fragment.extensions)) {
                let t = "";
                for (const s of e.fragment.extensions)
                  i.Capabilities.hasGLExtension(s) &&
                    (t += "#extension GL_" + s + ": enable\n");
                for (const s of e.fragment.extensions)
                  i.Capabilities.hasGLExtension(s) &&
                    (t += "#define L_" + s + " true\n");
                e.fragment.code = t + e.fragment.code;
              }
              const a = new i.THREE.RawShaderMaterial({
                uniforms: t,
                vertexShader: e.vertex.code,
                fragmentShader: e.fragment.code,
                transparent: s,
                depthWrite: n,
                side: o,
                blending: r,
                glslVersion: i.THREE.GLSL3,
              });
              return i.ShaderFix.fix(a), (a.needsUpdate = !0), a;
            } catch (e) {
              throw (
                (e instanceof Error &&
                  (e.message = `While processing material "${t}": ${e.message}`),
                  e)
              );
            }
          }
          _getUniformValueFromType(t) {
            switch ((t = t.replace(/.* /, ""))) {
              case "int":
              case "float":
                return 0;
              case "ivec2":
              case "vec2":
                return new i.THREE.Vector2(0, 0);
              case "ivec3":
              case "vec3":
                return new i.THREE.Vector3(0, 0, 0);
              case "ivec4":
              case "vec4":
                return new i.THREE.Vector4(0, 0, 0, 0);
              case "mat3":
                return new i.THREE.Matrix3();
              case "mat4":
                return new i.THREE.Matrix4();
              case "sampler2D":
              case "samplerCube":
                return null;
            }
            if (t.endsWith("]")) {
              const e = t.indexOf("["),
                s = t.indexOf("]"),
                i = t.substring(0, e),
                n = Number.parseInt(t.substring(e + 1, s)),
                o = [];
              for (let t = 0; t < n; t++)
                o.push(this._getUniformValueFromType(i));
              return o;
            }
            throw new Error("Unrecognized type: " + t + ".");
          }
          _clone(t, e) {
            const s = t.clone();
            for (const [e, s] of Object.entries(t.uniforms)) {
              const i = s.value;
              if (Array.isArray(i)) {
                const s = i[0];
                if (
                  s &&
                  (s.isColor ||
                    s.isMatrix3 ||
                    s.isMatrix4 ||
                    s.isVector2 ||
                    s.isVector3 ||
                    s.isVector4 ||
                    s.isTexture)
                ) {
                  t.uniforms[e].value = [];
                  for (let s = 0; s < i.length; s++)
                    t.uniforms[e].value[s] = i[s].clone();
                }
              }
            }
            return (s.needsUpdate = !0), this._clonedMaterials.set(s, e), s;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BasicShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            color: "vec4",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {},
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\tattribute vec3 position;\n\t\tuniform mat4 modelViewMatrix;\n\t\tuniform mat4 projectionMatrix;\n\n\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\tvoid main() {\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform vec4 color;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = color;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BasicAlphaShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            color: "vec4",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "normal",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 position;\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform vec4 color;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\t\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = color;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ConnectedSpriteShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            projectionMatrix: "highp mat4",
            vAxis: "vec3",
            color: "vec4",
            colorTexture: "sampler2D",
            width1: "float",
            width2: "float",
            textureYOffset: "float",
            repeatAmount: "float",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            side: "double",
            transparent: !0,
            depthWrite: !1,
            blending: "normal",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec2 position;\n\n\t\t\tuniform mat4 modelMatrix;\n\t\t\tuniform mat4 viewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\n\t\t\tuniform vec3 vAxis;\n\t\t\tuniform float width1;\n\t\t\tuniform float width2;\n\n\t\t\tvarying vec2 vPosition;\n\t\t\tvarying float vU;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\n\t\t\t\t// Get the horizontal axis.\n\t\t\t\tfloat width = mix(width1, width2, position.y);\n\t\t\t\tvec3 viewVAxis = (viewMatrix * vec4(vAxis, 0)).xyz;\n\t\t\t\tvec2 viewHAxisXZ = normalize(cross(vec3(0, 1, 0), viewVAxis)).xz;\n\t\t\t\tvec4 viewHAxis = vec4(viewHAxisXZ.x, 0, viewHAxisXZ.y, 0);\n\n\t\t\t\t// Get the view position.\n\t\t\t\tvec4 modelPosition = modelMatrix * vec4(0, 0, 0, 1) + vec4(vAxis, 0) * position.y;\n\t\t\t\tvec4 viewPosition = viewMatrix * modelPosition;\n\n\t\t\t\t// Set the final projected position.\n\t\t\t\tgl_Position = projectionMatrix * viewPosition + projectionMatrix * viewHAxis * width * position.x;\n\n\t\t\t\t// Setup a vPosition and vU for use in the fragment shader.\n\t\t\t\tvPosition = vec2(0.5 * (position.x + 1.0), position.y);\n\t\t\t\t#ifdef PIXEL_BASED\n\t\t\t\t\tvPosition.y *= abs(gl_Position.w);\n\t\t\t\t#endif\n\t\t\t\tvU = position.y;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform vec4 color;\n\t\t\tuniform sampler2D colorTexture;\n\t\t\tuniform float width1;\n\t\t\tuniform float width2;\n\t\t\tuniform float textureYOffset;\n\t\t\tuniform float repeatAmount;\n\n\t\t\tvarying vec2 vPosition;\n\t\t\tvarying float vU;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tvoid main() {\n\n\t\t\t\t// If we're using pixel-based, we need to undo the perspective divide that happened.\n\t\t\t\t#ifdef PIXEL_BASED\n\t\t\t\t\tvec2 uv = vec2(vPosition.x, vPosition.y * gl_FragCoord.w);\n\t\t\t\t#else\n\t\t\t\t\tvec2 uv = vPosition;\n\t\t\t\t#endif\n\n\t\t\t\t// Get a correct use that uses the repeat amount and y offset.\n\t\t\t\t// There's a complicated formula, because the widths may be different and the shape of the sprite may be a trapezoid.\n\t\t\t\tfloat f = width2 * vU / (width1 * (1.0 - vU) + width2 * vU);\n\t\t\t\tfloat uFactor = step(vU, uv.x);\n\t\t\t\tuv.x = (1.0 - uFactor) * uv.x * f / vU + uFactor * (1.0 + (uv.x - 1.0) * (1.0 - f) / (1.0 - vU));\n\t\t\t\tuv.y = uv.y * repeatAmount + textureYOffset;\n\n\t\t\t\t// Apply the texture and color.\n\t\t\t\tgl_FragColor = color * texture2D(colorTexture, uv);\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LineShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            pixelSize: "vec2",
            alphaMultiplier: "float",
            dashLength: "float",
            dashGapLength: "float",
            glowWidth: "float",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "additive",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec3 positionPrev;\n\t\t\tattribute vec3 positionNext;\n\t\t\tattribute vec4 color;\n\t\t\tattribute float width;\n\t\t\tattribute float dashOffset;\n\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\t\t\tuniform vec2 pixelSize;\n\t\t\tuniform float glowWidth;\n\n\t\t\tvarying vec4 fColor;\n\t\t\tvarying float fDashOffset;\n\t\t\tvarying float fWidth;\n\t\t\tvarying float fOffsetScalar;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\t\t\t\t// Get the line vertices into pixel space.\n\t\t\t\tvec4 view_center = modelViewMatrix * vec4(position, 1.0);\n\t\t\t\tvec4 view_prev = modelViewMatrix * vec4(positionPrev, 1.0);\n\t\t\t\tvec4 view_next = modelViewMatrix * vec4(positionNext, 1.0);\n\t\t\t\tvec4 projected_center = projectionMatrix * view_center;\n\t\t\t\tvec4 projected_prev = projectionMatrix * view_prev;\n\t\t\t\tvec4 projected_next = projectionMatrix * view_next;\n\t\t\t\tvec2 ndc_center = projected_center.xy / view_center.y;\n\t\t\t\tvec2 ndc_prev = projected_prev.xy / view_prev.y;\n\t\t\t\tvec2 ndc_next = projected_next.xy / view_next.y;\n\t\t\t\tvec2 pixel_center = (ndc_center.xy + 1.0) / 2.0 * pixelSize;\n\t\t\t\tvec2 pixel_prev = (ndc_prev.xy + 1.0) / 2.0 * pixelSize;\n\t\t\t\tvec2 pixel_next = (ndc_next.xy + 1.0) / 2.0 * pixelSize;\n\n\t\t\t\t// Get the offset of the part perpendicular to the lines.\n\t\t\t\tvec2 l0 = normalize(pixel_center - pixel_prev);\n\t\t\t\tvec2 l1 = normalize(pixel_next - pixel_center);\n\t\t\t\tfloat offsetScalar = sign(width) * (abs(width) / 2.0 + glowWidth);\n\t\t\t\tvec2 offset = vec2(offsetScalar, offsetScalar);\n\t\t\t\tif (pixel_center == pixel_prev) {\n\t\t\t\t\tif (pixel_center == pixel_next) {\n\t\t\t\t\t\toffset = vec2(0.0, 0.0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\toffset *= vec2(-l1.y, l1.x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (pixel_center == pixel_next) {\n\t\t\t\t\toffset *= vec2(-l0.y, l0.x);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toffset *= normalize(vec2(-l0.y - l1.y, l0.x + l1.x));\n\t\t\t\t\toffset /= max(0.25, sqrt((1.0 + dot(l0, l1)) / 2.0));\n\t\t\t\t}\n\n\t\t\t\t// Re-add the perpendicular part to the center as the final vertex.\n\t\t\t\tndc_center = (pixel_center + offset) / pixelSize * 2.0 - 1.0;\n\t\t\t\tgl_Position = vec4(ndc_center * view_center.y, projected_center.z, projected_center.w);\n\n\t\t\t\t// Set the varyings.\n\t\t\t\tfColor = color;\n\t\t\t\tfDashOffset = dashOffset;\n\t\t\t\tfWidth = width;\n\t\t\t\tfOffsetScalar = offsetScalar;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform float alphaMultiplier;\n\t\t\tuniform float dashLength;\n\t\t\tuniform float dashGapLength;\n\t\t\tuniform float glowWidth;\n\n\t\t\tvarying vec4 fColor;\n\t\t\tvarying float fDashOffset;\n\t\t\tvarying float fWidth;\n\t\t\tvarying float fOffsetScalar;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tfloat line_dash_func() {\n\t\t\t\tfloat u = mod(fDashOffset, dashLength + dashGapLength);\n\t\t\t\treturn float(u < dashLength);\n\t\t\t}\n\n\t\t\tfloat edgeGlow() {\n\t\t\t\tif (glowWidth > 0.0) {\n\t\t\t\t\tfloat value = clamp((fWidth / 2.0 + glowWidth - abs(fOffsetScalar)) / glowWidth, 0.0, 1.0);\n\t\t\t\t\tif (value < 1.0) {\n\t\t\t\t\t\tvalue *= 0.75;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\treturn 1.0;\n\t\t\t}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = fColor;\n\t\t\t\tgl_FragColor.a *= alphaMultiplier * edgeGlow() * line_dash_func();\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            PlumesShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            colorTexture: "sampler2D",
            colorMultiplier: "vec4",
            speed: "float",
            time: "float",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "normal",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvarying vec2 vUV;\n\n\t\t\tvoid main() {\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t\tvUV = uv;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform sampler2D colorTexture;\n\t\t\tuniform vec4 colorMultiplier;\n\t\t\tuniform float speed;\n\t\t\tuniform float time;\n\t\t\tvarying vec2 vUV;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tvec2 v2_construct_func(float x, float y) {\n\t\t\t\treturn vec2(x, y);\n\t\t\t}\n\t\t\tfloat s_mult_func(float s1, float s2) {\n\t\t\t\treturn s1 * s2;\n\t\t\t}\n\t\t\tfloat s_mod_func(float s1, float s2) {\n\t\t\t\treturn mod(s1, s2);\n\t\t\t}\n\t\t\tvec2 v2s_mult_func(vec2 v, float s) {\n\t\t\t\treturn v * s;\n\t\t\t}\n\t\t\tvec2 v2_add_func(vec2 v1, vec2 v2) {\n\t\t\t\treturn v1 + v2;\n\t\t\t}\n\t\t\tvec4 texture_func(sampler2D tex, vec2 uv) {\n\t\t\t\treturn texture2D(tex, uv);\n\t\t\t}\n\t\t\tvec4 v4v4_mult_func(vec4 v1, vec4 v2) {\n\t\t\t\treturn v1 * v2;\n\t\t\t}\n\t\t\tfloat s_sub_func(float s1, float s2) {\n\t\t\t\treturn s1 - s2;\n\t\t\t}\n\t\t\tvec4 alpha_mult_func(vec4 color, float alpha) {\n\t\t\t\treturn vec4(color.rgb, color.a * alpha);\n\t\t\t}\n\t\t\tvoid main() {\n\t\t\t\tvec2 yAxis = v2_construct_func(0.0, 1.0);\n\t\t\t\tfloat yMultiplier = s_mult_func(time, speed);\n\t\t\t\tfloat yMultiplierMod = s_mod_func(yMultiplier, 1.0);\n\t\t\t\tvec2 uvOffset = v2s_mult_func(yAxis, yMultiplierMod);\n\t\t\t\tvec2 finalUV = v2_add_func(vUV, uvOffset);\n\t\t\t\tvec4 textureOffset = texture_func(colorTexture, finalUV);\n\t\t\t\tvec4 color = v4v4_mult_func(textureOffset, colorMultiplier);\n\t\t\t\tfloat fade = s_sub_func(1.0, vUV.y);\n\t\t\t\tvec4 color_with_fade = alpha_mult_func(color, fade);\n\t\t\t\tgl_FragColor = color_with_fade;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpriteShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            pixelBased: "float",
            color: "vec4",
            colorTexture: "sampler2D",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "normal",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\t\t\tuniform float pixelBased;\n\n\t\t\tvarying vec2 vUV;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t\tif (pixelBased != 0.0) {\n\t\t\t\t\tgl_Position /= abs(gl_Position.w);\n\t\t\t\t}\n\t\t\t\tvUV = uv;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform vec4 color;\n\t\t\tuniform sampler2D colorTexture;\n\n\t\t\tvarying vec2 vUV;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = texture2D(colorTexture, vUV) * color;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpriteParticlesShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "additive",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec4 color;\n\t\t\tattribute vec3 offset;\n\t\t\tattribute float scale;\n\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\n\t\t\tvarying vec4 fColor;\n\t\t\tvarying vec2 fPosition;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\t\t\t\tvec4 viewPosition = modelViewMatrix * vec4(offset, 1.0) + vec4(position, 0.0) * scale;\n\t\t\t\tgl_Position = projectionMatrix * viewPosition;\n\t\t\t\tfColor = color;\n\t\t\t\tfPosition = position.xz;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tvarying vec4 fColor;\n\t\t\tvarying vec2 fPosition;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = fColor * (1.0 - length(fPosition));\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TrailShader: function () {
              return n;
            },
          });
        var i = s(20);
        const n = {
          uniforms: {
            modelViewMatrix: "mat4",
            projectionMatrix: "highp mat4",
            pixelSize: "vec2",
            alphaMultiplier: "float",
            dashLength: "float",
            dashGapLength: "float",
            glowWidth: "float",
            indexStart: "float",
            indexCount: "float",
            indexLength: "float",
            color: "vec4",
            alphaFade: "float",
            widthMin: "float",
            widthMax: "float",
            ...i.ShaderChunkLogDepth.Uniforms,
          },
          properties: {
            transparent: !0,
            depthWrite: !1,
            side: "double",
            blending: "additive",
          },
          vertex: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tattribute vec3 positionCurr;\n\t\t\tattribute vec3 positionPrev;\n\t\t\tattribute vec3 positionNext;\n\t\t\tattribute float side;\n\t\t\tattribute float index;\n\t\t\tattribute float dashOffset;\n\n\t\t\tuniform mat4 modelViewMatrix;\n\t\t\tuniform mat4 projectionMatrix;\n\n\t\t\tuniform vec2 pixelSize;\n\t\t\tuniform float glowWidth;\n\t\t\tuniform float indexStart;\n\t\t\tuniform float indexCount;\n\t\t\tuniform float indexLength;\n\t\t\tuniform float widthMin;\n\t\t\tuniform float widthMax;\n\n\t\t\tvarying vec4 fColor;\n\t\t\tvarying float fDashOffset;\n\t\t\tvarying float fWidth;\n\t\t\tvarying float fOffsetScalar;\n\t\t\tvarying float fIndexU;\n\n\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\tvoid main() {\n\t\t\t\t// Get the width depending on the length.\n\t\t\t\tfloat indexU = mod(index - indexStart + indexLength, indexLength) / (indexCount - 1.0);\n\t\t\t\tfloat width = mix(widthMin, widthMax, indexU);\n\n\t\t\t\t// Get the line vertices into pixel space.\n\t\t\t\tvec4 viewCenter = modelViewMatrix * vec4(positionCurr, 1.0);\n\t\t\t\tvec4 viewPrev = modelViewMatrix * vec4(positionPrev, 1.0);\n\t\t\t\tvec4 viewNext = modelViewMatrix * vec4(positionNext, 1.0);\n\t\t\t\tvec4 projectedCenter = projectionMatrix * viewCenter;\n\t\t\t\tvec4 projected_prev = projectionMatrix * viewPrev;\n\t\t\t\tvec4 projected_next = projectionMatrix * viewNext;\n\t\t\t\tvec2 ndcCenter = projectedCenter.xy / viewCenter.y;\n\t\t\t\tvec2 ndcPrev = projected_prev.xy / viewPrev.y;\n\t\t\t\tvec2 ndcNext = projected_next.xy / viewNext.y;\n\t\t\t\tvec2 pixelCenter = (ndcCenter.xy + 1.0) / 2.0 * pixelSize;\n\t\t\t\tvec2 pixelPrev = (ndcPrev.xy + 1.0) / 2.0 * pixelSize;\n\t\t\t\tvec2 pixelNext = (ndcNext.xy + 1.0) / 2.0 * pixelSize;\n\n\t\t\t\t// Get the offset of the part perpendicular to the lines.\n\t\t\t\tvec2 l0 = normalize(pixelCenter - pixelPrev);\n\t\t\t\tvec2 l1 = normalize(pixelNext - pixelCenter);\n\t\t\t\tfloat offsetScalar = side * (width / 2.0 + glowWidth);\n\t\t\t\tvec2 offset = vec2(offsetScalar, offsetScalar);\n\t\t\t\tif (pixelCenter == pixelPrev) {\n\t\t\t\t\tif (pixelCenter == pixelNext) {\n\t\t\t\t\t\toffset = vec2(0.0, 0.0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\toffset *= vec2(-l1.y, l1.x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (pixelCenter == pixelNext) {\n\t\t\t\t\toffset *= vec2(-l0.y, l0.x);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toffset *= normalize(vec2(-l0.y - l1.y, l0.x + l1.x));\n\t\t\t\t\toffset /= sqrt((1.0 + max(0.0, dot(l0, l1))) / 2.0);\n\t\t\t\t}\n\n\t\t\t\t// Re-add the perpendicular part to the center as the final vertex.\n\t\t\t\tndcCenter = (pixelCenter + offset) / pixelSize * 2.0 - 1.0;\n\t\t\t\tgl_Position = vec4(ndcCenter * viewCenter.y, projectedCenter.z, projectedCenter.w);\n\n\t\t\t\t// Set the varyings.\n\t\t\t\tfIndexU = indexU;\n\t\t\t\tfDashOffset = dashOffset;\n\t\t\t\tfWidth = width;\n\t\t\t\tfOffsetScalar = offsetScalar;\n\n\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t}\n\t\t\t`,
          },
          fragment: {
            extensions: ["EXT_frag_depth"],
            code: `\n\t\t\tprecision highp float;\n\n\t\t\tuniform vec4 color;\n\t\t\tuniform float alphaMultiplier;\n\t\t\tuniform float alphaFade;\n\t\t\tuniform float dashLength;\n\t\t\tuniform float dashGapLength;\n\t\t\tuniform float glowWidth;\n\n\t\t\tvarying float fIndexU;\n\t\t\tvarying float fDashOffset;\n\t\t\tvarying float fWidth;\n\t\t\tvarying float fOffsetScalar;\n\n\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\t\n\t\t\tfloat lineDash() {\n\t\t\t\tfloat u = mod(fDashOffset, dashLength + dashGapLength);\n\t\t\t\treturn float(u < dashLength);\n\t\t\t}\n\n\t\t\tfloat edgeGlow() {\n\t\t\t\tif (glowWidth > 0.0) {\n\t\t\t\t\tfloat value = clamp((fWidth / 2.0 + glowWidth - abs(fOffsetScalar)) / glowWidth, 0.0, 1.0);\n\t\t\t\t\tif (value < 1.0) {\n\t\t\t\t\t\tvalue *= 0.75;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\treturn 1.0;\n\t\t\t}\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = color;\n\t\t\t\tgl_FragColor.a *= alphaMultiplier * edgeGlow() * lineDash() * mix(alphaFade, 1.0, fIndexU);\n\n\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t}\n\t\t\t`,
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Scene: function () {
              return Scene;
            },
          });
        var i = s(6);
        class Scene extends i.CollectionItem {
          constructor(t, e, s) {
            super(t, e, s),
              (this._entities = new i.Collection(
                this,
                new Map([["entity", i.Entity]]),
              )),
              (this._controllerDependencyGraph = new i.DependencyGraph()),
              (this._ambientLightColor = new i.Color(0.02, 0.02, 0.02)),
              this._ambientLightColor.freeze(),
              (this._lightSources = []),
              (this._threeJsScene = null),
              (this._threeJsScene = new i.THREE.Scene()),
              this._controllerDependencyGraph.setUpdateItemCallback((t) => {
                t.getEntity().isEnabled() &&
                  t
                    .getCoverage()
                    .contains(t.getEntity().getScene().getEngine().getTime()) &&
                  t.isEnabled() &&
                  t.__update();
              }),
              this._controllerDependencyGraph.setCompareItemCallback((t, e) => {
                if (t === e) return !1;
                if (
                  !(
                    t.getEntity().isEnabled() &&
                    e.getEntity().isEnabled() &&
                    t.isEnabled() &&
                    e.isEnabled()
                  )
                )
                  return !1;
                const s = t.getEntity().getScene().getEngine().getTime();
                if (
                  !t.getCoverage().contains(s) ||
                  !e.getCoverage().contains(s)
                )
                  return !1;
                if (t.getEntity() === e.getEntity()) {
                  const s = t.getEntity();
                  for (let i = 0, n = s.getNumControllers(); i < n; i++) {
                    const n = s.getController(i);
                    if (e === n) return !0;
                    if (t === n) break;
                  }
                }
                if (t.getEntity().getParent() === e.getEntity()) {
                  if (
                    (t.hasModifiedState("position") &&
                      e.hasModifiedState("position")) ||
                    (t.hasModifiedState("velocity") &&
                      e.hasModifiedState("velocity"))
                  )
                    return !0;
                  for (const s of e.__modifiedStates)
                    if (t.hasDependentState("parent", s)) return !0;
                }
                for (const s of e.__modifiedStates)
                  if (t.hasDependentState(e.getEntity().getName(), s))
                    return !0;
                return !1;
              });
          }
          getEngine() {
            return this.__getCollectionParent();
          }
          getEntity(t) {
            return this._entities.get(t);
          }
          getNumEntities() {
            return this._entities.size;
          }
          addEntity(t) {
            return this._entities.add("entity", t);
          }
          removeEntity(t) {
            this._entities.remove(t);
          }
          moveEntity(t, e) {
            const s = this._entities.get(t);
            this._entities.move(t, e._entities);
            for (let t = 0, i = s.getNumControllers(); t < i; t++)
              this._controllerDependencyGraph.removeItem(s.getController(t)),
                e._controllerDependencyGraph.addItem(s.getController(t));
            for (let t = 0, e = s.getNumComponents(); t < e; t++) {
              const e = s.getComponent(t);
              if (
                "lightSource" === e.getType() &&
                "loaded" === e.getLoadState()
              )
                for (let t = 0, i = this._lightSources.length; t < i; t++)
                  if (
                    this._lightSources[t].getEntityName() === s.getName() &&
                    this._lightSources[t].getComponentTypeIndex() ===
                    e.getTypeIndex()
                  ) {
                    this.__removeLightSource(s.getName(), e.getTypeIndex()),
                      this.__addLightSource(s.getName(), e.getTypeIndex());
                    break;
                  }
            }
          }
          get(t, e, s = 0) {
            const i = this._entities.get(t);
            return void 0 === e || null === i ? i : i.get(e, s);
          }
          getControllerDependencyGraph() {
            return this._controllerDependencyGraph;
          }
          getAmbientLightColor() {
            return this._ambientLightColor;
          }
          setAmbientLightColor(t) {
            this._ambientLightColor.thaw(),
              this._ambientLightColor.copy(t),
              this._ambientLightColor.freeze();
          }
          __addLightSource(t, e = 0) {
            for (let s = 0, i = this._lightSources.length; s < i; s++) {
              const i = this._lightSources[s];
              if (i.getEntityName() === t && i.getComponentTypeIndex() === e)
                throw new Error(
                  `Light source on ${t} with type index ${e} already added.`,
                );
            }
            const s = new i.ComponentRef(this);
            s.setByType(t, "lightSource", e), this._lightSources.push(s);
          }
          __removeLightSource(t, e = 0) {
            for (let s = 0, i = this._lightSources.length; s < i; s++) {
              const i = this._lightSources[s];
              if (i.getEntityName() === t && i.getComponentTypeIndex() === e)
                return void this._lightSources.splice(s, 1);
            }
            throw new Error(
              `Light source on ${t} with type index ${e} not found.`,
            );
          }
          getLightSource(t) {
            return 0 <= t && t < this._lightSources.length
              ? this._lightSources[t].get()
              : null;
          }
          getNumLightSources() {
            return this._lightSources.length;
          }
          getLoadedPromise() {
            const t = [];
            for (let e = 0, s = this._entities.size; e < s; e++)
              t.push(this._entities.get(e).getLoadedPromise());
            return Promise.all(t).then();
          }
          __destroy() {
            super.__destroy(), this._entities.__destroy();
          }
          getThreeJsScene() {
            return this._threeJsScene;
          }
          __update() {
            const t = this.getEngine().getTime();
            for (let e = this._entities.size - 1; e >= 0; e--) {
              const s = this._entities.get(e);
              s.__updateLastState(),
                s.__updateParent(t),
                s.__updateIsInCoverages(t);
            }
            this._controllerDependencyGraph.update();
          }
          __updateVisuals() {
            for (let t = this._entities.size - 1; t >= 0; t--) {
              const e = this._entities.get(t);
              e.isInPositionCoverage() &&
                e.isEnabled() &&
                this._entities.get(t).__updateVisuals();
            }
          }
          __removeCameraDependents(t) {
            for (let e = this._entities.size - 1; e >= 0; e--)
              this._entities.get(e).__removeCameraDependents(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TextureLoader: function () {
              return TextureLoader;
            },
          });
        var i = s(6);
        class TextureLoader extends i.THREE.Loader {
          constructor(t, e) {
            super(),
              (this._downloader = t),
              (this._renderer = e),
              (this._crossOrigin = "anonymous"),
              (this._path = void 0),
              (this._white = null),
              (this._black = null),
              (this._clear = null),
              (this._pink = null),
              (this._gray = null),
              (this._threeJsTextureLoader = new i.THREE.TextureLoader()),
              this._threeJsTextureLoader.setCrossOrigin(this._crossOrigin),
              this._threeJsTextureLoader.setPath(this._path),
              (this._white = TextureLoader._newTexture(
                new i.Color(1, 1, 1, 1),
              )),
              (this._black = TextureLoader._newTexture(
                new i.Color(0, 0, 0, 1),
              )),
              (this._clear = TextureLoader._newTexture(
                new i.Color(0, 0, 0, 0),
              )),
              (this._pink = TextureLoader._newTexture(
                new i.Color(1, 105 / 255, 180 / 255, 1),
              )),
              (this._gray = TextureLoader._newTexture(
                new i.Color(0.4, 0.4, 0.4, 1),
              )),
              i.THREE.DefaultLoadingManager.addHandler(/.$/i, this);
          }
          async loadIntoUniform(t, e, s) {
            return this.loadTexture(e, s).then((e) => {
              null !== t.value && t.value.dispose(), (t.value = e);
            });
          }
          async loadCubeTexture(t, e) {
            const s = new i.THREE.CubeTexture(),
              o = [];
            for (let i = 0; i < 6; i++) {
              const r = t.replace("$FACE", n[i]);
              o.push(
                new Promise((t) => {
                  this.loadTexture(r, e).then((e) => {
                    (s.images[i] = e.image), t();
                  });
                }),
              );
            }
            return Promise.all(o).then(() => ((s.needsUpdate = !0), s));
          }
          async loadTexture(t, e) {
            return new Promise((s, i) => {
              this.load(
                t,
                (t) => {
                  s(t);
                },
                void 0,
                (e) => {
                  i(new Error(`Failed to load ${t}: ${e}`));
                },
                e,
              );
            });
          }
          generateEnvMap(t) {
            let e = t;
            if (!(t instanceof i.THREE.CubeTexture)) {
              const s = {
                depthBuffer: !1,
                stencilBuffer: !1,
                generateMipmaps: !0,
                minFilter: i.THREE.LinearMipMapLinearFilter,
                magFilter: i.THREE.LinearFilter,
              };
              e = new i.THREE.WebGLCubeRenderTarget(
                512,
                s,
              ).fromEquirectangularTexture(this._renderer, t).texture;
            }
            const s = new i.THREE.PMREMGenerator(this._renderer);
            s.compileEquirectangularShader();
            return s.fromEquirectangular(e).texture;
          }
          load(t, e, s, n, o) {
            t = this._downloader.processUrl(t);
            let r = null;
            if (
              ("white" === t
                ? (r = this._white)
                : "black" === t
                  ? (r = this._black)
                  : "clear" === t
                    ? (r = this._clear)
                    : "pink" === t
                      ? (r = this._pink)
                      : "gray" === t && (r = this._gray),
                null !== r)
            )
              e(r);
            else if (t.includes(".mp4")) {
              const s = document.createElement("video");
              (s.src = t),
                (s.muted = !0),
                (s.playsInline = !0),
                (s.loop = !1),
                (s.crossOrigin = "anonymous"),
                (r = new i.THREE.VideoTexture(s)),
                (r.format = i.THREE.RGBAFormat),
                (r.flipY = !1),
                (r.needsUpdate = !0),
                this._downloader.download(t, !0).then((t) => {
                  (s.src = URL.createObjectURL(
                    new Blob([t.content], { type: "video/mp4" }),
                  )),
                    (s.onerror = (t) => {
                      n(t.toString());
                    }),
                    (s.oncanplaythrough = () => {
                      e(r);
                    }),
                    s.load();
                });
            } else
              this._threeJsTextureLoader.load(
                t,
                (t) => {
                  (t.flipY = !1),
                    !1 === o &&
                    ((t.minFilter = i.THREE.LinearFilter),
                      (t.generateMipmaps = !1)),
                    (t.needsUpdate = !0),
                    e(t);
                },
                void 0,
                (t) => {
                  n(t.message);
                },
              );
            return r;
          }
          get crossOrigin() {
            return this._crossOrigin;
          }
          set crossOrigin(t) {
            (this._crossOrigin = t),
              this._threeJsTextureLoader &&
              this._threeJsTextureLoader.setCrossOrigin(this._crossOrigin);
          }
          setCrossOrigin(t) {
            return (this.crossOrigin = t), this;
          }
          get path() {
            return this._path;
          }
          set path(t) {
            (this._path = t),
              this._threeJsTextureLoader &&
              this._threeJsTextureLoader.setPath(this._path);
          }
          setPath(t) {
            return (this.path = t), this;
          }
          static _newTexture(t) {
            const e = document.createElement("canvas");
            (e.width = 1), (e.height = 1);
            const s = e.getContext("2d");
            return (
              (s.fillStyle =
                "rgba(" +
                255 * t.r +
                "," +
                255 * t.g +
                "," +
                255 * t.b +
                "," +
                255 * t.a +
                ")"),
              s.fillRect(0, 0, 1, 1),
              new i.THREE.CanvasTexture(e)
            );
          }
        }
        const n = ["posx", "negx", "posy", "negy", "posz", "negz"];
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TextureLoaderCompressed: function () {
              return TextureLoaderCompressed;
            },
          });
        var i = s(6);
        class TextureLoaderCompressed extends i.TextureLoader {
          constructor(t, e, s) {
            super(t, s),
              (this._config = e),
              (this._threeJsKTXLoader = new i.ThreeJsKTXLoader()),
              this._threeJsKTXLoader.setCrossOrigin(this._crossOrigin),
              this._threeJsKTXLoader.setPath(this._path);
          }
          load(t, e, s, n, o) {
            if (null !== t.match(/_n\.[^.]+$/))
              return super.load(t, e, s, n, o);
            let r = null;
            return (
              "white" === (t = this._downloader.processUrl(t))
                ? (r = this._white)
                : "black" === t
                  ? (r = this._black)
                  : "clear" === t
                    ? (r = this._clear)
                    : "pink" === t && (r = this._pink),
              null !== r
                ? e(r)
                : ((t = t.replace(
                  /\.(\w+)$/,
                  "-" +
                  i.Capabilities.__getCompressedTextureExtension() +
                  ".ktx",
                )),
                  this._threeJsKTXLoader.load(
                    t,
                    (t) => {
                      (t.flipY = !1),
                        (t.needsUpdate = !0),
                        !1 === o &&
                        ((t.minFilter = i.THREE.LinearFilter),
                          (t.generateMipmaps = !1)),
                        (t.ktxFormat = t.format),
                        e(t);
                    },
                    void 0,
                    (t) => {
                      n(t.message);
                    },
                  )),
              r
            );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Version: function () {
              return i;
            },
          });
        const i = "51.0.1";
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Viewport: function () {
              return Viewport;
            },
          });
        var i = s(6);
        class Viewport extends i.CollectionItem {
          constructor(t, e, s) {
            super(t, e, s),
              (this._enabled = !0),
              (this._camera = null),
              (this._div = document.createElement("div")),
              (this._bounds = new i.Rect(0, 0, 0, 0)),
              this._bounds.freeze(),
              (this._backgroundColor = new i.Color(0, 0, 0, 1)),
              this._backgroundColor.freeze(),
              (this._threeJsBackgroundColor = new i.THREE.Color()),
              (this._div.style.position = "absolute"),
              (this._div.style.overflow = "hidden"),
              (this._div.id = e ?? ""),
              this._div.classList.add("viewport"),
              this._enabled || (this._div.style.display = "none"),
              this.getEngine().getViewportDiv().appendChild(this._div);
            const n = this.getEngine().getRootDiv();
            this._bounds.thaw(),
              this._bounds.set(
                this._div.offsetLeft - n.offsetLeft,
                this._div.offsetTop - n.offsetTop,
                this._div.offsetWidth,
                this._div.offsetHeight,
              ),
              this._bounds.freeze();
            const o = this.getEngine().getInput();
            null === o.getActiveViewport() && o.__setActiveViewport(this);
          }
          getEngine() {
            return this.__getCollectionParent();
          }
          getDiv() {
            return this._div;
          }
          getBounds() {
            return this._bounds;
          }
          getBackgroundColor() {
            return this._backgroundColor;
          }
          setBackgroundColor(t) {
            this._backgroundColor.thaw(),
              (this._backgroundColor = t),
              this._backgroundColor.freeze(),
              this._threeJsBackgroundColor.setRGB(
                this._backgroundColor.r,
                this._backgroundColor.g,
                this._backgroundColor.b,
              );
          }
          getCamera() {
            return this._camera;
          }
          setCamera(t) {
            (this._camera = t),
              null !== this._camera && this._camera.__setViewport(this);
          }
          isEnabled() {
            return this._enabled;
          }
          setEnabled(t) {
            (this._enabled = t),
              this._enabled
                ? (this._div.style.display = "block")
                : (this._div.style.display = "none");
          }
          getNormalSpacePositionFromPixelSpacePosition(t, e) {
            (t.x =
              (2 * (e.x - this._bounds.origin.x)) / this._bounds.size.x - 1),
              (t.y =
                1 - (2 * (e.y - this._bounds.origin.y)) / this._bounds.size.y),
              (t.z = 1);
          }
          getPixelSpacePositionFromNormalSpacePosition(t, e) {
            -1 < e.z && e.z < 1
              ? ((t.x =
                (this._bounds.size.x * (e.x + 1)) / 2 +
                this._bounds.origin.x),
                (t.y =
                  (this._bounds.size.y * (1 - e.y)) / 2 +
                  this._bounds.origin.y))
              : t.copy(i.Vector2.NaN);
          }
          getPixelSpaceRadiusFromNormalSpaceRadius(t) {
            return t * Math.max(this._bounds.size.x, this._bounds.size.y);
          }
          getNormalSpaceRadiusFromPixelSpaceRadius(t) {
            return t / Math.max(this._bounds.size.x, this._bounds.size.y);
          }
          getDirectionOfCursor(t) {
            const e = this.getCamera();
            if (null === e) return void t.copy(i.Vector3.NaN);
            const s = this.getEngine().getInput();
            this.getNormalSpacePositionFromPixelSpacePosition(
              t,
              s.getCursorPosition(),
            ),
              t.x < -1 || t.x > 1 || t.y < -1 || t.y > 1 || t.z < -1 || t.z > 1
                ? t.copy(i.Vector3.NaN)
                : (e.getCameraSpacePositionFromNormalSpacePosition(t, t),
                  t.normalize(t));
          }
          __destroy() {
            super.__destroy(), this._div.parentNode.removeChild(this._div);
          }
          __updateViewportVariables() {
            this._enabled &&
              (this._bounds.thaw(),
                this._bounds.set(
                  this._div.offsetLeft,
                  this._div.offsetTop,
                  this._div.offsetWidth,
                  this._div.offsetHeight,
                ),
                this._bounds.freeze(),
                null !== this._camera &&
                this._camera.__updateCameraVariablesForConnectedScene());
          }
          __render() {
            if (!this._enabled) return;
            const t = this.getEngine().__getThreeJsRenderer(),
              e =
                this.getEngine().getRootDiv().offsetHeight -
                this._div.offsetTop -
                this._div.offsetHeight;
            t.setViewport(
              this._bounds.origin.x,
              e,
              this._bounds.size.x,
              this._bounds.size.y,
            ),
              t.setScissor(
                this._bounds.origin.x,
                e,
                this._bounds.size.x,
                this._bounds.size.y,
              ),
              this._threeJsBackgroundColor.setRGB(
                this._backgroundColor.r,
                this._backgroundColor.g,
                this._backgroundColor.b,
              ),
              t.setClearColor(
                this._threeJsBackgroundColor,
                this._backgroundColor.a,
              ),
              null !== this._camera
                ? (this._camera.__prepareForRender(), this._camera.__render())
                : this.getEngine().__getThreeJsRenderer().clear();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseComponent: function () {
              return BaseComponent;
            },
          });
        var i = s(6);
        class BaseComponent extends i.EntityItem {
          constructor(t, e, s) {
            super(t, e, s),
              (this._radius = 0.5),
              (this._pixelSpaceRadiusPerCamera = new i.FastMap()),
              (this._greatestPixelSpaceRadius = 0),
              (this._loadState = "unloaded"),
              (this._forceLoaded = !1),
              (this._resourcesLoadedCallback = null),
              (this._resourcesUnloadedCallback = null),
              (this._loadedPromise = Promise.resolve()),
              (this._excludedCameras = new Set()),
              (this._visible = !0),
              (this._threeJsObjects = []),
              (this._threeJsMaterials = []),
              (this._usesEntityOrientation = !1);
          }
          __destroy() {
            "loaded" === this._loadState && this._unloadResources(),
              super.__destroy();
          }
          setEnabled(t) {
            super.setEnabled(t), this.__updateLoadState();
          }
          getRadius() {
            return this._radius;
          }
          __setRadius(t) {
            this._radius = t;
          }
          getPixelSpaceRadiusInCamera(t) {
            return this._pixelSpaceRadiusPerCamera.get(t);
          }
          getGreatestPixelSpaceRadius() {
            return this._greatestPixelSpaceRadius;
          }
          getThreeJsObjects() {
            return this._threeJsObjects;
          }
          getThreeJsMaterials() {
            return this._threeJsMaterials;
          }
          getThreeJsObjectByName(t) {
            for (let e = 0; e < this._threeJsObjects.length; e++) {
              const s = this._threeJsObjects[e];
              if (s.name === t) return s;
            }
            return null;
          }
          getLoadState() {
            return this._loadState;
          }
          setForceLoaded(t) {
            (this._forceLoaded = t),
              this._forceLoaded &&
              "unloaded" === this._loadState &&
              this._loadResources();
          }
          __updateLoadState() {
            const t = this.getEntity(),
              e = t.isEnabled() && this.isEnabled(),
              s =
                t.isInPositionCoverage() &&
                (t.isInOrientationCoverage() || !this._usesEntityOrientation);
            e &&
              (this._forceLoaded ||
                (s && this._greatestPixelSpaceRadius > 0.5)) &&
              "unloaded" === this._loadState
              ? this._loadResources()
              : (e &&
                (this._forceLoaded ||
                  (s && !(this._greatestPixelSpaceRadius < 0.25)))) ||
              "loaded" !== this._loadState ||
              this._unloadResources();
          }
          resetResources() {
            "loading" === this._loadState
              ? (this._loadState = "unloaded")
              : "loaded" === this._loadState && this._unloadResources();
          }
          setResourcesLoadedCallback(t) {
            this._resourcesLoadedCallback = t;
          }
          setResourcesUnloadedCallback(t) {
            this._resourcesUnloadedCallback = t;
          }
          _loadResources() {
            (this._loadState = "loading"),
              (this._loadedPromise = this.__loadResources().then(() => {
                "loading" === this._loadState
                  ? ((this._loadState = "loaded"),
                    null !== this._resourcesLoadedCallback &&
                    this._resourcesLoadedCallback())
                  : this._unloadResources();
              }));
          }
          _unloadResources() {
            this.__unloadResources(),
              (this._loadState = "unloaded"),
              (this._threeJsObjects = []),
              (this._threeJsMaterials = []),
              null !== this._resourcesUnloadedCallback &&
              this._resourcesUnloadedCallback();
          }
          __loadResources() {
            return Promise.resolve();
          }
          __unloadResources() { }
          getLoadedPromise() {
            return this._loadedPromise;
          }
          __updateCameraVariablesBase(t) {
            const e = t.getViewport(),
              s = t.getNormalSpaceRadiusFromRadius(
                this._radius,
                this.getEntity().getCameraSpacePosition(t).magnitude(),
              ),
              i = e.getPixelSpaceRadiusFromNormalSpaceRadius(s);
            this._pixelSpaceRadiusPerCamera.set(t, i),
              this.__updateCameraVariables(t);
          }
          __updateBase() {
            this._greatestPixelSpaceRadius = 0;
            for (
              let t = 0, e = this._pixelSpaceRadiusPerCamera.size;
              t < e;
              t++
            ) {
              const e = this._pixelSpaceRadiusPerCamera.getAt(t).value;
              this._greatestPixelSpaceRadius < e &&
                (this._greatestPixelSpaceRadius = e);
            }
            this.__updateLoadState(), this.__update();
          }
          __prepareForRenderBase(t) {
            if ("loaded" === this._loadState)
              if (!this._excludedCameras.has(t) && this._visible) {
                for (let t = 0; t < this._threeJsObjects.length; t++)
                  this._threeJsObjects[t].visible = !0;
                this.__prepareForRender(t);
                for (let e = 0; e < this._threeJsMaterials.length; e++) {
                  const s = this._threeJsMaterials[e].uniforms;
                  void 0 !== s.invertDepth &&
                    ((s.invertDepth.value = t.getInvertDepth()),
                      (s.nearDistance.value = t.getAutoNearDistance()),
                      (s.midDistance.value = t.getAutoMidDistance()));
                }
                for (let t = 0; t < this._threeJsObjects.length; t++)
                  this._threeJsObjects[t].updateMatrix();
              } else
                for (let t = 0; t < this._threeJsObjects.length; t++)
                  this._threeJsObjects[t].visible = !1;
          }
          __updateCameraVariables(t) { }
          __prepareForRender(t) { }
          getUsesEntityOrientation() {
            return this._usesEntityOrientation;
          }
          __setUsesEntityOrientation(t) {
            (this._usesEntityOrientation = t), this.__updateLoadState();
          }
          isExcludedFromCamera(t) {
            return this._excludedCameras.has(t);
          }
          setExcludedFromCamera(t, e) {
            !e && this._excludedCameras.has(t)
              ? this._excludedCameras.delete(t)
              : e &&
              !this._excludedCameras.has(t) &&
              (this.__removeCameraDependents(t),
                this._excludedCameras.add(t));
          }
          isVisible() {
            return this._visible;
          }
          setVisible(t) {
            this._visible = t;
          }
          __removeCameraDependentsBase(t) {
            this._pixelSpaceRadiusPerCamera.delete(t),
              this.__removeCameraDependents(t);
          }
          __clearCameraDependentsBase() {
            this._pixelSpaceRadiusPerCamera.clear(),
              this.__clearCameraDependents();
          }
          __removeCameraDependents(t) { }
          __clearCameraDependents() { }
          toString() {
            let t = 0;
            for (
              let e = 0, s = this.getEntity().getNumComponents();
              e < s;
              e++
            ) {
              const s = this.getEntity().getComponent(e);
              if (this === s) break;
              this.getType() === s.getType() && (t += 1);
            }
            return this.getEntity().getName() + "." + this.getType() + "." + t;
          }
        }
        BaseComponent._tempThreeJsQuaternion = new i.THREE.Quaternion();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AtmosphereComponent: function () {
              return AtmosphereComponent;
            },
          });
        var i = s(6);
        class AtmosphereComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._density = 0),
              (this._scaleHeight = 1),
              (this._emissivity = 0),
              (this._color = new i.Color()),
              this._color.freeze(),
              (this._sunBrightness = 1),
              (this._sunsetColor = new i.Color()),
              this._sunsetColor.freeze(),
              (this._sunsetIntensity = 0),
              (this._spheroidComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
              ),
              this._spheroidComponentRef.setRefChangedCallback(
                this._spheroidRefChangedCallback.bind(this),
              ),
              (this._spheroidChangedCallback =
                this._spheroidChangedCallback.bind(this)),
              this.__setUsesEntityOrientation(!0);
          }
          getSpheroid() {
            return this._spheroidComponentRef.get();
          }
          getDensity() {
            return this._density;
          }
          setDensity(t) {
            (this._density = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "density",
                t,
              );
          }
          getScaleHeight() {
            return this._scaleHeight;
          }
          setScaleHeight(t) {
            (this._scaleHeight = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "scaleHeight",
                t,
              );
          }
          getEmissivity() {
            return this._emissivity;
          }
          setEmissivity(t) {
            (this._emissivity = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "emissivity",
                t,
              );
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGB(
                this.getThreeJsMaterials()[0],
                "color",
                t,
              );
          }
          getSunBrightness() {
            return this._sunBrightness;
          }
          setSunBrightness(t) {
            (this._sunBrightness = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "sunBrightness",
                t,
              );
          }
          getSunsetColor() {
            return this._sunsetColor;
          }
          setSunsetColor(t) {
            this._sunsetColor.thaw(),
              this._sunsetColor.copy(t),
              this._sunsetColor.freeze(),
              i.ThreeJsHelper.setUniformColorRGB(
                this.getThreeJsMaterials()[0],
                "sunsetColor",
                t,
              );
          }
          getSunsetIntensity() {
            return this._sunsetIntensity;
          }
          setSunsetIntensity(t) {
            (this._sunsetIntensity = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "sunsetIntensity",
                t,
              );
          }
          setSpheroidReference(t) {
            "string" == typeof t
              ? this._spheroidComponentRef.setByName(
                this.getEntity().getName(),
                t,
              )
              : this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
                t,
              );
          }
          __destroy() {
            const t = this._spheroidComponentRef.get();
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              super.__destroy();
          }
          __update() {
            this._spheroidComponentRef.update();
          }
          __prepareForRender(t) {
            const e = i.Vector3.pool.get();
            e.neg(this.getEntity().getCameraSpacePosition(t)),
              e.rotateInverse(this.getEntity().getOrientation(), e),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "cameraPosition",
                e,
              ),
              i.Vector3.pool.release(e),
              i.MaterialUtils.setLightSourceUniforms(
                this.getThreeJsMaterials(),
                this.getEntity(),
                t,
              ),
              i.ThreeJsHelper.setUniformQuaternion(
                this.getThreeJsMaterials()[0],
                "entityOrientation",
                this.getEntity().getOrientation(),
              ),
              i.ThreeJsHelper.setOrientationToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
              ),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
          }
          __loadResources() {
            const t = new i.THREE.RawShaderMaterial({
              uniforms: {
                lightPositions: new i.THREE.Uniform([
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                ]),
                lightColors: new i.THREE.Uniform([
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                ]),
                lightRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                numLights: new i.THREE.Uniform(0),
                density: new i.THREE.Uniform(this._density),
                scaleHeight: new i.THREE.Uniform(this._scaleHeight),
                emissivity: new i.THREE.Uniform(this._emissivity),
                equatorialRadius: new i.THREE.Uniform(1),
                polarRadius: new i.THREE.Uniform(1),
                cameraPosition: new i.THREE.Uniform(
                  new i.THREE.Vector3(1, 0, 0),
                ),
                entityOrientation: new i.THREE.Uniform(
                  new i.THREE.Vector4(1, 0, 0, 0),
                ),
                color: new i.THREE.Uniform(
                  new i.THREE.Vector3(
                    this._color.r,
                    this._color.g,
                    this._color.b,
                  ),
                ),
                sunBrightness: new i.THREE.Uniform(this._sunBrightness),
                sunsetColor: new i.THREE.Uniform(
                  new i.THREE.Vector3(
                    this._sunsetColor.r,
                    this._sunsetColor.g,
                    this._sunsetColor.b,
                  ),
                ),
                sunsetIntensity: new i.THREE.Uniform(this._sunsetIntensity),
                ...i.ShaderChunkLogDepth.ThreeUniforms,
              },
              vertexShader: n,
              fragmentShader: o,
              transparent: !0,
              depthWrite: !1,
              blending: i.THREE.NormalBlending,
            });
            i.ShaderFix.fix(t), this.getThreeJsMaterials().push(t);
            const e = i.ThreeJsHelper.createMeshObject(
              this,
              t,
              [{ name: "position", dimensions: 3 }],
              !1,
            );
            this.getThreeJsObjects().push(e);
            const s = 128,
              r = i.MathUtils.pi / 63,
              a = i.MathUtils.twoPi / s,
              l = new Float32Array(24768),
              c = new Uint16Array(48384),
              h = i.Vector3.pool.get(),
              u = i.LatLonAlt.pool.get();
            for (let t = 0; t < 64; t++) {
              (u.lat = t * r - i.MathUtils.halfPi), (u.alt = 0);
              const e = Math.cos(u.lat),
                n = Math.sin(u.lat);
              for (let o = 0; o < 129; o++) {
                u.lon = o * a - i.MathUtils.pi;
                const r = 129 * t + o;
                (l[3 * r + 0] = e * Math.cos(u.lon)),
                  (l[3 * r + 1] = e * Math.sin(u.lon)),
                  (l[3 * r + 2] = n);
                const h = t * s + o;
                t < 63 &&
                  o < s &&
                  ((c[6 * h + 0] = 129 * (t + 0) + (o + 0)),
                    (c[6 * h + 1] = 129 * (t + 1) + (o + 0)),
                    (c[6 * h + 2] = 129 * (t + 1) + (o + 1)),
                    (c[6 * h + 3] = 129 * (t + 0) + (o + 0)),
                    (c[6 * h + 4] = 129 * (t + 1) + (o + 1)),
                    (c[6 * h + 5] = 129 * (t + 0) + (o + 1)));
              }
            }
            return (
              i.LatLonAlt.pool.release(u),
              i.Vector3.pool.release(h),
              i.ThreeJsHelper.setVertices(e.geometry, "position", l),
              i.ThreeJsHelper.setIndices(e.geometry, c),
              i.ThreeJsHelper.setRenderOrder(e, -1),
              i.ThreeJsHelper.useInDynEnvMap(e, !0),
              this._spheroidChangedCallback(),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _spheroidRefChangedCallback(t, e) {
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              null !== e && e.addChangedCallback(this._spheroidChangedCallback),
              this._spheroidChangedCallback();
          }
          _spheroidChangedCallback() {
            const t = this._spheroidComponentRef.get(),
              e = this.getThreeJsMaterials()[0];
            null !== t
              ? (this.__setRadius(
                Math.max(t.getEquatorialRadius(), t.getPolarRadius()),
              ),
                void 0 !== e &&
                (i.ThreeJsHelper.setUniformNumber(
                  e,
                  "equatorialRadius",
                  t.getEquatorialRadius(),
                ),
                  i.ThreeJsHelper.setUniformNumber(
                    e,
                    "polarRadius",
                    t.getPolarRadius(),
                  )))
              : (this.__setRadius(0),
                void 0 !== e &&
                (i.ThreeJsHelper.setUniformNumber(e, "equatorialRadius", 0),
                  i.ThreeJsHelper.setUniformNumber(e, "polarRadius", 0)));
          }
        }
        const n = `\n\tattribute vec3 position;\n\tuniform mat4 projectionMatrix;\n\tuniform mat4 modelViewMatrix;\n\n\tuniform float scaleHeight;\n\tuniform float equatorialRadius;\n\tuniform float polarRadius;\n\n\t${i.ShaderChunkLogDepth.VertexHead}\n\n\tvarying vec3 localPosition;\n\n\tvoid main() {\n\t\tfloat scaleHeightMultiplier = 20.0;\n\t\tlocalPosition = vec3(position.x * (equatorialRadius + scaleHeight * scaleHeightMultiplier), position.y * (equatorialRadius + scaleHeight * scaleHeightMultiplier), position.z * (polarRadius + scaleHeight * scaleHeightMultiplier));\n\t\tvec4 viewPosition = modelViewMatrix * vec4(localPosition, 1.);\n\t\tgl_Position = projectionMatrix * viewPosition;\n\t\tgl_Position.w = viewPosition.y;\n\n\t\t${i.ShaderChunkLogDepth.Vertex}\n\t}`,
          o = `\n\tprecision highp float;\n\n\tuniform vec3 lightPositions[5];\n\tuniform vec3 lightColors[5];\n\tuniform int numLights;\n\n\tuniform float density;\n\tuniform float scaleHeight;\n\tuniform float equatorialRadius;\n\tuniform float polarRadius;\n\tuniform vec3 cameraPosition;\n\tuniform vec4 entityOrientation;\n\tuniform vec3 color;\n\tuniform float emissivity;\n\tuniform float sunBrightness;\n\tuniform vec3 sunsetColor;\n\tuniform float sunsetIntensity;\n\n\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\tvarying vec3 localPosition;\n\n\tconst int numIterations = 5;\n\n\t// Inverse rotate a vector by a quaternion.\n\tvec3 quatRotInv(vec4 q, vec3 v) {\n\t\tfloat tx = q.w * v.x - q.y * v.z + q.z * v.y;\n\t\tfloat ty = q.w * v.y - q.z * v.x + q.x * v.z;\n\t\tfloat tz = q.w * v.z - q.x * v.y + q.y * v.x;\n\t\tfloat tw = q.x * v.x + q.y * v.y + q.z * v.z;\n\t\tfloat x = tx * q.w + tw * q.x + ty * q.z - tz * q.y;\n\t\tfloat y = ty * q.w + tw * q.y + tz * q.x - tx * q.z;\n\t\tfloat z = tz * q.w + tw * q.z + tx * q.y - ty * q.x;\n\t\treturn vec3(x, y, z);\n\t}\n\n\t// Given an origin and direction, computes the sampling start and end as distance from the origin in the direction.\n\tvoid getStartEndSamples(out float start, out float end, vec3 origin, vec3 direction, float maxDistance, float groundRadius, float atmosphereScaleHeight) {\n\t\t// Get the along the ray perpendicular to the sphere.\n\t\tfloat perpD = -dot(origin, direction);\n\t\tvec3 perp = origin + direction * perpD;\n\n\t\t// Figure out the sample distance.\n\t\tfloat atmosphereRadius = groundRadius + atmosphereScaleHeight * 6.0;\n\t\tfloat chordHalfLength = sqrt(max(0.0, atmosphereRadius * atmosphereRadius - dot(perp, perp)));\n\n\t\t// Figure out starting and ending sample points, and step distance.\n\t\tstart = max(0.0, perpD - chordHalfLength);\n\t\tend = min(maxDistance, perpD + chordHalfLength);\n\t}\n\n\t// Gets the density of the atmosphere at a given position.\n\tfloat getDensity(vec3 position, float radius, float density, float atmosphereScaleHeight) {\n\t\treturn density * exp(min(radius - length(position), 0.0) / atmosphereScaleHeight);\n\t}\n\n\t// Returns 0 if the ray does not intersect and 1.0 if the ray very intersects (with a gradient inbetween).\n\tfloat getDayLevel(vec3 origin, vec3 direction, float radius, float scaleHeight) {\n\t\tfloat blendHeight = scaleHeight * radius / 200.0;\n\t\tfloat perpD = -dot(origin, direction);\n\t\tfloat depth = radius - sqrt(dot(origin, origin) - sign(perpD) * perpD * perpD);\n\t\tif (depth < 0.0) { // day\n\t\t\treturn 1.0 - max(0.0, 0.25 * depth / blendHeight + 0.25);\n\t\t}\n\t\telse { // night\n\t\t\treturn 1.0 - min(1.0, 0.75 * depth / blendHeight + 0.25);\n\t\t}\n\t}\n\n\tfloat easeInOut(float x, float sharpness) {\n\t\tfloat b = sharpness;\n\t\tif (x < 0.5) {\n\t\t\treturn max(0.0, (pow(b, 2.0 * x) - 1.0) / (2.0 * (b - 1.0)));\n\t\t}\n\t\telse {\n\t\t\treturn min(1.0, 1.0 - (pow(b, 2.0 * (1.0 - x)) - 1.0) / (2.0 * (b - 1.0)));\n\t\t}\n\t}\n\n\tvec3 adjustOverbrightness(vec3 color) {\n\t\tfloat maxColor = max(color.r, max(color.g, color.b));\n\t\tif (maxColor > 1.0) {\n\t\t\tfloat f = (maxColor - 1.0) / maxColor;\n\t\t\tcolor.r = min(1.0, pow(color.r / maxColor, 1.0 / maxColor));\n\t\t\tcolor.g = min(1.0, pow(color.g / maxColor, 1.0 / maxColor));\n\t\t\tcolor.b = min(1.0, pow(color.b / maxColor, 1.0 / maxColor));\n\t\t}\n\t\treturn color;\n\t}\n\n\t// Calculates a glow around the light direction (the star).\n\tfloat glow(float spread, float amount, float lightDotCamera) {\n\t\treturn amount * spread / (1.0 + spread - lightDotCamera);\n\t}\n\n\tvec4 getEmissiveColor(float totalDensity, vec3 cameraPositionS, vec3 color, float emissivity) {\n\n\t\t// The color that will be added onto gl_FragColor.\n\t\tvec4 outColor;\n\n\t\t// Apply the total density to the transparency of the atmosphere.\n\t\toutColor.a = emissivity * clamp(totalDensity, 0.0, 1.0);\n\n\t\t// Multiply it all together with the source light color.\n\t\toutColor.rgb = emissivity * color * clamp(pow(15.0 * totalDensity / (density * equatorialRadius), 0.2), 0.75, 1.0);\n\n\t\t// Make it more opaque when lower down.\n\t\toutColor.a = mix(outColor.a, emissivity, getDensity(cameraPositionS, equatorialRadius + scaleHeight, 1.0, 2.0 * scaleHeight));\n\n\t\t// Clamp it to make it clean for the day/night transition.\n\t\toutColor.a = clamp(outColor.a, 0.0, 1.0);\n\n\t\treturn outColor;\n\t}\n\n\t// Gets the color for an atmosphere for a light.\n\tvec4 getColor(float totalDensity, vec3 lightColor, vec3 lightPosition, float spheroidRatio, vec3 positionS, vec3 cameraPositionS, vec3 cameraToPositionUnit) {\n\n\t\t// The color starts out in full brightness (as if emissivity was 1.0).\n\t\tvec4 outColor = getEmissiveColor(totalDensity, cameraPositionS, lightColor * color, 1.0);\n\n\t\t// Make the alpha dependent on the brightness of the light.\n\t\toutColor.a *= length(lightColor) / sqrt(3.0);\n\n\t\t// Setup vectors.\n\t\thighp vec3 lightPositionS = quatRotInv(entityOrientation, lightPosition);\n\t\tlightPositionS.z *= spheroidRatio;\n\t\thighp vec3 lightToPosition = positionS - lightPositionS;\n\t\thighp vec3 lightToPositionUnit = normalize(lightToPosition / 1.0e8);\n\n\t\t// Get the day level, from 0 to 1, and apply it to the alpha. Lots of tricks to get it looking good on earth.\n\t\tvec3 dayRefUp = normalize(cameraPositionS - min(0.0, dot(cameraPositionS, cameraToPositionUnit)) * cameraToPositionUnit);\n\t\tfloat dayLevel = -dot(lightToPositionUnit, dayRefUp);\n\t\toutColor.rgb *= easeInOut(0.5 + 2.0 * dayLevel, 2.0);\n\t\toutColor.a *= easeInOut(1.0 + 2.0 * dayLevel, 2.0);\n\n\t\t// Brighten up the atmosphere when looking from space toward the sun.\n\t\tfloat lightDotCamera = max(0.0, -dot(lightToPositionUnit, cameraToPositionUnit));\n\t\toutColor.a = clamp(outColor.a * (1.0 + glow(0.004, 1.0, lightDotCamera)), 0.0, 1.0);\n\n\t\t// Add narrower sun glare.\n\t\toutColor.rgb *= lightColor * (1.0 + sunBrightness * outColor.a * glow(0.00004, 1.0, lightDotCamera));\n\n\t\t// Add broader sun glare.\n\t\toutColor.rgb *= lightColor * (1.0 + sunBrightness * outColor.a * glow(0.04, 0.125, lightDotCamera));\n\n\t\t// Apply the sunset.\n\t\tfloat lightDotHorizon = pow(clamp(1.0 - dot(lightToPositionUnit, dayRefUp), 0.0, 1.0), 2.0);\n\t\tfloat cameraDotHorizon = pow(clamp(1.0 - dot(cameraToPositionUnit, dayRefUp), 0.0, 1.0), 8.0);\n\t\tfloat sunsetAmount = sunsetIntensity * lightDotHorizon * cameraDotHorizon * glow(0.04, 0.5, lightDotCamera);\n\t\toutColor.rgb = mix(outColor.rgb, sunsetColor, clamp(sunsetAmount, 0.0, 1.0));\n\n\t\treturn outColor;\n\t}\n\n\tvoid main(void) {\n\t\t// Convert everything into a sphere frame.\n\t\tfloat spheroidRatio = equatorialRadius / polarRadius;\n\t\thighp vec3 positionS = localPosition;\n\t\thighp vec3 cameraPositionS = cameraPosition;\n\t\tpositionS.z *= spheroidRatio;\n\t\tcameraPositionS.z *= spheroidRatio;\n\n\t\thighp vec3 cameraToPosition = positionS - cameraPositionS;\n\t\tfloat cameraToPositionDist = length(cameraToPosition / 1.0e8) * 1.0e8;\n\t\thighp vec3 cameraToPositionUnit = cameraToPosition / cameraToPositionDist;\n\n\t\t// Get the start and end of the sampling from the camera to the position.\n\t\tfloat start;\n\t\tfloat end;\n\t\tgetStartEndSamples(start, end, cameraPositionS, cameraToPositionUnit, 1.0e24, equatorialRadius, scaleHeight);\n\t\tfloat fracPerStep = 1.0 / float(numIterations - 1);\n\t\tfloat stepDist = fracPerStep * (end - start);\n\n\t\t// Do the sampling.\n\t\tfloat totalDensity = 0.0;\n\t\tfloat segmentStart = start;\n\t\tfor (int j = 0; j < numIterations; j++) {\n\t\t\t// Get the distance that this segment covers.\n\t\t\tfloat segDist = stepDist;\n\t\t\tif (j == 0 || j == numIterations - 1) {\n\t\t\t\tsegDist *= 0.5;\n\t\t\t}\n\n\t\t\t// Get the segment start that we're looking at.\n\t\t\tvec3 p = cameraPositionS + segmentStart * cameraToPositionUnit;\n\n\t\t\t// Get the density at that segment start. It'll be the density for the whole segment.\n\t\t\tfloat densityAtP = getDensity(p, equatorialRadius, density, scaleHeight);\n\n\t\t\t// Add it to the total density.\n\t\t\ttotalDensity += densityAtP * segDist;\n\n\t\t\t// Next step.\n\t\t\tsegmentStart += stepDist;\n\t\t}\n\n\t\t// Add emissivity lightness.\n\t\tgl_FragColor += getEmissiveColor(totalDensity, cameraPositionS, color, emissivity);\n\n\t\t// For each light,\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (i >= numLights) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// If it's not a camera light,\n\t\t\tif (length(lightPositions[i]) > 0.0) {\n\t\t\t\t// Add on the color for the light.\n\t\t\t\tgl_FragColor += getColor(totalDensity, lightColors[i], lightPositions[i], spheroidRatio, positionS, cameraPositionS, cameraToPositionUnit);\n\t\t\t}\n\t\t}\n\n\t\t// Adjust for values that are greater than one.\n\t\tgl_FragColor.rgb = adjustOverbrightness(gl_FragColor.rgb);\n\n\t\t${i.ShaderChunkLogDepth.Fragment}\n\t}`;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CameraComponent: function () {
              return CameraComponent;
            },
          });
        var i = s(6);
        class CameraComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._threeJsRenderer = this.getEntity()
                .getScene()
                .getEngine()
                .__getThreeJsRenderer()),
              (this._viewport = null),
              (this._threeJsScene = s.getScene().getThreeJsScene()),
              (this._fieldOfView = 1.0471975512),
              (this._nearDistance = void 0),
              (this._invertDepth = 0),
              (this._autoNearDistance = 0),
              (this._midDistance = void 0),
              (this._autoMidDistance = 0),
              (this._aspectRatio = 1),
              (this._renderSize = new i.Vector2()),
              (this._occludingEntities = []),
              (this._threeJsCamera = new i.THREE.PerspectiveCamera(
                75,
                this._aspectRatio,
                0.1,
                1e3,
              )),
              (this._threeJsComposer = null),
              (this._outlinePass = new i.ThreeJsOutlinePass(
                void 0,
                this._threeJsScene,
                this._threeJsCamera,
                [],
              )),
              (this._outlinePass.enabled = !1),
              (this._threeJsUnrealBloomPass = new i.ThreeJsUnrealBloomPass(
                void 0,
                0,
                0,
                0,
              )),
              (this._threeJsUnrealBloomPass.enabled = !1),
              this.__setupEffectComposer();
          }
          getViewport() {
            return this._viewport;
          }
          getFieldOfView() {
            return this._fieldOfView;
          }
          getHorizontalFieldOfView() {
            return this._aspectRatio >= 1
              ? this._fieldOfView
              : 2 *
              Math.atan(
                Math.tan(this._fieldOfView / 2) * this._aspectRatio,
              );
          }
          getVerticalFieldOfView() {
            return this._aspectRatio > 1
              ? 2 *
              Math.atan(Math.tan(this._fieldOfView / 2) / this._aspectRatio)
              : this._fieldOfView;
          }
          setFieldOfView(t) {
            this._fieldOfView = t;
          }
          getInvertDepth() {
            return this._invertDepth;
          }
          setInvertDepth(t) {
            this._invertDepth = t;
          }
          getNearDistance() {
            return this._nearDistance;
          }
          setNearDistance(t) {
            this._nearDistance = t;
          }
          getAutoNearDistance() {
            return this._autoNearDistance;
          }
          getMidDistance() {
            return this._midDistance;
          }
          setMidDistance(t) {
            this._midDistance = t;
          }
          getAutoMidDistance() {
            return this._autoMidDistance;
          }
          getNormalSpacePositionFromCameraSpacePosition(t, e) {
            const s = i.Quaternion.pool.get();
            s.copy(this.getEntity().getOrientation()), s.inverse(s);
            const n = i.Vector3.pool.get();
            n.rotate(s, e),
              i.Quaternion.pool.release(s),
              (t.x =
                (this._threeJsCamera.projectionMatrix.elements[0] * n.x) / n.y),
              (t.y =
                (this._threeJsCamera.projectionMatrix.elements[9] * n.z) / n.y),
              (t.z =
                this._threeJsCamera.projectionMatrix.elements[6] +
                this._threeJsCamera.projectionMatrix.elements[14] / n.y),
              i.Vector3.pool.release(n);
          }
          getNormalSpaceRadiusFromRadius(t, e) {
            return t / Math.abs(e) / Math.tan(this._fieldOfView / 2);
          }
          getCameraSpacePositionFromNormalSpacePosition(t, e) {
            const s = i.Vector3.pool.get();
            (s.y =
              this._threeJsCamera.projectionMatrix.elements[14] /
              (e.z - this._threeJsCamera.projectionMatrix.elements[6])),
              (s.x =
                (e.x * s.y) / this._threeJsCamera.projectionMatrix.elements[0]),
              (s.z =
                (e.y * s.y) / this._threeJsCamera.projectionMatrix.elements[9]),
              t.rotate(this.getEntity().getOrientation(), s),
              i.Vector3.pool.release(s);
          }
          getRadiusFromNormalSpaceRadius(t, e) {
            return t * Math.abs(e) * Math.tan(this._fieldOfView / 2);
          }
          isPositionOccluded(t) {
            for (let e = 0; e < this._occludingEntities.length; e++)
              if (this._occludingEntities[e].isOccludingPosition(this, t))
                return !0;
            return !1;
          }
          getNearestIntersectingEntity(t) {
            let e = Number.POSITIVE_INFINITY,
              s = null;
            const n = i.Interval.pool.get();
            for (let o = 0; o < this._occludingEntities.length; o++) {
              const r = this._occludingEntities[o].getCameraSpacePosition(this);
              if (
                (i.Geometry.getLineSphereIntersectionWithLineStartAtOrigin(
                  n,
                  t,
                  r,
                  this._occludingEntities[o].getOcclusionRadius(),
                ),
                  !Number.isNaN(n.min) && n.min >= 0)
              ) {
                const t = n.min * r.magnitude();
                t < e && ((e = t), (s = this._occludingEntities[o]));
              }
            }
            return i.Interval.pool.release(n), s;
          }
          setBloom(t) {
            (this._threeJsUnrealBloomPass.enabled = t > 0),
              (this._threeJsUnrealBloomPass.strength = t);
          }
          setOutline(t, e, s) {
            if (((this._outlinePass.enabled = null !== e), null !== e)) {
              if (void 0 !== s) {
                const t = e.getThreeJsObjectByName(s);
                if (null === t)
                  throw new Error(
                    `Could not set outline on component ${e} sub-object ${s}.`,
                  );
                this._outlinePass.selectedObjects = [t];
              } else {
                const t = e.getThreeJsObjects();
                this._outlinePass.selectedObjects = [];
                for (let e = 0, s = t.length; e < s; e++)
                  t[e].parent === this._threeJsScene &&
                    this._outlinePass.selectedObjects.push(t[e]);
              }
              this._outlinePass.visibleEdgeColor.setRGB(t.r, t.g, t.b),
                this._outlinePass.hiddenEdgeColor.setRGB(
                  t.r / 4,
                  t.g / 4,
                  t.b / 4,
                );
            }
            this.__setupEffectComposer();
          }
          __addToOccludingEntities(t) {
            for (let e = 0; e < this._occludingEntities.length; e++)
              if (this._occludingEntities[e] === t) return;
            this._occludingEntities.push(t);
          }
          __destroy() {
            super.__destroy(),
              this.getEntity().getScene().__removeCameraDependents(this),
              null !== this._viewport && this._viewport.setCamera(null);
          }
          __updateCameraVariablesForConnectedScene() {
            const t = this._viewport.getBounds().size;
            if (!t.equals(this._renderSize)) {
              const e = t.x / t.y;
              this._aspectRatio !== e && (this._aspectRatio = e),
                this._threeJsComposer.setSize(t.x, t.y),
                this._renderSize.copy(t);
            }
            void 0 === this._midDistance
              ? null !== this.getEntity().getParent() &&
              (this._autoMidDistance =
                this.getEntity().getPosition().magnitude() +
                10 * this.getEntity().getParent().getExtentsRadius())
              : (this._autoMidDistance = this._midDistance),
              void 0 === this._nearDistance
                ? null !== this.getEntity().getParent()
                  ? (this._autoNearDistance = Math.max(
                    1e-5,
                    0.01 *
                    (this.getEntity().getPosition().magnitude() -
                      this.getEntity().getParent().getExtentsRadius()),
                  ))
                  : (this._autoNearDistance = Math.max(
                    1e-5,
                    0.01 * this.getEntity().getPosition().magnitude(),
                  ))
                : (this._autoNearDistance = this._nearDistance),
              this._updateProjectionMatrix(),
              this.getEntity().__updateCameraVariables(this, null, !1);
            for (let t = 0; t < this._occludingEntities.length; t++)
              (this._occludingEntities[t].getPixelSpaceOcclusionRadius(this) <
                1 ||
                !this._occludingEntities[t].isEnabled() ||
                !this._occludingEntities[t].canOcclude() ||
                null ===
                this.getEntity()
                  .getScene()
                  .get(this._occludingEntities[t].getName())) &&
                (this._occludingEntities.splice(t, 1), t--);
          }
          __prepareForRender() {
            const t = this.getEntity().getScene();
            for (let e = 0; e < t.getNumEntities(); e++) {
              const s = t.getEntity(e);
              s.isEnabled() && s.__prepareForRender(this);
            }
            const e = this.getEntity().get("dynEnvMap");
            null !== e && e.__render();
          }
          __render() {
            const t = this.getEntity().getOrientation();
            CameraComponent._tempThreeJsQuaternion.set(t.x, t.y, t.z, t.w),
              this._threeJsCamera.setRotationFromQuaternion(
                CameraComponent._tempThreeJsQuaternion,
              ),
              this._threeJsComposer.render();
          }
          __setViewport(t) {
            null !== this._viewport &&
              this._viewport !== t &&
              this._viewport.setCamera(null),
              (this._viewport = t);
          }
          __setupEffectComposer() {
            const t = new i.THREE.Vector2();
            this._threeJsRenderer.getSize(t);
            const e = {
              samples:
                i.Capabilities.isWebGL2() && !this._outlinePass.enabled
                  ? 4
                  : 0,
            },
              s = new i.THREE.WebGLRenderTarget(t.x, t.y, e);
            if (null !== this._threeJsComposer) this._threeJsComposer.reset(s);
            else {
              this._threeJsComposer = new i.ThreeJsEffectComposer(
                this._threeJsRenderer,
                s,
              );
              const t = new i.ThreeJsRenderPass(
                this._threeJsScene,
                this._threeJsCamera,
              );
              this._threeJsComposer.addPass(t),
                this._threeJsComposer.addPass(this._outlinePass),
                this._threeJsComposer.addPass(this._threeJsUnrealBloomPass);
            }
          }
          _updateProjectionMatrix() {
            if (
              this._fieldOfView > 0 &&
              this._fieldOfView < 180 &&
              this._aspectRatio > 0
            ) {
              const t = Math.tan(this._fieldOfView / 2);
              let e = 0,
                s = 0;
              this._aspectRatio >= 1
                ? ((e = 1 / t), (s = this._aspectRatio / t))
                : ((e = 1 / (t * this._aspectRatio)), (s = 1 / t));
              const n = Number.EPSILON - 1,
                o = this._autoNearDistance * (2 - Number.EPSILON),
                r = new i.THREE.Matrix4();
              r.set(e, 0, 0, 0, 0, 0, s, 0, 0, n, 0, o, 0, 1, 0, 0),
                (this._threeJsCamera.projectionMatrix = r);
              const a = new i.THREE.Matrix4();
              a.set(
                1 / e,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                1 / s,
                0,
                0,
                0,
                0,
                1 / o,
                -n / o,
              ),
                (this._threeJsCamera.projectionMatrixInverse = a);
            }
          }
          __loadResources() {
            return Promise.resolve();
          }
          __unloadResources() { }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CMTSComponent: function () {
              return CMTSComponent;
            },
          });
        var i = s(6);
        class CMTSComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._threeJsScene = this.getEntity()
                .getScene()
                .getThreeJsScene()),
              (this._endPoints = new i.FastMap()),
              (this._heightScale = 1),
              (this._numEndPointsLoading = 0),
              (this._minLevel = Number.NEGATIVE_INFINITY),
              (this._maxLevel = Number.POSITIVE_INFINITY),
              (this._tileOffsets = []),
              (this._splitJoinThresholdFactor = 512),
              (this._colorTileSize = 512),
              (this._shadowEntities = []),
              (this._engine = this.getEntity().getScene().getEngine()),
              (this._cameraPositions = []),
              (this._cameraFieldsOfView = []),
              (this._rootTiles = [null, null, null, null, null, null]),
              (this._tilesLoadedPromise = null),
              (this._transitionsCompleteCallback = null),
              (this._textureCache = new i.Cache(
                (t) =>
                  this.getEntity()
                    .getScene()
                    .getEngine()
                    .getTextureLoader()
                    .loadTexture(t, !0),
                (t) => {
                  t.then((t) => {
                    t.dispose();
                  });
                },
              )),
              (this._numCurrentLoads = 0),
              (this._maxCurrentLoads = 10),
              (this._atmosphereComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._atmosphereComponentRef.setByType(
                this.getEntity().getName(),
                "atmosphere",
              ),
              (this._spheroidComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
              ),
              this._spheroidComponentRef.setRefChangedCallback(
                this._spheroidRefChangedCallback.bind(this),
              ),
              (this._spheroidChangedCallback =
                this._spheroidChangedCallback.bind(this)),
              this.__setUsesEntityOrientation(!0);
          }
          setBaseUrl(t, e) {
            this.resetResources(),
              this._endPoints.set(t, { url: e, configuration: null });
          }
          getHeightScale() {
            return this._heightScale;
          }
          setHeightScale(t) {
            (this._heightScale = t), this.resetResources();
          }
          getMinLevel() {
            return this._minLevel;
          }
          setMinLevel(t) {
            this._minLevel = t;
          }
          getMaxLevel() {
            return this._maxLevel;
          }
          setMaxLevel(t) {
            this._maxLevel = t;
          }
          addTileOffset(t, e, s, n, o, r, a) {
            this._tileOffsets.push({
              offset: t,
              face: e,
              level: s,
              min: new i.Vector2(n, o),
              max: new i.Vector2(r, a),
            }),
              this.resetResources();
          }
          removeTileOffset(t, e, s, i, n, o) {
            for (let r = 0; r < this._tileOffsets.length; r++) {
              const a = this._tileOffsets[r];
              if (
                a.face === e &&
                a.level === t &&
                a.min.x === s &&
                a.min.y === i &&
                a.max.x === n &&
                a.max.y === o
              )
                return (
                  this._tileOffsets.splice(r, 1), void this.resetResources()
                );
            }
          }
          getNumShadowEntities() {
            return this._shadowEntities.length;
          }
          getShadowEntity(t) {
            return this._shadowEntities[t]?.getName();
          }
          setShadowEntities(t) {
            this._shadowEntities = [];
            for (const e of t)
              this._shadowEntities.push(
                new i.EntityRef(this.getEntity().getScene(), e),
              );
            const e = t.length > 0;
            for (let t = 0, s = this.getThreeJsMaterials().length; t < s; t++)
              i.ThreeJsHelper.setDefine(
                this.getThreeJsMaterials()[t],
                "shadowEntities",
                e,
              );
          }
          getGroundPosition(t, e, s) {
            const n = this._spheroidComponentRef.get();
            if (null === n) return void t.copy(i.Vector3.NaN);
            const o = i.LatLonAlt.pool.get();
            n.llaFromXYZ(o, s),
              (o.alt = 0),
              n.xyzFromLLA(t, o),
              n.isPlanetographic() ? n.upFromLLA(e, o) : e.normalize(s);
            const r = this._endPoints.get("height");
            if (void 0 !== r) {
              const e = i.Vector3.pool.get(),
                s = i.Vector3.pool.get();
              (o.alt = 1),
                i.Geometry.getXYZFromLLAOnSphere(s, o, 0),
                i.CubeMap.xyzToUVFace(e, s);
              let a = this._rootTiles[e.z];
              if (null == a)
                return (
                  i.Vector3.pool.release(s),
                  i.Vector3.pool.release(e),
                  void i.LatLonAlt.pool.release(o)
                );
              for (; a.children.length > 0;) {
                const t = 1 << (a.getLevel() + 1),
                  s = Math.floor(e.x * t - 2 * a.getTileCoord().x),
                  i = Math.floor(e.y * t - 2 * a.getTileCoord().y);
                a = a.children[2 * i + s];
              }
              for (; null === a.getHeightData() && null !== a.getParent();)
                a = a.getParent();
              const l = a.getHeightData();
              if (null !== l) {
                const s = 1 << a.getLevel(),
                  i = (e.x * s - a.getTileCoord().x) * (l.width - 4) + 2,
                  c = (1 - (e.y * s - a.getTileCoord().y)) * (l.width - 4) + 2,
                  h = CMTSTile.getLinearInterpolatedHeightPixel(
                    i,
                    c,
                    l.data,
                    l.width,
                  ),
                  u = r.configuration,
                  d = u.height_range.min * this._heightScale,
                  p =
                    (u.height_range.max - u.height_range.min) *
                    this._heightScale;
                (o.alt = d + h * p), n.xyzFromLLA(t, o);
              }
              i.Vector3.pool.release(s), i.Vector3.pool.release(e);
            }
            i.LatLonAlt.pool.release(o);
          }
          areTilesLoaded() {
            return null === this._tilesLoadedPromise;
          }
          getTilesLoadedPromise() {
            return this._tilesLoadedPromise ?? Promise.resolve();
          }
          setSpheroidReference(t) {
            "string" == typeof t
              ? this._spheroidComponentRef.setByName(
                this.getEntity().getName(),
                t,
              )
              : this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
                t,
              );
          }
          __destroy() {
            const t = this._spheroidComponentRef.get();
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              super.__destroy();
          }
          __update() {
            if (
              (this._spheroidComponentRef.update(),
                "loaded" !== this.getLoadState() ||
                null === this._spheroidComponentRef.get())
            )
              return;
            if (null === this._rootTiles[0]) {
              if (0 !== this._numEndPointsLoading) return;
              for (let t = 0; t < 6; t++)
                (this._rootTiles[t] = new CMTSTile(
                  this,
                  null,
                  t,
                  0,
                  new i.Vector2(0, 0),
                )),
                  this._rootTiles[t].forceLoad();
            }
            let t = !1;
            for (
              ;
              this._cameraPositions.length > this._engine.getNumViewports();

            )
              this._cameraPositions.pop(), this._cameraFieldsOfView.pop();
            for (
              ;
              this._cameraPositions.length < this._engine.getNumViewports();

            )
              this._cameraPositions.push(new i.Vector3()),
                this._cameraFieldsOfView.push(1);
            for (let t = 0, e = this._engine.getNumViewports(); t < e; t++) {
              const e = this._cameraPositions[t],
                s = this._engine.getViewport(t).getCamera();
              s
                .getEntity()
                .getPositionRelativeToEntity(
                  e,
                  i.Vector3.Zero,
                  this.getEntity(),
                ),
                e.rotateInverse(this.getEntity().getOrientation(), e),
                (this._cameraFieldsOfView[t] = s.getFieldOfView());
            }
            for (let e = 0; e < 6; e++) t = this._rootTiles[e].update() || t;
            if (
              (null === this._tilesLoadedPromise &&
                t &&
                (this._tilesLoadedPromise = new Promise((t) => {
                  this._transitionsCompleteCallback = t;
                })),
                null !== this._tilesLoadedPromise && !t)
            ) {
              const t = this._transitionsCompleteCallback;
              (this._tilesLoadedPromise = null),
                (this._transitionsCompleteCallback = null),
                t();
            }
          }
          __prepareForRender(t) {
            if (null === this._rootTiles[0]) return;
            i.ThreeJsHelper.setOrientationToEntity(
              this.getThreeJsObjects(),
              this.getEntity(),
            );
            for (let e = 0; e < 6; e++) this._rootTiles[e].prepareForRender(t);
            const e = this._atmosphereComponentRef.get();
            i.MaterialUtils.setUniforms(
              this.getThreeJsMaterials(),
              t,
              this.getEntity(),
              this._shadowEntities,
              e,
              !0,
            );
          }
          __loadResources() {
            const t = [];
            for (let e = 0, s = this._endPoints.size; e < s; e++) {
              const s = this._endPoints.getAt(e),
                i = s.value.url;
              this._numEndPointsLoading += 1;
              const n = this.getEntity()
                .getScene()
                .getEngine()
                .getDownloader()
                .download(i + "/configuration.json", !1)
                .then((t) => {
                  if ("failed" === t.status)
                    throw new Error(
                      "Failed to download " + i + "/configuration.json",
                    );
                  if (
                    "completed" === t.status &&
                    "string" == typeof t.content
                  ) {
                    const e = JSON.parse(t.content);
                    (s.value.configuration = e),
                      "color" === s.key && (this._colorTileSize = e.tile_size),
                      (this._numEndPointsLoading -= 1);
                  }
                });
              t.push(n);
            }
            return Promise.all(t);
          }
          __unloadResources() {
            for (let t = 0; t < 6; t++)
              null !== this._rootTiles[t] && this._rootTiles[t].destroy();
            this._rootTiles = [null, null, null, null, null, null];
          }
          __getNumCurrentLoads() {
            return this._numCurrentLoads;
          }
          __incNumCurrentLoads() {
            this._numCurrentLoads += 1;
          }
          __decNumCurrentLoads() {
            this._numCurrentLoads -= 1;
          }
          __getMaxCurrentLoads() {
            return this._maxCurrentLoads;
          }
          __getEndPoints() {
            return this._endPoints;
          }
          __endPointsAreLoaded() {
            return 0 === this._numEndPointsLoading;
          }
          __getTileOffsets() {
            return this._tileOffsets;
          }
          __getTextureCache() {
            return this._textureCache;
          }
          __getCameraPositions() {
            return this._cameraPositions;
          }
          __getCameraFieldsOfView() {
            return this._cameraFieldsOfView;
          }
          __getThreeJsScene() {
            return this._threeJsScene;
          }
          __getSplitJoinThresholdFactor() {
            return this._splitJoinThresholdFactor;
          }
          __getColorTileSize() {
            return this._colorTileSize;
          }
          __getSpheroidComponent() {
            return this._spheroidComponentRef.get();
          }
          _spheroidRefChangedCallback(t, e) {
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              null !== e && e.addChangedCallback(this._spheroidChangedCallback),
              this._spheroidChangedCallback();
          }
          _spheroidChangedCallback() {
            const t = this._spheroidComponentRef.get();
            null !== t
              ? this.__setRadius(
                Math.max(t.getEquatorialRadius(), t.getPolarRadius()),
              )
              : this.__setRadius(0),
              this.resetResources();
          }
        }
        class CMTSTile extends i.Tile {
          constructor(t, e, s, n, o) {
            super(e),
              (this._component = t),
              (this._face = s),
              (this._level = n),
              (this._levelPow = Math.pow(2, -Math.max(0, n))),
              (this._tile = new i.Vector2()),
              this._tile.copy(o),
              (this._isLeaf = !0),
              (this._center = new i.Vector3()),
              (this._radius = 0),
              (this._threeJsMaterial = null),
              (this._textureLevels = new i.FastMap()),
              (this._texturePromises = new i.FastMap()),
              (this._nonPositiveTextureLoading = !1),
              (this._threeJsObject = null),
              (this._heightData = null),
              (this._tileOffset = this._getTileOffset());
            for (let t = 0; t < 2; t++)
              for (let e = 0; e < 2; e++)
                for (
                  let s = 0;
                  s < this._component.__getEndPoints().size;
                  s++
                ) {
                  const n = this._component.__getEndPoints().getAt(s)
                    .value.configuration;
                  this._isLeaf =
                    this._isLeaf &&
                    !CMTSTile._isInABoundary(
                      n,
                      this._face,
                      this._level + 1,
                      new i.Vector2(2 * this._tile.x + e, 2 * this._tile.y + t),
                    );
                }
            const r = t.__getSpheroidComponent();
            CMTSTile.cmtsCoordToPosition(
              this._center,
              this._face,
              this._levelPow,
              this._tile.x + 0.5,
              this._tile.y + 0.5,
              r,
            );
            const a = new i.Vector3(),
              l = new i.Vector3(),
              c = new i.Vector3(),
              h = new i.Vector3();
            CMTSTile.cmtsCoordToPosition(
              a,
              this._face,
              this._levelPow,
              this._tile.x,
              this._tile.y,
              r,
            ),
              CMTSTile.cmtsCoordToPosition(
                l,
                this._face,
                this._levelPow,
                this._tile.x + 1,
                this._tile.y,
                r,
              ),
              CMTSTile.cmtsCoordToPosition(
                c,
                this._face,
                this._levelPow,
                this._tile.x + 1,
                this._tile.y + 1,
                r,
              ),
              CMTSTile.cmtsCoordToPosition(
                h,
                this._face,
                this._levelPow,
                this._tile.x,
                this._tile.y + 1,
                r,
              ),
              a.sub(this._center, a),
              l.sub(this._center, l),
              c.sub(this._center, c),
              h.sub(this._center, h),
              (this._radius = Math.max(
                a.magnitude(),
                l.magnitude(),
                c.magnitude(),
                h.magnitude(),
              ));
            const u = this._component.__getEndPoints();
            for (let t = 0; t < u.size; t++) {
              const e = u.getAt(t).key,
                s = u.getAt(t).value,
                i = 0 === this._level ? this._getNonPositiveLevel(e) : 0;
              if (
                CMTSTile._isInABoundary(
                  s.configuration,
                  this._face,
                  this._level,
                  this._tile,
                )
              ) {
                const t = 0 === this._level ? i : this._level;
                this._textureLevels.set(e, t);
              } else {
                let s = this.getParent();
                for (
                  ;
                  null !== s && s._level !== s._textureLevels.getAt(t).value;

                )
                  s = s.getParent();
                null !== s
                  ? this._textureLevels.set(e, s._textureLevels.getAt(t).value)
                  : this._textureLevels.set(e, 0);
              }
            }
          }
          getLevel() {
            return this._level;
          }
          getTileCoord() {
            return this._tile;
          }
          getHeightData() {
            return this._heightData;
          }
          createNewTile(t, e, s) {
            const n = this._level + 1,
              o = new i.Vector2(2 * t._tile.x + s, 2 * t._tile.y + e);
            return new CMTSTile(t._component, this, this._face, n, o);
          }
          checkSplit() {
            if (this._isLeaf || this._level >= this._component.getMaxLevel())
              return !1;
            if (
              this._component.__getNumCurrentLoads() >=
              this._component.__getMaxCurrentLoads()
            )
              return !1;
            if (this._level < this._component.getMinLevel()) return !0;
            const t = this._component.__getColorTileSize();
            return (
              this._getNearestDistance() <
              (this._component.__getSplitJoinThresholdFactor() * this._radius) /
              t
            );
          }
          checkJoin() {
            if (this._level >= this._component.getMaxLevel()) return !0;
            if (
              this._component.__getNumCurrentLoads() >=
              this._component.__getMaxCurrentLoads()
            )
              return !1;
            if (this._level < this._component.getMinLevel()) return !1;
            const t = this._component.__getColorTileSize();
            return (
              this._getNearestDistance() >
              ((this._component.__getSplitJoinThresholdFactor() *
                this._radius) /
                t) *
              4
            );
          }
          async load() {
            if (
              (this._component.__incNumCurrentLoads(),
                null !== this._threeJsMaterial)
            )
              throw (
                (this._component.__decNumCurrentLoads(),
                  new Error("Tile already has material."))
              );
            (this._threeJsMaterial = i.MaterialUtils.get()),
              this._component.getThreeJsMaterials().push(this._threeJsMaterial),
              (this._threeJsMaterial.defines.shadowEntities =
                this._component.getNumShadowEntities() > 0);
            const t = this._component.__getEndPoints(),
              e = [];
            for (let s = 0; s < t.size; s++) {
              const i = t.getAt(s).key,
                n = t.getAt(s).value;
              let o = null;
              const r = this._textureLevels.get(i),
                a = this._tile.x >> (this._level - r),
                l = this._tile.y >> (this._level - r),
                c =
                  n.url +
                  "/" +
                  this._face +
                  "/" +
                  r +
                  "/" +
                  a +
                  "/" +
                  l +
                  "." +
                  n.configuration.extension;
              (o = this._component.__getTextureCache().get(c)),
                this._texturePromises.set(i, o),
                e.push(
                  o
                    .then((t) => {
                      this._setTexture(i, t);
                    })
                    .catch(async () => {
                      this._component.__getTextureCache().release(o),
                        (o = this._component.__getTextureCache().get("pink"));
                      const t = await o;
                      this._setTexture(i, t);
                    }),
                );
            }
            return Promise.all(e).finally(() => {
              this._component.__decNumCurrentLoads();
            });
          }
          async unload() {
            if (null === this._threeJsMaterial)
              throw new Error("Tile has no material to unload.");
            const t = this._component.getThreeJsMaterials();
            for (let e = 0, s = t.length; e < s; e++)
              if (t[e] === this._threeJsMaterial) {
                t.splice(e, 1);
                break;
              }
            this._threeJsMaterial.dispose(), (this._threeJsMaterial = null);
            for (let t = 0; t < this._texturePromises.size; t++)
              this._component
                .__getTextureCache()
                .release(this._texturePromises.getAt(t).value);
          }
          async activate() {
            if (null !== this._threeJsObject || null === this._threeJsMaterial)
              throw new Error("NULL");
            const t = [
              { name: "position", dimensions: 3 },
              { name: "normal", dimensions: 3 },
              { name: "uv", dimensions: 2 },
            ];
            this._textureLevels.has("normal") &&
              (t.push({ name: "tangent", dimensions: 3 }),
                t.push({ name: "bitangent", dimensions: 3 }));
            for (let e = 0; e < this._textureLevels.size; e++) {
              const s = this._textureLevels.getAt(e).key;
              "color" !== s &&
                "height" !== s &&
                t.push({ name: s + "UV", dimensions: 2 });
            }
            (this._threeJsObject = i.ThreeJsHelper.createMeshObject(
              this._component,
              this._threeJsMaterial,
              t,
              !1,
            )),
              this._component.getThreeJsObjects().push(this._threeJsObject),
              i.ThreeJsHelper.useInDynEnvMap(this._threeJsObject, !0),
              this._setupMesh();
          }
          async deactivate() {
            const t = this._component.getThreeJsObjects();
            for (let e = 0, s = t.length; e < s; e++)
              if (t[e] === this._threeJsObject) {
                t.splice(e, 1);
                break;
              }
            i.ThreeJsHelper.destroyObject(this._threeJsObject),
              (this._threeJsObject = null);
          }
          update() {
            if (!this._component.__endPointsAreLoaded()) return !1;
            let t = this.check();
            for (let e = 0, s = this.children.length; e < s; e++)
              t = this.children[e].update() || t;
            if (
              !t &&
              !this._nonPositiveTextureLoading &&
              0 === this._level &&
              0 === this.children.length
            ) {
              const e = this._component.__getEndPoints();
              for (let s = 0; s < e.size; s++) {
                const i = e.getAt(s).key,
                  n = e.getAt(s).value,
                  o = this._getNonPositiveLevel(i);
                if (o !== this._textureLevels.get(i)) {
                  (this._nonPositiveTextureLoading = !0),
                    this._textureLevels.set(i, o),
                    (t = !0);
                  const e =
                    n.url +
                    "/" +
                    this._face +
                    "/" +
                    o +
                    "/0/0." +
                    n.configuration.extension,
                    s = this._texturePromises.get(i);
                  let r = this._component.__getTextureCache().get(e);
                  this._texturePromises.set(i, r),
                    r
                      .then((t) => {
                        this._setTexture(i, t),
                          this._setupMesh(),
                          (this._nonPositiveTextureLoading = !1);
                      })
                      .catch(async () => {
                        this._component.__getTextureCache().release(r),
                          (r = this._component.__getTextureCache().get("pink"));
                        const t = await r;
                        this._setTexture(i, t),
                          (this._nonPositiveTextureLoading = !1);
                      })
                      .finally(() => {
                        "height" !== i &&
                          this._component.__getTextureCache().release(s);
                      });
                }
              }
            }
            return (t = this._nonPositiveTextureLoading || t), t;
          }
          _setupMesh() {
            const t = this._component.__getColorTileSize(),
              e = new i.FastMap(),
              s = new i.FastMap(),
              n = new i.FastMap();
            for (let t = 0; t < this._textureLevels.size; t++) {
              const e = this._textureLevels.getAt(t).key,
                o =
                  1 << (this._level - Math.max(0, this._textureLevels.get(e)));
              s.set(
                e,
                new i.Vector2(
                  (this._tile.x - Math.floor(this._tile.x / o) * o) / o,
                  (this._tile.y - Math.floor(this._tile.y / o) * o) / o,
                ),
              ),
                n.set(e, new i.Vector2(1 / o, 1 / o));
            }
            const o = this._textureLevels.has("normal"),
              r = this._heightData
                ? i.MathUtils.clamp(
                  Math.ceil(this._heightData.width * n.get("height").x) - 2,
                  5,
                  129,
                )
                : 5 << i.MathUtils.clamp(2 - this._level / 2, 0, 2),
              a = this._heightData
                ? i.MathUtils.clamp(
                  Math.ceil(this._heightData.height * n.get("height").y) - 2,
                  5,
                  129,
                )
                : 5 << i.MathUtils.clamp(2 - this._level / 2, 0, 2),
              l = r * a,
              c = new Float32Array(3 * l),
              h = new Float32Array(3 * l);
            let u = null,
              d = null;
            o && ((u = new Float32Array(3 * l)), (d = new Float32Array(3 * l)));
            const p = new Uint16Array((r - 1) * (a - 1) * 6);
            for (let t = 0; t < this._textureLevels.size; t++) {
              const s = this._textureLevels.getAt(t).key;
              e.set(s, new Float32Array(2 * l));
            }
            let m = 0,
              _ = 0;
            if (this._textureLevels.has("height")) {
              const t = this._component
                .__getEndPoints()
                .get("height").configuration;
              (m = t.height_range.min * this._component.getHeightScale()),
                (_ =
                  (t.height_range.max - t.height_range.min) *
                  this._component.getHeightScale());
            }
            const g = new i.Vector2(),
              y = new i.Vector3(),
              f = new i.Vector3(),
              b = new i.Vector3(),
              T = new i.Vector3(),
              S = new i.Vector3(),
              E = new i.LatLonAlt(),
              v = this._component.__getSpheroidComponent();
            for (let l = 0; l < a; l++)
              for (let C = 0; C < r; C++) {
                const x = l * r + C;
                if (
                  (g.set(
                    this._tile.x + (C - 1) / (r - 3),
                    this._tile.y + (l - 1) / (a - 3),
                  ),
                    CMTSTile.cmtsCoordToPosition(
                      y,
                      this._face,
                      this._levelPow,
                      g.x,
                      g.y,
                      v,
                    ),
                    o &&
                    (CMTSTile.cmtsCoordToTangent(
                      T,
                      this._face,
                      this._levelPow,
                      g.x,
                      g.y,
                      v,
                    ),
                      CMTSTile.cmtsCoordToBitangent(
                        S,
                        this._face,
                        this._levelPow,
                        g.x,
                        g.y,
                        v,
                      )),
                    v.llaFromXYZ(E, y),
                    v.upFromLLA(b, E),
                    v.isPlanetographic() ? f.copy(b) : f.normalize(y),
                    this._heightData)
                ) {
                  const t = this._heightData.data,
                    e = s.get("height"),
                    o = n.get("height"),
                    c = this._heightData.width - 4;
                  if (
                    (CMTSTile.getHeightPos(y, f, C, l, t, e, r, a, o, c, m, _),
                      !this._textureLevels.has("normal"))
                  ) {
                    const s = i.Vector3.pool.get(),
                      n = i.Vector3.pool.get(),
                      h = i.Vector3.pool.get(),
                      u = i.Vector3.pool.get(),
                      d = i.Vector3.pool.get(),
                      p = i.Vector3.pool.get(),
                      y = i.Vector3.pool.get(),
                      b = i.Vector3.pool.get();
                    CMTSTile.cmtsCoordToPosition(
                      s,
                      this._face,
                      this._levelPow,
                      g.x - 1 / (r - 3),
                      g.y,
                      v,
                    ),
                      CMTSTile.getHeightPos(
                        s,
                        f,
                        C - 1,
                        l,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      CMTSTile.cmtsCoordToPosition(
                        n,
                        this._face,
                        this._levelPow,
                        g.x + 1 / (r - 3),
                        g.y,
                        v,
                      ),
                      CMTSTile.getHeightPos(
                        n,
                        f,
                        C + 1,
                        l,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      CMTSTile.cmtsCoordToPosition(
                        h,
                        this._face,
                        this._levelPow,
                        g.x,
                        g.y - 1 / (a - 3),
                        v,
                      ),
                      CMTSTile.getHeightPos(
                        h,
                        f,
                        C,
                        l - 1,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      CMTSTile.cmtsCoordToPosition(
                        u,
                        this._face,
                        this._levelPow,
                        g.x,
                        g.y + 1 / (a - 3),
                        v,
                      ),
                      CMTSTile.getHeightPos(
                        u,
                        f,
                        C,
                        l + 1,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      CMTSTile.cmtsCoordToPosition(
                        d,
                        this._face,
                        this._levelPow,
                        g.x - 1 / (r - 3),
                        g.y - 1 / (a - 3),
                        v,
                      ),
                      CMTSTile.getHeightPos(
                        d,
                        f,
                        C - 1,
                        l - 1,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      CMTSTile.cmtsCoordToPosition(
                        p,
                        this._face,
                        this._levelPow,
                        g.x + 1 / (r - 3),
                        g.y + 1 / (a - 3),
                        v,
                      ),
                      CMTSTile.getHeightPos(
                        p,
                        f,
                        C + 1,
                        l + 1,
                        t,
                        e,
                        r,
                        a,
                        o,
                        c,
                        m,
                        _,
                      ),
                      s.sub(n, s),
                      h.sub(u, h),
                      f.cross(s, h),
                      f.normalize(f),
                      i.Vector3.pool.release(s),
                      i.Vector3.pool.release(n),
                      i.Vector3.pool.release(h),
                      i.Vector3.pool.release(u),
                      i.Vector3.pool.release(d),
                      i.Vector3.pool.release(p),
                      i.Vector3.pool.release(y),
                      i.Vector3.pool.release(b);
                  }
                }
                (0 !== C && 0 !== l && C !== r - 1 && l !== a - 1) ||
                  (this._textureLevels.has("height")
                    ? y.setMagnitude(y, y.magnitude() - 2 * _ * this._levelPow)
                    : y.mult(y, 0.9)),
                  y.sub(y, this._tileOffset),
                  (c[3 * x + 0] = y.x),
                  (c[3 * x + 1] = y.y),
                  (c[3 * x + 2] = y.z),
                  (h[3 * x + 0] = f.x),
                  (h[3 * x + 1] = f.y),
                  (h[3 * x + 2] = f.z),
                  o &&
                  ((u[3 * x + 0] = T.x),
                    (u[3 * x + 1] = T.y),
                    (u[3 * x + 2] = T.z),
                    (d[3 * x + 0] = S.x),
                    (d[3 * x + 1] = S.y),
                    (d[3 * x + 2] = S.z));
                for (let i = 0; i < this._textureLevels.size; i++) {
                  const o = this._textureLevels.getAt(i).key,
                    c = s.get(o),
                    h = n.get(o),
                    u = e.get(o);
                  (u[2 * x + 0] =
                    ((c.x + ((C - 1) / (r - 3)) * h.x) * t) / (t + 4) +
                    2 / (t + 4)),
                    (u[2 * x + 1] =
                      1 -
                      (((c.y + ((l - 1) / (a - 3)) * h.y) * t) / (t + 4) +
                        2 / (t + 4)));
                }
                if (C < r - 1 && l < a - 1) {
                  const t = l * (r - 1) + C;
                  (p[6 * t + 0] = r * (l + 0) + (C + 0)),
                    (p[6 * t + 1] = r * (l + 0) + (C + 1)),
                    (p[6 * t + 2] = r * (l + 1) + (C + 1)),
                    (p[6 * t + 3] = r * (l + 0) + (C + 0)),
                    (p[6 * t + 4] = r * (l + 1) + (C + 1)),
                    (p[6 * t + 5] = r * (l + 1) + (C + 0));
                }
              }
            i.ThreeJsHelper.setVertices(
              this._threeJsObject.geometry,
              "position",
              c,
            ),
              i.ThreeJsHelper.setVertices(
                this._threeJsObject.geometry,
                "normal",
                h,
              ),
              o &&
              (i.ThreeJsHelper.setVertices(
                this._threeJsObject.geometry,
                "tangent",
                u,
              ),
                i.ThreeJsHelper.setVertices(
                  this._threeJsObject.geometry,
                  "bitangent",
                  d,
                ));
            for (let t = 0; t < this._textureLevels.size; t++) {
              const s = this._textureLevels.getAt(t).key,
                n = e.get(s);
              "height" !== s &&
                ("color" === s
                  ? i.ThreeJsHelper.setVertices(
                    this._threeJsObject.geometry,
                    "uv",
                    n,
                  )
                  : i.ThreeJsHelper.setVertices(
                    this._threeJsObject.geometry,
                    s + "UV",
                    n,
                  ));
            }
            i.ThreeJsHelper.setIndices(this._threeJsObject.geometry, p);
          }
          _getNonPositiveLevel(t) {
            const e = this._getNearestDistance(),
              s = this._component.__getEndPoints().get(t),
              n = s.configuration.tile_size;
            return i.MathUtils.clamp(
              4 -
              Math.floor(
                Math.log2(
                  (e /
                    this._radius /
                    this._component.__getSplitJoinThresholdFactor()) *
                  n *
                  4,
                ),
              ),
              s.configuration.first_level,
              0,
            );
          }
          _getNearestDistance() {
            let t = Number.POSITIVE_INFINITY;
            const e = this._component.__getCameraPositions(),
              s = this._component.__getCameraFieldsOfView();
            for (let i = 0, n = e.length; i < n; i++) {
              const n = e[i],
                o = s[i];
              CMTSTile._pos.sub(n, this._center);
              const r =
                Math.max(0, CMTSTile._pos.magnitude() - this._radius) *
                Math.tan(o / 2);
              t > r && (t = r);
            }
            return t;
          }
          toString() {
            return (
              this._face +
              "/" +
              this._level +
              "/" +
              this._tile.x +
              "/" +
              this._tile.y
            );
          }
          prepareForRender(t) {
            const e = this._component.getEntity();
            if (null !== this._threeJsObject) {
              const s = e.getCameraSpacePosition(t),
                n = i.Vector3.pool.get();
              n.rotate(e.getOrientation(), this._center);
              const o = Math.acos(n.dot(s) / n.magnitude() / s.magnitude());
              if (
                (i.Vector3.pool.release(n),
                  o < Math.PI / 2 - (Math.PI / 4) * this._levelPow)
              )
                return void (this._threeJsObject.visible = !1);
            }
            i.ThreeJsHelper.setPositionToEntity(
              this._threeJsObject,
              this._component.getEntity(),
              t,
              this._tileOffset,
              !0,
            );
            for (let e = 0, s = this.children.length; e < s; e++)
              this.children[e].prepareForRender(t);
          }
          _setTexture(t, e) {
            if ("loaded" === this._component.getLoadState())
              if ("height" === t) {
                const t = document.createElement("canvas");
                (t.width = e.image.width), (t.height = e.image.height);
                const s = t.getContext("2d", { desynchronized: !0, alpha: !1 });
                s.drawImage(e.image, 0, 0),
                  e.dispose(),
                  (this._heightData = s.getImageData(
                    0,
                    0,
                    e.image.width,
                    e.image.height,
                  )),
                  this._component
                    .__getTextureCache()
                    .release(this._texturePromises.get("height")),
                  this._texturePromises.delete("height");
                const n = this._component.__getSpheroidComponent();
                CMTSTile.cmtsCoordToPosition(
                  this._center,
                  this._face,
                  this._levelPow,
                  this._tile.x + 0.5,
                  this._tile.y + 0.5,
                  n,
                );
                const o = i.Vector3.pool.get(),
                  r = i.LatLonAlt.pool.get();
                n.llaFromXYZ(r, this._center), n.upFromLLA(o, r);
                const a = CMTSTile.getLinearInterpolatedHeightPixel(
                  this._heightData.width / 2,
                  this._heightData.height / 2,
                  this._heightData.data,
                  this._heightData.width,
                ),
                  l = this._component
                    .__getEndPoints()
                    .get("height").configuration,
                  c = l.height_range.min * this._component.getHeightScale(),
                  h =
                    (l.height_range.max - l.height_range.min) *
                    this._component.getHeightScale();
                this._center.addMult(this._center, o, c + a * h),
                  i.Vector3.pool.release(o),
                  i.LatLonAlt.pool.release(r);
              } else
                (this._threeJsMaterial.uniforms[t + "Texture"].value = e),
                  "normal" === t
                    ? ((this._threeJsMaterial.defines.normalMap = !0),
                      (this._threeJsMaterial.defines.normalUVs = !0),
                      (this._threeJsMaterial.defines.hasBitangents = !0),
                      this._threeJsMaterial.uniforms.normalScale.value.set(
                        this._component.getHeightScale(),
                        this._component.getHeightScale(),
                      ),
                      (this._threeJsMaterial.uniforms.specularIntensity.value = 0),
                      (this._threeJsMaterial.uniforms.specularHardness.value = 100))
                    : "specular" === t
                      ? ((this._threeJsMaterial.defines.specularMap = !0),
                        (this._threeJsMaterial.defines.specularUVs = !0))
                      : "night" === t
                        ? ((this._threeJsMaterial.defines.nightMap = !0),
                          (this._threeJsMaterial.defines.nightUVs = !0))
                        : "decal" === t &&
                        ((this._threeJsMaterial.defines.decalMap = !0),
                          (this._threeJsMaterial.defines.decalUVs = !0));
          }
          static _getGreatestLevel(t, e, s, i) {
            let n = Number.NEGATIVE_INFINITY;
            for (let o = 0, r = t.boundaries.length; o < r; o++) {
              const r = t.boundaries[o];
              if (r.face !== e) continue;
              const a = r.last_level - s;
              r.min[0] <= i.x >> a &&
                i.x >> a <= r.max[0] &&
                r.min[1] <= i.y >> a &&
                i.y >> a <= r.max[1] &&
                n < r.last_level &&
                (n = r.last_level);
            }
            return n;
          }
          static _isInABoundary(t, e, s, i) {
            let n = !1;
            for (let o = 0, r = t.boundaries.length; o < r; o++) {
              const r = t.boundaries[o];
              if (r.face !== e) continue;
              if (r.last_level < s) continue;
              const a = 1 << (r.last_level - s);
              i.x < Math.floor(r.min[0] / a) ||
                Math.floor(r.max[0] / a) < i.x ||
                i.y < Math.floor(r.min[1] / a) ||
                Math.floor(r.max[1] / a) < i.y ||
                (n = !0);
            }
            return n;
          }
          _getTileOffset() {
            const t = this._component.__getTileOffsets();
            for (let e = 0, s = t.length; e < s; e++) {
              const s = t[e];
              if (s.face !== this._face || s.level > this._level) continue;
              const i = 1 << (this._level - s.level);
              if (
                s.min.x * i <= this._tile.x &&
                this._tile.x < (s.max.x + 1) * i &&
                s.min.y * i <= this._tile.y &&
                this._tile.y < (s.max.y + 1) * i
              )
                return s.offset;
            }
            return i.Vector3.Zero;
          }
          static getHeightPos(t, e, s, i, n, o, r, a, l, c, h, u) {
            const d =
              (((o.x + ((s - 1) / (r - 3)) * l.x) * c) / (c + 4) +
                2 / (c + 4)) *
              (c + 4),
              p =
                (1 -
                  (((o.y + ((i - 1) / (a - 3)) * l.y) * c) / (c + 4) +
                    2 / (c + 4))) *
                (c + 4),
              m = this.getLinearInterpolatedHeightPixel(d, p, n, c + 4);
            t.addMult(t, e, h + m * u);
          }
          static getLinearInterpolatedHeightPixel(t, e, s, i) {
            const n = Math.floor(t),
              o = Math.floor(e),
              r = t - n,
              a = e - o,
              l = Math.abs(r - 0.5),
              c = Math.abs(a - 0.5);
            let h = this.getHeightFromPixel(n, o, s, i) * ((1 - l) * (1 - c));
            return (
              r >= 0.5
                ? ((h +=
                  this.getHeightFromPixel(n + 1, o, s, i) * (l * (1 - c))),
                  a < 0.5
                    ? (h +=
                      this.getHeightFromPixel(n + 1, o - 1, s, i) * (l * c))
                    : a >= 0.5 &&
                    (h +=
                      this.getHeightFromPixel(n + 1, o + 1, s, i) * (l * c)))
                : r < 0.5 &&
                ((h +=
                  this.getHeightFromPixel(n - 1, o, s, i) * (l * (1 - c))),
                  a < 0.5
                    ? (h +=
                      this.getHeightFromPixel(n - 1, o - 1, s, i) * (l * c))
                    : a >= 0.5 &&
                    (h +=
                      this.getHeightFromPixel(n - 1, o + 1, s, i) * (l * c))),
              a >= 0.5
                ? (h += this.getHeightFromPixel(n, o + 1, s, i) * ((1 - l) * c))
                : a < 0.5 &&
                (h +=
                  this.getHeightFromPixel(n, o - 1, s, i) * ((1 - l) * c)),
              h
            );
          }
          static getHeightFromPixel(t, e, s, n) {
            t = i.MathUtils.clamp(t, 0, n - 1);
            const o = 4 * ((e = i.MathUtils.clamp(e, 0, n - 1)) * n + t);
            return s[o + 0] / 256 + s[o + 1] / 65536 + s[o + 2] / 16777216;
          }
          static cmtsCoordToPosition(t, e, s, n, o, r) {
            let a = n * s,
              l = o * s;
            for (; a < 0 || a > 1 || l < 0 || l > 1;)
              if (0 <= e && e <= 3) {
                if (a > 1) (a -= 1), (e = (e + 1) % 4);
                else if (a < 0) (a += 1), (e = (e + 3) % 4);
                else if (0 === e)
                  l < 0 ? ((l += 1), (e = 5)) : l > 1 && ((l -= 1), (e = 4));
                else if (1 === e) {
                  if (l < 0) {
                    const t = a;
                    (a = l + 1), (l = 1 - t), (e = 5);
                  } else if (l > 1) {
                    const t = a;
                    (a = 2 - l), (l = t), (e = 4);
                  }
                } else if (2 === e)
                  l < 0
                    ? ((a = 1 - a), (l = 0 - l), (e = 5))
                    : l > 1 && ((a = 1 - a), (l = 2 - l), (e = 4));
                else if (3 === e)
                  if (l < 0) {
                    const t = a;
                    (a = 0 - l), (l = t), (e = 5);
                  } else if (l > 1) {
                    const t = a;
                    (a = l - 1), (l = 1 - t), (e = 4);
                  }
              } else if (4 === e)
                if (a < 0) {
                  const t = a;
                  (a = 1 - l), (l = t + 1), (e = 3);
                } else if (a > 1) {
                  const t = a;
                  (a = l), (l = 2 - t), (e = 1);
                } else
                  l < 0
                    ? ((l += 1), (e = 0))
                    : l > 1 && ((a = 1 - a), (l = 2 - l), (e = 2));
              else if (5 === e)
                if (a < 0) {
                  const t = a;
                  (a = l), (l = 0 - t), (e = 3);
                } else if (a > 1) {
                  const t = a;
                  (a = 1 - l), (l = t - 1), (e = 1);
                } else
                  l < 0
                    ? ((a = 1 - a), (l = 0 - l), (e = 2))
                    : l > 1 && ((l -= 1), (e = 0));
            const c = 2 * a - 1,
              h = 2 * l - 1,
              u = this._basis[e];
            t.set(
              u[0].x * c + u[1].x * h + u[2].x,
              u[0].y * c + u[1].y * h + u[2].y,
              u[0].z * c + u[1].z * h + u[2].z,
            ),
              t.normalize(t),
              i.Geometry.getLLAFromXYZOnSphere(this._lla, t, 0),
              (this._lla.alt = 0),
              r.xyzFromLLA(t, this._lla);
          }
          static cmtsCoordToTangent(t, e, s, i, n, o) {
            this.cmtsCoordToPosition(t, e, s, i, n, o);
            const r = this._basis[e];
            t.setNormalTo(t, r[0]);
          }
          static cmtsCoordToBitangent(t, e, s, i, n, o) {
            this.cmtsCoordToPosition(t, e, s, i, n, o);
            const r = this._basis[e];
            t.setNormalTo(t, r[1]);
          }
        }
        (CMTSTile._basis = [
          [i.Vector3.YAxis, i.Vector3.ZAxis, i.Vector3.XAxis],
          [i.Vector3.XAxisNeg, i.Vector3.ZAxis, i.Vector3.YAxis],
          [i.Vector3.YAxisNeg, i.Vector3.ZAxis, i.Vector3.XAxisNeg],
          [i.Vector3.XAxis, i.Vector3.ZAxis, i.Vector3.YAxisNeg],
          [i.Vector3.YAxis, i.Vector3.XAxisNeg, i.Vector3.ZAxis],
          [i.Vector3.YAxis, i.Vector3.XAxis, i.Vector3.ZAxisNeg],
        ]),
          (CMTSTile._lla = new i.LatLonAlt()),
          (CMTSTile._pos = new i.Vector3());
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CometTailComponent: function () {
              return CometTailComponent;
            },
          });
        var i = s(6);
        class CometTailComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._lightSource = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._timeLength = 6e5),
              (this._numberOfParticles = 200),
              (this._color = new i.Color()),
              this._color.freeze(),
              (this._starAccelerationMultiplier = 1),
              (this._timeOfParticle0 = 0);
          }
          getLightSource() {
            return this._lightSource.getName();
          }
          setLightSource(t) {
            this._lightSource.setName(t);
          }
          getTimeLength() {
            return this._timeLength;
          }
          setTimeLength(t) {
            (this._timeLength = t), this.resetResources();
          }
          getStarAccelerationMultiplier() {
            return this._starAccelerationMultiplier;
          }
          setStarAccelerationMultiplier(t) {
            (this._starAccelerationMultiplier = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "starAccelerationMultiplier",
                this._starAccelerationMultiplier,
              );
          }
          getNumberOfParticles() {
            return this._numberOfParticles;
          }
          setNumberOfParticles(t) {
            (this._numberOfParticles = t), this.resetResources();
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
              );
          }
          __update() {
            if (
              (this.__setRadius(
                Math.max(
                  this.getEntity().getExtentsRadius(),
                  this._timeLength * this.getEntity().getVelocity().magnitude(),
                ),
              ),
                "loaded" !== this.getLoadState())
            )
              return;
            const t = this.getEntity().getScene().getEngine().getTime(),
              e =
                this.getThreeJsObjects()[0].geometry.attributes.originTime
                  .array;
            for (let s = 0, n = this._numberOfParticles; s < n; s++) {
              const n = e[s] + this._timeOfParticle0;
              (n < t - this._timeLength || n > t) &&
                this._newParticle(
                  s,
                  i.MathUtils.wrap(n, t - this._timeLength, t),
                );
            }
            this._numberOfParticles > 1
              ? i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "time",
                t - this._timeOfParticle0,
              )
              : i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "time",
                0,
              );
            const s = this._lightSource.get();
            if (null !== s) {
              const t = s.getComponentByType("lightSource");
              null !== t &&
                i.ThreeJsHelper.setUniformNumber(
                  this.getThreeJsMaterials()[0],
                  "starAbsoluteMagnitude",
                  t.getAbsoluteMagnitude(),
                );
              const e = i.Vector3.pool.get();
              this.getEntity().getPositionRelativeToEntity(
                e,
                i.Vector3.Zero,
                s,
              ),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "positionOfEntity",
                  e,
                ),
                i.Vector3.pool.release(e);
            }
          }
          __prepareForRender(t) {
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects(),
              this.getEntity(),
              t,
            );
            const e = this.getEntity().getCameraSpacePosition(t);
            if (
              (i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "positionInCamera",
                e,
              ),
                e.magnitude() < 4e4)
            )
              this.getThreeJsObjects()[0].visible = !1;
            else {
              const t = (e.magnitude() - 4e4) / 4e5;
              (this.getThreeJsMaterials()[0].uniforms.color.value.w =
                this._color.a * i.MathUtils.clamp01(t)),
                (this.getThreeJsObjects()[0].visible = !0);
            }
          }
          async __loadResources() {
            const t = new i.THREE.RawShaderMaterial({
              uniforms: {
                time: new i.THREE.Uniform(0),
                timeLength: new i.THREE.Uniform(0),
                positionInCamera: new i.THREE.Uniform(new i.THREE.Vector3()),
                starAbsoluteMagnitude: new i.THREE.Uniform(0),
                starAccelerationMultiplier: new i.THREE.Uniform(0),
                positionOfEntity: new i.THREE.Uniform(new i.THREE.Vector3()),
                color: new i.THREE.Uniform(new i.THREE.Vector4()),
                ...i.ShaderChunkLogDepth.ThreeUniforms,
              },
              vertexShader: CometTailComponent.vertexShader,
              fragmentShader: CometTailComponent.fragmentShader,
              transparent: !0,
              depthWrite: !1,
              blending: i.THREE.AdditiveBlending,
              side: i.THREE.DoubleSide,
            });
            i.ShaderFix.fix(t), this.getThreeJsMaterials().push(t);
            const e = new Float32Array([
              -1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0,
            ]),
              s = new Uint16Array([0, 1, 2, 2, 3, 0]),
              n = new Float32Array(1 * this._numberOfParticles),
              o = new Float32Array(3 * this._numberOfParticles),
              r = new Float32Array(1 * this._numberOfParticles),
              a = new i.THREE.InstancedBufferGeometry();
            a.setAttribute("position", new i.THREE.BufferAttribute(e, 3)),
              a.setAttribute(
                "originTime",
                new i.THREE.InstancedBufferAttribute(n, 1),
              ),
              a.setAttribute(
                "originPosition",
                new i.THREE.InstancedBufferAttribute(o, 3),
              ),
              a.setAttribute(
                "accelerationMultiplier",
                new i.THREE.InstancedBufferAttribute(r, 1),
              ),
              a.setIndex(new i.THREE.BufferAttribute(s, 1)),
              (a.instanceCount = this._numberOfParticles);
            const l = i.ThreeJsHelper.createMeshObjectGivenGeometry(this, t, a);
            this.getThreeJsObjects().push(l);
            const c = this.getEntity().getScene().getEngine().getTime();
            for (let t = 0, e = this._numberOfParticles; t < e; t++)
              this._newParticle(t, c - (t / e) * this._timeLength);
            i.ThreeJsHelper.setUniformNumber(
              this.getThreeJsMaterials()[0],
              "timeLength",
              this._timeLength,
            ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "starAccelerationMultiplier",
                this._starAccelerationMultiplier,
              ),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
              );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _newParticle(t, e) {
            const s = e,
              n = this.getThreeJsObjects()[0].geometry.attributes.originTime,
              o = n.array;
            if (t > 0) o[t] = s - this._timeOfParticle0;
            else {
              for (let t = 1, e = this._numberOfParticles; t < e; t++)
                o[t] += this._timeOfParticle0 - s;
              (this._timeOfParticle0 = s), (o[0] = 0);
            }
            n.needsUpdate = !0;
            const r = i.Vector3.pool.get(),
              a = this._lightSource.get();
            null !== a &&
              this.getEntity().getPositionRelativeToEntity(
                r,
                i.Vector3.Zero,
                a,
                s,
              );
            const l =
              this.getThreeJsObjects()[0].geometry.attributes.originPosition,
              c = l.array;
            (c[3 * t + 0] = r.x),
              (c[3 * t + 1] = r.y),
              (c[3 * t + 2] = r.z),
              (l.needsUpdate = !0),
              i.Vector3.pool.release(r);
            const h =
              this.getThreeJsObjects()[0].geometry.attributes
                .accelerationMultiplier;
            (h.array[t] = 0 + 1 * Math.random()), (h.needsUpdate = !0);
          }
        }
        (CometTailComponent.vertexShader = `\n\tattribute vec3 position;\n\tattribute float originTime;\n\tattribute vec3 originPosition;\n\tattribute vec3 originStarPosition;\n\tattribute vec3 originExternalAcceleration;\n\tattribute float accelerationMultiplier;\n\n\tuniform float time;\n\tuniform float timeLength;\n\tuniform vec3 positionInCamera;\n\tuniform float starAbsoluteMagnitude;\n\tuniform float starAccelerationMultiplier;\n\tuniform vec3 positionOfEntity;\n\tuniform mat4 viewMatrix;\n\tuniform mat4 modelViewMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec2 vPosition;\n\tvarying float vAlpha;\n\n\t${i.ShaderChunkLogDepth.VertexHead}\n\n\tvoid main() {\n\t\t// Get the position of the center point of the quad in model space.\n\t\tfloat deltaTime = time - originTime;\n\t\tvec3 externalAcceleration = starAccelerationMultiplier * accelerationMultiplier * normalize(originPosition) * 5.0e7 * pow(2.51188643151, 20.0 - starAbsoluteMagnitude) / dot(originPosition, originPosition);\n\t\tvec3 modelPosition = externalAcceleration * pow(deltaTime, 1.5);\n\n\t\t// Get a general expansion scale in all directions.\n\t\tfloat expansion = 0.2 * max(1.0e5, length(modelPosition));\n\n\t\t// Get the stretch direction in view space.\n\t\tvec3 modelStretch = modelPosition;\n\t\tvec3 cameraDirection = normalize(positionInCamera);\n\t\tmodelStretch = modelStretch - dot(cameraDirection, modelStretch) * cameraDirection;\n\t\tvec4 viewStretch = viewMatrix * vec4(modelStretch, 1.0);\n\n\t\t// Get the stretch amounts in the x and y directions.\n\t\tvec2 stretch2d = vec2(max(expansion, 2.0 * length(viewStretch.xz)), expansion);\n\n\t\t// Do the stretch calculation on the vertex position in view space.\n\t\t// It translates it, rotates it, stretches it, and unrotates it.\n\t\tvec2 translate = 0.5 * normalize(vec2(viewStretch.xz));\n\t\tfloat angle = length(viewStretch.xz) > 0.0 ? atan(viewStretch.z, viewStretch.x) : 0.0;\n\t\tfloat cosAngle = cos(angle);\n\t\tfloat sinAngle = sin(angle);\n\t\tfloat stretchedX = (stretch2d.x * cosAngle * cosAngle + stretch2d.y * sinAngle * sinAngle) * 0.5 * (position.x + translate.x) + (stretch2d.x - stretch2d.y) * sinAngle * cosAngle * 0.5 * (position.y + translate.y);\n\t\tfloat stretchedY = (stretch2d.x - stretch2d.y) * sinAngle * cosAngle * 0.5 * (position.x + translate.x) + (stretch2d.x * sinAngle * sinAngle + stretch2d.y * cosAngle * cosAngle) * 0.5 * (position.y + translate.y);\n\n\t\t// Get the position in view space and then in normalized space.\n\t\tvec4 viewPosition = vec4(stretchedX, 0.0, stretchedY, 0.0) + modelViewMatrix * vec4(modelPosition, 1.0);\n\t\tgl_Position = projectionMatrix * viewPosition;\n\t\tgl_Position.w = viewPosition.y;\n\n\t\t// Set the varying variables for adjusting te\n\t\tvPosition = vec2(cosAngle * position.x + sinAngle * position.y, -sinAngle * position.x + cosAngle * position.y);\n\t\tvAlpha = sqrt(1.0 - sqrt(deltaTime / timeLength));\n\n\t\t// Make the gas fade far from the star.\n\t\tvAlpha *= min(1.0, 1.0 - length(originPosition) / 7.0e8);\n\n\t\t${i.ShaderChunkLogDepth.Vertex}\n\t}`),
          (CometTailComponent.fragmentShader = `\n\tprecision highp float;\n\n\tuniform vec4 color;\n\n\tvarying vec2 vPosition;\n\tvarying float vAlpha;\n\n\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\tvoid main(void) {\n\t\t// Set the color to be a circle tinted by the color.\n\t\tgl_FragColor = vec4(color.rgb, 0.5 * color.a) * max(0.0, 1.0 - dot(vPosition, vPosition)) * vAlpha;\n\n\t\t${i.ShaderChunkLogDepth.Fragment}\n\t}`);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ConnectedSpriteComponent: function () {
              return ConnectedSpriteComponent;
            },
          });
        var i = s(6);
        class ConnectedSpriteComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._entity1 = new i.EntityRef(this.getEntity().getScene())),
              (this._entity1Offset = new i.Vector3()),
              this._entity1Offset.freeze(),
              (this._entity2 = new i.EntityRef(this.getEntity().getScene())),
              (this._entity2Offset = new i.Vector3()),
              this._entity2Offset.freeze(),
              (this._width1 = 1),
              (this._width2 = 1),
              (this._widthUnits = "km"),
              (this._textureUrl = ""),
              (this._textureAspectRatio = 1),
              (this._textureRepeat = !0),
              (this._textureStretch = 1),
              (this._textureYOffset = 0),
              (this._uOffsetStart = 0),
              (this._uOffsetEnd = 1),
              (this._colorMultiplier = new i.Color(1, 1, 1, 1)),
              this._colorMultiplier.freeze(),
              (this._blending = "normal");
          }
          getEntity1() {
            return this._entity1.getName();
          }
          setEntity1(t) {
            this._entity1.setName(t);
          }
          getEntity1Offset() {
            return this._entity1Offset;
          }
          setEntity1Offset(t) {
            this._entity1Offset.thaw(),
              this._entity1Offset.copy(t),
              this._entity1Offset.freeze();
          }
          getEntity2() {
            return this._entity2.getName();
          }
          setEntity2(t) {
            this._entity2.setName(t);
          }
          getEntity2Offset() {
            return this._entity2Offset;
          }
          setEntity2Offset(t) {
            this._entity2Offset.thaw(),
              this._entity2Offset.copy(t),
              this._entity2Offset.freeze();
          }
          getWidth1() {
            return this._width1;
          }
          getWidth2() {
            return this._width2;
          }
          setWidths(t, e) {
            (this._width1 = t), (this._width2 = e);
          }
          getWidthUnits() {
            return this._widthUnits;
          }
          setWidthUnits(t) {
            if (((this._widthUnits = t), "loaded" === this.getLoadState())) {
              const e = this.getThreeJsMaterials()[0];
              (e.defines.PIXEL_BASED = "px" === t), (e.needsUpdate = !0);
            }
          }
          getTextureUrl() {
            return this._textureUrl;
          }
          setTextureUrl(t) {
            (this._textureUrl = t), this.resetResources();
          }
          getTextureRepeat() {
            return this._textureRepeat;
          }
          setTextureRepeat(t) {
            this._textureRepeat = t;
          }
          getTextureStretch() {
            return this._textureStretch;
          }
          setTextureStretch(t) {
            this._textureStretch = t;
          }
          getTextureYOffset() {
            return this._textureYOffset;
          }
          setTextureYOffset(t) {
            this._textureYOffset = t;
          }
          getUOffsetStart() {
            return this._uOffsetStart;
          }
          setUOffsetStart(t) {
            this._uOffsetStart = t;
          }
          getUOffsetEnd() {
            return this._uOffsetEnd;
          }
          setUOffsetEnd(t) {
            this._uOffsetEnd = t;
          }
          getColorMultiplier() {
            return this._colorMultiplier;
          }
          setColorMultiplier(t) {
            this._colorMultiplier.thaw(),
              this._colorMultiplier.copy(t),
              this._colorMultiplier.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._colorMultiplier,
                1,
              );
          }
          setBlending(t) {
            (this._blending = t),
              i.ThreeJsHelper.setBlending(this.getThreeJsMaterials()[0], t);
          }
          __update() {
            const t = this._entity1.get(),
              e = this._entity2.get();
            if (null === t || null === e) return;
            const s = i.Vector3.pool.get();
            t.getPositionRelativeToEntity(s, i.Vector3.Zero, e),
              this.__setRadius(
                s.magnitude() + t.getExtentsRadius() + e.getExtentsRadius(),
              ),
              i.Vector3.pool.release(s);
          }
          __prepareForRender(t) {
            const e = this._entity1.get(),
              s = this._entity2.get();
            if (null === e || null === s)
              return void (this.getThreeJsObjects()[0].visible = !1);
            const n = i.Vector3.pool.get(),
              o = i.Vector3.pool.get(),
              r = i.Vector3.pool.get();
            n.rotate(e.getOrientation(), this._entity1Offset),
              n.add(e.getCameraSpacePosition(t), n),
              o.rotate(s.getOrientation(), this._entity2Offset),
              o.add(s.getCameraSpacePosition(t), o),
              r.copy(n),
              n.lerp(n, o, this._uOffsetStart),
              o.lerp(r, o, this._uOffsetEnd);
            let a = n.magnitude(),
              l = o.magnitude(),
              c = !1;
            a > l &&
              (r.copy(n),
                n.copy(o),
                o.copy(r),
                (a = n.magnitude()),
                (l = o.magnitude()),
                (c = !0)),
              i.Vector3.pool.release(r);
            const h = i.Vector3.pool.get(),
              u = i.Vector3.pool.get();
            t.getNormalSpacePositionFromCameraSpacePosition(h, n),
              t.getNormalSpacePositionFromCameraSpacePosition(u, o);
            const d = i.Vector3.pool.get(),
              p = i.Vector3.pool.get();
            d.sub(o, n),
              p.copy(n),
              p.cross(d, p),
              p.normalize(p),
              d.setMagnitude(d, Math.min(d.magnitude(), 10 * a)),
              o.add(n, d),
              t.getNormalSpacePositionFromCameraSpacePosition(u, o),
              (l = o.magnitude());
            let m = c ? this._width2 : this._width1,
              _ = c ? this._width1 : this._width2;
            if ("px" === this._widthUnits) {
              const e = i.Vector3.pool.get();
              t.getEntity().getOrientation().getAxis(e, 1),
                (m = t
                  .getViewport()
                  .getNormalSpaceRadiusFromPixelSpaceRadius(m)),
                (_ = t
                  .getViewport()
                  .getNormalSpaceRadiusFromPixelSpaceRadius(_)),
                (m = t.getRadiusFromNormalSpaceRadius(m, n.dot(e))),
                (_ = t.getRadiusFromNormalSpaceRadius(_, o.dot(e))),
                i.Vector3.pool.release(e);
            }
            let g = 1 / this._textureStretch;
            if ("px" === this._widthUnits) {
              if (this._textureRepeat) {
                const e = i.Vector2.pool.get(),
                  s = i.Vector2.pool.get();
                t
                  .getViewport()
                  .getPixelSpacePositionFromNormalSpacePosition(e, h),
                  t
                    .getViewport()
                    .getPixelSpacePositionFromNormalSpacePosition(s, u);
                const n = i.Vector2.pool.get();
                if ((n.sub(e, s), n.isNaN())) {
                  const e = t.getViewport().getBounds();
                  (n.x = (e.size.x * (u.x - h.x)) / 2),
                    (n.y = (e.size.y * (u.y - h.y)) / 2);
                }
                (g *=
                  (n.magnitude() / Math.max(this._width1, this._width2)) *
                  this._textureAspectRatio),
                  i.Vector2.pool.release(n),
                  i.Vector2.pool.release(e),
                  i.Vector2.pool.release(s);
              }
            } else
              this._textureRepeat &&
                (g *=
                  (d.magnitude() / Math.max(this._width1, this._width2)) *
                  this._textureAspectRatio);
            i.Vector3.pool.release(h),
              i.Vector3.pool.release(u),
              i.ThreeJsHelper.setPosition(this.getThreeJsObjects(), n),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "vAxis",
                d,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "width1",
                m,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "width2",
                _,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "textureYOffset",
                this._textureYOffset * (c ? -1 : 1),
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "repeatAmount",
                g,
              ),
              i.Vector3.pool.release(n),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(d),
              i.Vector3.pool.release(p);
          }
          async __loadResources() {
            const t = await i.ThreeJsHelper.loadTexture(
              this,
              this._textureUrl,
              !0,
              !1,
            );
            if (
              ((t.wrapT = i.THREE.RepeatWrapping),
                (this._textureAspectRatio = t.image.width / t.image.height),
                "loading" !== this.getLoadState())
            )
              return void t.dispose();
            const e = this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .getPreloaded("connected_sprite");
            this.getThreeJsMaterials().push(e),
              i.ThreeJsHelper.setBlending(
                this.getThreeJsMaterials()[0],
                this._blending,
              ),
              i.ThreeJsHelper.setDefine(
                e,
                "PIXEL_BASED",
                "px" === this._widthUnits,
              ),
              i.ThreeJsHelper.setUniformColorRGBA(
                e,
                "color",
                this._colorMultiplier,
                1,
              ),
              i.ThreeJsHelper.setUniformTexture(e, "colorTexture", t);
            const s = i.ThreeJsHelper.createMeshObject(
              this,
              e,
              [{ name: "position", dimensions: 2 }],
              !1,
            );
            this.getThreeJsObjects().push(s),
              i.ThreeJsHelper.setVertices(
                s.geometry,
                "position",
                new Float32Array([-1, 0, 1, 0, -1, 1, 1, 1]),
              ),
              i.ThreeJsHelper.setIndices(
                s.geometry,
                new Uint16Array([0, 2, 3, 3, 1, 0]),
              );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DivComponent: function () {
              return DivComponent;
            },
          });
        var i = s(6);
        class DivComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._activeCamera = null),
              (this._fadeWhenCloseToCamera = !0),
              (this._fadeWhenCloseToEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._div = document.createElement("div")),
              (this._div.style.position = "absolute"),
              (this._div.style.left = "0"),
              (this._div.style.top = "0"),
              (this._div.style.transform = "translate(0%, 0%);"),
              (this._alignment = new i.Vector2(0, 0.5)),
              this._alignment.freeze(),
              (this._sizeInPx = new i.Vector2(0, 0)),
              (this._currentHTML = ""),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getDiv() {
            return this._div;
          }
          getActiveCamera() {
            return this._activeCamera;
          }
          setActiveCamera(t) {
            (this._activeCamera = t), this.resetResources();
          }
          getFadeWhenCloseToCamera() {
            return this._fadeWhenCloseToCamera;
          }
          setFadeWhenCloseToCamera(t) {
            this._fadeWhenCloseToCamera = t;
          }
          getFadeWhenCloseToEntity() {
            return this._fadeWhenCloseToEntity.getName();
          }
          setFadeWhenCloseToEntity(t) {
            this._fadeWhenCloseToEntity.setName(t);
          }
          getAlignment() {
            return this._alignment;
          }
          setAlignment(t) {
            this._alignment.thaw(),
              this._alignment.copy(t),
              this._alignment.freeze();
          }
          __loadResources() {
            return Promise.resolve();
          }
          __unloadResources() {
            null !== this._div.parentNode &&
              this._div.parentNode.removeChild(this._div);
          }
          __prepareForRender(t) {
            if (null === this._activeCamera) {
              const t = this.getEntity().getScene().getEngine().getViewport(0);
              null !== t && (this._activeCamera = t.getCamera());
            }
            if (
              this._activeCamera !== t ||
              null === this._activeCamera ||
              null === this._activeCamera.getViewport()
            )
              return;
            this._activeCamera.getViewport().getDiv() !==
              this._div.parentNode &&
              this._activeCamera.getViewport().getDiv().appendChild(this._div);
            let e = 1;
            if (e > 0 && this._fadeWhenCloseToCamera) {
              const s = this.getEntity().getNormalSpaceExtentsRadius(t);
              e *= i.MathUtils.clamp01((0.02 - s) / 0.02);
            }
            const s = this.getEntity().getCameraSpacePosition(t);
            if (e > 0) {
              let s = null;
              if (
                ((s =
                  "" === this._fadeWhenCloseToEntity.getName()
                    ? this.getEntity().getParent()
                    : this._fadeWhenCloseToEntity.get()),
                  null !== s)
              ) {
                const n = i.Vector3.pool.get();
                n.sub(
                  this.getEntity().getNormalSpacePosition(t),
                  s.getNormalSpacePosition(t),
                );
                const o = n.magnitude();
                i.Vector3.pool.release(n);
                s.getNormalSpaceExtentsRadius(t) < 0.02 &&
                  (e *= i.MathUtils.clamp01((o - 0.02) / 0.02));
              }
            }
            if (
              (e > 0 &&
                ((null !== this.getEntity().getParent() &&
                  this.getEntity().getParent().isOccludingPosition(t, s)) ||
                  t.isPositionOccluded(s)) &&
                (e = 0),
                e > 0)
            ) {
              const s = i.Vector3.pool.get();
              t.getEntity().getOrientation().getAxis(s, 1),
                s.dot(this.getEntity().getCameraSpacePosition(t)) <= 0 &&
                (e = 0),
                i.Vector3.pool.release(s);
            }
            if (
              (this._div.style.opacity !== "" + e &&
                ((this._div.style.opacity = "" + e),
                  (this._div.style.pointerEvents = 0 === e ? "none" : "")),
                e > 0)
            ) {
              this._currentHTML !== this._div.innerHTML &&
                (this._sizeInPx.set(
                  this._div.offsetWidth,
                  this._div.offsetHeight,
                ),
                  (this._currentHTML = this._div.innerHTML));
              const e = t.getViewport().getBounds(),
                s = this.getEntity().getPixelSpacePosition(t),
                i =
                  s.x -
                  this._sizeInPx.x * this._alignment.x -
                  e.origin.x +
                  (e.size.x % 2 == 0 ? -0.5 : 0),
                n =
                  s.y -
                  this._sizeInPx.y * this._alignment.y -
                  e.origin.y +
                  (e.size.y % 2 == 0 ? -0.5 : 0);
              this._div.style.transform = `translate(${i}px, ${n}px)`;
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DynamicEnvironmentMapComponent: function () {
              return DynamicEnvironmentMapComponent;
            },
          });
        var i = s(6);
        class DynamicEnvironmentMapComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._faceSize = 64),
              (this._invalidColor = new i.Color(0, 0, 0, 1)),
              this._invalidColor.freeze(),
              (this._threeJsRenderer = this.getEntity()
                .getScene()
                .getEngine()
                .__getThreeJsRenderer()),
              (this._threeJsFaceCameras = []),
              (this._threeJsFaceRenderTargets = []),
              (this._threeJsQuad = new i.THREE.Mesh()),
              (this._threeJsScene = new i.THREE.Scene()),
              (this._threeJsCubeCamera = new i.THREE.OrthographicCamera(
                -1,
                1,
                -1,
                1,
                -1,
                1,
              )),
              (this._envMapTexture = new i.THREE.WebGLRenderTarget(
                4 * this._faceSize,
                4 * this._faceSize,
                {
                  minFilter: i.THREE.LinearFilter,
                  magFilter: i.THREE.LinearFilter,
                  wrapS: i.THREE.ClampToEdgeWrapping,
                  wrapT: i.THREE.ClampToEdgeWrapping,
                },
              )),
              this._setupFaceCameras(),
              this._setupQuad();
          }
          getFaceSize() {
            return this._faceSize;
          }
          setFaceSize(t) {
            (this._faceSize = t),
              this._envMapTexture.width !== 4 * this._faceSize &&
              (this._envMapTexture.setSize(
                4 * this._faceSize,
                4 * this._faceSize,
              ),
                (this._threeJsQuad.material.uniforms.faceSize.value =
                  this._faceSize));
            for (let t = 0; t < 6; t++)
              this._threeJsFaceRenderTargets[t].setSize(
                this._faceSize,
                this._faceSize,
              );
          }
          getInvalidColor() {
            return this._invalidColor;
          }
          setInvalidColor(t) {
            this._invalidColor.thaw(),
              this._invalidColor.copy(t),
              this._invalidColor.freeze(),
              null !== this._threeJsQuad &&
              i.ThreeJsHelper.setUniformColorRGB(
                this._threeJsQuad.material,
                "invalidColor",
                this._invalidColor,
              );
          }
          getTexture() {
            return this._envMapTexture.texture;
          }
          __destroy() {
            this._threeJsQuad.geometry.dispose(),
              this._threeJsQuad.material.dispose(),
              this._envMapTexture.dispose();
            for (let t = 0; t < this._threeJsFaceRenderTargets.length; t++)
              this._threeJsFaceRenderTargets[t].dispose();
            super.__destroy();
          }
          __render() {
            this._updateProjectionMatrix();
            const t = 0.7071067811865476;
            n.set(0, 0, -t, t),
              this._threeJsFaceCameras[0].setRotationFromQuaternion(n),
              n.set(0, 0, 0, 1),
              this._threeJsFaceCameras[1].setRotationFromQuaternion(n),
              n.set(0, 0, t, t),
              this._threeJsFaceCameras[2].setRotationFromQuaternion(n),
              n.set(0, 0, 1, 0),
              this._threeJsFaceCameras[3].setRotationFromQuaternion(n),
              n.set(0.5, -0.5, -0.5, 0.5),
              this._threeJsFaceCameras[4].setRotationFromQuaternion(n),
              n.set(-0.5, 0.5, -0.5, 0.5),
              this._threeJsFaceCameras[5].setRotationFromQuaternion(n);
            for (let t = 0; t < 6; t++)
              this._threeJsRenderer.setRenderTarget(
                this._threeJsFaceRenderTargets[t],
              ),
                this._threeJsRenderer.render(
                  this.getEntity().getScene().getThreeJsScene(),
                  this._threeJsFaceCameras[t],
                );
            this._threeJsRenderer.setRenderTarget(this._envMapTexture),
              this._threeJsRenderer.render(
                this._threeJsScene,
                this._threeJsCubeCamera,
              );
          }
          _setupFaceCameras() {
            for (let t = 0; t < 6; t++) {
              this._threeJsFaceCameras.push(
                new i.THREE.PerspectiveCamera(90, 1, 0.1, 1e3),
              );
              const e = new i.THREE.Matrix4();
              e.set(1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0),
                (this._threeJsFaceCameras[t].projectionMatrix = e);
              const s = new i.THREE.Matrix4();
              s.set(1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0),
                (this._threeJsFaceCameras[t].projectionMatrixInverse = s),
                this._threeJsFaceCameras[t].layers.set(1);
              const n = new i.THREE.WebGLRenderTarget(
                this._faceSize,
                this._faceSize,
                {
                  minFilter: i.THREE.LinearFilter,
                  magFilter: i.THREE.LinearFilter,
                },
              );
              this._threeJsFaceRenderTargets.push(n);
            }
          }
          _updateProjectionMatrix() {
            const t = this.getEntity().get("camera");
            if (null === t) return;
            const e = 1 - Number.EPSILON,
              s = -t.getAutoNearDistance() * (2 - Number.EPSILON);
            for (let t = 0; t < 6; t++)
              (this._threeJsFaceCameras[t].projectionMatrix.elements[6] = e),
                (this._threeJsFaceCameras[t].projectionMatrix.elements[14] = s),
                (this._threeJsFaceCameras[
                  t
                ].projectionMatrixInverse.elements[11] = 1 / s),
                (this._threeJsFaceCameras[
                  t
                ].projectionMatrixInverse.elements[15] = -e / s);
          }
          _setupQuad() {
            const t = new i.THREE.BufferGeometry(),
              e = new Float32Array([-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0]),
              s = new Uint16Array([0, 1, 2, 0, 2, 3]);
            t.setAttribute("position", new i.THREE.BufferAttribute(e, 3)),
              t.setIndex(new i.THREE.BufferAttribute(s, 1));
            const n = {
              textures: new i.THREE.Uniform([]),
              faceSize: new i.THREE.Uniform(this._faceSize),
              invalidColor: new i.THREE.Uniform(
                new i.THREE.Vector3(
                  this._invalidColor.r,
                  this._invalidColor.g,
                  this._invalidColor.b,
                ),
              ),
            };
            for (let t = 0; t < 6; t++)
              n.textures.value.push(this._threeJsFaceRenderTargets[t].texture);
            const o = new i.THREE.RawShaderMaterial({
              uniforms: n,
              vertexShader:
                "\n\t\t\t\tattribute vec3 position;\n\t\t\t\tvarying vec2 xy;\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_Position = vec4(position, 1.0);\n\t\t\t\t\txy = position.xy;\n\t\t\t\t}",
              fragmentShader:
                "\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D textures[6];\n\t\t\t\tuniform float faceSize;\n\t\t\t\tuniform vec3 invalidColor;\n\n\t\t\t\tvarying vec2 xy;\n\n\t\t\t\tvoid adjustTextureCoordsForBorders(inout int textureIndex, inout vec2 xyInTexture, in float pixelSize) {\n\t\t\t\t\t// Get the pixells in pixel-space.\n\t\t\t\t\tvec2 xyInPixels = xyInTexture * pixelSize;\n\n\t\t\t\t\t// Flip the x since this code is for surface cubes, but we're inside out.\n\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\n\t\t\t\t\t// If it's a border, adjust the pixel it's reading the next pixel in one face over.\n\t\t\t\t\t// This allows for nice linear filtering to happen on the material side of things.\n\t\t\t\t\tif (xyInPixels.x < 0.6 || xyInPixels.x > pixelSize - 0.6 || xyInPixels.y < 0.6 || xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\tif (0 <= textureIndex && textureIndex <= 3) { // One of the horizontal faces\n\t\t\t\t\t\t\tif (xyInPixels.x > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = (textureIndex + 1);\n\t\t\t\t\t\t\t\tif (textureIndex == 4) {\n\t\t\t\t\t\t\t\t\ttextureIndex = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.x < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = textureIndex - 1;\n\t\t\t\t\t\t\t\tif (textureIndex == -1) {\n\t\t\t\t\t\t\t\t\ttextureIndex = 3;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 0) {\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 1) {\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 2) {\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 3) {\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.x = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.x = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 4) {\n\t\t\t\t\t\t\tif (xyInPixels.x < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.y;\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.x > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = xyInPixels.y;\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.y = pixelSize - 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (textureIndex == 5) {\n\t\t\t\t\t\t\tif (xyInPixels.x < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = xyInPixels.y;\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.x > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.y;\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (xyInPixels.y < 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (xyInPixels.y > pixelSize - 0.6) {\n\t\t\t\t\t\t\t\txyInPixels.y = 1.5;\n\t\t\t\t\t\t\t\ttextureIndex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Shrink all pixels so that they fit within the border.\n\t\t\t\t\t// The border pixels have already been modified so that they work with this equation.\n\t\t\t\t\txyInPixels.x = ((pixelSize - 1.0) * xyInPixels.x - pixelSize) / (pixelSize - 3.0);\n\t\t\t\t\txyInPixels.y = ((pixelSize - 1.0) * xyInPixels.y - pixelSize) / (pixelSize - 3.0);\n\n\t\t\t\t\t// Flip the x back.\n\t\t\t\t\txyInPixels.x = pixelSize - xyInPixels.x;\n\n\t\t\t\t\t// Go back into unit-space.\n\t\t\t\t\txyInTexture = xyInPixels / pixelSize;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\t// Make it pink everywhere else for easy debugging.\n\t\t\t\t\tvec3 color = invalidColor;\n\t\t\t\t\t// Get the mip level, size, and offset.\n\t\t\t\t\tfloat level = floor(1.0 - log2(1.0 - xy.y)); // 0 is base, then 1, etc.\n\t\t\t\t\tfloat mipSizeX = pow(2.0, -level); // 1, .5, .25, .125, etc.\n\t\t\t\t\tfloat mipOffsetY = 1.0 - pow(2.0, -level); // 0, .5, .75, .875, etc.\n\t\t\t\t\t// Get the xy within the mip level. Note the x value is * 3 for less computing further on.\n\t\t\t\t\tvec2 xyInMip;\n\t\t\t\t\txyInMip.x = 0.5 * (xy.x + 1.0) / mipSizeX * 4.0;\n\t\t\t\t\txyInMip.y = (xy.y + 1.0 - 2.0 * mipOffsetY) / mipSizeX;\n\t\t\t\t\tif (xyInMip.x <= 3.0) {\n\t\t\t\t\t\tint textureIndex = int(floor(xyInMip.y * 2.0) * 3.0 + floor(xyInMip.x));\n\t\t\t\t\t\t// Get the xy within the face/texture.\n\t\t\t\t\t\tvec2 xyInTexture;\n\t\t\t\t\t\txyInTexture.x = 1.0 - xyInMip.x + floor(xyInMip.x);\n\t\t\t\t\t\txyInTexture.y = 2.0 * (xyInMip.y - floor(xyInMip.y * 2.0) / 2.0);\n\t\t\t\t\t\t// Adjust the coordinates and face to account for borders.\n\t\t\t\t\t\tadjustTextureCoordsForBorders(textureIndex, xyInTexture, faceSize * mipSizeX);\n\t\t\t\t\t\t// Set the color based on the face (textureIndex) and the coords.\n\t\t\t\t\t\tif (textureIndex == 0) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[0], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (textureIndex == 1) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[1], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (textureIndex == 2) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[2], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (textureIndex == 3) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[3], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (textureIndex == 4) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[4], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (textureIndex == 5) {\n\t\t\t\t\t\t\tcolor = texture2D(textures[5], xyInTexture).rgb;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t\t\t}",
              depthTest: !1,
              depthWrite: !1,
            });
            (this._threeJsQuad = new i.THREE.Mesh(t, o)),
              (this._threeJsQuad.frustumCulled = !1),
              this._threeJsScene.add(this._threeJsQuad);
          }
        }
        const n = new i.THREE.Quaternion();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            GizmoComponent: function () {
              return GizmoComponent;
            },
          });
        var i = s(6);
        class GizmoComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._size = void 0),
              (this._relativeToEntity = !0),
              (this._joint = ""),
              (this._jointObject = null),
              (this._model = null),
              (this._lineMesh = null),
              this.__setRadius(2 * s.getExtentsRadius()),
              this.__setUsesEntityOrientation(this._relativeToEntity);
          }
          getSize() {
            return void 0 !== this._size
              ? this._size
              : Math.max(1e-4, 2 * this.getEntity().getExtentsRadius());
          }
          setSize(t) {
            (this._size = t), this.__setRadius(this.getSize());
          }
          isRelativeToEntity() {
            return this._relativeToEntity;
          }
          setRelativeToEntity(t) {
            (this._relativeToEntity = t),
              this.__setUsesEntityOrientation(this._relativeToEntity);
          }
          setJoint(t, e) {
            if (((this._joint = t), e)) this._model = e;
            else {
              const t = this.getEntity().get("model");
              null !== t && (this._model = t);
            }
          }
          __prepareForRender(t) {
            if (
              ("" === this._joint ||
                (null !== this._jointObject &&
                  this._jointObject.name === this._joint) ||
                null === this._model ||
                (this._jointObject = this._model.getThreeJsObjectByName(
                  this._joint,
                )),
                null !== this._jointObject)
            ) {
              const e = i.Vector3.pool.get();
              let s = this._jointObject;
              for (
                GizmoComponent._tempThreeJsVector3.copy(s.position),
                GizmoComponent._tempThreeJsQuaternion.copy(s.quaternion);
                null !== s.parent &&
                s.parent !== this._model.getThreeJsObjects()[0];

              )
                (s = s.parent),
                  GizmoComponent._tempThreeJsVector3.add(s.position),
                  GizmoComponent._tempThreeJsQuaternion.multiplyQuaternions(
                    s.quaternion,
                    GizmoComponent._tempThreeJsQuaternion,
                  );
              e.copyFromThreeJs(GizmoComponent._tempThreeJsVector3),
                e.mult(e, 0.001),
                e.rotate(this._model.getRotation(), e),
                i.ThreeJsHelper.setPositionToEntity(
                  this.getThreeJsObjects()[0],
                  this.getEntity(),
                  t,
                  e,
                  !0,
                ),
                i.Vector3.pool.release(e);
              const n = i.Quaternion.pool.get();
              n.copyFromThreeJs(GizmoComponent._tempThreeJsQuaternion),
                n.mult(this._model.getRotation(), n),
                i.ThreeJsHelper.setOrientationToEntity(
                  this.getThreeJsObjects()[0],
                  this.getEntity(),
                  n,
                ),
                i.Quaternion.pool.release(n);
            } else
              this._relativeToEntity
                ? i.ThreeJsHelper.setOrientationToEntity(
                  this.getThreeJsObjects()[0],
                  this.getEntity(),
                )
                : i.ThreeJsHelper.setOrientation(
                  this.getThreeJsObjects()[0],
                  i.Quaternion.Identity,
                ),
                i.ThreeJsHelper.setPositionToEntity(
                  this.getThreeJsObjects()[0],
                  this.getEntity(),
                  t,
                );
            i.ThreeJsHelper.setScale(
              this.getThreeJsObjects()[0],
              this.getSize(),
            ),
              this._lineMesh.prepareForRender(t);
          }
          __loadResources() {
            this._lineMesh = new i.LineMesh(this);
            const t = [];
            t.push(new i.Vector3(0, 0, 0)),
              t.push(new i.Vector3(1, 0, 0)),
              t.push(new i.Vector3(0, 0, 0)),
              t.push(new i.Vector3(0, 1, 0)),
              t.push(new i.Vector3(0, 0, 0)),
              t.push(new i.Vector3(0, 0, 1)),
              this._lineMesh.setPositions(t);
            const e = [];
            e.push(new i.Color(1, 0, 0)),
              e.push(new i.Color(1, 0, 0)),
              e.push(new i.Color(0, 1, 0)),
              e.push(new i.Color(0, 1, 0)),
              e.push(new i.Color(0, 0, 1)),
              e.push(new i.Color(0, 0, 1)),
              this._lineMesh.setColors(e);
            const s = [];
            return (
              s.push(2),
              s.push(2),
              s.push(2),
              s.push(2),
              s.push(2),
              s.push(2),
              this._lineMesh.setWidths(s),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
        }
        GizmoComponent._tempThreeJsVector3 = new i.THREE.Vector3();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LabelComponent: function () {
              return LabelComponent;
            },
          });
        var i = s(6);
        class LabelComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._text = "<PLACEHOLDER>"),
              (this._fontFamily = "Arial"),
              (this._fontSize = 16),
              (this._color = new i.Color()),
              this._color.freeze(),
              (this._ignoreDistance = !1),
              (this._alignment = new i.Vector2(0, 0.5)),
              this._alignment.freeze(),
              (this._pixelOffset = new i.Vector2(0, 0)),
              this._pixelOffset.freeze(),
              (this._pixelSize = new i.Vector2()),
              (this._devicePixelRatio = 1),
              (this._canvas = null),
              (this._normalSpaceBounds = new Map());
            const n = s
              .getScene()
              .getEngine()
              .getConfig()
              .getValue("fontFamily");
            "string" == typeof n && (this._fontFamily = n);
            const o = s.getScene().getEngine().getConfig().getValue("fontSize");
            "number" == typeof o && (this._fontSize = o),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getText() {
            return this._text;
          }
          setText(t) {
            (this._text = t), this._updateText();
          }
          getFontFamily() {
            return this._fontFamily;
          }
          setFontFamily(t) {
            (this._fontFamily = t), this._updateText();
          }
          getFontSize() {
            return this._fontSize;
          }
          setFontSize(t) {
            (this._fontSize = t), this._updateText();
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(), this._color.copy(t), this._color.freeze();
          }
          setIgnoreDistance(t) {
            this._ignoreDistance = t;
          }
          getAlignment() {
            return this._alignment;
          }
          setAlignment(t) {
            this._alignment.thaw(),
              this._alignment.copy(t),
              this._alignment.freeze(),
              this._updateText();
          }
          getPixelOffset() {
            return this._pixelOffset;
          }
          setPixelOffset(t) {
            this._pixelOffset.thaw(),
              this._pixelOffset.copy(t),
              this._pixelOffset.freeze();
          }
          getNormalSpaceBounds(t) {
            return this._normalSpaceBounds.get(t);
          }
          __prepareForRender(t) {
            const e = this.getEntity().getCameraSpacePosition(t);
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
              t,
            ),
              i.ThreeJsHelper.setOrientation(
                this.getThreeJsObjects()[0],
                i.Quaternion.Identity,
              );
            const s = i.Vector2.pool.get();
            if ("spout" === t.getType()) {
              const e = t;
              s.set(
                e.getForGlobe() ? -e.getRenderWidth() : e.getRenderWidth(),
                e.getRenderWidth(),
              ),
                s.div(s, 4);
            } else s.copy(t.getViewport().getBounds().size);
            const n = i.Vector2.pool.get(),
              o = i.Vector2.pool.get(),
              r = i.Vector3.pool.get(),
              a = i.Vector3.pool.get();
            if (
              (n.set(
                this._pixelOffset.x - this._alignment.x * this._canvas.width,
                this._pixelOffset.y - this._alignment.y * this._canvas.height,
              ),
                o.set(this._canvas.width, this._canvas.height),
                t.getEntity().getOrientation().getAxis(r, 2),
                t.getEntity().getOrientation().getAxis(a, 0),
                i.ThreeJsHelper.setUniformVector2(
                  this.getThreeJsMaterials()[0],
                  "pixelOffset",
                  n,
                ),
                i.ThreeJsHelper.setUniformVector2(
                  this.getThreeJsMaterials()[0],
                  "pixelSize",
                  o,
                ),
                i.ThreeJsHelper.setUniformVector2(
                  this.getThreeJsMaterials()[0],
                  "renderSize",
                  s,
                ),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "renderUp",
                  r,
                ),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "renderRight",
                  a,
                ),
                "spout" !== t.getType())
            ) {
              this._normalSpaceBounds.has(t) ||
                this._normalSpaceBounds.set(t, new i.Rect());
              const e = this._normalSpaceBounds.get(t);
              e.thaw();
              const n = this.getEntity().getNormalSpacePosition(t);
              (e.origin.x =
                n.x +
                (2 *
                  (this._pixelOffset.x -
                    this._alignment.x * this._pixelSize.x)) /
                s.x),
                (e.origin.y =
                  n.y +
                  (2 *
                    (this._pixelOffset.y -
                      this._alignment.y * this._pixelSize.y)) /
                  s.y),
                (e.size.x = (2 * this._pixelSize.x) / s.x),
                (e.size.y = (2 * this._pixelSize.y) / s.y),
                e.freeze();
            }
            i.Vector2.pool.release(o),
              i.Vector2.pool.release(n),
              i.Vector3.pool.release(r),
              i.Vector3.pool.release(a),
              i.Vector2.pool.release(s);
            let l = 1;
            const c = this.getEntity().getNormalSpaceExtentsRadius(t);
            if (
              (this._ignoreDistance ||
                (l *= i.MathUtils.clamp01((0.02 - c) / 0.02)),
                null !== this.getEntity().getParent())
            ) {
              const s = t.getNormalSpaceRadiusFromRadius(
                this.getEntity().getPosition().magnitude(),
                e.magnitude(),
              ),
                n = this.getEntity().getParent().getNormalSpaceExtentsRadius(t);
              !this._ignoreDistance &&
                n < 0.02 &&
                (l *= i.MathUtils.clamp01((s - 0.02) / 0.02));
            }
            ((null !== this.getEntity().getParent() &&
              this.getEntity().getParent().isOccludingPosition(t, e)) ||
              t.isPositionOccluded(e)) &&
              (l = 0);
            const h = i.Color.pool.get();
            h.copy(this._color),
              (h.a *= l),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "colorMultiplier",
                h,
              ),
              i.Color.pool.release(h);
          }
          async __loadResources() {
            0 === LabelComponent._useCount &&
              ((LabelComponent._threeJsGeometry =
                i.ThreeJsHelper.createGeometry(
                  [
                    { name: "position", dimensions: 2 },
                    { name: "uv", dimensions: 2 },
                  ],
                  !1,
                )),
                i.ThreeJsHelper.setVertices(
                  LabelComponent._threeJsGeometry,
                  "position",
                  new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
                ),
                i.ThreeJsHelper.setVertices(
                  LabelComponent._threeJsGeometry,
                  "uv",
                  new Float32Array([0, 1, 1, 1, 1, 0, 0, 0]),
                ),
                i.ThreeJsHelper.setIndices(
                  LabelComponent._threeJsGeometry,
                  new Uint16Array([0, 1, 2, 2, 3, 0]),
                ),
                (LabelComponent._threeJsMaterial = new i.THREE.ShaderMaterial({
                  uniforms: {
                    colorMultiplier: new i.THREE.Uniform(
                      new i.THREE.Vector4(1, 1, 1, 1),
                    ),
                    colorTexture: new i.THREE.Uniform(null),
                    pixelOffset: new i.THREE.Uniform(new i.THREE.Vector2(0, 0)),
                    pixelSize: new i.THREE.Uniform(new i.THREE.Vector2(1, 1)),
                    renderSize: new i.THREE.Uniform(new i.THREE.Vector2(1, 1)),
                    renderUp: new i.THREE.Uniform(new i.THREE.Vector3(0, 1, 0)),
                    renderRight: new i.THREE.Uniform(
                      new i.THREE.Vector3(1, 0, 0),
                    ),
                    ...i.ShaderChunkLogDepth.ThreeUniforms,
                  },
                  vertexShader: `\n\t\t\t\t\tuniform vec2 pixelOffset;\n\t\t\t\t\tuniform vec2 pixelSize;\n\t\t\t\t\tuniform vec2 renderSize;\n\t\t\t\t\tuniform vec3 renderUp;\n\t\t\t\t\tuniform vec3 renderRight;\n\t\t\t\t\tvarying vec2 fUV;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\t// Get a frame for the label to be on the x-y axis.\n\t\t\t\t\t\tvec3 forward = (modelMatrix * vec4(0, 0, 0, 1.)).xyz;\n\t\t\t\t\t\tfloat distance = length(forward);\n\t\t\t\t\t\tforward = normalize(forward);\n\t\t\t\t\t\tvec3 up = normalize(renderUp);\n\t\t\t\t\t\tvec3 right = normalize(cross(forward, up));\n\n\t\t\t\t\t\t// Setup the up and right vectors.\n\t\t\t\t\t\tup *= (position.y * pixelSize.y + pixelOffset.y) / renderSize.y * distance;\n\t\t\t\t\t\tright *= (position.x * pixelSize.x + pixelOffset.x) / renderSize.x * distance * projectionMatrix[1][3];\n\n\t\t\t\t\t\t// Do the transforms.\n\t\t\t\t\t\tvec4 viewPosition = modelViewMatrix * vec4(up + right, 1.);\n\t\t\t\t\t\tgl_Position = projectionMatrix * viewPosition;\n\n\t\t\t\t\t\tfUV = uv;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t\t\t}`,
                  fragmentShader: `\n\t\t\t\t\tprecision highp float;\n\n\t\t\t\t\tuniform vec4 colorMultiplier;\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\tvarying vec2 fUV;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\t\t\tvoid main(void) {\n\t\t\t\t\t\tgl_FragColor = texture2D(colorTexture, fUV);\n\t\t\t\t\t\tgl_FragColor *= colorMultiplier;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t\t\t}`,
                  side: i.THREE.DoubleSide,
                })),
                i.ThreeJsHelper.setupLogDepthBuffering(
                  LabelComponent._threeJsMaterial,
                )),
              (LabelComponent._useCount += 1);
            const t = LabelComponent._threeJsMaterial.clone();
            this.getThreeJsMaterials().push(t),
              i.ThreeJsHelper.setTransparent(t, !0),
              i.ThreeJsHelper.setOverlay(t, !0),
              i.ThreeJsHelper.setUniformColorRGBA(
                t,
                "colorMultiplier",
                this._color,
              );
            const e = i.ThreeJsHelper.createMeshObjectGivenGeometry(
              this,
              t,
              LabelComponent._threeJsGeometry,
            );
            this.getThreeJsObjects().push(e),
              (this._canvas = document.createElement("canvas")),
              (this._canvas.width = 1),
              (this._canvas.height = 1),
              this._updateText();
          }
          __unloadResources() {
            (LabelComponent._useCount -= 1),
              0 === LabelComponent._useCount &&
              (i.ThreeJsHelper.destroyGeometry(
                LabelComponent._threeJsGeometry,
              ),
                i.ThreeJsHelper.destroyMaterial(
                  LabelComponent._threeJsMaterial,
                ));
            const t = this.getThreeJsObjects()[0];
            null !== t.parent && t.parent.remove(t),
              this.getThreeJsMaterials()[0].dispose(),
              (this._canvas = null);
          }
          _updateText() {
            if (null === this._canvas) return;
            const t = this._canvas.getContext("2d");
            (this._devicePixelRatio = window.devicePixelRatio),
              (t.font = this._fontSize + "px " + this._fontFamily);
            const e = t.measureText(this._text);
            this._pixelSize.set(
              e.width * this._devicePixelRatio,
              this._fontSize * this._devicePixelRatio,
            );
            const s = i.MathUtils.ceilPow2(this._pixelSize.x),
              n = i.MathUtils.ceilPow2(this._pixelSize.y);
            (s === this._canvas.width && n === this._canvas.height) ||
              ((this._canvas.width = s), (this._canvas.height = n)),
              t.clearRect(0, 0, this._canvas.width, this._canvas.height),
              (this._canvas.style.width = s / this._devicePixelRatio + "px"),
              (this._canvas.style.height = n / this._devicePixelRatio + "px"),
              (t.font = this._pixelSize.y + "px " + this._fontFamily),
              (t.fillStyle = "rgba(255, 255, 255, 255)"),
              t.fillText(
                this._text,
                (this._canvas.width - this._pixelSize.x) *
                i.MathUtils.clamp01(this._alignment.x),
                this._canvas.height -
                0.1875 * this._pixelSize.y -
                (this._canvas.height - this._pixelSize.y) *
                i.MathUtils.clamp01(this._alignment.y),
              );
            const o = this.getThreeJsMaterials()[0];
            i.ThreeJsHelper.setUniformTexture(
              o,
              "colorTexture",
              i.ThreeJsHelper.loadTextureFromCanvas(this._canvas),
            );
          }
        }
        (LabelComponent._threeJsMaterial = null),
          (LabelComponent._threeJsGeometry = null),
          (LabelComponent._useCount = 0);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LightSourceComponent: function () {
              return LightSourceComponent;
            },
          });
        var i = s(6);
        class LightSourceComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._color = new i.Color(1, 1, 1)),
              this._color.freeze(),
              (this._absoluteMagnitude = 1),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(), this._color.copy(t), this._color.freeze();
          }
          getAbsoluteMagnitude() {
            return this._absoluteMagnitude;
          }
          setAbsoluteMagnitude(t) {
            this._absoluteMagnitude = t;
          }
          __loadResources() {
            return (
              this.getEntity()
                .getScene()
                .__addLightSource(
                  this.getEntity().getName(),
                  this.getTypeIndex(),
                ),
              Promise.resolve()
            );
          }
          __unloadResources() {
            this.getEntity()
              .getScene()
              .__removeLightSource(
                this.getEntity().getName(),
                this.getTypeIndex(),
              );
          }
          __setTypeIndex(t) {
            "loaded" === this.getLoadState() &&
              this.getEntity()
                .getScene()
                .__removeLightSource(
                  this.getEntity().getName(),
                  this.getTypeIndex(),
                ),
              super.__setTypeIndex(t),
              "loaded" === this.getLoadState() &&
              this.getEntity()
                .getScene()
                .__addLightSource(
                  this.getEntity().getName(),
                  this.getTypeIndex(),
                );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ModelComponent: function () {
              return ModelComponent;
            },
          });
        var i = s(6);
        class ModelComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._url = ""),
              (this._shadowEntities = []),
              (this._translation = new i.Vector3()),
              this._translation.freeze(),
              (this._rotation = new i.Quaternion()),
              this._rotation.freeze(),
              (this._urlReferenceMap = new Map()),
              (this._threeJsAnimationClips = new Map()),
              (this._hiddenObjects = new i.FastMap()),
              (this._scale = new i.Vector3(0.001, 0.001, 0.001)),
              this._scale.freeze(),
              (this._modelRadius = NaN),
              (this._environmentCubemapUrl = ""),
              (this._environmentCylindricalUrl = ""),
              (this._environmentCubemap = null),
              (this._environmentIntensity = 0.5),
              (this._dynamicEnvironmentMapComponent = null),
              (this._pixelRadiusVisibleInterval = void 0),
              (this._useCompressedTextures = !1),
              (this._onConfigChanged = this._onConfigChanged.bind(this)),
              this.__setRadius(this.getEntity().getExtentsRadius());
          }
          getUrl() {
            return this._url;
          }
          setUrl(t) {
            "" !== this._url &&
              this.getEntity()
                .getScene()
                .getEngine()
                .getDownloader()
                .cancel(this._url),
              this.resetResources(),
              (this._modelRadius = NaN),
              (this._loading = !1),
              (this._url = t);
          }
          setHiddenObject(t, e) {
            e && !this._hiddenObjects.has(t)
              ? this._hiddenObjects.set(t, null)
              : !e &&
              this._hiddenObjects.has(t) &&
              this._hiddenObjects.delete(t);
          }
          getTranslation() {
            return this._translation;
          }
          setTranslation(t) {
            this._translation.thaw(),
              (this._translation = t),
              this._translation.freeze();
          }
          getScale() {
            return this._scale;
          }
          setScale(t) {
            this._scale.thaw(),
              "number" == typeof t
                ? this._scale.set(t, t, t)
                : this._scale.copy(t),
              this._scale.freeze(),
              i.ThreeJsHelper.setScale(
                this.getThreeJsObjects()[0],
                this._scale,
              ),
              isNaN(this._modelRadius)
                ? this.__setRadius(this.getEntity().getExtentsRadius())
                : this.__setRadius(
                  Math.max(this._scale.x, this._scale.y, this._scale.z) *
                  this._modelRadius,
                );
          }
          getRotation() {
            return this._rotation;
          }
          setRotation(t) {
            this._rotation.thaw(),
              this._rotation.copy(t),
              this._rotation.freeze();
          }
          getEnvironmentCubemapUrl() {
            return this._environmentCubemapUrl;
          }
          setEnvironmentCubemapUrl(t) {
            this._environmentCubemapUrl = t;
          }
          getEnvironmentIntensity() {
            return this._environmentIntensity;
          }
          setEnvironmentIntensity(t) {
            this._environmentIntensity = t;
            for (let t = 0, e = this.getThreeJsMaterials().length; t < e; t++)
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[t],
                "environmentIntensity",
                this._environmentIntensity,
              );
          }
          getEnvironmentCylindricalUrl() {
            return this._environmentCylindricalUrl;
          }
          setEnvironmentCylindricalUrl(t) {
            this._environmentCylindricalUrl = t;
          }
          setPixelRadiusVisibleInterval(t) {
            if (void 0 !== t)
              void 0 === this._pixelRadiusVisibleInterval
                ? (this._pixelRadiusVisibleInterval = new i.Interval(
                  t.min,
                  t.max,
                ))
                : this._pixelRadiusVisibleInterval.copy(t);
            else {
              this._pixelRadiusVisibleInterval = void 0;
              for (const t of this.getThreeJsMaterials())
                i.ThreeJsHelper.setUniformNumber(t, "alphaMultiplier", 1);
              this.getThreeJsObjects()[0].visible = !0;
            }
          }
          setDynamicEnvironmentMapComponent(t) {
            this._dynamicEnvironmentMapComponent = t;
            for (let e = 0, s = this.getThreeJsMaterials().length; e < s; e++) {
              const s = this.getThreeJsMaterials()[e];
              void 0 !== s.uniforms.dynEnvTexture &&
                (i.ThreeJsHelper.setDefine(s, "dynEnvMap", !0),
                  i.ThreeJsHelper.setUniformTexture(
                    s,
                    "dynEnvTexture",
                    this._dynamicEnvironmentMapComponent.getTexture(),
                  ),
                  i.ThreeJsHelper.setUniformNumber(
                    s,
                    "dynEnvFaceSize",
                    t.getFaceSize(),
                  ));
            }
            null !== this._environmentCubemap &&
              (this._environmentCubemap.dispose(),
                (this._environmentCubemap = null));
          }
          getUseCompressedTextures() {
            return this._useCompressedTextures;
          }
          setUseCompressedTextures(t) {
            this._useCompressedTextures = t;
          }
          setURLReferenceMap(t) {
            this._urlReferenceMap.clear();
            for (const e of t) this._urlReferenceMap.set(e[0], e[1]);
          }
          getAnimationClip(t) {
            return this._threeJsAnimationClips.get(t) || null;
          }
          getMaterial(t) {
            const e = this.getThreeJsMaterials();
            for (let s = 0, i = e.length; s < i; s++)
              if (e[s].name === t) return e[s];
            return null;
          }
          updateMaterial(t, e) {
            const s = this.getThreeJsMaterials();
            let n;
            for (let i = 0; i < s.length; i++) {
              const o = s[i];
              if (o.name === t) {
                (n = o), s.splice(i, 1), s.push(e);
                break;
              }
            }
            if (!n)
              throw new Error(
                `No material with the name ${t} was found in ${this}.`,
              );
            for (let s = 0, o = this.getThreeJsObjects().length; s < o; s++) {
              const o = this.getThreeJsObjects()[s];
              o instanceof i.THREE.Mesh &&
                o.material === n &&
                ((o.material = e), (o.material.name = t));
            }
          }
          getNumShadowEntities() {
            return this._shadowEntities.length;
          }
          getShadowEntity(t) {
            return this._shadowEntities[t]?.getName();
          }
          setShadowEntities(t) {
            this._shadowEntities = [];
            for (const e of t)
              this._shadowEntities.push(
                new i.EntityRef(this.getEntity().getScene(), e),
              );
            const e = t.length > 0;
            for (let t = 0, s = this.getThreeJsMaterials().length; t < s; t++)
              i.ThreeJsHelper.setDefine(
                this.getThreeJsMaterials()[t],
                "shadowEntities",
                e,
              );
          }
          __prepareForRender(t) {
            for (let t = 0, e = this._hiddenObjects.size; t < e; t++) {
              const e = this._hiddenObjects.getAt(t);
              null === e.value &&
                (e.value = this.getThreeJsObjectByName(e.key)),
                null !== e.value && (e.value.visible = !1);
            }
            if (void 0 !== this._pixelRadiusVisibleInterval) {
              const e = this.getEntity().getPixelSpaceExtentsRadius(t),
                s = i.MathUtils.clamp01(
                  Math.min(
                    1 +
                    (2 * (e - this._pixelRadiusVisibleInterval.min)) /
                    this._pixelRadiusVisibleInterval.min,
                    isFinite(this._pixelRadiusVisibleInterval.max)
                      ? 1 -
                      (2 * (e - this._pixelRadiusVisibleInterval.max)) /
                      this._pixelRadiusVisibleInterval.max
                      : 1,
                  ),
                );
              for (const t of this.getThreeJsMaterials())
                i.ThreeJsHelper.setUniformNumber(t, "alphaMultiplier", s);
              0 === s && (this.getThreeJsObjects()[0].visible = !1);
            }
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
              t,
              this._translation,
              !0,
            ),
              i.ThreeJsHelper.setOrientationToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                this._rotation,
              ),
              i.MaterialUtils.setUniforms(
                this.getThreeJsMaterials(),
                t,
                this.getEntity(),
                this._shadowEntities,
                null,
                !1,
              );
          }
          async __loadResources() {
            const t = this.getEntity().getScene().getEngine(),
              e = this._url.startsWith("blob:") || this._url.endsWith(".glb");
            try {
              const s = await t.getDownloader().download(this._url, e);
              if ("loading" !== this.getLoadState() || "cancelled" === s.status)
                return;
              if ("failed" === s.status)
                throw new Error(
                  'Failed to load model component file "' +
                  s.url +
                  '": ' +
                  s.errorMessage,
                );
              if (
                !s.actualUrl.endsWith(".gltf") &&
                !s.actualUrl.endsWith(".glb") &&
                !s.actualUrl.startsWith("blob:")
              )
                throw new Error("Unknown model format.");
              const n = new i.THREE.LoadingManager();
              0 === this._urlReferenceMap.size &&
                n.addHandler(
                  /.$/,
                  this._useCompressedTextures
                    ? t.getTextureLoaderCompressed()
                    : t.getTextureLoader(),
                ),
                n.setURLModifier((t) => {
                  const e = t.substring(t.lastIndexOf("/") + 1);
                  return this._urlReferenceMap.has(e)
                    ? this._urlReferenceMap.get(e)
                    : t;
                });
              const o = new i.ThreeJsGLTFLoader(n);
              await new Promise((e, n) => {
                o.parse(
                  s.content,
                  i.THREE.LoaderUtils.extractUrlBase(s.actualUrl),
                  async (s) => {
                    const n = s.scene;
                    this._populateThreeJsObjectsAndMaterials(s.scene),
                      "loading" !== this.getLoadState() &&
                      i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
                      this._clean(),
                      i.ThreeJsHelper.setupObject(this, n),
                      i.ThreeJsHelper.setScale(n, this._scale);
                    const o = new i.THREE.Box3().setFromObject(n);
                    (this._modelRadius = Math.max(
                      o.min.length(),
                      o.max.length(),
                    )),
                      this.__setRadius(
                        Math.max(this._scale.x, this._scale.y, this._scale.z) *
                        this._modelRadius,
                      );
                    for (let t = 0; t < s.animations.length; t++)
                      this._threeJsAnimationClips.set(
                        s.animations[t].name,
                        s.animations[t],
                      );
                    null === this._dynamicEnvironmentMapComponent &&
                      null === this._environmentCubemap &&
                      ("" !== this._environmentCubemapUrl
                        ? await t
                          .getTextureLoader()
                          .loadCubeTexture(this._environmentCubemapUrl, !0)
                          .then((e) => {
                            this._environmentCubemap = t
                              .getTextureLoader()
                              .generateEnvMap(e);
                          })
                        : "" !== this._environmentCylindricalUrl &&
                        (await t
                          .getTextureLoader()
                          .loadTexture(this._environmentCylindricalUrl, !0)
                          .then((e) => {
                            this._environmentCubemap = t
                              .getTextureLoader()
                              .generateEnvMap(e);
                          }))),
                      this._updateMaterials(),
                      this.getEntity()
                        .getScene()
                        .getEngine()
                        .getConfig()
                        .addEventListener(
                          "gammaCorrection",
                          this._onConfigChanged,
                        ),
                      e();
                  },
                  (t) => {
                    n(new Error(`Error loading gltf: ${t}`));
                  },
                );
              });
            } catch (t) {
              throw (
                (t instanceof Error &&
                  (t.message = `While loading model "${this._url}": ${t.message}`),
                  t)
              );
            }
          }
          __unloadResources() {
            for (let t = 0, e = this._hiddenObjects.size; t < e; t++)
              this._hiddenObjects.getAt(t).value = null;
            this.getEntity()
              .getScene()
              .getEngine()
              .getConfig()
              .removeEventListener("gammaCorrection", this._onConfigChanged),
              i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          _populateThreeJsObjectsAndMaterials(t) {
            if ((this.getThreeJsObjects().push(t), t instanceof i.THREE.Mesh)) {
              let e = t.material;
              Array.isArray(e) || (e = [e]);
              for (const t of e) {
                let e = !1;
                for (
                  let s = 0, i = this.getThreeJsMaterials().length;
                  s < i;
                  s++
                )
                  if (this.getThreeJsMaterials()[s] === t) {
                    e = !0;
                    break;
                  }
                e || this.getThreeJsMaterials().push(t);
              }
            }
            for (let e = 0; e < t.children.length; e++)
              this._populateThreeJsObjectsAndMaterials(t.children[e]);
          }
          _clean() {
            const t = /_(lamp|hemi)/i;
            for (let e = 0; e < this.getThreeJsObjects().length; e++) {
              const s = this.getThreeJsObjects()[e];
              s.name.match(t) &&
                (s.parent && s.parent.remove(s),
                  this.getThreeJsObjects().splice(e, 1),
                  e--);
            }
            for (let t = 0, e = this.getThreeJsObjects().length; t < e; t++) {
              let e = !1;
              const s = this.getThreeJsObjects()[t];
              s instanceof i.THREE.Mesh &&
                s.geometry instanceof i.THREE.BufferGeometry &&
                (s.name.startsWith("_root") && (e = !0),
                  s instanceof i.THREE.Mesh &&
                  s.material instanceof i.THREE.Material &&
                  "transparent" === s.material.name &&
                  (e = !0),
                  e &&
                  (s.geometry.deleteAttribute("position"),
                    s.geometry.deleteAttribute("normal")));
            }
          }
          _onConfigChanged() {
            this._updateMaterials();
          }
          _updateMaterials() {
            for (let t = 0, e = this.getThreeJsMaterials().length; t < e; t++) {
              const e = this.getThreeJsMaterials()[t];
              if (!(e instanceof i.THREE.MeshStandardMaterial)) continue;
              const s = this._getNewPioneerMaterial(e);
              this.getThreeJsMaterials()[t] = s;
              let n = !1;
              s.defines.normalMap && (n = !0);
              for (const t of this.getThreeJsObjects())
                if (t instanceof i.THREE.Mesh) {
                  let o = !1;
                  if (Array.isArray(t.material))
                    for (let i = 0, n = t.material.length; i < n; i++)
                      t.material[i] === e && ((t.material[i] = s), (o = !0));
                  else t.material === e && ((t.material = s), (o = !0));
                  o &&
                    n &&
                    t.geometry instanceof i.THREE.BufferGeometry &&
                    void 0 === t.geometry.getAttribute("tangent") &&
                    i.ThreeJsHelper.computeTangents(t.geometry);
                }
              e.dispose();
            }
          }
          _getNewPioneerMaterial(t) {
            const e = i.MaterialUtils.getPBR();
            if (
              ((e.name = t.name),
                (e.transparent = t.transparent),
                (e.depthWrite = t.depthWrite),
                (e.side = t.side),
                null !== t.map)
            ) {
              const s = t.map.ktxFormat;
              void 0 !== s && (t.map.format = s),
                (e.uniforms.colorTexture.value = t.map),
                (e.defines.colorMap = !0);
            }
            t.roughnessMap &&
              ((e.uniforms.roughnessTexture.value = t.roughnessMap),
                (e.defines.roughnessMap = !0)),
              t.metalnessMap &&
              ((e.uniforms.metalnessTexture.value = t.metalnessMap),
                (e.defines.metalnessMap = !0)),
              null !== t.normalMap &&
              ((e.uniforms.normalTexture.value = t.normalMap),
                (e.uniforms.normalScale.value = t.normalScale),
                (e.defines.normalMap = !0)),
              e.uniforms.emissiveColor.value.copy(t.emissive),
              e.uniforms.emissiveColor.value.multiplyScalar(
                t.emissiveIntensity,
              ),
              null !== t.emissiveMap &&
              ((e.uniforms.emissiveTexture.value = t.emissiveMap),
                (e.defines.emissiveMap = !0)),
              (e.uniforms.color.value = t.color),
              (e.uniforms.roughness.value = t.roughness),
              (e.uniforms.metalness.value = t.metalness);
            let s = 0;
            return (
              null !== this._dynamicEnvironmentMapComponent
                ? ((e.defines.dynEnvMap = !0),
                  (e.uniforms.dynEnvTexture.value =
                    this._dynamicEnvironmentMapComponent.getTexture()),
                  (e.uniforms.dynEnvFaceSize.value =
                    this._dynamicEnvironmentMapComponent.getFaceSize()))
                : null !== this._environmentCubemap &&
                ((e.defines.envMap = !0),
                  (e.defines.envIsCubeUV = !0),
                  (e.uniforms.envTexture.value = this._environmentCubemap),
                  (s = this._environmentCubemap.image.height),
                  (e.uniforms.maxMipLevel.value = Math.log(s) * Math.LOG2E)),
              (e.uniforms.environmentIntensity.value =
                this._environmentIntensity),
              (e.uniforms.gammaCorrectionFactor.value = this.getEntity()
                .getScene()
                .getEngine()
                .getConfig()
                .getValue("gammaCorrection")),
              this._shadowEntities.length > 0 &&
              (e.defines.shadowEntities = !0),
              (e.needsUpdate = !0),
              e
            );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitalParticlesComponent: function () {
              return OrbitalParticlesComponent;
            },
          });
        var i = s(6);
        class OrbitalParticlesComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._scaleOfParticles = 1),
              (this._loadFunction = null),
              (this._orbitalElementsList = []),
              (this._offsetArray = new Float32Array(0)),
              (this._spriteParticles = null),
              this.__setRadius(100 * this.getEntity().getExtentsRadius());
          }
          getScaleOfParticles() {
            return this._scaleOfParticles;
          }
          setScaleOfParticles(t) {
            (this._scaleOfParticles = t), this.resetResources();
          }
          setLoadFunction(t) {
            (this._loadFunction = t), this.resetResources();
          }
          __update() {
            if (null === this._spriteParticles) return;
            const t = i.Vector3.pool.get(),
              e = i.Vector3.pool.get(),
              s = this.getEntity().getScene().getEngine().getTime();
            for (let i = 0, n = this._orbitalElementsList.length; i < n; i++)
              this._orbitalElementsList[i].project(t, e, s),
                (this._offsetArray[3 * i + 0] = t.x),
                (this._offsetArray[3 * i + 1] = t.y),
                (this._offsetArray[3 * i + 2] = t.z);
            i.Vector3.pool.release(t),
              i.Vector3.pool.release(e),
              this._spriteParticles.setParticleOffsets(this._offsetArray);
          }
          __prepareForRender(t) {
            this._spriteParticles.prepareForRender(t);
          }
          async __loadResources() {
            (this._spriteParticles = new i.SpriteParticles(this)),
              this.getThreeJsMaterials().push(
                this._spriteParticles.getThreeJsMaterial(),
              ),
              this.getThreeJsObjects().push(
                this._spriteParticles.getThreeJsObject(),
              ),
              await this._initializeParticles();
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._spriteParticles = null);
          }
          async _initializeParticles() {
            if (null === this._loadFunction) return;
            const t = await this._loadFunction(),
              e = t.orbitalElements.length;
            this._orbitalElementsList = [];
            let s = 0;
            for (let n = 0, o = e; n < o; n++) {
              const e = new i.OrbitalElements();
              e.copy(t.orbitalElements[n]), this._orbitalElementsList.push(e);
              const o = e.semiMajorAxis * (1 + e.eccentricity);
              s = Math.max(s, o);
            }
            this.__setRadius(s), (this._offsetArray = new Float32Array(3 * e));
            const n = new Float32Array(4 * e),
              o = new Float32Array(1 * e);
            for (let s = 0, i = e; s < i; s++)
              (n[4 * s + 0] = t.colors[s].r),
                (n[4 * s + 1] = t.colors[s].g),
                (n[4 * s + 2] = t.colors[s].b),
                (n[4 * s + 3] = t.colors[s].a),
                (o[1 * s + 0] = t.scales[s] * this._scaleOfParticles);
            this._spriteParticles.setParticleColors(n),
              this._spriteParticles.setParticleScales(o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ParticleSprayComponent: function () {
              return ParticleSprayComponent;
            },
          });
        var i = s(6);
        class ParticleSprayComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._length = 1),
              (this._spread = 30),
              (this._numberOfParticles = 0),
              (this._speedOfParticles = 0.1),
              (this._sizeOfParticles = 0.1),
              (this._particleSpacingRandom = !0),
              (this._colorOfParticles = new i.Color()),
              this._colorOfParticles.freeze(),
              (this._originOffset = new i.Vector3()),
              this._originOffset.freeze(),
              (this._direction = new i.Vector3()),
              this._direction.freeze(),
              (this._relativeToEntityOrientation = !0),
              this.__setRadius(this._length);
          }
          getLength() {
            return this._length;
          }
          setLength(t) {
            (this._length = t),
              this.__setRadius(this._length),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "length",
                this._length,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "totalTime",
                this._length / this._speedOfParticles,
              );
          }
          getSpread() {
            return this._spread;
          }
          setSpread(t) {
            (this._spread = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "spread",
                i.MathUtils.degToRad(this._spread),
              );
          }
          getNumberOfParticles() {
            return this._numberOfParticles;
          }
          setNumberOfParticles(t) {
            (this._numberOfParticles = t), this.resetResources();
          }
          getSpeedOfParticles() {
            return this._speedOfParticles;
          }
          setSpeedOfParticles(t) {
            (this._speedOfParticles = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "totalTime",
                this._length / this._speedOfParticles,
              );
          }
          getSizeOfParticles() {
            return this._sizeOfParticles;
          }
          setSizeOfParticles(t) {
            (this._sizeOfParticles = t), this.resetResources();
          }
          getParticleSpacingRandom() {
            return this._particleSpacingRandom;
          }
          setParticleSpacingRandom(t) {
            (this._particleSpacingRandom = t), this.resetResources();
          }
          getColorOfParticles() {
            return this._colorOfParticles;
          }
          setColorOfParticles(t) {
            this._colorOfParticles.thaw(),
              this._colorOfParticles.copy(t),
              this._colorOfParticles.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "globalColor",
                this._colorOfParticles,
              );
          }
          getOriginOffset() {
            return this._originOffset;
          }
          setOriginOffset(t) {
            this._originOffset.thaw(),
              this._originOffset.copy(t),
              this._originOffset.freeze(),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "originOffset",
                this._originOffset,
              );
          }
          getDirection() {
            return this._direction;
          }
          setDirection(t) {
            this._direction.thaw(),
              this._direction.normalize(t),
              this._direction.freeze(),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "direction",
                this._direction,
              );
            const e = i.Vector3.pool.get();
            e.cross(this._direction, i.Vector3.XAxis),
              e.isZero() && e.cross(this._direction, i.Vector3.YAxis),
              e.normalize(e),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "directionPerp",
                e,
              ),
              i.Vector3.pool.release(e);
          }
          getRelativeToEntityOrientation() {
            return this._relativeToEntityOrientation;
          }
          setRelativeToEntityOrientation(t) {
            this._relativeToEntityOrientation = t;
          }
          __prepareForRender(t) {
            const e = i.MathUtils.wrap(
              this.getEntity().getScene().getEngine().getTime(),
              0,
              this._length / this._speedOfParticles,
            );
            if (
              (i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "time",
                e,
              ),
                this._relativeToEntityOrientation)
            ) {
              const t = i.Vector3.pool.get(),
                e = i.Vector3.pool.get();
              t.rotate(this.getEntity().getOrientation(), this._originOffset),
                e.rotate(this.getEntity().getOrientation(), this._direction),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "originOffset",
                  t,
                ),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "direction",
                  e,
                );
              const s = i.Vector3.pool.get();
              s.cross(e, i.Vector3.XAxis),
                s.isZero() && s.cross(e, i.Vector3.YAxis),
                s.normalize(s),
                i.ThreeJsHelper.setUniformVector3(
                  this.getThreeJsMaterials()[0],
                  "directionPerp",
                  s,
                ),
                i.Vector3.pool.release(s),
                i.Vector3.pool.release(t),
                i.Vector3.pool.release(e);
            }
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
              t,
            );
          }
          async __loadResources() {
            const t = new i.THREE.RawShaderMaterial({
              uniforms: {
                spread: new i.THREE.Uniform(0),
                originOffset: new i.THREE.Uniform(new i.THREE.Vector3()),
                direction: new i.THREE.Uniform(new i.THREE.Vector3()),
                directionPerp: new i.THREE.Uniform(new i.THREE.Vector3()),
                length: new i.THREE.Uniform(0),
                time: new i.THREE.Uniform(0),
                totalTime: new i.THREE.Uniform(0),
                globalColor: new i.THREE.Uniform(
                  new i.THREE.Vector4(1, 1, 1, 1),
                ),
                ...i.ShaderChunkLogDepth.ThreeUniforms,
              },
              vertexShader: ParticleSprayComponent.vertexShader,
              fragmentShader: ParticleSprayComponent.fragmentShader,
              transparent: !0,
              depthWrite: !1,
              blending: i.THREE.AdditiveBlending,
              side: i.THREE.DoubleSide,
            });
            i.ShaderFix.fix(t), this.getThreeJsMaterials().push(t);
            const e = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),
              s = new Float32Array(3 * this._numberOfParticles),
              n = new Float32Array(4 * this._numberOfParticles),
              o = new Float32Array(1 * this._numberOfParticles),
              r = new Uint16Array([0, 1, 2, 2, 3, 0]),
              a = new i.THREE.InstancedBufferGeometry();
            a.setAttribute("position", new i.THREE.BufferAttribute(e, 2)),
              a.setAttribute(
                "params",
                new i.THREE.InstancedBufferAttribute(s, 3),
              ),
              a.setAttribute(
                "color",
                new i.THREE.InstancedBufferAttribute(n, 4),
              ),
              a.setAttribute(
                "size",
                new i.THREE.InstancedBufferAttribute(o, 1),
              ),
              a.setIndex(new i.THREE.BufferAttribute(r, 1)),
              (a.instanceCount = this._numberOfParticles);
            const l = i.ThreeJsHelper.createMeshObjectGivenGeometry(this, t, a);
            this.getThreeJsObjects().push(l),
              i.ThreeJsHelper.setOrientation(
                this.getThreeJsObjects()[0],
                i.Quaternion.Identity,
              ),
              this._initializeParticles(),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "length",
                this._length,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "spread",
                i.MathUtils.degToRad(this._spread),
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "totalTime",
                this._length / this._speedOfParticles,
              ),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "originOffset",
                this._originOffset,
              ),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "direction",
                this._direction,
              ),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "globalColor",
                this._colorOfParticles,
              );
            const c = i.Vector3.pool.get();
            c.cross(this._direction, i.Vector3.XAxis),
              c.isZero() && c.cross(this._direction, i.Vector3.YAxis),
              c.normalize(c),
              i.ThreeJsHelper.setUniformVector3(
                this.getThreeJsMaterials()[0],
                "directionPerp",
                c,
              ),
              i.Vector3.pool.release(c);
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _initializeParticles() {
            const t = this.getThreeJsObjects()[0].geometry.attributes.params,
              e = this.getThreeJsObjects()[0].geometry.attributes.color,
              s = this.getThreeJsObjects()[0].geometry.attributes.size,
              i = t.array,
              n = e.array,
              o = s.array;
            for (let t = 0, e = this._numberOfParticles; t < e; t++)
              (i[3 * t + 0] = 2 * Math.random() - 1),
                (i[3 * t + 1] = 2 * Math.random() - 1),
                this._particleSpacingRandom
                  ? (i[3 * t + 2] = Math.random())
                  : (i[3 * t + 2] = t / this._numberOfParticles),
                (n[4 * t + 0] = 1),
                (n[4 * t + 1] = 1),
                (n[4 * t + 2] = 1),
                (n[4 * t + 3] = 1),
                (o[1 * t + 0] = this._sizeOfParticles);
            (t.needsUpdate = !0), (e.needsUpdate = !0), (s.needsUpdate = !0);
          }
        }
        (ParticleSprayComponent.vertexShader = `\n\tattribute vec2 position;\n\tattribute vec3 params; // x, y are in plane made by direction if z were 1, z is 0 to 1 where the particle is in the total length at time = 0\n\tattribute vec4 color;\n\tattribute float size;\n\n\tuniform float spread;\n\tuniform vec3 originOffset; // in model-space\n\tuniform vec3 direction; // in model-space\n\tuniform vec3 directionPerp; // in model-space\n\tuniform float length;\n\tuniform float time;\n\tuniform float totalTime;\n\n\tuniform mat4 modelViewMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec2 vPosition;\n\tvarying vec4 vColor;\n\n\t${i.ShaderChunkLogDepth.VertexHead}\n\n\tvoid main() {\n\t\tfloat u = mod(params.z + time / totalTime, 1.0);\n\t\tfloat sinSpread = sin(spread);\n\t\tfloat uSpread = sinSpread > 0.0 ? u : (1.0 - u);\n\t\tfloat sizeAtU = size * max(0.1, uSpread);\n\t\tvec3 directionPerp2 = cross(direction, directionPerp);\n\t\tvec3 modelPosition = originOffset + (directionPerp * params.x * sinSpread * uSpread + directionPerp2 * params.y * sinSpread * uSpread + direction * u) * length;\n\t\tvec4 viewPosition = vec4(position.x * sizeAtU, 0, position.y * sizeAtU, 1) + modelViewMatrix * vec4(modelPosition, 1.0);\n\t\tgl_Position = projectionMatrix * viewPosition;\n\t\tgl_Position.w = viewPosition.y;\n\n\t\t// Set the varying variables.\n\t\tvPosition = position;\n\t\tvColor = color * (1.0 - u);\n\n\t\t${i.ShaderChunkLogDepth.Vertex}\n\t}`),
          (ParticleSprayComponent.fragmentShader = `\n\tprecision highp float;\n\n\tuniform vec4 globalColor;\n\n\tvarying vec2 vPosition;\n\tvarying vec4 vColor;\n\n\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\tvoid main(void) {\n\t\t// Set the color to be a circle tinted by the color and globalColor.\n\t\tgl_FragColor = globalColor * vColor * max(0.0, 1.0 - dot(vPosition, vPosition));\n\n\t\t${i.ShaderChunkLogDepth.Fragment}\n\t}`);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            RingsComponent: function () {
              return RingsComponent;
            },
          });
        var i = s(6);
        class RingsComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._topTextureUrl = ""),
              (this._bottomTextureUrl = ""),
              (this._innerRadius = 0),
              (this._outerRadius = 0),
              (this._fadeDistance = 0),
              (this._shadowEntities = []),
              (this._spheroidComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
              ),
              this._spheroidComponentRef.setRefChangedCallback(
                this._spheroidRefChangedCallback.bind(this),
              ),
              (this._spheroidChangedCallback =
                this._spheroidChangedCallback.bind(this)),
              this.__setUsesEntityOrientation(!0);
          }
          getTopTextureUrl() {
            return this._topTextureUrl;
          }
          setTopTextureUrl(t) {
            (this._topTextureUrl = t),
              i.ThreeJsHelper.loadTextureIntoUniform(
                this,
                this.getThreeJsMaterials()[0],
                "topTexture",
                this._topTextureUrl,
                !0,
                !1,
              );
          }
          getBottomTextureUrl() {
            return this._bottomTextureUrl;
          }
          setBottomTextureUrl(t) {
            (this._bottomTextureUrl = t),
              i.ThreeJsHelper.loadTextureIntoUniform(
                this,
                this.getThreeJsMaterials()[0],
                "bottomTexture",
                this._bottomTextureUrl,
                !0,
                !1,
              );
          }
          getInnerRadius() {
            return this._innerRadius;
          }
          setInnerRadius(t) {
            (this._innerRadius = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "innerRadius",
                this._innerRadius,
              );
          }
          getOuterRadius() {
            return this._outerRadius;
          }
          setOuterRadius(t) {
            (this._outerRadius = t),
              this.__setRadius(this._outerRadius),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "outerRadius",
                this._outerRadius,
              );
          }
          getTopTexture() {
            const t = this.getThreeJsMaterials()[0];
            return void 0 !== t ? t.uniforms.topTexture.value : null;
          }
          getFadeDistance() {
            return this._fadeDistance;
          }
          setFadeDistance(t) {
            this._fadeDistance = t;
          }
          getShadowEntity(t) {
            return this._shadowEntities[t]?.getName();
          }
          setShadowEntities(t) {
            this._shadowEntities = [];
            for (const e of t)
              this._shadowEntities.push(
                new i.EntityRef(this.getEntity().getScene(), e),
              );
            const e = t.length > 0;
            for (let t = 0, s = this.getThreeJsMaterials().length; t < s; t++)
              i.ThreeJsHelper.setDefine(
                this.getThreeJsMaterials()[t],
                "shadowEntities",
                e,
              );
          }
          __destroy() {
            const t = this._spheroidComponentRef.get();
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              super.__destroy();
          }
          __update() {
            this._spheroidComponentRef.update();
          }
          __prepareForRender(t) {
            if (this._fadeDistance > 0) {
              const e = i.Vector3.pool.get(),
                s = i.Quaternion.pool.get(),
                n = this.getThreeJsObjects()[0].quaternion;
              s.copyFromThreeJs(n),
                e.rotateInverse(
                  this.getEntity().getOrientation(),
                  this.getEntity().getCameraSpacePosition(t),
                ),
                i.ThreeJsHelper.setUniformNumber(
                  this.getThreeJsMaterials()[0],
                  "alphaFadeMultiplier",
                  i.MathUtils.lerp(
                    0,
                    1,
                    i.MathUtils.clamp01(
                      2 * (Math.abs(e.z) / this._fadeDistance - 1) + 1,
                    ),
                  ),
                ),
                i.Quaternion.pool.release(s),
                i.Vector3.pool.release(e);
            }
            i.MaterialUtils.setLightSourceUniforms(
              this.getThreeJsMaterials(),
              this.getEntity(),
              t,
            ),
              i.MaterialUtils.setUniforms(
                this.getThreeJsMaterials(),
                t,
                this.getEntity(),
                this._shadowEntities,
                null,
                !1,
              ),
              i.ThreeJsHelper.setOrientationToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
              ),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
          }
          async __loadResources() {
            const t = i.ThreeJsHelper.loadTexture(
              this,
              this._topTextureUrl,
              !0,
              !1,
            ),
              e = i.ThreeJsHelper.loadTexture(
                this,
                this._bottomTextureUrl,
                !0,
                !1,
              ),
              [s, n] = await Promise.all([t, e]);
            if (this.isDestroyed()) return s.dispose(), void n.dispose();
            const o = new i.THREE.ShaderMaterial({
              uniforms: {
                ambientLightColor: new i.THREE.Uniform(new i.THREE.Color()),
                lightPositions: new i.THREE.Uniform([
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                  new i.THREE.Vector3(1, 0, 0),
                ]),
                lightColors: new i.THREE.Uniform([
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                  new i.THREE.Vector3(0, 0, 0),
                ]),
                lightRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                numLights: new i.THREE.Uniform(0),
                entityPos: new i.THREE.Uniform(new i.THREE.Vector3()),
                innerRadius: new i.THREE.Uniform(this._innerRadius),
                outerRadius: new i.THREE.Uniform(this._outerRadius),
                topTexture: new i.THREE.Uniform(s),
                bottomTexture: new i.THREE.Uniform(n),
                alphaFadeMultiplier: new i.THREE.Uniform(1),
                spheroidEquatorialRadius: new i.THREE.Uniform(0),
                spheroidPolarRadius: new i.THREE.Uniform(0),
                numShadowEntities: new i.THREE.Uniform(0),
                shadowEntityPositions: new i.THREE.Uniform([
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                ]),
                shadowEntityRadii: new i.THREE.Uniform([0, 0, 0, 0, 0]),
                shadowEntitySunsetIntensity: new i.THREE.Uniform([
                  0, 0, 0, 0, 0,
                ]),
                shadowEntitySunsetColors: new i.THREE.Uniform([
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                  new i.THREE.Vector3(),
                ]),
                ...i.ShaderChunkLogDepth.ThreeUniforms,
              },
              vertexShader: RingsComponent.vertexShader,
              fragmentShader: RingsComponent.fragmentShader,
              transparent: !0,
              depthWrite: !1,
              blending: i.THREE.NormalBlending,
              side: i.THREE.DoubleSide,
            });
            i.ThreeJsHelper.setupLogDepthBuffering(o),
              i.ThreeJsHelper.setDefine(
                o,
                "shadowEntities",
                this._shadowEntities.length > 0,
              ),
              this.getThreeJsMaterials().push(o);
            const r = i.ThreeJsHelper.createMeshObject(
              this,
              o,
              [
                { name: "position", dimensions: 3 },
                { name: "normal", dimensions: 3 },
              ],
              !1,
            ),
              a = 10,
              l = new Float32Array(300),
              c = new Float32Array(300),
              h = new Uint16Array(486);
            for (let t = 0; t < a; t++)
              for (let e = 0; e < a; e++) {
                const s = e + t * a;
                (l[3 * s + 0] = (e / 9) * 2 - 1),
                  (l[3 * s + 1] = (t / 9) * 2 - 1),
                  (l[3 * s + 2] = 0),
                  (c[3 * s + 0] = 0),
                  (c[3 * s + 1] = 0),
                  (c[3 * s + 2] = 1),
                  e + 1 < a &&
                  t + 1 < a &&
                  ((h[6 * (e + 9 * t) + 0] = e + 0 + (t + 0) * a),
                    (h[6 * (e + 9 * t) + 1] = e + 0 + (t + 1) * a),
                    (h[6 * (e + 9 * t) + 2] = e + 1 + (t + 0) * a),
                    (h[6 * (e + 9 * t) + 3] = e + 1 + (t + 0) * a),
                    (h[6 * (e + 9 * t) + 4] = e + 0 + (t + 1) * a),
                    (h[6 * (e + 9 * t) + 5] = e + 1 + (t + 1) * a));
              }
            i.ThreeJsHelper.setVertices(r.geometry, "position", l),
              i.ThreeJsHelper.setVertices(r.geometry, "normal", c),
              i.ThreeJsHelper.setIndices(r.geometry, h),
              (r.material = o),
              this.getThreeJsObjects().push(r),
              this._spheroidChangedCallback();
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _spheroidRefChangedCallback(t, e) {
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              null !== e && e.addChangedCallback(this._spheroidChangedCallback),
              this._spheroidChangedCallback();
          }
          _spheroidChangedCallback() {
            const t = this.getThreeJsMaterials()[0];
            if (null !== t) {
              const e = this._spheroidComponentRef.get();
              null !== e
                ? (i.ThreeJsHelper.setUniformNumber(
                  t,
                  "spheroidEquatorialRadius",
                  e.getEquatorialRadius(),
                ),
                  i.ThreeJsHelper.setUniformNumber(
                    t,
                    "spheroidPolarRadius",
                    e.getPolarRadius(),
                  ))
                : (i.ThreeJsHelper.setUniformNumber(
                  t,
                  "spheroidEquatorialRadius",
                  0,
                ),
                  i.ThreeJsHelper.setUniformNumber(
                    t,
                    "spheroidPolarRadius",
                    0,
                  ));
            }
          }
        }
        (RingsComponent.vertexShader = `\n\tuniform float outerRadius;\n\n\tvarying vec3 localPosition;\n\tvarying vec3 cameraSpacePosition;\n\tvarying vec3 modelNormal;\n\n\t${i.ShaderChunkLogDepth.VertexHead}\n\n\tvoid main() {\n\t\tlocalPosition = position * outerRadius;\n\t\tcameraSpacePosition = (modelMatrix * vec4(localPosition, 1.)).xyz;\n\t\tmodelNormal = (modelMatrix * vec4(normal, 0.)).xyz;\n\t\tvec4 viewPosition = viewMatrix * vec4(cameraSpacePosition, 1.);\n\t\tgl_Position = projectionMatrix * viewPosition;\n\n\t\t${i.ShaderChunkLogDepth.Vertex}\n\t}`),
          (RingsComponent.fragmentShader = `\n\tprecision highp float;\n\n\t#ifndef saturate\n\t\t#define saturate(a) clamp(a, 0.0, 1.0)\n\t#endif\n\n\t// Lights\n\tuniform vec3 ambientLightColor;\n\tuniform vec3 lightPositions[5];\n\tuniform vec3 lightColors[5];\n\tuniform float lightRadii[5];\n\tuniform int numLights;\n\n\tuniform float innerRadius;\n\tuniform float outerRadius;\n\tuniform sampler2D topTexture;\n\tuniform sampler2D bottomTexture;\n\tuniform float alphaFadeMultiplier;\n\tuniform float spheroidEquatorialRadius;\n\tuniform float spheroidPolarRadius;\n\tuniform vec3 entityPos;\n\n\t// Shadow Entities.\n\t#ifdef shadowEntities\n\t\tuniform int numShadowEntities;\n\t\tuniform vec3 shadowEntityPositions[5];\n\t\tuniform float shadowEntityRadii[5];\n\t\tuniform float shadowEntitySunsetIntensity[5];\n\t\tuniform vec3 shadowEntitySunsetColors[5];\n\t#endif\n\n\t// The varying attributes.\n\tvarying vec3 localPosition;\n\tvarying vec3 cameraSpacePosition;\n\tvarying vec3 modelNormal;\n\n\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\tfloat spheroidShadow(vec3 lightDir, float lightCosAngle, float spheroidScaling, vec3 normal, vec3 ringPos) {\n\t\tvec3 sunDirScaled = normalize(lightDir - (spheroidScaling - 1.0) * lightCosAngle * normal);\n\t\tfloat pDotLScaled = dot(ringPos, sunDirScaled);\n\t\tif(dot(ringPos, ringPos) - pDotLScaled * pDotLScaled < spheroidEquatorialRadius * spheroidEquatorialRadius && pDotLScaled > 0.0) {\n\t\t\treturn 0.0;\n\t\t}\n\t\telse {\n\t\t\treturn 1.0;\n\t\t}\n\t}\n\n\t#ifdef shadowEntities\n\t\tvec3 applyRayleighScattering(vec3 color, float amount) {\n\t\t\tfloat value = (color.r + color.g + color.b);\n\t\t\tif (value > 0.0) {\n\t\t\t\tfloat rFactor = 1.0; // 6.3^-4 / 6.3^-4\n\t\t\t\tfloat gFactor = 1.602; // 5.6^-4 / 6.3^-4\n\t\t\t\tfloat bFactor = 3.228; // 4.7^-4 / 6.3^-4\n\t\t\t\tcolor.r *= pow(rFactor, -amount);\n\t\t\t\tcolor.g *= pow(gFactor, -amount);\n\t\t\t\tcolor.b *= pow(bFactor, -amount);\n\t\t\t\tcolor = value * color / (color.r + color.g + color.b);\n\t\t\t}\n\t\t\treturn color;\n\t\t}\n\n\t\tvec3 getLightColorFromShadowEntities(vec3 lightColor, vec3 lightDir, vec3 lightPosition, float lightRadius, vec3 normal) {\n\t\t\tvec3 color = lightColor;\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (i >= numShadowEntities) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvec3 origin = cameraSpacePosition - shadowEntityPositions[i];\n\t\t\t\tvec3 axis = normalize(shadowEntityPositions[i] - lightPosition);\n\t\t\t\tfloat sd = dot(origin, axis);\n\t\t\t\tif (sd > 0.0) {\n\t\t\t\t\tfloat e = length(origin - sd * axis);\n\t\t\t\t\tfloat ld = dot(cameraSpacePosition - lightPosition, axis);\n\t\t\t\t\tfloat lr = lightRadius;\n\t\t\t\t\tfloat sr = shadowEntityRadii[i];\n\t\t\t\t\tfloat e0 = (ld * sr - sd * lr) / (ld - sd);\n\t\t\t\t\tfloat e1 = (ld * sr + sd * lr) / (ld - sd);\n\t\t\t\t\tfloat lightLevel = 0.0;\n\t\t\t\t\tif (e1 < 0.0 || sd < 0.0) { // light in front of shadow entity\n\t\t\t\t\t\tlightLevel = 1.0;\n\t\t\t\t\t}\n\t\t\t\t\telse if (e0 < e1) {\n\t\t\t\t\t\te0 /= max(1.0, shadowEntitySunsetIntensity[i] * 2.0);\n\t\t\t\t\t\tlightLevel = (e - e0) / (e1 - e0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlightLevel = e < e0 ? 0.0 : 1.0; // 0 radius light.\n\t\t\t\t\t}\n\t\t\t\t\tcolor = saturate(lightLevel) * applyRayleighScattering(color, saturate(1.5 - lightLevel) * saturate(shadowEntitySunsetIntensity[i]));\n\t\t\t\t}\n}\n\t\t\treturn color;\n\t\t}\n\t#endif\n\n\tvoid main(void) {\n\t\tfloat spheroidScaling = spheroidEquatorialRadius / spheroidPolarRadius;\n\t\tvec3 positionDir = normalize(cameraSpacePosition);\n\t\tvec3 ringPos = cameraSpacePosition - entityPos;\n\t\tvec3 normal = normalize(modelNormal);\n\t\tfloat cameraCosAngle = -dot(positionDir, normal);\n\n\t\t// Calculate the UVs.\n\t\tvec2 uv;\n\t\tuv.x = (length(localPosition) - innerRadius) / (outerRadius - innerRadius);\n\t\tif (uv.x < 0.0 || uv.x > 1.0) {\n\t\t\tgl_FragColor = vec4(0, 0, 0, 0);\n\t\t\treturn;\n\t\t}\n\t\tuv.y = 0.0;\n\n\t\t// Get the pixels at those uvs.\n\t\tvec4 topPixel = texture2D(topTexture, uv);\n\t\tvec4 bottomPixel = texture2D(bottomTexture, uv);\n\n\t\t// Get the initial diffuse light.\n\t\tvec3 diffuseLight = ambientLightColor;\n\t\t\n\t\t// For each light,\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (i >= numLights) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvec3 lightDir = normalize(cameraSpacePosition - lightPositions[i]);\n\t\t\tfloat lightCosAngle = -dot(lightDir, normal);\n\n\t\t\tvec3 incomingLight = lightColors[i];\n\n\t\t\t#ifdef shadowEntities\n\t\t\t\tincomingLight = getLightColorFromShadowEntities(incomingLight, lightDir, lightPositions[i], lightRadii[i], normal);\n\t\t\t#endif\n\n\t\t\tfloat cameraDirDotLight = dot(positionDir, lightDir);\n\t\t\tfloat bottomTopRatio = (1.0 + 0.2 * cameraDirDotLight) * sign(cameraCosAngle) * lightCosAngle;\n\t\t\tfloat shadow = spheroidShadow(lightDir, lightCosAngle, spheroidScaling, normal, ringPos);\n\t\t\tvec3 bottomColor = saturate(incomingLight * (1.0 - bottomTopRatio) * shadow);\n\t\t\tvec3 topColor = 2.0 * saturate(incomingLight * bottomTopRatio * shadow);\n\n\t\t\tvec3 color = mix(bottomPixel.rgb * bottomColor, topPixel.rgb * topColor, bottomTopRatio);\n\t\t\tgl_FragColor.rgb += color;\n\t\t}\n\n\t\tgl_FragColor.a = topPixel.a;\n\t\tgl_FragColor.a *= alphaFadeMultiplier;\n\n\t\t${i.ShaderChunkLogDepth.Fragment}\n\t}`);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SkyboxComponent: function () {
              return SkyboxComponent;
            },
          });
        var i = s(6);
        class SkyboxComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._numLatVerts = 20),
              (this._textureUrl = ""),
              this.__setRadius(1e24),
              this.__setUsesEntityOrientation(!0);
          }
          getTextureUrl() {
            return this._textureUrl;
          }
          setTextureUrl(t) {
            (this._textureUrl = t), this.resetResources();
          }
          __prepareForRender(t) {
            i.ThreeJsHelper.setOrientationToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
            ),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
          }
          async __loadResources() {
            const t = await i.ThreeJsHelper.loadTexture(
              this,
              this._textureUrl,
              !1,
              !1,
            );
            if ("loading" !== this.getLoadState()) return void t.dispose();
            const e = i.MaterialUtils.get();
            this.getThreeJsMaterials().push(e),
              (e.defines.colorMapEmmissive = !0),
              (e.needsUpdate = !0),
              (e.uniforms.colorTexture.value = t);
            const s = i.ThreeJsHelper.createMeshObject(
              this,
              e,
              [
                { name: "position", dimensions: 3 },
                { name: "uv", dimensions: 2 },
              ],
              !1,
            );
            this.getThreeJsObjects().push(s),
              i.ThreeJsHelper.useInDynEnvMap(s, !0);
            const n = i.MathUtils.pi / (this._numLatVerts - 1),
              o = i.MathUtils.pi / this._numLatVerts,
              r = (2 * this._numLatVerts + 1) * this._numLatVerts,
              a = new Float32Array(3 * r),
              l = new Float32Array(2 * r),
              c = new Uint16Array(
                this._numLatVerts * (this._numLatVerts - 1) * 12,
              ),
              h = i.Vector3.pool.get(),
              u = i.LatLonAlt.pool.get();
            for (let t = 0; t < this._numLatVerts; t++)
              for (let e = 0; e < 2 * this._numLatVerts + 1; e++) {
                (u.lat = t * n - i.MathUtils.halfPi),
                  (u.lon = e * o - i.MathUtils.pi),
                  (u.alt = 0),
                  (h.x = 5e23 * Math.cos(u.lat) * Math.cos(u.lon)),
                  (h.y = 5e23 * Math.cos(u.lat) * Math.sin(u.lon)),
                  (h.z = 5e23 * Math.sin(u.lat));
                const s = t * (2 * this._numLatVerts + 1) + e;
                (a[3 * s + 0] = h.x),
                  (a[3 * s + 1] = h.y),
                  (a[3 * s + 2] = h.z),
                  (l[2 * s + 0] = 0.5 - u.lon / i.MathUtils.twoPi),
                  (l[2 * s + 1] = 0.5 - u.lat / i.MathUtils.pi);
                const r = t * this._numLatVerts * 2 + e;
                t < this._numLatVerts - 1 &&
                  e < 2 * this._numLatVerts &&
                  ((c[6 * r + 0] =
                    (2 * this._numLatVerts + 1) * (t + 0) + (e + 0)),
                    (c[6 * r + 1] =
                      (2 * this._numLatVerts + 1) * (t + 1) + (e + 0)),
                    (c[6 * r + 2] =
                      (2 * this._numLatVerts + 1) * (t + 1) + (e + 1)),
                    (c[6 * r + 3] =
                      (2 * this._numLatVerts + 1) * (t + 0) + (e + 0)),
                    (c[6 * r + 4] =
                      (2 * this._numLatVerts + 1) * (t + 1) + (e + 1)),
                    (c[6 * r + 5] =
                      (2 * this._numLatVerts + 1) * (t + 0) + (e + 1)));
              }
            i.LatLonAlt.pool.release(u), i.Vector3.pool.release(h);
            const d = this.getThreeJsObjects()[0].geometry;
            i.ThreeJsHelper.setVertices(d, "position", a),
              i.ThreeJsHelper.setVertices(d, "uv", l),
              i.ThreeJsHelper.setIndices(d, c);
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpheroidComponent: function () {
              return SpheroidComponent;
            },
          });
        var i = s(6);
        class SpheroidComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._equatorialRadius = 1),
              (this._polarRadius = 1),
              (this._planetographic = !1),
              (this._changed = !0),
              (this._changedCallbacks = new i.FastSet());
          }
          getEquatorialRadius() {
            return this._equatorialRadius;
          }
          setEquatorialRadius(t) {
            (this._equatorialRadius = t), (this._changed = !0);
          }
          getPolarRadius() {
            return this._polarRadius;
          }
          setPolarRadius(t) {
            (this._polarRadius = t), (this._changed = !0);
          }
          isPlanetographic() {
            return this._planetographic;
          }
          setPlanetographic(t) {
            (this._planetographic = t), (this._changed = !0);
          }
          addChangedCallback(t) {
            this._changedCallbacks.add(t);
          }
          removeChangedCallback(t) {
            this._changedCallbacks.delete(t);
          }
          __update() {
            if (this._changed) {
              for (let t = 0, e = this._changedCallbacks.size; t < e; t++)
                this._changedCallbacks.getAt(t)();
              this._changed = !1;
            }
          }
          xyzFromLLA(t, e) {
            const s = Math.cos(e.lat),
              i = Math.sin(e.lat);
            if (this._planetographic) {
              const n =
                1 -
                (this._polarRadius * this._polarRadius) /
                (this._equatorialRadius * this._equatorialRadius),
                o = this._equatorialRadius / Math.sqrt(1 - n * i * i);
              (t.x = (o + e.alt) * s * Math.cos(e.lon)),
                (t.y = (o + e.alt) * s * Math.sin(e.lon)),
                (t.z = ((1 - n) * o + e.alt) * i);
            } else {
              const n = this._equatorialRadius,
                o = this._polarRadius,
                r = (n * o) / Math.sqrt(o * o * s * s + n * n * i * i);
              (t.x = (r + e.alt) * s * Math.cos(e.lon)),
                (t.y = (r + e.alt) * s * Math.sin(e.lon)),
                (t.z = (r + e.alt) * i);
            }
          }
          radiusFromXYZ(t, e = 5) {
            if (this._planetographic) {
              const s = t.magnitudeXY(),
                i =
                  1 -
                  (this._polarRadius * this._polarRadius) /
                  (this._equatorialRadius * this._equatorialRadius);
              let n = Math.atan(t.z / ((1 - i) * s)),
                o = 0;
              for (let r = 0; r < e; r++) {
                const e = Math.sin(n);
                (o = this._equatorialRadius / Math.sqrt(1 - i * e * e)),
                  (n = Math.atan((t.z + o * i * e) / s));
              }
              return o;
            }
            {
              const e = (t.z * t.z) / (t.x * t.x + t.y * t.y),
                s = 1 / (1 + e),
                i = e * s,
                n = this._equatorialRadius,
                o = this._polarRadius;
              return (n * o) / Math.sqrt(o * o * s + n * n * i);
            }
          }
          llaFromXYZ(t, e, s = 5) {
            if (this._planetographic) {
              t.lon = Math.atan2(e.y, e.x);
              const i = e.magnitudeXY(),
                n =
                  1 -
                  (this._polarRadius * this._polarRadius) /
                  (this._equatorialRadius * this._equatorialRadius);
              t.lat = Math.atan(e.z / ((1 - n) * i));
              let o = 0;
              for (let r = 0; r < s; r++) {
                const s = Math.sin(t.lat);
                (o = 1 / Math.sqrt(1 - n * s * s)),
                  (t.lat = Math.atan(
                    (e.z + this._equatorialRadius * o * n * s) / i,
                  ));
              }
              t.alt = i / Math.cos(t.lat) - this._equatorialRadius * o;
            } else {
              const s = e.magnitudeXY();
              (t.lon = Math.atan2(e.y, e.x)), (t.lat = Math.atan(e.z / s));
              const i = Math.cos(t.lat),
                n = Math.sin(t.lat),
                o = this._equatorialRadius,
                r = this._polarRadius,
                a = (o * r) / Math.sqrt(r * r * i * i + o * o * n * n);
              t.alt = e.magnitude() - a;
            }
          }
          llaToggleGraphicCentric(t, e) {
            const s = i.Vector3.pool.get();
            this.xyzFromLLA(s, e),
              (this._planetographic = !this._planetographic),
              this.llaFromXYZ(t, s),
              (this._planetographic = !this._planetographic),
              i.Vector3.pool.release(s);
          }
          upFromLLA(t, e) {
            const s = i.LatLonAlt.pool.get();
            this._planetographic
              ? s.copy(e)
              : this.llaToggleGraphicCentric(s, e),
              (t.x = Math.cos(s.lat) * Math.cos(s.lon)),
              (t.y = Math.cos(s.lat) * Math.sin(s.lon)),
              (t.z = Math.sin(s.lat)),
              i.LatLonAlt.pool.release(s);
          }
          eastFromLLA(t, e) {
            (t.x = -Math.sin(e.lon)), (t.y = Math.cos(e.lon)), (t.z = 0);
          }
          northFromLLA(t, e) {
            const s = i.LatLonAlt.pool.get();
            this._planetographic
              ? s.copy(e)
              : this.llaToggleGraphicCentric(s, e),
              (t.x = -Math.sin(s.lat) * Math.cos(s.lon)),
              (t.y = -Math.sin(s.lat) * Math.sin(s.lon)),
              (t.z = Math.cos(s.lat)),
              i.LatLonAlt.pool.release(s);
          }
          orientationFromLLA(t, e) {
            const s = i.LatLonAlt.pool.get();
            this._planetographic
              ? s.copy(e)
              : this.llaToggleGraphicCentric(s, e);
            const n = Math.sin(s.lat),
              o = Math.sin(s.lon),
              r = Math.cos(s.lon);
            (t.w = 0.5 * Math.sqrt((1 + n) * (1 - o))),
              (t.x = 0.5 * Math.sqrt((1 - n) * (1 - o))),
              (t.y = 0.5 * Math.sqrt((1 - n) * (1 + o)) * Math.sign(r)),
              (t.z = 0.5 * Math.sqrt((1 + n) * (1 + o)) * Math.sign(r)),
              i.LatLonAlt.pool.release(s);
          }
          aerFromXYZRelToLLA(t, e, s) {
            const n = i.Vector3.pool.get();
            this.xyzFromLLA(n, s);
            const o = i.LatLonAlt.pool.get();
            this._planetographic ? o.copy(s) : this.llaFromXYZ(o, n),
              n.sub(e, n),
              (t.range = n.magnitude()),
              n.mult(n, 1 / t.range);
            const r = i.Vector3.pool.get();
            this.upFromLLA(r, o);
            const a = n.dot(r);
            (t.elevation = i.MathUtils.halfPi - Math.acos(a)),
              n.addMult(n, r, -a),
              i.Vector3.pool.release(r);
            const l = i.Vector3.pool.get();
            this.northFromLLA(l, o);
            const c = i.Vector3.pool.get();
            this.eastFromLLA(c, o),
              (t.azimuth = Math.atan2(n.dot(c), n.dot(l))),
              i.Vector3.pool.release(l),
              i.Vector3.pool.release(c),
              i.LatLonAlt.pool.release(o),
              i.Vector3.pool.release(n);
          }
          getRayIntersection(t, e, s) {
            const n = this._equatorialRadius / this._polarRadius,
              o = i.Vector3.pool.get(),
              r = i.Vector3.pool.get();
            o.set(e.x, e.y, e.z * n), r.set(s.x, s.y, s.z * n);
            const a = i.Geometry.getLineSphereIntersectionWithSphereAtOrigin(
              o,
              r,
              this._equatorialRadius,
            );
            t.addMult(o, r, a),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(r),
              (t.z /= n);
          }
          getGroundPosition(t, e, s) {
            const n = i.LatLonAlt.pool.get();
            this.llaFromXYZ(n, s), (n.alt = 0), this.xyzFromLLA(t, n);
            const o = i.Vector3.pool.get();
            this.upFromLLA(e, n),
              i.LatLonAlt.pool.release(n),
              i.Vector3.pool.release(o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpheroidLODComponent: function () {
              return SpheroidLODComponent;
            },
          });
        var i = s(6);
        class SpheroidLODComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._textureUrls = new i.FastMap()),
              (this._textureLODs = new i.FastMap()),
              (this._textureSizes = new i.FastMap()),
              (this._mapping = "cylinder"),
              (this._longitudinalRotation = 0),
              (this._numFaces = 1),
              (this._lowerLeftBounds = new i.LatLonAlt(
                -i.MathUtils.halfPi,
                -i.MathUtils.pi,
                0,
              )),
              (this._upperRightBounds = new i.LatLonAlt(
                +i.MathUtils.halfPi,
                i.MathUtils.pi,
                0,
              )),
              (this._cubeMapFaceFrames = i.CubeMap._defaultCubeMapFaceFrames),
              (this._shadowEntities = []),
              (this._features = new Set()),
              (this._useCompression = !1),
              (this._atmosphereComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._atmosphereComponentRef.setByType(
                this.getEntity().getName(),
                "atmosphere",
              ),
              (this._spheroidComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
              ),
              this._spheroidComponentRef.setRefChangedCallback(
                this._spheroidRefChangedCallback.bind(this),
              ),
              (this._spheroidChangedCallback =
                this._spheroidChangedCallback.bind(this)),
              this.__setUsesEntityOrientation(!0);
          }
          getTextureNames() {
            const t = [];
            for (let e = 0; e < this._textureUrls.size; e++)
              t.push(this._textureUrls.getAt(e).key);
            return t;
          }
          getTextureUrl(t) {
            return this._textureUrls.get(t);
          }
          getTextureSizes(t) {
            return this._textureSizes.get(t);
          }
          setTexture(t, e, s = [4, 512, 4096]) {
            SpheroidLODComponent._textureToFeature.has(t) &&
              this.setFeature(
                SpheroidLODComponent._textureToFeature.get(t),
                "" !== e,
              ),
              this._textureUrls.set(t, e),
              this._textureSizes.set(t, [...s]);
            let n = this._textureLODs.get(t);
            if (void 0 === n) {
              n = [];
              const e = this.getThreeJsMaterials();
              for (let s = 0, o = this._numFaces; s < o; s++) {
                const o = new i.TextureLOD(this);
                if (e.length > 0) {
                  const i = e[s].uniforms[t + "Texture"];
                  void 0 !== i && o.setUniform(i);
                }
                n.push(o);
              }
              this._textureLODs.set(t, n);
            }
            for (let t = 0, i = this._numFaces; t < i; t++)
              n[t].setUrl(e.replace("$FACE", t.toString())), n[t].setSizes(s);
          }
          forceTextureSize(t, e) {
            const s = this._textureLODs.get(t);
            if (void 0 === s)
              throw new Error('No texture named "' + t + '" has been defined.');
            for (let t = 0; t < s.length; t++) s[t].setForcedSize(e);
          }
          unsetTexture(t) {
            SpheroidLODComponent._textureToFeature.has(t) &&
              this.setFeature(
                SpheroidLODComponent._textureToFeature.get(t),
                !1,
              ),
              this._textureUrls.delete(t),
              this._textureLODs.delete(t),
              this._textureSizes.delete(t);
            const e = this.getThreeJsMaterials();
            for (let s = 0, i = e.length; s < i; s++) {
              const i = e[s].uniforms[t + "Texture"];
              void 0 !== i && (i.value.dispose(), (i.value = null));
            }
          }
          getTextureCurrentSize(t, e) {
            const s = this._textureLODs.get(t);
            if (void 0 !== s && void 0 !== s[e]) return s[e].getCurrentSize();
          }
          isFeatureEnabled(t) {
            return this._features.has(t);
          }
          setFeature(t, e) {
            const s = this.getThreeJsMaterials();
            if (e && !this._features.has(t)) {
              this._features.add(t);
              for (let e = 0, i = s.length; e < i; e++) {
                const i = s[e];
                (i.defines[t] = !0), (i.needsUpdate = !0);
              }
              "normalMap" === t && this._updateMeshes();
            } else if (!e && this._features.has(t)) {
              this._features.delete(t);
              for (let e = 0, i = s.length; e < i; e++) {
                const i = s[e];
                delete i.defines[t], (i.needsUpdate = !0);
              }
              "normalMap" === t && this._updateMeshes();
            }
          }
          getMapping() {
            return this._mapping;
          }
          setMapping(t) {
            const e = this._numFaces;
            if ("cylinder" === t) this._numFaces = 1;
            else {
              if ("cube" !== t) throw new Error("Invalid mapping type.");
              this._numFaces = 6;
            }
            if (this._numFaces !== e)
              for (let t = 0; t < this._textureLODs.size; t++) {
                const e = this._textureLODs.getAt(t).key,
                  s = [];
                for (let t = 0, n = this._numFaces; t < n; t++) {
                  const n = new i.TextureLOD(this);
                  n.setUrl(
                    this._textureUrls.get(e).replace("$FACE", t.toString()),
                  ),
                    n.setSizes(this._textureSizes.get(e)),
                    s.push(n);
                }
                this._textureLODs.set(e, s);
              }
            (this._mapping = t), this.resetResources();
          }
          setBounds(t, e) {
            this._lowerLeftBounds.copy(t),
              this._upperRightBounds.copy(e),
              this.resetResources();
          }
          setCubeMapLayout(t) {
            this._cubeMapFaceFrames = [];
            for (let e = 0; e < 6; e++) {
              this._cubeMapFaceFrames.push([]);
              for (let s = 0; s < 3; s++) {
                let n = null;
                switch (t[e][s]) {
                  case "+x":
                    n = i.Vector3.XAxis;
                    break;
                  case "-x":
                    n = i.Vector3.XAxisNeg;
                    break;
                  case "+y":
                    n = i.Vector3.YAxis;
                    break;
                  case "-y":
                    n = i.Vector3.YAxisNeg;
                    break;
                  case "+z":
                    n = i.Vector3.ZAxis;
                    break;
                  case "-z":
                    n = i.Vector3.ZAxisNeg;
                    break;
                  default:
                    throw new Error("Invalid cubemap layout component.");
                }
                this._cubeMapFaceFrames[e][s] = n;
              }
            }
            this.resetResources();
          }
          getNumShadowEntities() {
            return this._shadowEntities.length;
          }
          getShadowEntity(t) {
            return this._shadowEntities[t]?.getName();
          }
          setShadowEntities(t) {
            this._shadowEntities = [];
            for (const e of t)
              this._shadowEntities.push(
                new i.EntityRef(this.getEntity().getScene(), e),
              );
            const e = t.length > 0;
            for (let t = 0, s = this.getThreeJsMaterials().length; t < s; t++)
              i.ThreeJsHelper.setDefine(
                this.getThreeJsMaterials()[t],
                "shadowEntities",
                e,
              );
          }
          getUseCompression() {
            return this._useCompression;
          }
          setUseCompression(t) {
            this._useCompression = t;
          }
          getLongitudeRotation() {
            return this._longitudinalRotation;
          }
          setLongitudeRotation(t) {
            this._longitudinalRotation = t;
          }
          getLoadedPromise() {
            const t = [super.getLoadedPromise()];
            for (let e = 0; e < this._textureLODs.size; e++) {
              const s = this._textureLODs.getAt(e).value;
              for (let e = 0, i = s.length; e < i; e++)
                t.push(s[e].getLoadedPromise());
            }
            return Promise.all(t).then();
          }
          getColorAtPosition(t, e, s) {
            const n = i.Vector3.pool.get();
            if ("cube" === this._mapping)
              i.CubeMap.xyzToUVFace(n, e, this._cubeMapFaceFrames);
            else if ("cylinder" === this._mapping) {
              const e = i.LatLonAlt.pool.get();
              if (null === this._spheroidComponentRef.get())
                return void t.set(0, 0, 0);
              n.set(e.lon / i.MathUtils.twoPi + 0.5, e.lat / Math.PI + 0.5, 0),
                i.LatLonAlt.pool.release(e);
            }
            const o = this._textureLODs.get(s);
            if (void 0 === o) throw new Error("Invalid texture name.");
            const r = o[n.z].getUniform().value,
              a = document.createElement("canvas");
            (a.width = r.image.width), (a.height = r.image.height);
            const l = a.getContext("2d");
            l.drawImage(r.image, 0, 0);
            const c = l.getImageData(0, 0, r.image.width, r.image.height),
              h = r.format === i.THREE.RGBAFormat ? 4 : 3,
              u =
                (Math.floor((1 - n.y) * c.height) * c.width +
                  Math.floor(n.x * c.width)) *
                h;
            t.set(
              c.data[u + 0],
              c.data[u + 1],
              c.data[u + 2],
              4 === h ? c.data[u + 3] : 1,
            ),
              i.Vector3.pool.release(n);
          }
          setSpheroidReference(t) {
            "string" == typeof t
              ? this._spheroidComponentRef.setByName(
                this.getEntity().getName(),
                t,
              )
              : this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
                t,
              );
          }
          __destroy() {
            const t = this._spheroidComponentRef.get();
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              super.__destroy();
          }
          __update() {
            for (let t = 0; t < this._textureLODs.size; t++) {
              const e = this._textureLODs.getAt(t).value;
              for (let t = 0, s = e.length; t < s; t++) e[t].update();
            }
            this._spheroidComponentRef.update();
          }
          __prepareForRender(t) {
            const e = this.getThreeJsObjects(),
              s = i.Quaternion.pool.get();
            s.setFromAxisAngle(i.Vector3.ZAxis, this._longitudinalRotation);
            for (let n = 0; n < e.length; n++)
              i.ThreeJsHelper.setOrientationToEntity(e[n], this.getEntity(), s),
                i.ThreeJsHelper.setPositionToEntity(e[n], this.getEntity(), t);
            i.Quaternion.pool.release(s);
            const n = this._atmosphereComponentRef.get();
            i.MaterialUtils.setUniforms(
              this.getThreeJsMaterials(),
              t,
              this.getEntity(),
              this._shadowEntities,
              n,
              !0,
            );
          }
          __loadResources() {
            const t = [];
            for (let e = 0; e < this._numFaces; e++) {
              const s = i.MaterialUtils.get();
              this.getThreeJsMaterials().push(s);
              for (const t of this._features)
                (s.defines[t] = !0), (s.needsUpdate = !0);
              const n = i.ThreeJsHelper.createMeshObject(
                this,
                s,
                [
                  { name: "position", dimensions: 3 },
                  { name: "normal", dimensions: 3 },
                  { name: "uv", dimensions: 2 },
                ],
                !1,
              );
              this.getThreeJsObjects().push(n),
                i.ThreeJsHelper.useInDynEnvMap(n, !0);
              for (let i = 0; i < this._textureLODs.size; i++) {
                const n = this._textureLODs.getAt(i).key,
                  o = s.uniforms[n + "Texture"];
                if (void 0 !== o) {
                  const s = this._textureLODs.get(n)[e];
                  s.setUniform(o), s.update(), t.push(s.getLoadedPromise());
                }
              }
            }
            return Promise.all(t).then(() => {
              this._updateMeshes();
            });
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
            for (let t = 0; t < this._textureLODs.size; t++) {
              const e = this._textureLODs.getAt(t).key;
              for (let t = 0; t < this._numFaces; t++)
                this._textureLODs.get(e)[t].setUniform(null);
            }
          }
          _updateMeshes() {
            if (0 === this.getThreeJsObjects().length) return;
            const t = this._spheroidComponentRef.get();
            if (null !== t)
              if ("cylinder" === this._mapping) {
                const e =
                  this._upperRightBounds.lat - this._lowerLeftBounds.lat,
                  s = this._upperRightBounds.lon - this._lowerLeftBounds.lon,
                  n = Math.max(Math.ceil((100 * e) / i.MathUtils.pi), 4),
                  o = Math.max(Math.ceil((200 * s) / i.MathUtils.twoPi), 4),
                  r = e / (n - 1),
                  a = s / (o - 1),
                  l = o * n,
                  c = new Float32Array(3 * l),
                  h = new Float32Array(3 * l),
                  u = new Float32Array(2 * l),
                  d = new Uint16Array((o - 1) * (n - 1) * 6),
                  p = i.Vector3.pool.get(),
                  m = i.LatLonAlt.pool.get();
                for (let e = 0; e < n; e++)
                  for (let s = 0; s < o; s++) {
                    (m.lat = this._lowerLeftBounds.lat + e * r),
                      (m.lon = this._lowerLeftBounds.lon + s * a),
                      (m.alt = 0);
                    const i = e * o + s;
                    if (
                      (t.xyzFromLLA(p, m),
                        (c[3 * i + 0] = p.x),
                        (c[3 * i + 1] = p.y),
                        (c[3 * i + 2] = p.z),
                        t.upFromLLA(p, m),
                        (h[3 * i + 0] = p.x),
                        (h[3 * i + 1] = p.y),
                        (h[3 * i + 2] = p.z),
                        (u[2 * i + 0] = s / (o - 1)),
                        (u[2 * i + 1] = 1 - e / (n - 1)),
                        e + 1 < n && s + 1 < o)
                    ) {
                      const t = e * (o - 1) + s;
                      (d[6 * t + 0] = o * (e + 0) + (s + 0)),
                        (d[6 * t + 1] = o * (e + 1) + (s + 1)),
                        (d[6 * t + 2] = o * (e + 1) + (s + 0)),
                        (d[6 * t + 3] = o * (e + 0) + (s + 0)),
                        (d[6 * t + 4] = o * (e + 0) + (s + 1)),
                        (d[6 * t + 5] = o * (e + 1) + (s + 1));
                    }
                  }
                i.LatLonAlt.pool.release(m), i.Vector3.pool.release(p);
                const _ = this.getThreeJsObjects()[0];
                i.ThreeJsHelper.setVertices(_.geometry, "position", c),
                  i.ThreeJsHelper.setVertices(_.geometry, "normal", h),
                  i.ThreeJsHelper.setVertices(_.geometry, "uv", u),
                  i.ThreeJsHelper.setIndices(_.geometry, d),
                  this._features.has("normalMap") &&
                  i.ThreeJsHelper.computeTangents(_.geometry);
              } else if ("cube" === this._mapping) {
                const e = 50,
                  s = i.Vector3.pool.get(),
                  n = i.LatLonAlt.pool.get();
                for (let o = 0; o < 6; o++) {
                  const r = new Float32Array(e * e * 3),
                    a = new Float32Array(e * e * 3),
                    l = new Float32Array(e * e * 2),
                    c = new Uint16Array((e - 1) * (e - 1) * 6);
                  let h = !1;
                  const u = i.Vector3.pool.get();
                  u.cross(
                    this._cubeMapFaceFrames[o][0],
                    this._cubeMapFaceFrames[o][1],
                  ),
                    (u.x === this._cubeMapFaceFrames[o][2].x &&
                      u.y === this._cubeMapFaceFrames[o][2].y &&
                      u.z === this._cubeMapFaceFrames[o][2].z) ||
                    (h = !0),
                    i.Vector3.pool.release(u);
                  let d = 0,
                    p = 0;
                  for (let u = 0; u < e; u++)
                    for (let m = 0; m < e; m++)
                      s.mult(
                        this._cubeMapFaceFrames[o][0],
                        (2 * m) / (e - 1) - 1,
                      ),
                        s.addMult(
                          s,
                          this._cubeMapFaceFrames[o][1],
                          (2 * u) / (e - 1) - 1,
                        ),
                        s.addMult(s, this._cubeMapFaceFrames[o][2], 1),
                        s.normalize(s),
                        i.Geometry.getLLAFromXYZOnSphere(n, s, 0),
                        (n.alt = 0),
                        t.xyzFromLLA(s, n),
                        (r[3 * d + 0] = s.x),
                        (r[3 * d + 1] = s.y),
                        (r[3 * d + 2] = s.z),
                        t.upFromLLA(s, n),
                        (a[3 * d + 0] = s.x),
                        (a[3 * d + 1] = s.y),
                        (a[3 * d + 2] = s.z),
                        (l[2 * d + 0] = m / (e - 1)),
                        (l[2 * d + 1] = 1 - u / (e - 1)),
                        m < e - 1 &&
                        u < e - 1 &&
                        ((c[6 * p + 0] = (u + 0) * e + (m + 0)),
                          (c[6 * p + 3] = (u + 1) * e + (m + 1)),
                          h
                            ? ((c[6 * p + 1] = (u + 1) * e + (m + 1)),
                              (c[6 * p + 2] = (u + 0) * e + (m + 1)),
                              (c[6 * p + 4] = (u + 0) * e + (m + 0)),
                              (c[6 * p + 5] = (u + 1) * e + (m + 0)))
                            : ((c[6 * p + 1] = (u + 0) * e + (m + 1)),
                              (c[6 * p + 2] = (u + 1) * e + (m + 1)),
                              (c[6 * p + 4] = (u + 1) * e + (m + 0)),
                              (c[6 * p + 5] = (u + 0) * e + (m + 0))),
                          (p += 1)),
                        (d += 1);
                  const m = this.getThreeJsObjects()[o];
                  i.ThreeJsHelper.setVertices(m.geometry, "position", r),
                    i.ThreeJsHelper.setVertices(m.geometry, "normal", a),
                    i.ThreeJsHelper.setVertices(m.geometry, "uv", l),
                    i.ThreeJsHelper.setIndices(m.geometry, c),
                    this._features.has("normalMap") &&
                    i.ThreeJsHelper.computeTangents(m.geometry);
                }
                i.LatLonAlt.pool.release(n), i.Vector3.pool.release(s);
              }
          }
          _spheroidRefChangedCallback(t, e) {
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              null !== e && e.addChangedCallback(this._spheroidChangedCallback),
              this._spheroidChangedCallback();
          }
          _spheroidChangedCallback() {
            const t = this._spheroidComponentRef.get();
            null !== t
              ? this.__setRadius(
                Math.max(t.getEquatorialRadius(), t.getPolarRadius()),
              )
              : this.__setRadius(0),
              this.resetResources();
          }
        }
        SpheroidLODComponent._textureToFeature = new Map([
          ["normal", "normalMap"],
          ["night", "nightMap"],
          ["decal", "decalMap"],
          ["specular", "specularMap"],
        ]);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpoutComponent: function () {
              return SpoutComponent;
            },
          });
        var i = s(6);
        class SpoutComponent extends i.CameraComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._renderWidth = 2048),
              (this._globeDistance = 1),
              (this._threeJsFaceCameras = []),
              (this._threeJsFaceRenderTargets = []),
              (this._threeJsQuad = new i.THREE.Mesh()),
              (this._threeJsSpoutScene = new i.THREE.Scene()),
              (this._threeJsCubeCamera = new i.THREE.OrthographicCamera(
                -1,
                1,
                -1,
                1,
                -1,
                1,
              )),
              (this._tagStart = new i.THREE.WebGLRenderTarget(2, 3, {
                minFilter: i.THREE.LinearFilter,
                magFilter: i.THREE.NearestFilter,
              })),
              (this._tagEnd = new i.THREE.WebGLRenderTarget(3, 2, {
                minFilter: i.THREE.LinearFilter,
                magFilter: i.THREE.NearestFilter,
              })),
              (this._tagSend = new i.THREE.WebGLRenderTarget(3, 3, {
                minFilter: i.THREE.LinearFilter,
                magFilter: i.THREE.NearestFilter,
              })),
              (this._spoutTexture = new i.THREE.WebGLRenderTarget(
                this._renderWidth,
                this._renderWidth / 2,
                {
                  minFilter: i.THREE.LinearFilter,
                  magFilter: i.THREE.NearestFilter,
                },
              )),
              this._setupFaceCameras(),
              this._setupQuad();
          }
          getRenderWidth() {
            return this._renderWidth;
          }
          setRenderWidth(t) {
            (this._renderWidth = t),
              this._spoutTexture.width !== this._renderWidth &&
              this._spoutTexture.setSize(
                this._renderWidth,
                this._renderWidth / 2,
              );
            for (let t = 0; t < 6; t++)
              this._threeJsFaceRenderTargets[t].setSize(
                this._renderWidth / 4,
                this._renderWidth / 4,
              );
          }
          getForGlobe() {
            return 1 === this.getInvertDepth();
          }
          setForGlobe(t, e) {
            this.setInvertDepth(t ? 1 : 0), (this._globeDistance = e);
          }
          __render() {
            this.getForGlobe() &&
              (this.setNearDistance(
                Math.max(
                  0.1,
                  0.5 * this.getEntity().getParent().getOcclusionRadius(),
                ),
              ),
                this.setMidDistance(this.getAutoNearDistance())),
              this._updateProjectionMatrices();
            const t = 0.7071067811865476,
              e = this.getEntity().getOrientation();
            n.set(e.x, e.y, e.z, e.w),
              this._threeJsFaceCameras[0].setRotationFromQuaternion(n),
              n.set(
                t * (e.x - e.y),
                t * (e.x + e.y),
                t * (-e.w + e.z),
                t * (e.w + e.z),
              ),
              this._threeJsFaceCameras[1].setRotationFromQuaternion(n),
              n.set(e.y, -e.x, e.w, -e.z),
              this._threeJsFaceCameras[2].setRotationFromQuaternion(n),
              n.set(
                t * (e.x + e.y),
                t * (-e.x + e.y),
                t * (e.w + e.z),
                t * (e.w - e.z),
              ),
              this._threeJsFaceCameras[3].setRotationFromQuaternion(n),
              n.set(
                t * (e.w + e.x),
                t * (e.y + e.z),
                t * (-e.y + e.z),
                t * (e.w - e.x),
              ),
              this._threeJsFaceCameras[4].setRotationFromQuaternion(n),
              n.set(
                t * (-e.w + e.x),
                t * (e.y - e.z),
                t * (e.y + e.z),
                t * (e.w + e.x),
              ),
              this._threeJsFaceCameras[5].setRotationFromQuaternion(n),
              this.getForGlobe() &&
              this._threeJsRenderer.state.setCullFace(i.THREE.CullFaceFront);
            for (let t = 0; t < 6; t++)
              this._threeJsRenderer.setRenderTarget(
                this._threeJsFaceRenderTargets[t],
              ),
                this._threeJsRenderer.render(
                  this.getEntity().getScene().getThreeJsScene(),
                  this._threeJsFaceCameras[t],
                );
            this.getForGlobe() &&
              this._threeJsRenderer.state.setCullFace(i.THREE.CullFaceBack),
              this._threeJsRenderer.setRenderTarget(this._tagStart),
              this._threeJsRenderer.clearColor(),
              this._threeJsRenderer.setRenderTarget(this._spoutTexture),
              this._threeJsRenderer.clearColor(),
              this._threeJsRenderer.setRenderTarget(this._tagEnd),
              this._threeJsRenderer.clearColor(),
              this._threeJsRenderer.setRenderTarget(this._spoutTexture),
              this._threeJsRenderer.render(
                this._threeJsSpoutScene,
                this._threeJsCubeCamera,
              ),
              this._threeJsRenderer.setRenderTarget(this._tagSend),
              this._threeJsRenderer.clearColor(),
              this._threeJsRenderer.setRenderTarget(null);
          }
          _setupFaceCameras() {
            for (let t = 0; t < 6; t++) {
              this._threeJsFaceCameras.push(
                new i.THREE.PerspectiveCamera(90, 1, 0.1, 1e3),
              );
              const e = new i.THREE.Matrix4();
              e.set(1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0),
                (this._threeJsFaceCameras[t].projectionMatrix = e),
                this._threeJsFaceCameras[t].projectionMatrixInverse
                  .copy(e)
                  .invert();
              const s = new i.THREE.WebGLRenderTarget(
                this._renderWidth / 4,
                this._renderWidth / 4,
                {
                  minFilter: i.THREE.LinearFilter,
                  magFilter: i.THREE.LinearFilter,
                },
              );
              this._threeJsFaceRenderTargets.push(s);
            }
          }
          _updateProjectionMatrices() {
            const t = this.getAutoNearDistance();
            let e = Number.EPSILON - 1,
              s = t * (2 - Number.EPSILON);
            if (1 === this.getInvertDepth()) {
              const i = this._globeDistance;
              (e = ((t + i) * (1 - Number.EPSILON)) / (t - i)),
                (s = (-2 * t * i * (1 - Number.EPSILON)) / (t - i));
            }
            for (let t = 0; t < 6; t++)
              (this._threeJsFaceCameras[t].projectionMatrix.elements[6] = e),
                (this._threeJsFaceCameras[t].projectionMatrix.elements[14] = s);
          }
          _setupQuad() {
            const t = new i.THREE.BufferGeometry(),
              e = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),
              s = new Uint16Array([0, 1, 2, 0, 2, 3]);
            t.setAttribute("position", new i.THREE.BufferAttribute(e, 2)),
              t.setIndex(new i.THREE.BufferAttribute(s, 1));
            const n = { textures: new i.THREE.Uniform([]) };
            for (let t = 0; t < 6; t++)
              n.textures.value.push(this._threeJsFaceRenderTargets[t].texture);
            const o = new i.THREE.RawShaderMaterial({
              uniforms: n,
              vertexShader:
                "\n\t\t\t\tattribute vec2 position;\n\t\t\t\tvarying vec2 xy;\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_Position = vec4(position.x, position.y, 0.0, 1.0);\n\t\t\t\t\txy = position;\n\t\t\t\t}",
              fragmentShader:
                "\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D textures[6];\n\n\t\t\t\tvarying vec2 xy;\n\t\t\t\tconst float PI = 3.1415926535897932384626433832795;\n\n\t\t\t\tvec3 xyToUvFace(vec2 xy) {\n\t\t\t\t\tvec3 xyz = vec3(\n\t\t\t\t\t\tcos(xy.y * PI / 2.0) * cos(xy.x * PI),\n\t\t\t\t\t\tcos(xy.y * PI / 2.0) * sin(xy.x * PI),\n\t\t\t\t\t\tsin(-xy.y * PI / 2.0));\n\n\t\t\t\t\tvec3 basis[3];\n\t\t\t\t\tfloat face;\n\t\t\t\t\tif (xyz.x * xyz.x >= xyz.y * xyz.y && xyz.x * xyz.x >= xyz.z * xyz.z) {\n\t\t\t\t\t\tif (xyz.x >= 0.0) {\n\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(1, 0, 0);\n\t\t\t\t\t\t\tface = 0.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbasis[0] = vec3(0, -1, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(-1, 0, 0);\n\t\t\t\t\t\t\tface = 2.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (xyz.y * xyz.y >= xyz.x * xyz.x && xyz.y * xyz.y >= xyz.z * xyz.z) {\n\t\t\t\t\t\tif (xyz.y >= 0.0) {\n\t\t\t\t\t\t\tbasis[0] = vec3(-1, 0, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(0, 1, 0);\n\t\t\t\t\t\t\tface = 1.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbasis[0] = vec3(1, 0, 0); basis[1] = vec3(0, 0, 1); basis[2] = vec3(0, -1, 0);\n\t\t\t\t\t\t\tface = 3.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (xyz.z >= 0.0) {\n\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(-1, 0, 0); basis[2] = vec3(0, 0, 1);\n\t\t\t\t\t\t\tface = 4.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbasis[0] = vec3(0, 1, 0); basis[1] = vec3(1, 0, 0); basis[2] = vec3(0, 0, -1);\n\t\t\t\t\t\t\tface = 5.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvec3 uv = vec3(\n\t\t\t\t\t\tbasis[0].x * xyz.x + basis[0].y * xyz.y + basis[0].z * xyz.z,\n\t\t\t\t\t\tbasis[1].x * xyz.x + basis[1].y * xyz.y + basis[1].z * xyz.z,\n\t\t\t\t\t\tbasis[2].x * xyz.x + basis[2].y * xyz.y + basis[2].z * xyz.z);\n\t\t\t\t\tuv.x /= uv.z;\n\t\t\t\t\tuv.y /= uv.z;\n\n\t\t\t\t\treturn vec3(0.5 * (uv.x + 1.0), 0.5 * (uv.y + 1.0), face);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec3 uvFace = xyToUvFace(xy);\n\n\t\t\t\t\tvec4 pixel;\n\t\t\t\t\tint face = int(uvFace.z);\n\n\t\t\t\t\tif (face == 0) {\n\t\t\t\t\t\tpixel = texture2D(textures[0], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\t\t\t\t\telse if (face == 1) {\n\t\t\t\t\t\tpixel = texture2D(textures[1], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\t\t\t\t\telse if (face == 2) {\n\t\t\t\t\t\tpixel = texture2D(textures[2], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\t\t\t\t\telse if (face == 3) {\n\t\t\t\t\t\tpixel = texture2D(textures[3], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\t\t\t\t\telse if (face == 4) {\n\t\t\t\t\t\tpixel = texture2D(textures[4], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\t\t\t\t\telse if (face == 5) {\n\t\t\t\t\t\tpixel = texture2D(textures[5], vec2(uvFace.x, uvFace.y));\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor = pixel;\n\t\t\t\t}",
              depthTest: !1,
              depthWrite: !1,
              side: i.THREE.DoubleSide,
            });
            (this._threeJsQuad = new i.THREE.Mesh(t, o)),
              (this._threeJsQuad.frustumCulled = !1),
              this._threeJsSpoutScene.add(this._threeJsQuad);
          }
        }
        const n = new i.THREE.Quaternion();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpriteComponent: function () {
              return SpriteComponent;
            },
          });
        var i = s(6);
        class SpriteComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._textureUrl = ""),
              (this._size = new i.Vector2(1, Number.NaN)),
              this._size.freeze(),
              (this._sizeUnits = "km"),
              (this._colorMultiplier = new i.Color(1, 1, 1, 1)),
              this._colorMultiplier.freeze(),
              (this._alignment = new i.Vector2(0.5, 0.5)),
              this._alignment.freeze(),
              (this._fadeDistance = 0),
              (this._transparent = !1),
              (this._blending = "normal"),
              (this._billboard = !1),
              (this._renderOrder = 0);
          }
          getTextureUrl() {
            return this._textureUrl;
          }
          setTextureUrl(t) {
            (this._textureUrl = t), this.resetResources();
          }
          getSize() {
            return this._size;
          }
          setSize(t) {
            this._size.thaw(),
              this._size.copy(t),
              this._size.freeze(),
              this._updateSizeUniform();
          }
          getSizeUnits() {
            return this._sizeUnits;
          }
          setSizeUnits(t) {
            (this._sizeUnits = t), this._updateSizeUniform();
          }
          getColorMultiplier() {
            return this._colorMultiplier;
          }
          setColorMultiplier(t) {
            this._colorMultiplier.thaw(),
              this._colorMultiplier.copy(t),
              this._colorMultiplier.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "colorMultiplier",
                t,
              );
          }
          getAlignment() {
            return this._alignment;
          }
          setAlignment(t) {
            this._alignment.thaw(),
              this._alignment.copy(t),
              this._alignment.freeze(),
              i.ThreeJsHelper.setUniformVector2(
                this.getThreeJsMaterials()[0],
                "origin",
                this._alignment,
              );
          }
          getFadeDistance() {
            return this._fadeDistance;
          }
          setFadeDistance(t) {
            this._fadeDistance = t;
          }
          isBillboard() {
            return this._billboard;
          }
          setBillboard(t) {
            this._billboard = t;
          }
          getTransparent() {
            return this._transparent;
          }
          setTransparent(t) {
            (this._transparent = t),
              i.ThreeJsHelper.setTransparent(
                this.getThreeJsMaterials()[0],
                this._transparent,
              );
          }
          setBlending(t) {
            (this._blending = t),
              i.ThreeJsHelper.setBlending(
                this.getThreeJsMaterials()[0],
                this._blending,
              );
          }
          getRenderOrder() {
            return this._renderOrder;
          }
          setRenderOrder(t) {
            (this._renderOrder = t),
              i.ThreeJsHelper.setRenderOrder(
                this.getThreeJsObjects()[0],
                this._renderOrder,
              );
          }
          __prepareForRender(t) {
            if ("pixels" === this._sizeUnits) {
              const e = i.Vector2.pool.get(),
                s =
                  this.getEntity().getExtentsRadius() /
                  this.getEntity().getPixelSpaceExtentsRadius(t);
              e.mult(this._size, s),
                i.ThreeJsHelper.setUniformVector2(
                  this.getThreeJsMaterials()[0],
                  "size",
                  e,
                ),
                i.Vector2.pool.release(e);
            }
            if (
              (this.getThreeJsObjects().length > 0 &&
                (this._billboard
                  ? i.ThreeJsHelper.setOrientationToBillboard(
                    this.getThreeJsObjects()[0],
                    this.getEntity(),
                    t,
                  )
                  : i.ThreeJsHelper.setOrientationToEntity(
                    this.getThreeJsObjects()[0],
                    this.getEntity(),
                  )),
                this._fadeDistance > 0)
            ) {
              const e = i.Vector3.pool.get(),
                s = i.Quaternion.pool.get(),
                n = this.getThreeJsObjects()[0].quaternion;
              s.copyFromThreeJs(n),
                e.rotateInverse(
                  this.getEntity().getOrientation(),
                  this.getEntity().getCameraSpacePosition(t),
                ),
                i.ThreeJsHelper.setUniformNumber(
                  this.getThreeJsMaterials()[0],
                  "alphaFadeMultiplier",
                  i.MathUtils.lerp(
                    0,
                    1,
                    i.MathUtils.clamp01(
                      2 * (Math.abs(e.z) / this._fadeDistance - 1) + 1,
                    ),
                  ),
                ),
                i.Quaternion.pool.release(s),
                i.Vector3.pool.release(e);
            }
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
              t,
            );
          }
          async __loadResources() {
            const t = await i.ThreeJsHelper.loadTexture(
              this,
              this._textureUrl,
              !1,
              !1,
            );
            if ("loading" !== this.getLoadState()) return void t.dispose();
            0 === SpriteComponent._useCount &&
              ((SpriteComponent._threeJsGeometry =
                i.ThreeJsHelper.createGeometry(
                  [
                    { name: "position", dimensions: 3 },
                    { name: "uv", dimensions: 2 },
                  ],
                  !1,
                )),
                i.ThreeJsHelper.setVertices(
                  SpriteComponent._threeJsGeometry,
                  "position",
                  new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0]),
                ),
                i.ThreeJsHelper.setVertices(
                  SpriteComponent._threeJsGeometry,
                  "uv",
                  new Float32Array([0, 1, 1, 1, 1, 0, 0, 0]),
                ),
                i.ThreeJsHelper.setIndices(
                  SpriteComponent._threeJsGeometry,
                  new Uint16Array([0, 1, 2, 2, 3, 0]),
                ),
                (SpriteComponent._threeJsMaterial = new i.THREE.ShaderMaterial({
                  uniforms: {
                    colorMultiplier: new i.THREE.Uniform(
                      new i.THREE.Vector4(1, 1, 1, 1),
                    ),
                    alphaFadeMultiplier: new i.THREE.Uniform(1),
                    size: new i.THREE.Uniform(new i.THREE.Vector2(1, 1)),
                    colorTexture: new i.THREE.Uniform(null),
                    origin: new i.THREE.Uniform(new i.THREE.Vector2(0, 0)),
                    ...i.ShaderChunkLogDepth.ThreeUniforms,
                  },
                  vertexShader: `\n\t\t\t\t\tuniform vec2 size;\n\t\t\t\t\tuniform vec2 origin;\n\t\t\t\t\tvarying vec2 fUV;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec4 viewPosition = modelViewMatrix * vec4((position.x - origin.x) * size.x, (position.y - origin.y) * size.y, 0.0, 1.0);\n\t\t\t\t\t\tgl_Position = projectionMatrix * viewPosition;\n\t\t\t\t\t\tfUV = uv;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Vertex}\n\t\t\t\t\t}`,
                  fragmentShader: `\n\t\t\t\t\tprecision highp float;\n\n\t\t\t\t\tuniform vec4 colorMultiplier;\n\t\t\t\t\tuniform float alphaFadeMultiplier;\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\tvarying vec2 fUV;\n\n\t\t\t\t\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\t\t\t\t\tvoid main(void) {\n\t\t\t\t\t\tgl_FragColor = texture2D(colorTexture, fUV);\n\t\t\t\t\t\tgl_FragColor *= colorMultiplier;\n\t\t\t\t\t\tgl_FragColor.a *= alphaFadeMultiplier;\n\n\t\t\t\t\t\t${i.ShaderChunkLogDepth.Fragment}\n\t\t\t\t\t}`,
                  side: i.THREE.DoubleSide,
                })),
                i.ThreeJsHelper.setupLogDepthBuffering(
                  SpriteComponent._threeJsMaterial,
                )),
              (SpriteComponent._useCount += 1);
            const e = SpriteComponent._threeJsMaterial.clone();
            this.getThreeJsMaterials().push(e),
              i.ThreeJsHelper.setTransparent(e, this._transparent),
              i.ThreeJsHelper.setBlending(e, this._blending),
              i.ThreeJsHelper.setUniformColorRGBA(
                e,
                "colorMultiplier",
                this._colorMultiplier,
              ),
              i.ThreeJsHelper.setUniformNumber(e, "alphaFadeMultiplier", 1),
              i.ThreeJsHelper.setUniformVector2(e, "origin", this._alignment),
              i.ThreeJsHelper.setUniformTexture(e, "colorTexture", t);
            const s = i.ThreeJsHelper.createMeshObjectGivenGeometry(
              this,
              e,
              SpriteComponent._threeJsGeometry,
            );
            this.getThreeJsObjects().push(s),
              i.ThreeJsHelper.setRenderOrder(s, this._renderOrder),
              this._updateSizeUniform();
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyMaterial(this.getThreeJsMaterials()[0]);
            const t = this.getThreeJsObjects()[0];
            void 0 !== t.parent && t.parent.remove(t),
              (SpriteComponent._useCount -= 1),
              0 === SpriteComponent._useCount &&
              (i.ThreeJsHelper.destroyGeometry(
                SpriteComponent._threeJsGeometry,
              ),
                i.ThreeJsHelper.destroyMaterial(
                  SpriteComponent._threeJsMaterial,
                ));
          }
          _updateSizeUniform() {
            if (this.getThreeJsMaterials().length > 0) {
              const t =
                this.getThreeJsMaterials()[0].uniforms.colorTexture.value;
              if (null !== t) {
                const e = t.image.width / t.image.height,
                  s = i.Vector2.pool.get();
                Number.isNaN(this._size.x)
                  ? s.set(this._size.y * e, this._size.y)
                  : Number.isNaN(this._size.y)
                    ? s.set(this._size.x, this._size.x / e)
                    : s.set(this._size.x, this._size.y),
                  i.ThreeJsHelper.setUniformVector2(
                    this.getThreeJsMaterials()[0],
                    "size",
                    s,
                  ),
                  i.Vector2.pool.release(s),
                  "km" === this._sizeUnits
                    ? this.__setRadius(Math.max(s.x, s.y))
                    : this.__setRadius(Number.POSITIVE_INFINITY);
              }
            } else
              "km" === this._sizeUnits
                ? Number.isNaN(this._size.x) || Number.isNaN(this._size.y)
                  ? this.__setRadius(this._size.y)
                  : this.__setRadius(Math.max(this._size.x, this._size.y))
                : this.__setRadius(Number.POSITIVE_INFINITY);
          }
        }
        (SpriteComponent._threeJsMaterial = null),
          (SpriteComponent._threeJsGeometry = null),
          (SpriteComponent._useCount = 0);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            StarfieldComponent: function () {
              return StarfieldComponent;
            },
          });
        var i = s(6);
        const n = new i.Quaternion(
          0.9791532214288992,
          0.2031230389823101,
          0,
          0,
        );
        class Star {
          constructor() {
            (this.mag = 0),
              (this.absMag = 0),
              (this.color = new i.Color()),
              (this.position = new i.Vector3()),
              (this.particle = null);
          }
        }
        class StarfieldComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s), (this._url = ""), this.__setRadius(1e24);
          }
          getUrl() {
            return this._url;
          }
          setUrl(t) {
            (this._url = t), this.resetResources();
          }
          __prepareForRender(t) {
            const e = i.Vector2.pool.get();
            if ("spout" === t.getType()) {
              const s = t;
              e.set(s.getRenderWidth(), 0.5 * s.getRenderWidth());
            } else e.copy(t.getViewport().getBounds().size);
            const s =
              Math.sqrt(Math.max(e.x, e.y) * window.devicePixelRatio) / 60;
            i.ThreeJsHelper.setUniformNumber(
              this.getThreeJsMaterials()[0],
              "resolutionFactor",
              s,
            ),
              i.Vector2.pool.release(e),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
          }
          async __loadResources() {
            const t = await this._loadStars();
            if (this.isDestroyed()) return;
            const e = new i.THREE.ShaderMaterial({
              vertexShader: StarfieldComponent.vertexShader,
              fragmentShader: StarfieldComponent.fragmentShader,
              transparent: !0,
              blending: i.THREE.AdditiveBlending,
              depthWrite: !1,
              uniforms: {
                resolutionFactor: new i.THREE.Uniform(1),
                ...i.ShaderChunkLogDepth.ThreeUniforms,
              },
            });
            i.ThreeJsHelper.setupLogDepthBuffering(e),
              this.getThreeJsMaterials().push(e);
            const s = new i.THREE.BufferGeometry();
            s.setAttribute(
              "position",
              new i.THREE.BufferAttribute(new Float32Array(0), 3),
            ),
              s.setAttribute(
                "color",
                new i.THREE.BufferAttribute(new Float32Array(0), 4),
              ),
              s.setIndex(new i.THREE.BufferAttribute(new Uint16Array(0), 1));
            const n = new i.THREE.Points(s, e);
            i.ThreeJsHelper.setupObject(this, n),
              (n.renderOrder = -2),
              this.getThreeJsObjects().push(n);
            const o = new Float32Array(3 * t.length),
              r = new Float32Array(4 * t.length),
              a = new Uint16Array(t.length);
            for (let e = 0; e < t.length; e++) {
              const s = t[e];
              (o[3 * e + 0] = s.position.x),
                (o[3 * e + 1] = s.position.y),
                (o[3 * e + 2] = s.position.z),
                (r[4 * e + 0] = s.color.r),
                (r[4 * e + 1] = s.color.g),
                (r[4 * e + 2] = s.color.b),
                (r[4 * e + 3] = s.absMag),
                (a[e] = e);
            }
            i.ThreeJsHelper.setVertices(s, "position", o),
              i.ThreeJsHelper.setVertices(s, "color", r),
              i.ThreeJsHelper.setIndices(s, a);
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _loadStars() {
            return this.getEntity()
              .getScene()
              .getEngine()
              .getDownloader()
              .download(this._url, !0)
              .then((t) => {
                if ("cancelled" === t.status) return Promise.resolve([]);
                if ("failed" === t.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load starfield component file "' +
                      t.url +
                      '": ' +
                      t.errorMessage,
                    ),
                  );
                if (!(t.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load starfield component file "' +
                      t.url +
                      '": Not a binary file.',
                    ),
                  );
                const e = new i.Reader(t.content),
                  s = e.readInt32(),
                  o = [];
                for (let t = 0; t < s; t++) {
                  const t = new Star();
                  (t.mag = e.readFloat32()),
                    (t.absMag = e.readFloat32()),
                    (t.color.r = e.readByte() / 255),
                    (t.color.g = e.readByte() / 255),
                    (t.color.b = e.readByte() / 255),
                    t.color.div(t.color, t.color.max()),
                    (t.position.y = -e.readFloat32()),
                    (t.position.z = e.readFloat32()),
                    (t.position.x = e.readFloat32()),
                    t.position.rotate(n, t.position),
                    o.push(t);
                }
                return o;
              });
          }
        }
        (StarfieldComponent.vertexShader = `\n\t#define PI 3.1415926538\n\n\tattribute vec4 color;\n\tvarying vec4 fColor;\n\n\tuniform float resolutionFactor;\n\n\t${i.ShaderChunkLogDepth.VertexHead}\n\n\t// Returns the watts per km^2.\n\tfloat absoluteMagnitudeToFlux(float absoluteMagnitude, float distance) {\n\t\tfloat luminosityInWatts = 3.0128e28 * pow(10.0, absoluteMagnitude / -2.5);\n\t\treturn luminosityInWatts / (4.0 * PI * distance * distance);\n\t}\n\n\tvoid main() {\n\t\tvec4 viewPosition = modelViewMatrix * vec4(position, 1.0);\n\t\tgl_Position = projectionMatrix * viewPosition;\n\t\tgl_Position.w = viewPosition.y;\n\t\tfColor = color;\n\n\t\t// Get the flux and brightness of the star at the camera's point.\n\t\tfloat absMag = color.a;\n\t\tfloat distance = length(viewPosition);\n\t\tfloat flux = absoluteMagnitudeToFlux(absMag, distance);\n\t\tfloat brightness = 2.0 * log(1.0 + flux * 1e4);\n\n\t\t// Adjust the color and size so that it is visually pleasing.\n\t\tfColor.a = clamp(brightness * resolutionFactor, 0.05, 1.0);\n\t\tgl_PointSize = clamp(brightness * 4.0 * resolutionFactor, 5.0, 24.0);\n\n\t\t// If it is too close, fade the star.\n\t\tfColor.a = mix(0.0, fColor.a, clamp((distance - 1.0e12) / 9.0e12, 0.0, 1.0));\n\n\t\t${i.ShaderChunkLogDepth.Vertex}\n\t}`),
          (StarfieldComponent.fragmentShader = `\n\tprecision highp float;\n\n\tvarying vec4 fColor;\n\n\t${i.ShaderChunkLogDepth.FragmentHead}\n\n\tvoid main(void) {\n\t\tfloat distanceFromEdge = clamp(1.0 - 2.0 * length(gl_PointCoord - vec2(0.5, 0.5)), 0.0, 1.0);\n\t\tfloat a = pow(distanceFromEdge, 5.0);\n\t\tgl_FragColor.rgb = fColor.rgb;\n\t\tgl_FragColor.a = fColor.a * a;\n\n\t\t${i.ShaderChunkLogDepth.Fragment}\n\t}`);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TrailComponent: function () {
              return TrailComponent;
            },
          });
        var i = s(6);
        class Point {
          constructor() {
            (this.time = 0),
              (this.position = new i.Vector3()),
              (this.velocity = new i.Vector3());
          }
        }
        class TrailComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._alphaFade = 0),
              (this._widthMin = 0),
              (this._widthMax = 2),
              (this._ignoreDistance = !1),
              (this._startTime = void 0),
              (this._endTime = 0),
              (this._relativeStartTime = !0),
              (this._relativeEndTime = !0),
              (this._startTimeMultiplier = 1),
              (this._endTimeMultiplier = 1),
              (this._relativeToEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._relativeToEntityOrientation = !1),
              (this._angleCurveThreshold = 0.05235987755),
              (this._initialTimeStep = void 0),
              (this._points = []),
              (this._pointsStart = 0),
              (this._pointsCount = 0),
              (this._currentRelativeToEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._dashLength = 1),
              (this._dashGapLength = 0),
              (this._glowWidth = 0),
              (this._dashOffsetTime = 0),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
              );
          }
          getAlphaFade() {
            return this._alphaFade;
          }
          setWidths(t, e) {
            (this._widthMin = t),
              (this._widthMax = e),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "widthMin",
                t,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "widthMax",
                e,
              );
          }
          setAlphaFade(t) {
            (this._alphaFade = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "alphaFade",
                t,
              );
          }
          setDashLength(t, e) {
            (this._dashLength = t),
              (this._dashGapLength = e),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "dashLength",
                t,
              ),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "dashGapLength",
                e,
              );
          }
          setGlowWidth(t) {
            (this._glowWidth = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "glowWidth",
                this._glowWidth,
              );
          }
          getStartTime() {
            return this._startTime;
          }
          setStartTime(t) {
            this._startTime = t;
          }
          getEndTime() {
            return this._endTime;
          }
          setEndTime(t) {
            this._endTime = t;
          }
          isRelativeStartTime() {
            return this._relativeStartTime;
          }
          setRelativeStartTime(t) {
            (this._relativeStartTime = t), this.resetPoints();
          }
          isRelativeEndTime() {
            return this._relativeEndTime;
          }
          setRelativeEndTime(t) {
            (this._relativeEndTime = t), this.resetPoints();
          }
          getStartTimeMultiplier() {
            return this._startTimeMultiplier;
          }
          setStartTimeMultiplier(t) {
            this._startTimeMultiplier = t;
          }
          getEndTimeMultiplier() {
            return this._endTimeMultiplier;
          }
          setEndTimeMultiplier(t) {
            this._endTimeMultiplier = t;
          }
          getRelativeToEntity() {
            return this._relativeToEntity.getName();
          }
          setRelativeToEntity(t) {
            this._relativeToEntity.setName(t),
              this._currentRelativeToEntity.setName(t),
              this.resetPoints();
          }
          isRelativeToEntityOrientation() {
            return this._relativeToEntityOrientation;
          }
          setRelativeToEntityOrientation(t) {
            (this._relativeToEntityOrientation = t),
              t ||
              i.ThreeJsHelper.setOrientation(
                this.getThreeJsObjects(),
                i.Quaternion.Identity,
              ),
              this.resetPoints();
          }
          getAngleCurveThreshold() {
            return this._angleCurveThreshold;
          }
          setAngleCurveThreshold(t) {
            (this._angleCurveThreshold = t), this.resetPoints();
          }
          getInitialTimeStep() {
            return this._initialTimeStep;
          }
          setInitialTimeStep(t) {
            (this._initialTimeStep = t), this.resetPoints();
          }
          setIgnoreDistance(t) {
            this._ignoreDistance = t;
          }
          resetPoints() {
            if (
              ((this._points = []),
                (this._pointsCount = 0),
                (this._pointsStart = 0),
                this.getThreeJsObjects().length > 0)
            ) {
              const t = this.getThreeJsObjects()[0].geometry,
                e = new Float32Array(0),
                s = new i.THREE.InterleavedBuffer(
                  e,
                  TrailComponent.VERTEX_SIZE,
                );
              t.setAttribute(
                "position",
                new i.THREE.InterleavedBufferAttribute(s, 3, 0, !1),
              ),
                t.setAttribute(
                  "positionPrev",
                  new i.THREE.InterleavedBufferAttribute(s, 3, 3, !1),
                ),
                t.setAttribute(
                  "positionNext",
                  new i.THREE.InterleavedBufferAttribute(s, 3, 6, !1),
                ),
                t.setAttribute(
                  "side",
                  new i.THREE.InterleavedBufferAttribute(s, 1, 9, !1),
                ),
                t.setAttribute(
                  "index",
                  new i.THREE.InterleavedBufferAttribute(s, 1, 10, !1),
                ),
                t.setAttribute(
                  "dashOffset",
                  new i.THREE.InterleavedBufferAttribute(s, 1, 11, !1),
                ),
                t.setIndex(new i.THREE.BufferAttribute(new Uint16Array(0), 1));
            }
          }
          __loadResources() {
            const t = this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .getPreloaded("trail");
            this.getThreeJsMaterials().push(t),
              (t.uniforms.dashLength.value = this._dashLength),
              (t.uniforms.dashGapLength.value = this._dashGapLength),
              (t.uniforms.indexStart.value = 0),
              (t.uniforms.indexCount.value = 0),
              (t.uniforms.indexLength.value = 0),
              t.uniforms.color.value.set(
                this._color.r,
                this._color.g,
                this._color.b,
                this._color.a,
              ),
              (t.uniforms.widthMin.value = this._widthMin),
              (t.uniforms.widthMax.value = this._widthMax),
              (t.uniforms.glowWidth.value = this._glowWidth),
              (t.uniforms.alphaFade.value = this._alphaFade);
            const e = i.ThreeJsHelper.createMeshObject(
              this,
              t,
              [
                { name: "position", dimensions: 3 },
                { name: "positionPrev", dimensions: 3 },
                { name: "positionNext", dimensions: 3 },
                { name: "side", dimensions: 1 },
                { name: "index", dimensions: 1 },
                { name: "dashOffset", dimensions: 1 },
              ],
              !0,
            );
            return this.getThreeJsObjects().push(e), Promise.resolve();
          }
          __unloadResources() {
            this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .release(this.getThreeJsMaterials()[0]),
              i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._points = []),
              (this._pointsCount = 0),
              (this._pointsStart = 0);
          }
          __prepareForRender(t) {
            if (
              ("" === this._relativeToEntity.getName() &&
                null !== this.getEntity().getParent() &&
                this._currentRelativeToEntity.get() !==
                this.getEntity().getParent() &&
                (this._currentRelativeToEntity.setName(
                  this.getEntity().getParent().getName(),
                ),
                  this.resetPoints()),
                null === this._currentRelativeToEntity)
            )
              return;
            this._updatePoints();
            const e = this.getThreeJsMaterials()[0];
            (e.uniforms.indexStart.value = this._pointsStart),
              (e.uniforms.indexCount.value = this._pointsCount),
              (e.uniforms.indexLength.value = this._points.length);
            let s = 1;
            if (!this._ignoreDistance) {
              s *=
                (0.02 - this.getEntity().getNormalSpaceExtentsRadius(t)) / 0.02;
              const e =
                this.getEntity().getCameraSpacePosition(t).magnitude() /
                this.getEntity().getPosition().magnitude();
              s *= i.MathUtils.clamp01(1e3 * e);
            }
            i.ThreeJsHelper.setUniformNumber(e, "alphaMultiplier", s);
            const n = i.Vector2.pool.get();
            t instanceof i.SpoutComponent
              ? n.set(0.1 * t.getRenderWidth(), 0.5 * t.getRenderWidth() * 0.1)
              : n.copy(t.getViewport().getBounds().size),
              i.ThreeJsHelper.setUniformVector2(e, "pixelSize", n),
              i.Vector2.pool.release(n);
            const o = this._currentRelativeToEntity.get();
            null !== o &&
              (i.ThreeJsHelper.setPosition(
                this.getThreeJsObjects(),
                o.getCameraSpacePosition(t),
              ),
                this._relativeToEntityOrientation &&
                i.ThreeJsHelper.setOrientation(
                  this.getThreeJsObjects(),
                  o.getOrientation(),
                ));
          }
          _updatePoints() {
            const t = i.Interval.pool.get();
            if ((this._getIntervalForUpdate(t), isNaN(t.min) || isNaN(t.max)))
              return void i.Interval.pool.release(t);
            const e =
              this._initialTimeStep ??
              (t.length() * this._angleCurveThreshold) / (2 * Math.PI),
              s = i.Interval.pool.get();
            for (
              s.set(Number.POSITIVE_INFINITY, 0),
              this._relativeStartTime &&
              this._pointsCount > 0 &&
              this._points[this._pointsStart].time !== t.min &&
              this._popFrontPoint(s);
              this._pointsCount > 0 &&
              this._points[this._pointsStart].time < t.min;

            )
              this._popFrontPoint(s);
            const n = i.Quaternion.pool.get();
            for (
              ;
              (0 === this._pointsCount ||
                this._points[this._pointsStart].time > t.min) &&
              !(this._pointsCount >= 16e3 && this._relativeStartTime);

            ) {
              this._pushFrontPoint(s);
              const i = this._points[this._pointsStart];
              let o = 1,
                r = Number.POSITIVE_INFINITY,
                a = e;
              this._pointsCount > 2 &&
                (a =
                  this._points[(this._pointsStart + 2) % this._points.length]
                    .time -
                  this._points[(this._pointsStart + 1) % this._points.length]
                    .time);
              let l = 0;
              for (; l < 20;) {
                let s = t.max;
                if (
                  (this._pointsCount > 1 &&
                    (s =
                      this._points[
                        (this._pointsStart + 1) % this._points.length
                      ].time - a),
                    s < t.min && (s = t.min),
                    (i.time = s),
                    this._getPositionAndVelocity(i.position, i.velocity, i.time),
                    i.position.isNaN() ||
                    (this._relativeToEntityOrientation && n.isNaN()))
                )
                  break;
                let c = 0;
                if (
                  (this._pointsCount >= 2 &&
                    (c = this._points[
                      (this._pointsStart + 1) % this._points.length
                    ].velocity.angle(i.velocity)),
                    c > this._angleCurveThreshold)
                )
                  (r = a), (a = (o + a) / 2);
                else {
                  if (
                    !(
                      this._pointsCount > 1 &&
                      a < 10 * e &&
                      (isNaN(c) || c < this._angleCurveThreshold / 3) &&
                      s !== t.min
                    )
                  )
                    break;
                  (o = a),
                    r === Number.POSITIVE_INFINITY
                      ? (a *= 2)
                      : (a = (a + r) / 2);
                }
                l++;
              }
              if (
                i.position.isNaN() ||
                (this._relativeToEntityOrientation && n.isNaN())
              ) {
                this._popFrontPoint(s);
                break;
              }
            }
            for (
              this._relativeEndTime &&
              this._pointsCount > 0 &&
              this._points[
                (this._pointsStart + this._pointsCount - 1) %
                this._points.length
              ].time !== t.max &&
              this._popBackPoint(s);
              this._pointsCount > 0 &&
              this._points[
                (this._pointsStart + this._pointsCount - 1) %
                this._points.length
              ].time > t.max;

            )
              this._popBackPoint(s);
            for (
              ;
              (0 === this._pointsCount ||
                this._points[
                  (this._pointsStart + this._pointsCount - 1) %
                  this._points.length
                ].time < t.max) &&
              !(this._pointsCount >= 16e3 && this._relativeEndTime);

            ) {
              this._pushBackPoint(s);
              const i =
                this._points[
                (this._pointsStart + this._pointsCount - 1) %
                this._points.length
                ];
              let o = 1,
                r = Number.POSITIVE_INFINITY,
                a = e;
              this._pointsCount > 2 &&
                (a =
                  this._points[
                    (this._pointsStart + this._pointsCount - 2) %
                    this._points.length
                  ].time -
                  this._points[
                    (this._pointsStart + this._pointsCount - 3) %
                    this._points.length
                  ].time);
              let l = 0;
              for (; l < 20;) {
                let s = t.min;
                if (
                  (this._pointsCount > 1 &&
                    (s =
                      this._points[
                        (this._pointsStart + this._pointsCount - 2) %
                        this._points.length
                      ].time + a),
                    s > t.max && (s = t.max),
                    (i.time = s),
                    this._getPositionAndVelocity(i.position, i.velocity, i.time),
                    i.position.isNaN() ||
                    (this._relativeToEntityOrientation && n.isNaN()))
                )
                  break;
                let c = 0;
                if (
                  (this._pointsCount >= 2 &&
                    (c = this._points[
                      (this._pointsStart + this._pointsCount - 2) %
                      this._points.length
                    ].velocity.angle(i.velocity)),
                    c > this._angleCurveThreshold)
                )
                  (r = a), (a = (o + a) / 2);
                else {
                  if (
                    !(
                      this._pointsCount > 1 &&
                      a < 10 * e &&
                      (isNaN(c) || c < this._angleCurveThreshold / 3) &&
                      s !== t.max
                    )
                  )
                    break;
                  (o = a),
                    r === Number.POSITIVE_INFINITY
                      ? (a *= 2)
                      : (a = (a + r) / 2);
                }
                l++;
              }
              if (
                i.position.isNaN() ||
                (this._relativeToEntityOrientation && n.isNaN())
              ) {
                this._popBackPoint(s);
                break;
              }
            }
            i.Interval.pool.release(t), i.Quaternion.pool.release(n);
            const o =
              this.getThreeJsObjects()[0].geometry.attributes.positionCurr
                .data,
              r = o.array;
            for (
              let t = s.min, e = Math.min(this._points.length - 1, s.max);
              t <= e;
              t++
            ) {
              const e = this._points[t].position,
                s = isNaN(
                  this._points[
                    (t + this._points.length - 1) % this._points.length
                  ].position.x,
                )
                  ? e
                  : this._points[
                    (t + this._points.length - 1) % this._points.length
                  ].position,
                i = isNaN(
                  this._points[(t + 1) % this._points.length].position.x,
                )
                  ? e
                  : this._points[(t + 1) % this._points.length].position;
              (r[2 * t * TrailComponent.VERTEX_SIZE + 0] = e.x),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 1] = e.y),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 2] = e.z),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 0] = e.x),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 1] = e.y),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 2] = e.z),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 3] = s.x),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 4] = s.y),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 5] = s.z),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 3] = s.x),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 4] = s.y),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 5] = s.z),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 6] = i.x),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 7] = i.y),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 8] = i.z),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 6] = i.x),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 7] = i.y),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 8] = i.z),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 9] = 1),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 9] = -1),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 10] = t),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 10] = t),
                (r[2 * t * TrailComponent.VERTEX_SIZE + 11] =
                  this._points[t].time - this._dashOffsetTime),
                (r[(2 * t + 1) * TrailComponent.VERTEX_SIZE + 11] =
                  this._points[t].time - this._dashOffsetTime);
            }
            (o.needsUpdate = !0),
              (o.updateRange.offset =
                s.max < s.min ? 0 : 2 * s.min * TrailComponent.VERTEX_SIZE),
              (o.updateRange.count =
                s.max < s.min
                  ? -1
                  : 2 * (s.length() + 1) * TrailComponent.VERTEX_SIZE),
              i.Interval.pool.release(s);
          }
          _getIntervalForUpdate(t) {
            const e =
              this._relativeStartTime || this._relativeEndTime
                ? this.getEntity().getScene().getEngine().getTime()
                : void 0;
            this._relativeStartTime
              ? void 0 !== this._startTime
                ? (t.min = e - this._startTimeMultiplier * this._startTime)
                : (t.min =
                  e - this._startTimeMultiplier * this._getAutoLength(e))
              : (t.min = this._startTime),
              this._relativeEndTime
                ? void 0 !== this._endTime
                  ? (t.max = e + this._endTimeMultiplier * this._endTime)
                  : (t.max =
                    e + this._endTimeMultiplier * this._getAutoLength(e))
                : (t.max = this._endTime),
              t.intersection(t, this.getEntity().getPositionCoverage());
          }
          _popFrontPoint(t) {
            this._pointsCount > 0 &&
              (this._resize(this._pointsCount - 1, t),
                t.expandTo(this._pointsStart),
                this._pointsCount > 1 &&
                t.expandTo((this._pointsStart + 1) % this._points.length),
                (this._points[this._pointsStart].position.x = NaN),
                (this._pointsStart =
                  (this._pointsStart + 1) % this._points.length),
                (this._pointsCount -= 1));
          }
          _popBackPoint(t) {
            this._pointsCount > 0 &&
              (this._resize(this._pointsCount - 1, t),
                (this._pointsCount -= 1),
                t.expandTo(
                  (this._pointsStart + this._pointsCount) % this._points.length,
                ),
                this._pointsCount > 0 &&
                t.expandTo(
                  (this._pointsStart + this._pointsCount - 1) %
                  this._points.length,
                ),
                (this._points[
                  (this._pointsStart + this._pointsCount) % this._points.length
                ].position.x = NaN));
          }
          _pushFrontPoint(t) {
            this._resize(this._pointsCount + 1, t),
              (this._pointsStart =
                (this._pointsStart + this._points.length - 1) %
                this._points.length),
              t.expandTo(this._pointsStart),
              this._pointsCount > 0 &&
              t.expandTo((this._pointsStart + 1) % this._points.length),
              (this._pointsCount += 1);
          }
          _pushBackPoint(t) {
            this._resize(this._pointsCount + 1, t),
              (this._pointsCount += 1),
              t.expandTo(
                (this._pointsStart + this._pointsCount - 1) %
                this._points.length,
              ),
              this._pointsCount > 1 &&
              t.expandTo(
                (this._pointsStart + this._pointsCount - 2) %
                this._points.length,
              );
          }
          _resize(t, e) {
            let s = !1,
              n = this._points.length;
            if (
              ((t + 1 > this._points.length ||
                (t <= this._points.length / 4 && t >= 8)) &&
                (s = !0),
                s)
            ) {
              n = Math.max(8, i.MathUtils.ceilPow2(t + 1));
              const s = [];
              for (let t = 0, e = this._pointsCount; t < e; t++)
                s.push(
                  this._points[(this._pointsStart + t) % this._points.length],
                );
              this._pointsStart = 0;
              for (let t = this._pointsCount, e = n; t < e; t++) {
                const t = new Point();
                (t.position.x = Number.NaN), s.push(t);
              }
              this._points = s;
              const o = this.getThreeJsObjects()[0].geometry,
                r = new Float32Array(
                  2 * this._points.length * TrailComponent.VERTEX_SIZE,
                ),
                a = new i.THREE.InterleavedBuffer(
                  r,
                  TrailComponent.VERTEX_SIZE,
                );
              o.setAttribute(
                "positionCurr",
                new i.THREE.InterleavedBufferAttribute(a, 3, 0, !1),
              ),
                o.setAttribute(
                  "positionPrev",
                  new i.THREE.InterleavedBufferAttribute(a, 3, 3, !1),
                ),
                o.setAttribute(
                  "positionNext",
                  new i.THREE.InterleavedBufferAttribute(a, 3, 6, !1),
                ),
                o.setAttribute(
                  "side",
                  new i.THREE.InterleavedBufferAttribute(a, 1, 9, !1),
                ),
                o.setAttribute(
                  "index",
                  new i.THREE.InterleavedBufferAttribute(a, 1, 10, !1),
                ),
                o.setAttribute(
                  "dashOffset",
                  new i.THREE.InterleavedBufferAttribute(a, 1, 11, !1),
                );
              const l = new Uint16Array(6 * this._points.length);
              for (let t = 0; t < this._points.length; t++)
                (l[6 * t + 0] = (2 * t + 0) % (2 * this._points.length)),
                  (l[6 * t + 1] = (2 * t + 2) % (2 * this._points.length)),
                  (l[6 * t + 2] = (2 * t + 3) % (2 * this._points.length)),
                  (l[6 * t + 3] = (2 * t + 3) % (2 * this._points.length)),
                  (l[6 * t + 4] = (2 * t + 1) % (2 * this._points.length)),
                  (l[6 * t + 5] = (2 * t + 0) % (2 * this._points.length));
              o.setIndex(new i.THREE.BufferAttribute(l, 1)),
                (this._dashOffsetTime = this._points[this._pointsStart].time),
                (e.min = 0),
                (e.max = n);
            }
          }
          _getAutoLength(t) {
            let e = null;
            for (let s = 0; ; s++) {
              const n = this.getEntity().getControllerByClass(
                i.DynamoController,
                s,
              );
              if (null === n) break;
              "orb" === n.getPointType() &&
                n.getCoverage().contains(t) &&
                (e = n);
            }
            const s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get();
            this.getEntity().getPositionAtTime(s, t),
              this.getEntity().getVelocityAtTime(n, t),
              s.cross(s, n);
            let o = 0;
            if (null !== e) {
              const i = e.getEccentricity(t),
                n =
                  e.getHeaderValue("gravitationalParameter1") +
                  e.getHeaderValue("gravitationalParameter2"),
                r = ((n * n) / s.magnitudeSqr()) * -0.5 * (1 - i * i);
              o =
                (2 * Math.PI * n) /
                Math.sqrt(8 * Math.abs(Math.min(1, r * r * r)));
            } else o = (2 * Math.PI * s.magnitude()) / n.magnitudeSqr();
            return i.Vector3.pool.release(s), i.Vector3.pool.release(n), o;
          }
          _getPositionAndVelocity(t, e, s) {
            const n =
              "" !== this._relativeToEntity.getName()
                ? this._relativeToEntity.get()
                : this.getEntity().getParent();
            if ("" === this._relativeToEntity.getName()) {
              this.getEntity().getPositionAtTime(t, s),
                this.getEntity().getVelocityAtTime(e, s);
              const n = this.getEntity().getParentAtTime(s),
                o = this._currentRelativeToEntity.get();
              if (null !== o && "" !== n && n !== o.getName()) {
                const r = this.getEntity().getScene().getEntity(n);
                null !== r
                  ? (r.getPositionRelativeToEntity(t, t, o, s),
                    r.getVelocityRelativeToEntity(e, e, o, s))
                  : (t.copy(i.Vector3.NaN), e.copy(i.Vector3.NaN));
              }
            } else
              null !== n
                ? (this.getEntity().getPositionRelativeToEntity(
                  t,
                  i.Vector3.Zero,
                  n,
                  s,
                ),
                  this.getEntity().getVelocityRelativeToEntity(
                    e,
                    i.Vector3.Zero,
                    n,
                    s,
                  ))
                : (t.copy(i.Vector3.NaN), e.copy(i.Vector3.NaN));
            if (this._relativeToEntityOrientation && null !== n) {
              const o = i.Quaternion.pool.get();
              n.getOrientationAtTime(o, s),
                t.rotateInverse(o, t),
                e.rotateInverse(o, e),
                i.Quaternion.pool.release(o);
            }
          }
        }
        TrailComponent.VERTEX_SIZE = 12;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseController: function () {
              return BaseController;
            },
          });
        var i = s(6);
        class BaseController extends i.EntityItem {
          constructor(t, e, s) {
            super(t, e, s),
              (this._coverage = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._coverage.freeze(),
              (this._modifiedStates = new Set()),
              (this._dependentStates = new Set()),
              this.getEntity()
                .getScene()
                .getControllerDependencyGraph()
                .addItem(this);
          }
          __destroy() {
            this.getEntity()
              .getScene()
              .getControllerDependencyGraph()
              .removeItem(this),
              super.__destroy();
          }
          addModifiedState(t) {
            this._modifiedStates.has(t) ||
              (this._modifiedStates.add(t),
                this.getEntity()
                  .getScene()
                  .getControllerDependencyGraph()
                  .needsSorting(),
                ("position" !== t && "orientation" !== t) ||
                this.getEntity().__updateCoverage());
          }
          removeModifiedState(t) {
            this._modifiedStates.delete(t) &&
              (this.getEntity()
                .getScene()
                .getControllerDependencyGraph()
                .needsSorting(),
                ("position" !== t && "orientation" !== t) ||
                this.getEntity().__updateCoverage());
          }
          hasModifiedState(t) {
            return this._modifiedStates.has(t);
          }
          addDependentState(t, e) {
            this._dependentStates.has(t + "." + e) ||
              (this._dependentStates.add(t + "." + e),
                this.getEntity()
                  .getScene()
                  .getControllerDependencyGraph()
                  .needsSorting());
          }
          removeDependentState(t, e) {
            this._dependentStates.delete(t + "." + e) &&
              this.getEntity()
                .getScene()
                .getControllerDependencyGraph()
                .needsSorting();
          }
          hasDependentState(t, e) {
            return this._dependentStates.has(t + "." + e);
          }
          get __modifiedStates() {
            return this._modifiedStates;
          }
          getCoverage() {
            return this._coverage;
          }
          setCoverage(t) {
            this._coverage.thaw(),
              this._coverage.copy(t),
              this._coverage.freeze(),
              this.getEntity().__updateCoverage();
          }
          __updatePositionAtTime(t, e) { }
          __updateVelocityAtTime(t, e) { }
          __updateOrientationAtTime(t, e) { }
          toString() {
            let t = 0;
            for (
              let e = 0, s = this.getEntity().getNumControllers();
              e < s;
              e++
            ) {
              const s = this.getEntity().getController(e);
              if (this === s) break;
              this.getType() === s.getType() && (t += 1);
            }
            return this.getEntity().getName() + "." + this.getType() + "." + t;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AlignController: function () {
              return AlignController;
            },
          });
        var i = s(6);
        class AlignController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._primaryAlignType = "none"),
              (this._primaryAxis = new i.Vector3(1, 0, 0)),
              this._primaryAxis.freeze(),
              (this._primaryTargetEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              this._primaryTargetEntity.setRefChangedCallback((t, e) => {
                this._removeDependentStates(t, this._primaryAlignType),
                  this._addDependentStates(e, this._primaryAlignType);
              }),
              (this._primaryTargetAxis = new i.Vector3(1, 0, 0)),
              this._primaryTargetAxis.freeze(),
              (this._secondaryAlignType = "none"),
              (this._secondaryAxis = new i.Vector3(0, 1, 0)),
              this._secondaryAxis.freeze(),
              (this._secondaryTargetEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              this._secondaryTargetEntity.setRefChangedCallback((t, e) => {
                this._removeDependentStates(t, this._secondaryAlignType),
                  this._addDependentStates(e, this._secondaryAlignType);
              }),
              (this._secondaryTargetAxis = new i.Vector3(0, 1, 0)),
              this._secondaryTargetAxis.freeze(),
              (this._joint = ""),
              (this._jointObject = null),
              (this._model = null),
              (this._modelRootId = 0),
              this.addModifiedState("orientation");
          }
          getPrimaryAlignType() {
            return this._primaryAlignType;
          }
          setPrimaryAlignType(t) {
            this._primaryAlignType !== t &&
              (this._removeDependentStates(
                this._primaryTargetEntity.get(),
                this._primaryAlignType,
              ),
                (this._primaryAlignType = t),
                this._addDependentStates(
                  this._primaryTargetEntity.get(),
                  this._primaryAlignType,
                ));
          }
          getPrimaryAxis() {
            return this._primaryAxis;
          }
          setPrimaryAxis(t) {
            this._primaryAxis.thaw(),
              this._primaryAxis.copy(t),
              this._primaryAxis.freeze();
          }
          getPrimaryTargetEntity() {
            return this._primaryTargetEntity.getName();
          }
          setPrimaryTargetEntity(t) {
            this._primaryTargetEntity.setName(t);
          }
          getPrimaryTargetAxis() {
            return this._primaryTargetAxis;
          }
          setPrimaryTargetAxis(t) {
            this._primaryTargetAxis.thaw(),
              this._primaryTargetAxis.copy(t),
              this._primaryTargetAxis.freeze();
          }
          getSecondaryAlignType() {
            return this._secondaryAlignType;
          }
          setSecondaryAlignType(t) {
            this._secondaryAlignType !== t &&
              (this._removeDependentStates(
                this._secondaryTargetEntity.get(),
                this._secondaryAlignType,
              ),
                (this._secondaryAlignType = t),
                this._addDependentStates(
                  this._secondaryTargetEntity.get(),
                  this._secondaryAlignType,
                ));
          }
          getSecondaryAxis() {
            return this._secondaryAxis;
          }
          setSecondaryAxis(t) {
            this._secondaryAxis.thaw(),
              this._secondaryAxis.copy(t),
              this._secondaryAxis.freeze();
          }
          getSecondaryTargetEntity() {
            return this._secondaryTargetEntity.getName();
          }
          setSecondaryTargetEntity(t) {
            this._secondaryTargetEntity.setName(t);
          }
          getSecondaryTargetAxis() {
            return this._secondaryTargetAxis;
          }
          setSecondaryTargetAxis(t) {
            this._secondaryTargetAxis.thaw(),
              this._secondaryTargetAxis.copy(t),
              this._secondaryTargetAxis.freeze();
          }
          setJoint(t, e) {
            if (((this._joint = t), e)) this._model = e;
            else {
              const t = this.getEntity().get("model");
              null !== t && (this._model = t);
            }
            "" !== this._joint
              ? (this.addDependentState(
                this.getEntity().getName(),
                "orientation",
              ),
                this.removeModifiedState("orientation"))
              : (this.removeDependentState(
                this.getEntity().getName(),
                "orientation",
              ),
                this.addModifiedState("orientation"));
          }
          __updateOrientationAtTime(t, e) {
            "" === this._joint && this._getOrientation(t, e);
          }
          __update() {
            const t = i.Quaternion.pool.get();
            this._jointObject,
              t.copy(this.getEntity().getOrientation()),
              this._getOrientation(t),
              null !== this._jointObject
                ? this._jointObject.quaternion.set(t.x, t.y, t.z, t.w)
                : this.getEntity().setOrientation(t),
              i.Quaternion.pool.release(t);
          }
          _getOrientation(t, e) {
            if ("" !== this._joint && null !== this._model) {
              const t = this._model.getThreeJsObjects()[0];
              if (
                void 0 !== t &&
                (null === this._jointObject ||
                  this._jointObject.name !== this._joint ||
                  t.id !== this._modelRootId)
              ) {
                const e = this._model.getThreeJsObjectByName(this._joint);
                null !== e &&
                  ((this._jointObject = e), (this._modelRootId = t.id));
              }
              if (null === this._jointObject) return;
            }
            const s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get(),
              o = i.Quaternion.pool.get(),
              r = i.Quaternion.pool.get();
            if (null !== this._jointObject) {
              let e = this._jointObject;
              for (
                AlignController._tempThreeJsQuaternion.set(0, 0, 0, 1);
                null !== e.parent &&
                e.parent !== this._model.getThreeJsObjects()[0];

              )
                (e = e.parent),
                  AlignController._tempThreeJsQuaternion.multiplyQuaternions(
                    e.quaternion,
                    AlignController._tempThreeJsQuaternion,
                  );
              r.copyFromThreeJs(AlignController._tempThreeJsQuaternion),
                r.mult(this._model.getRotation(), r),
                r.mult(t, r);
            } else r.copy(t);
            if (
              (r.isNaN() && r.copy(i.Quaternion.Identity),
                n.rotate(r, this._primaryAxis),
                this._getAxis(
                  s,
                  this._primaryAlignType,
                  this._primaryTargetEntity,
                  this._primaryTargetAxis,
                  n,
                  e,
                ),
                s.isNaN() && s.set(1, 0, 0),
                o.setFromVectorFromTo(n, s),
                t.mult(o, r),
                t.isNaN() && t.copy(i.Quaternion.Identity),
                i.Vector3.pool.release(n),
                i.Quaternion.pool.release(o),
                "none" !== this._secondaryAlignType &&
                null !== this._secondaryTargetEntity &&
                (this._getAxis(
                  s,
                  this._secondaryAlignType,
                  this._secondaryTargetEntity,
                  this._secondaryTargetAxis,
                  n,
                  e,
                ),
                  !s.isNaN()))
            ) {
              const e = i.Quaternion.pool.get(),
                n = i.Vector3.pool.get(),
                o = i.Vector3.pool.get();
              n.rotate(t, this._primaryAxis), o.rotate(t, this._secondaryAxis);
              const r = o.angleAroundAxis(s, n);
              e.setFromAxisAngle(n, r),
                t.mult(e, t),
                i.Quaternion.pool.release(e),
                i.Vector3.pool.release(n),
                i.Vector3.pool.release(o);
            }
            t.normalize(t),
              null !== this._jointObject && t.multInverseL(r, t),
              i.Quaternion.pool.release(r),
              i.Vector3.pool.release(s);
          }
          _getAxis(t, e, s, n, o, r) {
            const a = s.get();
            if ("align" === e && null !== a) {
              const e = i.Quaternion.pool.get();
              a.getOrientationAtTime(e, r),
                t.rotate(e, n),
                i.Quaternion.pool.release(e);
            } else
              "velocity" === e && null !== a
                ? (a.getVelocityAtTime(t, r), t.normalize(t))
                : "point" === e && null !== a
                  ? (a.getPositionRelativeToEntity(
                    t,
                    i.Vector3.Zero,
                    this.getEntity(),
                    r,
                  ),
                    t.normalize(t))
                  : "position" === e && null !== a
                    ? t.normalize(a.getPosition())
                    : t.copy(o);
          }
          _removeDependentStates(t, e) {
            null !== t &&
              ("align" === e
                ? this.removeDependentState(t.getName(), "orientation")
                : "velocity" === e
                  ? this.removeDependentState(t.getName(), "velocity")
                  : "point" === e
                    ? (this.removeDependentState(
                      this.getEntity().getName(),
                      "position",
                    ),
                      this.removeDependentState(t.getName(), "position"))
                    : "position" === e &&
                    this.removeDependentState(t.getName(), "position"));
          }
          _addDependentStates(t, e) {
            null !== t &&
              ("align" === e
                ? this.addDependentState(t.getName(), "orientation")
                : "velocity" === e
                  ? this.addDependentState(t.getName(), "velocity")
                  : "point" === e
                    ? (this.addDependentState(
                      this.getEntity().getName(),
                      "position",
                    ),
                      this.addDependentState(t.getName(), "position"))
                    : "position" === e &&
                    this.addDependentState(t.getName(), "position"));
          }
        }
        AlignController._tempThreeJsQuaternion = new i.THREE.Quaternion();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AnimdataController: function () {
              return AnimdataController;
            },
          });
        var i = s(6);
        const n = new i.Quaternion(
          0.9791532214288992,
          0.2031230389823101,
          0,
          0,
        );
        class State {
          read(t) { }
          interpolate(t, e, s, i) { }
        }
        class PosState extends State {
          constructor() {
            super(),
              (this.position = new i.Vector3()),
              (this.velocity = new i.Vector3());
          }
          read(t) {
            (this.position.y = -t.readFloat64()),
              (this.position.z = t.readFloat64()),
              (this.position.x = t.readFloat64()),
              (this.velocity.y = -t.readFloat64()),
              (this.velocity.z = t.readFloat64()),
              (this.velocity.x = t.readFloat64()),
              this.position.rotate(n, this.position),
              this.velocity.rotate(n, this.velocity);
          }
          interpolate(t, e, s, i) {
            const n = 1 - i,
              o = n * n,
              r = i * i,
              a = (1 + 2 * i) * o,
              l = i * o,
              c = r * (3 - 2 * i),
              h = r * -n;
            this.position.mult(t.position, a),
              this.position.addMult(this.position, t.velocity, s * l),
              this.position.addMult(this.position, e.position, c),
              this.position.addMult(this.position, e.velocity, s * h);
            const u = 6 * (r - i),
              d = u,
              p = 3 * r - 4 * i + 1,
              m = -u,
              _ = 3 * r - 2 * i;
            this.velocity.mult(t.position, d / s),
              this.velocity.addMult(this.velocity, t.velocity, p),
              this.velocity.addMult(this.velocity, e.position, m / s),
              this.velocity.addMult(this.velocity, e.velocity, _);
          }
        }
        class OriState extends State {
          constructor() {
            super(), (this.orientation = new i.Quaternion());
          }
          read(t) {
            (this.orientation.y = t.readFloat32()),
              (this.orientation.z = -t.readFloat32()),
              (this.orientation.x = -t.readFloat32()),
              (this.orientation.w = t.readFloat32()),
              this.orientation.mult(n, this.orientation);
          }
          interpolate(t, e, s, i) {
            this.orientation.slerp(t.orientation, e.orientation, i);
          }
        }
        class DataPoint {
          constructor(t) {
            (this.interval = new i.Interval()),
              (this.state = t.__getNewState());
          }
          read(t) {
            (this.interval.min = t.readFloat64()),
              (this.interval.max = t.readFloat64()),
              this.state.read(t);
          }
        }
        class AnimdataFile {
          constructor(t, e, s) {
            (this.interval = new i.Interval()), (this.dataPoints = []);
            const n =
              t.getUrl() +
              "/" +
              t.getStateType() +
              "_data/" +
              ("00" + e).slice(-3) +
              "." +
              ("000" + (s + 1)).slice(-4) +
              ".animdata";
            this.promise = t
              .getEntity()
              .getScene()
              .getEngine()
              .getDownloader()
              .download(n, !0)
              .then(async (e) => {
                if ("cancelled" === e.status) return Promise.resolve();
                if ("failed" === e.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      e.url +
                      '": ' +
                      e.errorMessage,
                    ),
                  );
                if (!(e.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      e.url +
                      '": Not a binary file.',
                    ),
                  );
                const s = new i.Reader(e.content);
                (this.interval.min = s.readFloat64()),
                  (this.interval.max = s.readFloat64());
                const n = s.readInt32();
                for (let e = 0; e < n; e++) {
                  const e = new DataPoint(t);
                  e.read(s), this.dataPoints.push(e);
                }
              });
          }
        }
        class FileOverlap {
          constructor() {
            (this.fileIndex = 0), (this.interval = new i.Interval());
          }
        }
        class BucketOverlap {
          constructor() {
            (this.fileIndex = 0), (this.dataPointIndices = []);
          }
        }
        class Bucket {
          constructor() {
            this.bucketOverlaps = [];
          }
        }
        class AniminfoFile {
          constructor(t, e, s) {
            (this.fileOverlaps = new Map()), (this.buckets = []);
            const n =
              t.getUrl() +
              "/" +
              t.getStateType() +
              "_info/" +
              ("00" + e).slice(-3) +
              "." +
              ("000" + s).slice(-4) +
              ".animinfo";
            this.promise = t
              .getEntity()
              .getScene()
              .getEngine()
              .getDownloader()
              .download(n, !0)
              .then(async (t) => {
                if ("cancelled" === t.status) return Promise.resolve();
                if ("failed" === t.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      t.url +
                      '": ' +
                      t.errorMessage,
                    ),
                  );
                if (!(t.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      t.url +
                      '": Not a binary file.',
                    ),
                  );
                const e = new i.Reader(t.content),
                  s = e.readInt16();
                for (let t = 0; t < s; t++) {
                  const t = new FileOverlap();
                  (t.fileIndex = e.readInt16()),
                    (t.interval.min = e.readFloat64()),
                    (t.interval.max = e.readFloat64()),
                    this.fileOverlaps.set(t.fileIndex, t);
                }
                const n = e.readInt16();
                for (let t = 0; t < n; t++) {
                  const t = new Bucket(),
                    s = e.readInt16();
                  for (let i = 0; i < s; i++) {
                    const s = new BucketOverlap();
                    s.fileIndex = e.readInt16();
                    const i = e.readInt16();
                    for (let t = 0; t < i; t++)
                      s.dataPointIndices.push(e.readInt16());
                    t.bucketOverlaps.push(s);
                  }
                  this.buckets.push(t);
                }
              });
          }
        }
        class Coverage {
          constructor() {
            (this.interval = new i.Interval()),
              (this.numDataFiles = 0),
              (this.numBuckets = 0),
              (this.bucketStepSize = 0),
              (this.numBucketsPerAniminfoFile = 0),
              (this.animinfos = new Map()),
              (this.animdatas = new Map());
          }
        }
        class AnimdefFile {
          constructor(t) {
            this.coverages = [];
            const e = t.getUrl() + "/" + t.getStateType() + ".animdef";
            this.promise = t
              .getEntity()
              .getScene()
              .getEngine()
              .getDownloader()
              .download(e, !0)
              .then(async (e) => {
                if ("cancelled" === e.status) return Promise.resolve();
                if ("failed" === e.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      e.url +
                      '": ' +
                      e.errorMessage,
                    ),
                  );
                if (!(e.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load animdata controller file "' +
                      e.url +
                      '": Not a binary file.',
                    ),
                  );
                const s = new i.Reader(e.content),
                  n = s.readInt16();
                for (let t = 0; t < n; t++) {
                  const t = new Coverage();
                  (t.interval.min = s.readFloat64()),
                    (t.interval.max = s.readFloat64()),
                    (t.numDataFiles = s.readInt16()),
                    (t.numBuckets = s.readInt32()),
                    (t.bucketStepSize = s.readFloat64()),
                    (t.numBucketsPerAniminfoFile = s.readInt16()),
                    this.coverages.push(t);
                }
                t.__updateCoverage();
              });
          }
        }
        class AnimdataController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._baseUrl = ""),
              (this._stateType = ""),
              (this._animdef = null),
              (this._currentDataPoint = null),
              (this._tempDataPoint = null),
              (this._engine = this.getEntity().getScene().getEngine()),
              (this._forcedCoverage = new i.Interval()),
              this._forcedCoverage.copy(this.getCoverage());
          }
          getUrl() {
            return this._baseUrl;
          }
          getStateType() {
            return this._stateType;
          }
          setBaseUrlAndStateType(t, e) {
            (this._baseUrl = t),
              (this._stateType = e),
              (this._currentDataPoint = new DataPoint(this)),
              (this._tempDataPoint = new DataPoint(this)),
              (this._animdef = new AnimdefFile(this)),
              "pos" === this._stateType
                ? (this.addModifiedState("position"),
                  this.addModifiedState("velocity"))
                : "ori" === this._stateType &&
                this.addModifiedState("orientation");
          }
          setCoverage(t) {
            this._forcedCoverage.copy(t), this.__updateCoverage();
          }
          __updateCoverage() {
            const t = i.Interval.pool.get();
            if (null !== this._animdef && this._animdef.coverages.length > 0) {
              t.copy(this._animdef.coverages[0].interval);
              for (let e = 1; e < this._animdef.coverages.length; e++)
                t.union(t, this._animdef.coverages[e].interval);
              t.intersection(t, this._forcedCoverage);
            } else t.copy(this._forcedCoverage), (t.max = t.min);
            super.setCoverage(t), i.Interval.pool.release(t);
          }
          __updatePositionAtTime(t, e) {
            if ("pos" === this._stateType) {
              const s = this._tempDataPoint.state;
              this._tempDataPoint.interval.min !== e
                ? this._getDataPointAtTime(this._tempDataPoint, e) &&
                t.copy(s.position)
                : t.copy(s.position);
            }
          }
          __updateVelocityAtTime(t, e) {
            if ("pos" === this._stateType) {
              const s = this._tempDataPoint.state;
              this._tempDataPoint.interval.min !== e
                ? this._getDataPointAtTime(this._tempDataPoint, e) &&
                t.copy(s.velocity)
                : t.copy(s.velocity);
            }
          }
          __updateOrientationAtTime(t, e) {
            if ("ori" === this._stateType) {
              const s = this._tempDataPoint.state;
              this._getDataPointAtTime(this._tempDataPoint, e) &&
                t.copy(s.orientation);
            }
          }
          getLoadedPromise() {
            return this.downloadDataForInterval(
              new i.Interval(this._engine.getTime(), this._engine.getTime()),
            );
          }
          downloadDataForInterval(t) {
            return null === this._animdef
              ? null
              : this._animdef.promise.then(async () => {
                const e = [];
                for (let s = 0; s < this._animdef.coverages.length; s++) {
                  const i = this._animdef.coverages[s];
                  if (i.interval.intersects(t)) {
                    const n = Math.floor(
                      (Math.max(t.min, i.interval.min) - i.interval.min) /
                      i.bucketStepSize /
                      i.numBucketsPerAniminfoFile,
                    ),
                      o = Math.floor(
                        (Math.min(t.max, i.interval.max) -
                          1e-4 -
                          i.interval.min) /
                        i.bucketStepSize /
                        i.numBucketsPerAniminfoFile,
                      );
                    for (let r = n; r <= o; r++) {
                      i.animinfos.has(r) ||
                        i.animinfos.set(r, new AniminfoFile(this, s, r));
                      const n = i.animinfos.get(r);
                      e.push(
                        n.promise.then(() => {
                          const e = [];
                          for (const o of n.fileOverlaps.values())
                            if (o.interval.intersects(t)) {
                              const t = o.fileIndex;
                              i.animdatas.has(t) ||
                                i.animdatas.set(
                                  t,
                                  new AnimdataFile(this, s, t),
                                );
                              const n = i.animdatas.get(t);
                              e.push(n.promise);
                            }
                          return Promise.all(e).then();
                        }),
                      );
                    }
                    return Promise.all(e).then();
                  }
                }
              });
          }
          __getNewState() {
            return "pos" === this._stateType
              ? new PosState()
              : "ori" === this._stateType
                ? new OriState()
                : null;
          }
          __update() {
            if (
              null !== this._currentDataPoint &&
              this._getDataPointAtTime(
                this._currentDataPoint,
                this._engine.getTime(),
              )
            ) {
              if ("pos" === this._stateType) {
                const t = this._currentDataPoint.state;
                this.getEntity().setPosition(t.position),
                  this.getEntity().setVelocity(t.velocity);
              }
              if ("ori" === this._stateType) {
                const t = this._currentDataPoint.state;
                this.getEntity().setOrientation(t.orientation);
              }
            }
          }
          _getDataPointAtTime(t, e) {
            for (let s = 0; s < this._animdef.coverages.length; s++) {
              const i = this._animdef.coverages[s];
              if (i.interval.contains(e)) {
                const n = Math.floor(
                  (e - i.interval.min) /
                  i.bucketStepSize /
                  i.numBucketsPerAniminfoFile,
                );
                if (i.animinfos.has(n)) {
                  const o = i.animinfos.get(n),
                    r =
                      Math.floor((e - i.interval.min) / i.bucketStepSize) -
                      n * i.numBucketsPerAniminfoFile,
                    a = o.buckets[r];
                  if (void 0 === a) return !1;
                  for (let n = 0; n < a.bucketOverlaps.length; n++) {
                    const r = a.bucketOverlaps[n],
                      l = r.fileIndex;
                    if (o.fileOverlaps.get(l).interval.contains(e)) {
                      if (i.animdatas.has(l)) {
                        const s = i.animdatas.get(l);
                        for (let i = 0; i < r.dataPointIndices.length; i++) {
                          const n = r.dataPointIndices[i],
                            o = s.dataPoints[n];
                          if (void 0 === o) return !1;
                          if (o.interval.contains(e)) {
                            const i =
                              (e - o.interval.min) / o.interval.length();
                            return (
                              (t.interval.min = e),
                              (t.interval.max = e),
                              t.state.interpolate(
                                o.state,
                                s.dataPoints[n + 1].state,
                                o.interval.length(),
                                i,
                              ),
                              !0
                            );
                          }
                        }
                        return !1;
                      }
                      return (
                        i.animdatas.set(l, new AnimdataFile(this, s, l)), !1
                      );
                    }
                  }
                  return !1;
                }
                return i.animinfos.set(n, new AniminfoFile(this, s, n)), !1;
              }
            }
            return !1;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CoverageController: function () {
              return CoverageController;
            },
          });
        var i = s(6);
        class CoverageController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this.coverage = new i.Interval()),
              (this.enterFunction = void 0),
              (this.exitFunction = void 0),
              (this.updateFunction = void 0),
              (this.active = !1),
              (this.lastUpdateTime = Number.NEGATIVE_INFINITY),
              (this.updateInterval = 0);
          }
          setCoverage(t) {
            this.coverage.copy(t);
          }
          setEnterFunction(t) {
            this.enterFunction = t;
          }
          setExitFunction(t) {
            this.exitFunction = t;
          }
          setUpdateFunction(t) {
            this.updateFunction = t;
          }
          setUpdateInterval(t) {
            this.updateInterval = 1e3 * t;
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getTime();
            if (0 === this.getTypeIndex())
              for (let e = 0; ; e++) {
                const s = this.getEntity().getControllerByClass(
                  CoverageController,
                  e,
                );
                if (null === s) break;
                const i = s.coverage.contains(t);
                s.active &&
                  !i &&
                  s.exitFunction &&
                  s.exitFunction(this.getEntity());
              }
            const e = this.coverage.contains(t);
            if (
              (!this.active &&
                e &&
                this.enterFunction &&
                this.enterFunction(this.getEntity()),
                e && this.updateFunction)
            ) {
              const t = Date.now();
              t - this.lastUpdateTime >= this.updateInterval &&
                ((this.lastUpdateTime = t),
                  this.updateFunction(this.getEntity()));
            }
            this.active = e;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DynamoController: function () {
              return DynamoController;
            },
          });
        var i = s(6);
        class Point {
          load(t) {
            this.time = t.readFloat64();
          }
          calculate(t, e, s, i) { }
          apply(t) { }
          setNaN(t) { }
          static readHeader(t) {
            return {};
          }
        }
        class PosPoint extends Point {
          constructor() {
            super(),
              (this.position = new i.Vector3()),
              (this.velocity = new i.Vector3());
          }
          load(t) {
            super.load(t),
              (this.position = new i.Vector3(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              )),
              (this.velocity = new i.Vector3(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              ));
          }
          calculate(t, e, s, i) {
            this.time = e;
            const n = t[1].time - t[0].time,
              o = (e - t[0].time) / n,
              r = 1 - o,
              a = r * r,
              l = o * o,
              c = (1 + 2 * o) * a,
              h = o * a,
              u = l * (3 - 2 * o),
              d = l * -r;
            this.position.mult(t[0].position, c),
              this.position.addMult(this.position, t[0].velocity, n * h),
              this.position.addMult(this.position, t[1].position, u),
              this.position.addMult(this.position, t[1].velocity, n * d);
            const p = 6 * (l - o),
              m = p,
              _ = 3 * l - 4 * o + 1,
              g = -p,
              y = 3 * l - 2 * o;
            this.velocity.mult(t[0].position, m / n),
              this.velocity.addMult(this.velocity, t[0].velocity, _),
              this.velocity.addMult(this.velocity, t[1].position, g / n),
              this.velocity.addMult(this.velocity, t[1].velocity, y);
          }
          apply(t) {
            t.setPosition(this.position), t.setVelocity(this.velocity);
          }
          setNaN(t) {
            t.setPosition(i.Vector3.NaN), t.setVelocity(i.Vector3.NaN);
          }
          static readHeader(t) {
            return {};
          }
        }
        class LinPoint extends Point {
          constructor() {
            super(),
              (this.position = new i.Vector3()),
              (this.velocity = new i.Vector3());
          }
          load(t) {
            super.load(t),
              this.position.set(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              ),
              this.velocity.copy(i.Vector3.Zero);
          }
          calculate(t, e, s, n) {
            if (((this.time = e), t[1].time > t[0].time)) {
              const s = i.MathUtils.clamp01(
                (e - t[0].time) / (t[1].time - t[0].time),
              );
              this.position.lerp(t[0].position, t[1].position, s),
                this.velocity.sub(t[1].position, t[0].position),
                this.velocity.div(this.velocity, t[1].time - t[0].time);
            } else
              this.position.copy(t[1].position),
                this.velocity.copy(i.Vector3.Zero);
          }
          apply(t) {
            t.setPosition(this.position), t.setVelocity(this.velocity);
          }
          setNaN(t) {
            t.setPosition(i.Vector3.NaN), t.setVelocity(i.Vector3.NaN);
          }
          static readHeader(t) {
            return {};
          }
        }
        class OriPoint extends Point {
          constructor() {
            super(),
              (this.orientation = new i.Quaternion()),
              (this.angularVelocity = new i.Vector3());
          }
          load(t) {
            super.load(t),
              (this.orientation = new i.Quaternion(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              )),
              (this.angularVelocity = new i.Vector3(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              ));
          }
          calculate(t, e, s, n) {
            this.time = e;
            const o = i.Quaternion.pool.get(),
              r = i.Quaternion.pool.get(),
              a = (e - t[0].time) / (t[1].time - t[0].time);
            t[0]._project(o, e, n),
              t[1]._project(r, e, n),
              this.orientation.slerp(o, r, a),
              i.Quaternion.pool.release(o),
              i.Quaternion.pool.release(r),
              this.angularVelocity.slerp(
                t[0].angularVelocity,
                t[1].angularVelocity,
                a,
              ),
              this.angularVelocity.neg(this.angularVelocity),
              this.angularVelocity.rotate(
                this.orientation,
                this.angularVelocity,
              );
          }
          apply(t) {
            t.setOrientation(this.orientation),
              t.setAngularVelocity(this.angularVelocity);
          }
          _project(t, e, s) {
            const n = i.Vector3.pool.get(),
              o = i.Quaternion.pool.get();
            n.normalize(this.angularVelocity),
              o.setFromAxisAngle(
                n,
                this.angularVelocity.magnitude() * (e - this.time),
              ),
              i.Vector3.pool.release(n),
              s
                ? (o.multInverseR(this.orientation, o), t.mult(t, o))
                : t.multInverseR(this.orientation, o),
              i.Quaternion.pool.release(o);
          }
          setNaN(t) {
            t.setOrientation(i.Quaternion.NaN),
              t.setAngularVelocity(i.Vector3.NaN);
          }
          static readHeader(t) {
            return {};
          }
        }
        class QuatPoint extends Point {
          constructor() {
            super(),
              (this.orientation = new i.Quaternion()),
              (this.angularVelocity = new i.Vector3());
          }
          load(t) {
            super.load(t),
              (this.orientation = new i.Quaternion(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              ));
          }
          calculate(t, e, s, n) {
            this.time = e;
            const o = i.MathUtils.clamp01(
              (e - t[0].time) / (t[1].time - t[0].time),
            );
            this.orientation.slerp(t[0].orientation, t[1].orientation, o);
          }
          apply(t) {
            t.setOrientation(this.orientation),
              t.setAngularVelocity(i.Vector3.Zero);
          }
          setNaN(t) {
            t.setOrientation(i.Quaternion.NaN),
              t.setAngularVelocity(i.Vector3.NaN);
          }
          static readHeader(t) {
            return {};
          }
        }
        class OrbPoint extends Point {
          constructor() {
            super(),
              (this.oe = new i.OrbitalElements()),
              this.oe.orbitOrientation.freeze(),
              (this.position = new i.Vector3()),
              (this.velocity = new i.Vector3());
          }
          load(t) {
            super.load(t),
              (this.oe.epoch = this.time),
              (this.oe.semiMajorAxis = t.readFloat64()),
              (this.oe.eccentricity = t.readFloat64()),
              (this.oe.meanAngularMotion = t.readFloat64()),
              (this.oe.meanAnomalyAtEpoch = t.readFloat64()),
              this.oe.orbitOrientation.thaw(),
              this.oe.orbitOrientation.set(
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
                t.readFloat64(),
              ),
              this.oe.orbitOrientation.freeze();
          }
          calculate(t, e, s, n) {
            (this.time = e), (this.oe.epoch = e);
            const o = i.Vector3.pool.get(),
              r = i.Vector3.pool.get(),
              a = i.Vector3.pool.get(),
              l = i.Vector3.pool.get(),
              c = i.MathUtils.clamp01(
                (e - t[0].time) / (t[1].time - t[0].time),
              );
            t[0]._project(o, a, e, s, n),
              t[1]._project(r, l, e, s, n),
              this.position.lerp(o, r, c),
              this.velocity.lerp(a, l, c),
              i.Vector3.pool.release(o),
              i.Vector3.pool.release(r),
              i.Vector3.pool.release(a),
              i.Vector3.pool.release(l);
          }
          apply(t) {
            t.setPosition(this.position), t.setVelocity(this.velocity);
          }
          _project(t, e, s, n, o) {
            const r = i.Vector3.pool.get(),
              a = i.Vector3.pool.get();
            this.oe.project(r, a, s);
            let l = 1;
            1 === n.body
              ? (l =
                n.gravitationalParameter2 /
                (n.gravitationalParameter1 + n.gravitationalParameter2))
              : 2 === n.body &&
              (l =
                -n.gravitationalParameter1 /
                (n.gravitationalParameter1 + n.gravitationalParameter2)),
              r.mult(r, l),
              a.mult(a, l),
              o ? t.add(r, t) : t.copy(r),
              e.copy(a),
              i.Vector3.pool.release(r),
              i.Vector3.pool.release(a);
          }
          setNaN(t) {
            t.setPosition(i.Vector3.NaN), t.setVelocity(i.Vector3.NaN);
          }
          static readHeader(t) {
            return {
              gravitationalParameter1: t.readFloat64(),
              gravitationalParameter2: t.readFloat64(),
            };
          }
        }
        class PointSet {
          constructor(t, e, s, n) {
            (this._PointClass = t),
              (this._version = e),
              (this._numberOfDigits = s),
              (this._name = n),
              (this._pointSets = []),
              (this._points = []),
              (this._hintIndex = 0),
              (this._interval = new i.Interval(
                Number.POSITIVE_INFINITY,
                Number.NEGATIVE_INFINITY,
              )),
              (this._loadedState = PointSet.State.NOT_LOADED),
              (this._accessedTime = Number.POSITIVE_INFINITY);
          }
          getName() {
            return this._name;
          }
          getLoadedState() {
            return this._loadedState;
          }
          getLoadedTime() {
            return this._accessedTime;
          }
          hasPointSets() {
            return 0 !== this._pointSets.length;
          }
          hasPoints() {
            return 0 !== this._points.length;
          }
          load(t) {
            let e = !0;
            if (
              ((2 === this._version ||
                (1 === this._version && "def" === this._name)) &&
                (e = 1 === t.readByte()),
                e)
            ) {
              const e = t.readInt32();
              for (let s = 0; s < e; s++) {
                const e = new this._PointClass();
                e.load(t), this._points.push(e);
              }
              this._points.length > 0 &&
                ((this._interval.min = this._points[0].time),
                  (this._interval.max =
                    this._points[this._points.length - 1].time));
            } else {
              const e = t.readInt32();
              1 === this._version &&
                (this._numberOfDigits = Math.ceil(Math.log10(e)));
              for (let s = 0; s < e; s++) {
                let e = "";
                e =
                  "def" === this._name
                    ? (s + "").padStart(this._numberOfDigits, "0")
                    : this._name +
                    "_" +
                    (s + "").padStart(this._numberOfDigits, "0");
                const i = new PointSet(
                  this._PointClass,
                  this._version,
                  this._numberOfDigits,
                  e,
                );
                (i._interval.min = t.readFloat64()),
                  1 === this._version
                    ? (i._interval.max = t.readFloat64())
                    : s > 0 &&
                    (this._pointSets[s - 1]._interval.max = i._interval.min),
                  this._pointSets.push(i);
              }
              2 === this._version &&
                this._pointSets.splice(this._pointSets.length - 1, 1),
                this._pointSets.length > 0 &&
                ((this._interval.min = this._pointSets[0]._interval.min),
                  (this._interval.max =
                    this._pointSets[this._pointSets.length - 1]._interval.max));
            }
            (this._loadedState = PointSet.State.LOADED),
              (this._accessedTime = Date.now());
          }
          loadFromUrl(t, e) {
            (this._loadedState = PointSet.State.LOADING),
              t.download(e + "/" + this._name + ".dyn", !0).then(async (t) => {
                if ("cancelled" === t.status) return Promise.resolve();
                if ("failed" === t.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load dynamo controller file "' +
                      t.url +
                      '": ' +
                      t.errorMessage,
                    ),
                  );
                if (!(t.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load dynamo controller file "' +
                      t.url +
                      '": Not a binary file.',
                    ),
                  );
                const e = new i.Reader(t.content);
                this.load(e);
              });
          }
          unloadOldPointSet() {
            for (let t = 0, e = this._pointSets.length; t < e; t++) {
              const e = this._pointSets[t];
              if (e._loadedState === PointSet.State.LOADED) {
                if (Date.now() - e._accessedTime > 15e3) return e.unload(), !0;
                if (e.unloadOldPointSet()) return !0;
              }
            }
            return !1;
          }
          unload() {
            (this._loadedState = PointSet.State.NOT_LOADED),
              (this._accessedTime = Number.POSITIVE_INFINITY),
              (this._pointSets = []),
              (this._points = []);
          }
          getPointSet(t) {
            if (
              ((this._accessedTime = Date.now()), 0 === this._pointSets.length)
            )
              return null;
            if (this._pointSets[this._hintIndex]._interval.contains(t));
            else if (
              this._hintIndex - 1 >= 0 &&
              this._pointSets[this._hintIndex - 1]._interval.contains(t)
            )
              this._hintIndex -= 1;
            else if (
              this._hintIndex + 1 < this._pointSets.length &&
              this._pointSets[this._hintIndex + 1]._interval.contains(t)
            )
              this._hintIndex += 1;
            else {
              let e = 0,
                s = this._pointSets.length - 1,
                i = 0;
              for (; e !== s;)
                (i = Math.ceil((e + s) / 2)),
                  t < this._pointSets[i]._interval.min ? (s = i - 1) : (e = i);
              this._hintIndex = e;
            }
            return this._pointSets[this._hintIndex];
          }
          getPoints(t, e) {
            if (((this._accessedTime = Date.now()), 0 === this._points.length))
              return (t[0] = null), void (t[1] = null);
            if (
              this._hintIndex + 1 < this._points.length &&
              this._points[this._hintIndex].time <= e &&
              e < this._points[this._hintIndex + 1].time
            );
            else if (
              this._hintIndex - 1 >= 0 &&
              this._points[this._hintIndex - 1].time <= e &&
              e < this._points[this._hintIndex].time
            )
              this._hintIndex -= 1;
            else if (
              this._hintIndex + 2 < this._points.length &&
              this._points[this._hintIndex + 1].time <= e &&
              e < this._points[this._hintIndex + 2].time
            )
              this._hintIndex += 1;
            else {
              let t = 0,
                s = this._points.length - 2,
                i = 0;
              for (; t !== s;)
                (i = Math.ceil((t + s) / 2)),
                  e < this._points[i].time ? (s = i - 1) : (t = i);
              this._hintIndex = t;
            }
            (t[0] = this._points[this._hintIndex]),
              (t[1] = this._points[this._hintIndex + 1]);
          }
        }
        PointSet.State = { NOT_LOADED: 0, LOADING: 1, LOADED: 2 };
        class DynamoController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._baseUrl = ""),
              (this._dataLoadedAtCurrentTime = !1),
              (this._timeOffset = 0),
              (this._version = 0),
              (this._pointType = ""),
              (this._PointClass = null),
              (this._numberOfDigits = 0),
              (this._header = { body: 0 }),
              (this._incremental = !1),
              (this._pointSet = null),
              (this._downloader = s.getScene().getEngine().getDownloader()),
              (this._points = [null, null]),
              (this._lastPoints = [null, null]),
              (this._lastTime = Number.NaN),
              (this._pCalc = null),
              (this._userCoverage = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._userCoverage.freeze();
          }
          getPointType() {
            return this._pointType;
          }
          getHeaderValue(t) {
            return this._header[t];
          }
          setHeaderValue(t, e) {
            this._header[t] = e;
          }
          isIncremental() {
            return this._incremental;
          }
          setIncremental(t) {
            this._incremental = t;
          }
          getBaseUrl() {
            return this._baseUrl;
          }
          setBaseUrl(t) {
            "" !== this._baseUrl &&
              (this._downloader.cancel(this._baseUrl + "/def.dyn"),
                (this._pointSet = null),
                (this._PointClass = null),
                this._userCoverage.thaw(),
                (this._userCoverage = new i.Interval(
                  Number.NEGATIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                )),
                this._userCoverage.freeze(),
                super.setCoverage(
                  new i.Interval(
                    Number.NEGATIVE_INFINITY,
                    Number.POSITIVE_INFINITY,
                  ),
                ),
                this.addModifiedState("position"),
                this.addModifiedState("velocity"),
                this.addModifiedState("orientation"),
                this.addModifiedState("angularVelocity"),
                (this._dataLoadedAtCurrentTime = !1)),
              (this._baseUrl = t),
              this._baseUrl.endsWith("/") &&
              (this._baseUrl = this._baseUrl.slice(0, -1)),
              this._loadDef();
          }
          getLoadedPromise() {
            return new Promise((t) => {
              const e = this.getEntity().getScene().getEngine(),
                s = () => {
                  const i = e.getTime();
                  (this.isDestroyed() ||
                    !this.isEnabled() ||
                    !this.getEntity().isEnabled() ||
                    "" === this._baseUrl ||
                    (null !== this._pointSet &&
                      !this.getCoverage().contains(i)) ||
                    this._dataLoadedAtCurrentTime) &&
                    (e.removeCallback(s), t());
                };
              e.addCallback(s, !0);
            });
          }
          getTimeOffset() {
            return this._timeOffset;
          }
          setTimeOffset(t) {
            const e = this._timeOffset;
            this._timeOffset = t;
            const s = new i.Interval();
            s.copy(this.getCoverage()),
              (s.min += this._timeOffset - e),
              (s.max += this._timeOffset - e),
              super.setCoverage(s);
          }
          setCoverage(t) {
            this._userCoverage.thaw(),
              this._userCoverage.copy(t),
              this._userCoverage.freeze();
            const e = i.Interval.pool.get();
            null !== this._pointSet
              ? e.intersection(this._userCoverage, this._pointSet._interval)
              : e.copy(
                new i.Interval(
                  Number.POSITIVE_INFINITY,
                  Number.NEGATIVE_INFINITY,
                ),
              ),
              (e.min += this._timeOffset),
              (e.max += this._timeOffset),
              super.setCoverage(e),
              i.Interval.pool.release(e);
          }
          getOrbitalElements(t, e) {
            if (
              this._PointClass === OrbPoint &&
              null !== this._pointSet &&
              (this._getPointsAtTime(this._points, e),
                null !== this._points[0] &&
                ((this._lastPoints[0] = this._points[0]),
                  (this._lastPoints[1] = this._points[1])),
                null !== this._lastPoints[0])
            ) {
              const s = this._lastPoints[0].oe,
                n = this._lastPoints[1].oe,
                o = i.MathUtils.clamp01(
                  (e - this._lastPoints[0].time) /
                  (this._lastPoints[1].time - this._lastPoints[0].time),
                );
              (t.eccentricity = i.MathUtils.lerp(
                s.eccentricity,
                n.eccentricity,
                o,
              )),
                (t.semiMajorAxis = i.MathUtils.lerp(
                  s.semiMajorAxis,
                  n.semiMajorAxis,
                  o,
                )),
                (t.epoch = i.MathUtils.lerp(s.epoch, n.epoch, o)),
                (t.meanAngularMotion = i.MathUtils.lerp(
                  s.meanAngularMotion,
                  n.meanAngularMotion,
                  o,
                )),
                (t.meanAnomalyAtEpoch = i.MathUtils.lerpAngle(
                  s.meanAnomalyAtEpoch,
                  n.meanAnomalyAtEpoch,
                  o,
                )),
                t.orbitOrientation.slerp(
                  s.orbitOrientation,
                  n.orbitOrientation,
                  o,
                );
            }
          }
          getEccentricity(t) {
            if (
              this._PointClass === OrbPoint &&
              null !== this._pointSet &&
              (this._getPointsAtTime(this._points, t),
                null !== this._points[0] &&
                ((this._lastPoints[0] = this._points[0]),
                  (this._lastPoints[1] = this._points[1])),
                null !== this._lastPoints[0])
            ) {
              const e = i.MathUtils.clamp01(
                (t - this._lastPoints[0].time) /
                (this._lastPoints[1].time - this._lastPoints[0].time),
              );
              return i.MathUtils.lerp(
                this._lastPoints[0].oe.eccentricity,
                this._lastPoints[1].oe.eccentricity,
                e,
              );
            }
            return Number.NaN;
          }
          getSemiMajorAxis(t) {
            if (
              this._PointClass === OrbPoint &&
              null !== this._pointSet &&
              (this._getPointsAtTime(this._points, t),
                null !== this._points[0] &&
                ((this._lastPoints[0] = this._points[0]),
                  (this._lastPoints[1] = this._points[1])),
                null !== this._lastPoints[0])
            ) {
              const e = i.MathUtils.clamp01(
                (t - this._lastPoints[0].time) /
                (this._lastPoints[1].time - this._lastPoints[0].time),
              );
              return i.MathUtils.lerp(
                this._lastPoints[0].oe.semiMajorAxis,
                this._lastPoints[1].oe.semiMajorAxis,
                e,
              );
            }
            return Number.NaN;
          }
          getOrbitOrientation(t, e) {
            if (
              this._PointClass === OrbPoint &&
              null !== this._pointSet &&
              (this._getPointsAtTime(this._points, e),
                null !== this._points[0] &&
                ((this._lastPoints[0] = this._points[0]),
                  (this._lastPoints[1] = this._points[1])),
                null !== this._lastPoints[0])
            ) {
              const s = i.MathUtils.clamp01(
                (e - this._lastPoints[0].time) /
                (this._lastPoints[1].time - this._lastPoints[0].time),
              );
              t.slerp(
                this._lastPoints[0].oe.orbitOrientation,
                this._lastPoints[1].oe.orbitOrientation,
                s,
              );
            }
          }
          __destroy() {
            "" !== this._baseUrl &&
              this._downloader.cancel(this._baseUrl + "/def.dyn"),
              super.__destroy();
          }
          __updatePositionAtTime(t, e) {
            if (null !== this._pointSet) {
              if (
                void 0 !== this._pCalc.position &&
                this.getCoverage().contains(e)
              ) {
                if (this._pCalc.time !== e) {
                  if (
                    (this._getPointsAtTime(this._points, e),
                      null === this._points[0])
                  )
                    return void t.copy(i.Vector3.NaN);
                  this._pCalc.calculate(
                    this._points,
                    e - this._timeOffset,
                    this._header,
                    this._incremental,
                  );
                }
                t.copy(this._pCalc.position);
              }
            } else t.copy(i.Vector3.NaN);
          }
          __updateVelocityAtTime(t, e) {
            if (null !== this._pointSet) {
              if (
                void 0 !== this._pCalc.velocity &&
                this.getCoverage().contains(e)
              ) {
                if (this._pCalc.time !== e) {
                  if (
                    (this._getPointsAtTime(this._points, e),
                      null === this._points[0])
                  )
                    return void t.copy(i.Vector3.NaN);
                  this._pCalc.calculate(
                    this._points,
                    e - this._timeOffset,
                    this._header,
                    this._incremental,
                  );
                }
                t.copy(this._pCalc.velocity);
              }
            } else t.copy(i.Vector3.NaN);
          }
          __updateOrientationAtTime(t, e) {
            if (null !== this._pointSet) {
              if (
                void 0 !== this._pCalc.orientation &&
                this.getCoverage().contains(e)
              ) {
                if (this._pCalc.time !== e) {
                  if (
                    (this._getPointsAtTime(this._points, e),
                      null === this._points[0])
                  )
                    return void t.copy(i.Quaternion.NaN);
                  this._pCalc.calculate(
                    this._points,
                    e - this._timeOffset,
                    this._header,
                    this._incremental,
                  );
                }
                t.copy(this._pCalc.orientation);
              }
            } else t.copy(i.Quaternion.NaN);
          }
          __update() {
            const t = this.getEntity(),
              e = t.getScene().getEngine().getTime();
            null !== this._pointSet
              ? (this._pointSet.unloadOldPointSet(),
                this._getPointsAtTime(this._points, e),
                null !== this._points[0]
                  ? (this._pCalc.calculate(
                    this._points,
                    e - this._timeOffset,
                    this._header,
                    this._incremental,
                  ),
                    this._pCalc.apply(t),
                    (this._lastPoints[0] = this._points[0]),
                    (this._lastPoints[1] = this._points[1]),
                    (this._dataLoadedAtCurrentTime = !0))
                  : (null !== this._lastPoints[0] &&
                    null !== this._lastPoints[1] &&
                    (this._pCalc.calculate(
                      this._lastPoints,
                      e - this._timeOffset,
                      this._header,
                      this._incremental,
                    ),
                      this._pCalc.apply(t)),
                    (this._dataLoadedAtCurrentTime = !1)))
              : (this.getEntity().setPosition(i.Vector3.NaN),
                this.getEntity().setVelocity(i.Vector3.NaN),
                this.getEntity().setOrientation(i.Quaternion.NaN),
                this.getEntity().setAngularVelocity(i.Vector3.NaN),
                (this._dataLoadedAtCurrentTime = !1)),
              (this._lastTime = e);
          }
          async _loadDef() {
            const t = this._baseUrl;
            return this._downloader
              .download(this._baseUrl + "/def.dyn", !0)
              .then(async (t) => {
                if ("cancelled" === t.status) return Promise.resolve();
                if ("failed" === t.status)
                  return Promise.reject(
                    new Error(
                      'Failed to load dynamo controller file "' +
                      t.url +
                      '": ' +
                      t.errorMessage,
                    ),
                  );
                if (!(t.content instanceof ArrayBuffer))
                  return Promise.reject(
                    new Error(
                      'Failed to load dynamo controller file "' +
                      t.url +
                      '": Not a binary file.',
                    ),
                  );
                const e = new i.Reader(t.content);
                if (
                  ((this._version = e.readInt16()),
                    1 !== this._version && 2 !== this._version)
                )
                  throw new Error(t.url + " is not Dynamo version 1 or 2");
                (this._pointType = e.readString()),
                  "pos" === this._pointType
                    ? (this._PointClass = PosPoint)
                    : "lin" === this._pointType
                      ? (this._PointClass = LinPoint)
                      : "ori" === this._pointType
                        ? (this._PointClass = OriPoint)
                        : "quat" === this._pointType
                          ? (this._PointClass = QuatPoint)
                          : "orb" === this._pointType &&
                          (this._PointClass = OrbPoint),
                  (this._pCalc = new this._PointClass()),
                  this._PointClass === PosPoint ||
                    this._PointClass === LinPoint ||
                    this._PointClass === OrbPoint
                    ? (this.addModifiedState("position"),
                      this.addModifiedState("velocity"),
                      this.removeModifiedState("orientation"),
                      this.removeModifiedState("angularVelocity"))
                    : (this._PointClass !== OriPoint &&
                      this._PointClass !== QuatPoint) ||
                    (this.addModifiedState("orientation"),
                      this.addModifiedState("angularVelocity"),
                      this.removeModifiedState("position"),
                      this.removeModifiedState("velocity")),
                  2 === this._version && (this._numberOfDigits = e.readByte()),
                  (this._header = Object.assign(
                    this._header,
                    this._PointClass.readHeader(e),
                  )),
                  (this._pointSet = new PointSet(
                    this._PointClass,
                    this._version,
                    this._numberOfDigits,
                    "def",
                  )),
                  this._pointSet.load(e);
                const s = i.Interval.pool.get();
                s.intersection(this._userCoverage, this._pointSet._interval),
                  (s.min += this._timeOffset),
                  (s.max += this._timeOffset),
                  super.setCoverage(s),
                  i.Interval.pool.release(s);
              })
              .catch((e) => {
                throw (
                  (e instanceof Error &&
                    (e.message = `While loading dynamo "${t}/def.dyn": ${e.message}`),
                    e)
                );
              });
          }
          _getPointsAtTime(t, e) {
            let s = this._pointSet;
            for (; ;) {
              if (s.hasPoints())
                return void s.getPoints(t, e - this._timeOffset);
              if (s.getLoadedState() !== PointSet.State.LOADED)
                return s.getLoadedState() === PointSet.State.NOT_LOADED
                  ? (s.loadFromUrl(this._downloader, this._baseUrl),
                    (t[0] = null),
                    void (t[1] = null))
                  : ((t[0] = null), void (t[1] = null));
              if (((s = s.getPointSet(e - this._timeOffset)), null === s))
                return (t[0] = null), void (t[1] = null);
            }
          }
        }
        DynamoController.maxLoadedPointSetsPerController = 5;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FixedController: function () {
              return FixedController;
            },
          });
        var i = s(6);
        class FixedController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s), (this._position = null), (this._orientation = null);
          }
          getPosition() {
            return this._position;
          }
          setPosition(t) {
            null !== t
              ? (null === this._position && (this._position = new i.Vector3()),
                this._position.thaw(),
                this._position.copy(t),
                this._position.freeze())
              : (this._position = null),
              null !== t
                ? (this.addModifiedState("position"),
                  this.addModifiedState("velocity"))
                : (this.removeModifiedState("position"),
                  this.removeModifiedState("velocity"));
          }
          getOrientation() {
            return this._orientation;
          }
          setOrientation(t) {
            null !== t
              ? (null === this._orientation &&
                (this._orientation = new i.Quaternion()),
                this._orientation.thaw(),
                this._orientation.copy(t),
                this._orientation.freeze())
              : (this._orientation = null),
              null !== t
                ? this.addModifiedState("orientation")
                : this.removeModifiedState("orientation");
          }
          __updatePositionAtTime(t, e) {
            null !== this._position && t.copy(this._position);
          }
          __updateVelocityAtTime(t, e) {
            null !== this._position && t.set(0, 0, 0);
          }
          __updateOrientationAtTime(t, e) {
            null !== this._orientation && t.copy(this._orientation);
          }
          __update() {
            null !== this._position &&
              (this.getEntity().setPosition(this._position),
                this.getEntity().setVelocity(i.Vector3.Zero)),
              null !== this._orientation &&
              this.getEntity().setOrientation(this._orientation);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FixedToParentController: function () {
              return FixedToParentController;
            },
          });
        var i = s(6);
        class FixedToParentController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s), (this._lastParentOrientation = new i.Quaternion());
            const n = this.getEntity().getParent();
            null !== n && this._lastParentOrientation.copy(n.getOrientation()),
              this.addModifiedState("position"),
              this.addModifiedState("orientation"),
              this.addDependentState("parent", "orientation");
          }
          __update() {
            const t = this.getEntity().getParent();
            if (null !== t) {
              const e = i.Quaternion.pool.get();
              e.inverse(this._lastParentOrientation),
                e.mult(t.getOrientation(), e);
              const s = i.Vector3.pool.get(),
                n = i.Quaternion.pool.get();
              s.rotate(e, this.getEntity().getPosition()),
                this.getEntity().setPosition(s),
                n.mult(e, this.getEntity().getOrientation()),
                this.getEntity().setOrientation(n),
                i.Quaternion.pool.release(n),
                i.Vector3.pool.release(s),
                i.Quaternion.pool.release(e),
                this._lastParentOrientation.copy(t.getOrientation());
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FreeFlyController: function () {
              return FreeFlyController;
            },
          });
        var i = s(6);
        class FreeFlyController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._dragSensitivity = 0.01),
              (this._dragSmoothness = 0.8),
              (this._moveSmoothedValue = new i.Vector3(0, 0, 0)),
              (this._changeParentToNearestEntity = !0),
              (this._forcedMoving = new i.Vector3()),
              (this._isMoving = !1),
              this.addModifiedState("position"),
              this.addDependentState("parent", "orientation"),
              this.addDependentState("parent", "radius");
          }
          getDragSensitivity() {
            return this._dragSensitivity;
          }
          setDragSensitivity(t) {
            this._dragSensitivity = t;
          }
          getDragSmoothness() {
            return this._dragSmoothness;
          }
          setDragSmoothness(t) {
            this._dragSmoothness = t;
          }
          getChangeParentToNearestEntity() {
            return this._changeParentToNearestEntity;
          }
          setChangeParentToNearestEntity(t) {
            this._changeParentToNearestEntity = t;
          }
          getForcedMoving() {
            return this._forcedMoving;
          }
          setForcedMoving(t) {
            this._forcedMoving = t;
          }
          __update() {
            if (null === this.getEntity().getParent()) return;
            if (
              this._changeParentToNearestEntity &&
              (null === this.getEntity().getParent() || this._isMoving)
            ) {
              const t = this.getEntity().getScene(),
                e = this.getEntity().get("camera");
              let s = null,
                i = Number.POSITIVE_INFINITY;
              for (let n = 0, o = t.getNumEntities(); n < o; n++) {
                const o = t.getEntity(n);
                if (o === this.getEntity() || !o.canOcclude()) continue;
                const r =
                  o.getCameraSpacePosition(e).magnitude() -
                  o.getOcclusionRadius();
                i > r && ((i = r), (s = o));
              }
              null !== s &&
                s !== this.getEntity().getParent() &&
                this.getEntity().setParent(s);
            }
            this.getEntity().getOrientation().isNaN() &&
              this.getEntity().setOrientation(i.Quaternion.Identity),
              this.getEntity().getPosition().isNaN() &&
              this.getEntity().setPosition(new i.Vector3(0, -1, 0));
            const t = i.Vector3.pool.get();
            t.set(0, 0, 0);
            const e = this.getEntity().getScene().getEngine().getInput(),
              s = e.getActiveViewport();
            if (null !== s) {
              const i = s.getCamera();
              if (null !== i && i.getEntity() === this.getEntity()) {
                let s = 1;
                e.isKeyPressed("x") && (s = 0.05),
                  e.isShiftPressed() && (s = 5);
                const i = e.getZoomedOffset();
                0 !== i && (t.y += -i * this._dragSensitivity * s),
                  e.isKeyPressed("w") && (t.y += this._dragSensitivity * s),
                  e.isKeyPressed("s") && (t.y -= this._dragSensitivity * s),
                  e.isKeyPressed("d") && (t.x += this._dragSensitivity * s),
                  e.isKeyPressed("a") && (t.x -= this._dragSensitivity * s),
                  e.isKeyPressed("e") && (t.z += this._dragSensitivity * s),
                  e.isKeyPressed("q") && (t.z -= this._dragSensitivity * s);
              }
            }
            t.add(t, this._forcedMoving),
              (this._isMoving = t.magnitudeSqr() > 0),
              this._moveSmoothedValue.lerp(
                t,
                this._moveSmoothedValue,
                this._dragSmoothness,
              ),
              !this._isMoving &&
              this._moveSmoothedValue.magnitudeSqr() < 1e-7 &&
              this._moveSmoothedValue.set(0, 0, 0),
              i.Vector3.pool.release(t);
            let n = Number.POSITIVE_INFINITY;
            const o = this.getEntity()
              .getParent()
              .getComponentByType("spheroid");
            if (
              null === o ||
              this.getEntity().getParent().getOrientation().isNaN()
            )
              n = Math.min(
                n,
                this.getEntity().getPosition().magnitude() -
                this.getEntity().getParent().getOcclusionRadius(),
              );
            else {
              const t = i.Vector3.pool.get();
              t.rotateInverse(
                this.getEntity().getParent().getOrientation(),
                this.getEntity().getPosition(),
              );
              const e = i.LatLonAlt.pool.get();
              o.llaFromXYZ(e, t),
                (n = Math.min(n, e.alt)),
                i.LatLonAlt.pool.release(e),
                i.Vector3.pool.release(t);
            }
            n = Math.max(0.1, n);
            const r = this.getEntity().getPosition(),
              a = i.Vector3.pool.get(),
              l = i.Vector3.pool.get();
            l.rotate(
              this.getEntity().getOrientation(),
              this._moveSmoothedValue,
            ),
              a.addMult(r, l, n),
              this.getEntity().setPosition(a),
              i.Vector3.pool.release(l),
              i.Vector3.pool.release(a);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            GroundClampController: function () {
              return GroundClampController;
            },
          });
        var i = s(6);
        class GroundClampController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._groundComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              (this._distanceFromGround = 0),
              (this._up = new i.Vector3(0, 0, 1)),
              this.addModifiedState("position");
          }
          setGroundComponentRef(t, e, s) {
            this.removeDependentState(
              this._groundComponentRef.getEntityName(),
              "orientation",
            ),
              this._groundComponentRef.setByType(t, e, s),
              this.addDependentState(t, "orientation");
          }
          getDistanceFromGround() {
            return this._distanceFromGround;
          }
          setDistanceFromGround(t) {
            this._distanceFromGround = t;
          }
          setUp(t) {
            this._up.copy(t);
          }
          __updatePositionAtTime(t, e) {
            const s = this.getEntity().getParentAtTime(e),
              n = this.getEntity().getScene().getEntity(s);
            if (null === n) return;
            let o = this._groundComponentRef.get();
            if (null === o) {
              let t = this.getEntity().getParent();
              for (
                ;
                null !== t &&
                ((o = t.getComponentByType("spheroid")), null === o);

              )
                t = t.getParent();
              if (null === o) return;
            }
            const r = o.getEntity(),
              a = i.Vector3.pool.get(),
              l = i.Vector3.pool.get(),
              c = i.Quaternion.pool.get();
            if (
              (r.getOrientationAtTime(c, e),
                n.getPositionRelativeToEntity(a, t, r, e),
                a.rotateInverse(c, a),
                void 0 !== o.getGroundPosition && o.getGroundPosition(a, l, a),
                a.isNaN())
            )
              t.copy(i.Vector3.NaN);
            else {
              const s = i.Vector3.pool.get(),
                o = i.Quaternion.pool.get();
              this.getEntity().getOrientationAtTime(o, e),
                s.rotate(o, this._up),
                i.Quaternion.pool.release(o),
                s.rotateInverse(c, s);
              const h = Math.abs(s.dot(l));
              i.Vector3.pool.release(s),
                a.addMult(
                  a,
                  l,
                  Math.min(
                    this._distanceFromGround / h,
                    this._distanceFromGround +
                    this.getEntity().getExtentsRadius(),
                  ),
                ),
                a.rotate(c, a),
                r.getPositionRelativeToEntity(t, a, n, e);
            }
            i.Vector3.pool.release(a),
              i.Vector3.pool.release(l),
              i.Quaternion.pool.release(c);
          }
          __update() {
            if (null === this.getEntity().getParent()) return;
            let t = this._groundComponentRef.get();
            if (null === t) {
              let e = this.getEntity().getParent();
              for (
                ;
                null !== e &&
                ((t = e.getComponentByType("spheroid")), null === t);

              )
                e = e.getParent();
              if (null === t) return;
            }
            const e = t.getEntity(),
              s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get();
            if (
              (this.getEntity().getPositionRelativeToEntity(
                s,
                i.Vector3.Zero,
                e,
              ),
                s.rotateInverse(e.getOrientation(), s),
                void 0 !== t.getGroundPosition && t.getGroundPosition(s, n, s),
                s.isNaN())
            )
              s.copy(this.getEntity().getLastPosition());
            else {
              const t = i.Vector3.pool.get();
              t.rotate(this.getEntity().getOrientation(), this._up),
                t.rotateInverse(e.getOrientation(), t);
              const o = Math.abs(t.dot(n));
              i.Vector3.pool.release(t),
                s.addMult(
                  s,
                  n,
                  Math.min(
                    this._distanceFromGround / o,
                    this._distanceFromGround +
                    this.getEntity().getExtentsRadius(),
                  ),
                ),
                s.rotate(e.getOrientation(), s),
                e.getPositionRelativeToEntity(
                  s,
                  s,
                  this.getEntity().getParent(),
                );
            }
            this.getEntity().setPosition(s),
              i.Vector3.pool.release(s),
              i.Vector3.pool.release(n);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            KeyframeController: function () {
              return KeyframeController;
            },
          });
        var i = s(6);
        class KeyframeController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._positionKeyframes = []),
              (this._orientationKeyframes = []),
              (this._timesAreRealTime = !1),
              (this._timeOfFirstUpdate = NaN),
              this.setCoverage(
                new i.Interval(
                  Number.POSITIVE_INFINITY,
                  Number.NEGATIVE_INFINITY,
                ),
              ),
              (this._position0 = new i.Vector3()),
              (this._position1 = new i.Vector3()),
              (this._orientation0 = new i.Quaternion()),
              (this._orientation1 = new i.Quaternion()),
              (this._newPosition = new i.Vector3()),
              (this._newVelocity = new i.Vector3()),
              (this._newOrientation = new i.Quaternion()),
              (this._tangent0 = new i.Vector3()),
              (this._tangent1 = new i.Vector3()),
              (this._tempA = new i.Vector3()),
              (this._tempB = new i.Vector3());
          }
          addPositionKeyframe(t, e, s, o, r, a) {
            const l = [
              t,
              {
                position: e,
                relativeToEntityPosition: s
                  ? new i.EntityRef(this.getEntity().getScene(), s)
                  : void 0,
                relativeToEntityPositionTime: o,
                relativeToEntityOrientation: r
                  ? new i.EntityRef(this.getEntity().getScene(), r)
                  : void 0,
                relativeToEntityOrientationTime: a,
              },
            ];
            i.Sort.add(l, this._positionKeyframes, n),
              1 === this._positionKeyframes.length &&
              (this.addModifiedState("position"),
                this.addModifiedState("velocity")),
              this._updateCoverage();
          }
          removePositionKeyframe(t) {
            const e = i.Sort.remove(t, this._positionKeyframes, o, r);
            return (
              e &&
              (0 === this._positionKeyframes.length &&
                (this.removeModifiedState("position"),
                  this.removeModifiedState("velocity")),
                this._updateCoverage()),
              e
            );
          }
          addOrientationKeyframe(t, e, s, o) {
            const r = [
              t,
              {
                orientation: e,
                relativeToEntityOrientation: s
                  ? new i.EntityRef(this.getEntity().getScene(), s)
                  : void 0,
                relativeToEntityOrientationTime: o,
              },
            ];
            i.Sort.add(r, this._orientationKeyframes, n),
              1 === this._orientationKeyframes.length &&
              this.addModifiedState("orientation"),
              this._updateCoverage();
          }
          removeOrientationKeyframe(t) {
            const e = i.Sort.remove(t, this._orientationKeyframes, o, r);
            return (
              e &&
              (0 === this._orientationKeyframes.length &&
                this.removeModifiedState("orientation"),
                this._updateCoverage()),
              e
            );
          }
          areTimesRealTime() {
            return this._timesAreRealTime;
          }
          setTimesAreRealTime(t) {
            (this._timesAreRealTime = t), this._updateCoverage();
          }
          __updatePositionAtTime(t, e) {
            this._getPositionAtTime(t, e);
          }
          __updateVelocityAtTime(t, e) {
            this._getVelocityAtTime(t, e);
          }
          __updateOrientationAtTime(t, e) {
            this._getOrientationAtTime(t, e);
          }
          __update() {
            const t = this.getEntity().getScene().getEngine();
            let e = 0;
            this._timesAreRealTime
              ? isNaN(this._timeOfFirstUpdate)
                ? (this._timeOfFirstUpdate = Date.now() / 1e3)
                : (e = Date.now() / 1e3 - this._timeOfFirstUpdate)
              : (e = t.getTime()),
              this._getPositionAtTime(this._newPosition, e) &&
              this.getEntity().setPosition(this._newPosition),
              this._getVelocityAtTime(this._newVelocity, e) &&
              this.getEntity().setVelocity(this._newVelocity),
              this._getOrientationAtTime(this._newOrientation, e) &&
              this.getEntity().setOrientation(this._newOrientation);
          }
          _getPositionAtTime(t, e) {
            const s = i.Sort.getIndex(e, this._positionKeyframes, o);
            if (s < this._positionKeyframes.length) {
              if (0 !== s) {
                const i = s - 1,
                  n = s,
                  o = this._positionKeyframes[i][0],
                  r = this._positionKeyframes[n][0];
                if (
                  (this._getPositionOfKeyframe(
                    this._position0,
                    this._positionKeyframes[i],
                  ),
                    this._getPositionOfKeyframe(
                      this._position1,
                      this._positionKeyframes[n],
                    ),
                    i > 0)
                ) {
                  const t = this._positionKeyframes[i - 1][0];
                  this._getPositionOfKeyframe(
                    this._tempA,
                    this._positionKeyframes[i - 1],
                  ),
                    this._tempA.sub(this._position0, this._tempA),
                    this._tempB.sub(this._position1, this._position0),
                    this._tempB.mult(this._tempB, 0.5),
                    this._tangent0.addMult(
                      this._tempB,
                      this._tempA,
                      (0.5 * (r - o)) / (o - t),
                    );
                } else this._tangent0.sub(this._position1, this._position0);
                if (n < this._positionKeyframes.length - 1) {
                  const t = this._positionKeyframes[n + 1][0];
                  this._getPositionOfKeyframe(
                    this._tempB,
                    this._positionKeyframes[n + 1],
                  ),
                    this._tempA.sub(this._position1, this._position0),
                    this._tempB.sub(this._tempB, this._position1),
                    this._tempA.mult(this._tempA, 0.5),
                    this._tangent1.addMult(
                      this._tempA,
                      this._tempB,
                      (0.5 * (r - o)) / (t - r),
                    );
                } else this._tangent1.sub(this._position1, this._position0);
                const a = (e - o) / (r - o);
                return (
                  this._cubicHermiteSpline(
                    t,
                    this._position0,
                    this._position1,
                    this._tangent0,
                    this._tangent1,
                    a,
                  ),
                  !0
                );
              }
              if (this._positionKeyframes[0][0] === e)
                return (
                  this._getPositionOfKeyframe(t, this._positionKeyframes[0]), !0
                );
            }
            return !1;
          }
          _getVelocityAtTime(t, e) {
            const s = i.Sort.getIndex(e, this._positionKeyframes, o);
            if (s < this._positionKeyframes.length) {
              if (0 !== s) {
                const i = s - 1,
                  n = s,
                  o = this._positionKeyframes[i][0],
                  r = this._positionKeyframes[n][0];
                if (
                  (this._getPositionOfKeyframe(
                    this._position0,
                    this._positionKeyframes[i],
                  ),
                    this._getPositionOfKeyframe(
                      this._position1,
                      this._positionKeyframes[n],
                    ),
                    i > 0)
                ) {
                  const t = this._positionKeyframes[i - 1][0];
                  this._getPositionOfKeyframe(
                    this._tempA,
                    this._positionKeyframes[i - 1],
                  ),
                    this._tempA.sub(this._position0, this._tempA),
                    this._tempB.sub(this._position1, this._position0),
                    this._tempB.mult(this._tempB, 0.5),
                    this._tangent0.addMult(
                      this._tempB,
                      this._tempA,
                      (0.5 * (r - o)) / (o - t),
                    );
                } else this._tangent0.sub(this._position1, this._position0);
                if (n < this._positionKeyframes.length - 1) {
                  const t = this._positionKeyframes[n + 1][0];
                  this._getPositionOfKeyframe(
                    this._tempB,
                    this._positionKeyframes[n + 1],
                  ),
                    this._tempA.sub(this._position1, this._position0),
                    this._tempB.sub(this._tempB, this._position1),
                    this._tempA.mult(this._tempA, 0.5),
                    this._tangent1.addMult(
                      this._tempA,
                      this._tempB,
                      (0.5 * (r - o)) / (t - r),
                    );
                } else this._tangent1.sub(this._position1, this._position0);
                const a = (e - o) / (r - o);
                return (
                  this._cubicHermiteSplineDerivative(
                    t,
                    this._position0,
                    this._position1,
                    this._tangent0,
                    this._tangent1,
                    a,
                  ),
                  t.div(t, r - o),
                  !0
                );
              }
              if (this._positionKeyframes[0][0] === e) {
                if (this._positionKeyframes.length > 1) {
                  const e = this._positionKeyframes[0][0],
                    s = this._positionKeyframes[1][0];
                  this._getPositionOfKeyframe(
                    this._position0,
                    this._positionKeyframes[0],
                  ),
                    this._getPositionOfKeyframe(
                      this._position1,
                      this._positionKeyframes[1],
                    ),
                    t.sub(this._position1, this._position0),
                    t.div(t, s - e);
                } else t.set(0, 0, 0);
                return !0;
              }
            }
            return !1;
          }
          _getOrientationAtTime(t, e) {
            const s = i.Sort.getIndex(e, this._orientationKeyframes, o);
            if (s < this._orientationKeyframes.length) {
              if (0 !== s) {
                const i = s - 1,
                  n = s,
                  o = this._orientationKeyframes[i][0];
                this._getOrientationOfKeyframe(
                  this._orientation0,
                  this._orientationKeyframes[i],
                );
                const r = this._orientationKeyframes[n][0];
                return (
                  this._getOrientationOfKeyframe(
                    this._orientation1,
                    this._orientationKeyframes[n],
                  ),
                  t.slerp(
                    this._orientation0,
                    this._orientation1,
                    (e - o) / (r - o),
                  ),
                  !0
                );
              }
              if (this._orientationKeyframes[0][0] === e)
                return (
                  this._getOrientationOfKeyframe(
                    t,
                    this._orientationKeyframes[0],
                  ),
                  !0
                );
            }
            return !1;
          }
          _getPositionOfKeyframe(t, e) {
            const s = e[1];
            if (
              (t.copy(s.position), void 0 !== s.relativeToEntityOrientation)
            ) {
              const n =
                void 0 !== e[1].relativeToEntityOrientationTime
                  ? e[1].relativeToEntityOrientationTime
                  : e[0],
                o = s.relativeToEntityOrientation.get();
              if (null !== o) {
                const e = i.Quaternion.pool.get();
                o.getOrientationAtTime(e, n),
                  t.rotate(e, t),
                  i.Quaternion.pool.release(e);
              } else t.copy(i.Vector3.NaN);
            }
            if (void 0 !== s.relativeToEntityPosition) {
              const n =
                void 0 !== e[1].relativeToEntityPositionTime
                  ? e[1].relativeToEntityPositionTime
                  : e[0],
                o = i.Vector3.pool.get(),
                r = s.relativeToEntityPosition.get();
              null !== r
                ? (r.getPositionRelativeToEntity(
                  o,
                  i.Vector3.Zero,
                  this.getEntity().getParent(),
                  n,
                ),
                  t.add(o, t),
                  i.Vector3.pool.release(o))
                : t.copy(i.Vector3.NaN);
            }
          }
          _getOrientationOfKeyframe(t, e) {
            const s = e[1];
            if (void 0 !== s.relativeToEntityOrientation) {
              const n =
                void 0 !== e[1].relativeToEntityOrientationTime
                  ? e[1].relativeToEntityOrientationTime
                  : e[0],
                o = s.relativeToEntityOrientation.get();
              null !== o
                ? (o.getOrientationAtTime(t, n), t.mult(t, s.orientation))
                : t.copy(i.Quaternion.NaN);
            } else t.copy(s.orientation);
          }
          _updateCoverage() {
            if (this._timesAreRealTime) this.setCoverage(i.Interval.Infinite);
            else {
              const t = new i.Interval(
                Number.POSITIVE_INFINITY,
                Number.NEGATIVE_INFINITY,
              );
              this._positionKeyframes.length > 0 &&
                ((t.min = Math.min(t.min, this._positionKeyframes[0][0])),
                  (t.max = Math.max(
                    t.max,
                    this._positionKeyframes[
                    this._positionKeyframes.length - 1
                    ][0],
                  ))),
                this._orientationKeyframes.length > 0 &&
                ((t.min = Math.min(t.min, this._orientationKeyframes[0][0])),
                  (t.max = Math.max(
                    t.max,
                    this._orientationKeyframes[
                    this._orientationKeyframes.length - 1
                    ][0],
                  ))),
                this.setCoverage(t);
            }
          }
          _cubicHermiteSpline(t, e, s, i, n, o) {
            const r = o * o,
              a = o * r,
              l = 2 * a - 3 * r + 1,
              c = a - 2 * r + o,
              h = -2 * a + 3 * r,
              u = a - r;
            (t.x = l * e.x + c * i.x + h * s.x + u * n.x),
              (t.y = l * e.y + c * i.y + h * s.y + u * n.y),
              (t.z = l * e.z + c * i.z + h * s.z + u * n.z);
          }
          _cubicHermiteSplineDerivative(t, e, s, i, n, o) {
            const r = o * o,
              a = 6 * r - 6 * o,
              l = 3 * r - 4 * o + 1,
              c = -6 * r + 6 * o,
              h = 3 * r - 2 * o;
            (t.x = a * e.x + l * i.x + c * s.x + h * n.x),
              (t.y = a * e.y + l * i.y + c * s.y + h * n.y),
              (t.z = a * e.z + l * i.z + c * s.z + h * n.z);
          }
        }
        const n = (t, e) => t[0] < e[0],
          o = (t, e) => t[0] < e,
          r = (t, e) => t[0] === e;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LookController: function () {
              return LookController;
            },
          });
        var i = s(6);
        class LookController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._dragSensitivity = 0.01),
              (this._dragSmoothness = 0.8),
              (this._yawAngleSmoothedValue = 0),
              (this._pitchAngleSmoothedValue = 0),
              (this._yawAxisType = "none"),
              (this._yawAxisEntity = null),
              this.addModifiedState("orientation");
          }
          getDragSensitivity() {
            return this._dragSensitivity;
          }
          setDragSensitivity(t) {
            this._dragSensitivity = t;
          }
          getDragSmoothness() {
            return this._dragSmoothness;
          }
          setDragSmoothness(t) {
            this._dragSmoothness = t;
          }
          getYawAxisType() {
            return this._yawAxisType;
          }
          setYawAxisType(t) {
            this._yawAxisType !== t &&
              (null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )),
                (this._yawAxisType = t),
                null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )));
          }
          getYawAxisEntity() {
            return this._yawAxisEntity;
          }
          setYawAxisEntity(t) {
            this._yawAxisEntity !== t &&
              (null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )),
                (this._yawAxisEntity = t),
                null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )));
          }
          __update() {
            null === this._yawAxisEntity &&
              ((this._yawAxisEntity = this.getEntity().getParent()),
                null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  ))),
              this.getEntity().getOrientation().isNaN() &&
              this.getEntity().setOrientation(i.Quaternion.Identity);
            const t = this.getEntity().getScene().getEngine().getInput();
            let e = 1;
            t.isKeyPressed("x") && (e = 0.05);
            const s = this.getEntity().getComponentByType("camera");
            null !== s && (e *= Math.min(1, s.getFieldOfView()));
            let n = 0,
              o = 0;
            const r = t.getActiveViewport();
            if (null !== r) {
              const s = r.getCamera();
              if (null !== s && s.getEntity() === this.getEntity()) {
                const s = t.getDraggedOffset();
                (n = -s.x * this._dragSensitivity * e),
                  (o = -s.y * this._dragSensitivity * e);
              }
            }
            (this._yawAngleSmoothedValue = i.MathUtils.lerp(
              n,
              this._yawAngleSmoothedValue,
              this._dragSmoothness,
            )),
              (this._pitchAngleSmoothedValue = i.MathUtils.lerp(
                o,
                this._pitchAngleSmoothedValue,
                this._dragSmoothness,
              )),
              Math.abs(this._yawAngleSmoothedValue) < 1e-4 * e &&
              (this._yawAngleSmoothedValue = 0),
              Math.abs(this._pitchAngleSmoothedValue) < 1e-4 * e &&
              (this._pitchAngleSmoothedValue = 0);
            const a = i.Vector3.pool.get();
            "x-axis" === this._yawAxisType && null !== this._yawAxisEntity
              ? this._yawAxisEntity.getOrientation().getAxis(a, 0)
              : "y-axis" === this._yawAxisType && null !== this._yawAxisEntity
                ? this._yawAxisEntity.getOrientation().getAxis(a, 1)
                : "z-axis" === this._yawAxisType && null !== this._yawAxisEntity
                  ? this._yawAxisEntity.getOrientation().getAxis(a, 2)
                  : "position" === this._yawAxisType &&
                    null !== this._yawAxisEntity
                    ? a.normalize(this._yawAxisEntity.getPosition())
                    : this.getEntity().getOrientation().getAxis(a, 2),
              a.isNaN() && this.getEntity().getOrientation().getAxis(a, 2);
            const l = i.Quaternion.pool.get();
            l.copy(this.getEntity().getOrientation());
            const c = i.Quaternion.pool.get(),
              h = i.Vector3.pool.get(),
              u = i.Vector3.pool.get();
            this.getEntity().getOrientation().getAxis(u, 1),
              this.getEntity().getOrientation().getAxis(h, 2);
            const d = h.angleAroundAxis(a, u);
            c.setFromAxisAngle(u, d),
              c.normalize(c),
              l.mult(c, l),
              i.Vector3.pool.release(h),
              i.Vector3.pool.release(u);
            const p = i.Vector3.pool.get();
            l.getAxis(p, 0),
              c.setFromAxisAngle(p, this._pitchAngleSmoothedValue),
              l.mult(c, l),
              i.Vector3.pool.release(p),
              c.setFromAxisAngle(a, this._yawAngleSmoothedValue),
              l.mult(c, l),
              i.Vector3.pool.release(a),
              i.Quaternion.pool.release(c),
              this.getEntity().setOrientation(l),
              i.Quaternion.pool.release(l);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ModelAnimateController: function () {
              return ModelAnimateController;
            },
          });
        var i = s(6);
        class ModelAnimateController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s), (this._animations = []);
          }
          setAnimation(t, e, s, i) {
            if (null === t) throw new Error("Null model specified.");
            this._animations.push({
              model: t,
              jointName: e,
              animationName: s,
              interval: i,
              animationClip: null,
              rootObject: null,
              jointObject: null,
              animationMixer: null,
            });
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getTime();
            for (let e = 0, s = this._animations.length; e < s; e++) {
              const s = this._animations[e];
              if (s.model.isDestroyed()) this._animations.splice(e, 1), e--;
              else if (null !== s.model.getThreeJsObjects()[0]) {
                if (
                  (s.rootObject !== s.model.getThreeJsObjects()[0] &&
                    ((s.rootObject = s.model.getThreeJsObjects()[0]),
                      (s.animationClip = null),
                      (s.jointObject = null),
                      (s.animationMixer = null)),
                    null === s.animationClip &&
                    (s.animationClip = s.model.getAnimationClip(
                      s.animationName,
                    )),
                    null === s.jointObject)
                ) {
                  const t = s.model.getThreeJsObjectByName(s.jointName);
                  null !== t && (s.jointObject = t);
                }
                if (
                  (null === s.animationMixer &&
                    null !== s.animationClip &&
                    null !== s.jointObject &&
                    ((s.animationMixer = new i.THREE.AnimationMixer(
                      s.jointObject,
                    )),
                      s.animationMixer.clipAction(s.animationClip).play()),
                    null !== s.animationMixer)
                ) {
                  const e = i.MathUtils.clamp01(
                    (t - s.interval.min) / (s.interval.max - s.interval.min),
                  ),
                    n =
                      (s.animationClip.duration *
                        e *
                        (s.animationClip.tracks[0].times.length - 1)) /
                      s.animationClip.tracks[0].times.length;
                  s.animationMixer.setTime(n), s.animationMixer.update(0);
                }
              } else s.rootObject = null;
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitController: function () {
              return OrbitController;
            },
          });
        var i = s(6);
        class OrbitController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._dragSensitivity = 0.01),
              (this._dragSmoothness = 0.8),
              (this._yawChangeSmoothedValue = 0),
              (this._pitchChangeSmoothedValue = 0),
              (this._yawAxisType = "none"),
              (this._yawAxisEntity = null),
              (this._pitchAxisType = "none"),
              (this._pitchAxisEntity = null),
              (this._slowWhenCloseToParent = !1),
              (this._yawAngleLimits = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._yawAngleLimits.freeze(),
              (this._pitchAngleLimits = new i.Interval(
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              )),
              this._pitchAngleLimits.freeze(),
              this.addModifiedState("position"),
              this.addModifiedState("orientation");
          }
          getDragSensitivity() {
            return this._dragSensitivity;
          }
          setDragSensitivity(t) {
            this._dragSensitivity = t;
          }
          getDragSmoothness() {
            return this._dragSmoothness;
          }
          setDragSmoothness(t) {
            this._dragSmoothness = t;
          }
          getYawAxisType() {
            return this._yawAxisType;
          }
          setYawAxisType(t) {
            this._yawAxisType !== t &&
              (null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )),
                (this._yawAxisType = t),
                null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )));
          }
          getPitchAxisType() {
            return this._pitchAxisType;
          }
          setPitchAxisType(t) {
            this._pitchAxisType !== t &&
              (null !== this._pitchAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._pitchAxisType)
                  ? this.removeDependentState(
                    this._pitchAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._pitchAxisType &&
                  this.removeDependentState(
                    this._pitchAxisEntity.getName(),
                    "position",
                  )),
                (this._pitchAxisType = t),
                null !== this._pitchAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._pitchAxisType)
                  ? this.addDependentState(
                    this._pitchAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._pitchAxisType &&
                  this.addDependentState(
                    this._pitchAxisEntity.getName(),
                    "position",
                  )));
          }
          getYawAxisEntity() {
            return this._yawAxisEntity;
          }
          setYawAxisEntity(t) {
            this._yawAxisEntity !== t &&
              (null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.removeDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )),
                (this._yawAxisEntity = t),
                null !== this._yawAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._yawAxisType)
                  ? this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._yawAxisType &&
                  this.addDependentState(
                    this._yawAxisEntity.getName(),
                    "position",
                  )));
          }
          getPitchAxisEntity() {
            return this._pitchAxisEntity;
          }
          setPitchAxisEntity(t) {
            this._pitchAxisEntity !== t &&
              (null !== this._pitchAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._pitchAxisType)
                  ? this.removeDependentState(
                    this._pitchAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._pitchAxisType &&
                  this.removeDependentState(
                    this._pitchAxisEntity.getName(),
                    "position",
                  )),
                (this._pitchAxisEntity = t),
                null !== this._pitchAxisEntity &&
                (["x-axis", "y-axis", "z-axis"].includes(this._pitchAxisType)
                  ? this.addDependentState(
                    this._pitchAxisEntity.getName(),
                    "orientation",
                  )
                  : "position" === this._pitchAxisType &&
                  this.addDependentState(
                    this._pitchAxisEntity.getName(),
                    "position",
                  )));
          }
          getYawAngleLimits() {
            return this._yawAngleLimits;
          }
          setYawAngleLimits(t) {
            this._yawAngleLimits.thaw(),
              this._yawAngleLimits.copy(t),
              this._yawAngleLimits.freeze();
          }
          getPitchAngleLimits() {
            return this._pitchAngleLimits;
          }
          setPitchAngleLimits(t) {
            this._pitchAngleLimits.thaw(),
              this._pitchAngleLimits.copy(t),
              this._pitchAngleLimits.freeze();
          }
          isSlowWhenCloseToParent() {
            return this._slowWhenCloseToParent;
          }
          slowWhenCloseToParent(t) {
            this._slowWhenCloseToParent = t;
          }
          __update() {
            if (null === this.getEntity().getParent()) return;
            this.getEntity().getOrientation().isNaN() &&
              this.getEntity().setOrientation(i.Quaternion.Identity),
              this.getEntity().getPosition().isNaN() &&
              this.getEntity().setPosition(new i.Vector3(0, -1, 0));
            const t = this.getEntity().getScene().getEngine().getInput();
            let e = 1;
            t.isKeyPressed("x") && (e = 0.05), t.isShiftPressed() && (e = 5);
            const s = this.getEntity().getComponentByType("camera");
            null !== s && (e *= Math.min(1, s.getFieldOfView()));
            let n = 0,
              o = 0;
            const r = t.getActiveViewport();
            if (null !== r) {
              const s = r.getCamera();
              if (null !== s && s.getEntity() === this.getEntity()) {
                const s = t.getDraggedOffset();
                (n = -s.x * this._dragSensitivity * e),
                  (o = s.y * this._dragSensitivity * e),
                  t.isKeyPressed("d") && (n += this._dragSensitivity * e),
                  t.isKeyPressed("a") && (n -= this._dragSensitivity * e),
                  t.isKeyPressed("e") && (o -= this._dragSensitivity * e),
                  t.isKeyPressed("q") && (o += this._dragSensitivity * e);
              }
            }
            (this._yawChangeSmoothedValue = i.MathUtils.lerp(
              n,
              this._yawChangeSmoothedValue,
              this._dragSmoothness,
            )),
              (this._pitchChangeSmoothedValue = i.MathUtils.lerp(
                o,
                this._pitchChangeSmoothedValue,
                this._dragSmoothness,
              )),
              Math.abs(this._yawChangeSmoothedValue) < 1e-4 * e &&
              (this._yawChangeSmoothedValue = 0),
              Math.abs(this._pitchChangeSmoothedValue) < 1e-4 * e &&
              (this._pitchChangeSmoothedValue = 0);
            const a = i.Vector3.pool.get();
            null === this._yawAxisEntity &&
              (this._yawAxisEntity = this.getEntity().getParent()),
              "x-axis" === this._yawAxisType && null !== this._yawAxisEntity
                ? this._yawAxisEntity.getOrientation().getAxis(a, 0)
                : "y-axis" === this._yawAxisType && null !== this._yawAxisEntity
                  ? this._yawAxisEntity.getOrientation().getAxis(a, 1)
                  : "z-axis" === this._yawAxisType &&
                    null !== this._yawAxisEntity
                    ? this._yawAxisEntity.getOrientation().getAxis(a, 2)
                    : "position" === this._yawAxisType &&
                      null !== this._yawAxisEntity
                      ? a.normalize(this._yawAxisEntity.getPosition())
                      : this.getEntity().getOrientation().getAxis(a, 2),
              (a.isNaN() || a.isZero()) &&
              this.getEntity().getOrientation().getAxis(a, 2);
            const l = i.Vector3.pool.get();
            null === this._pitchAxisEntity &&
              (this._pitchAxisEntity = this.getEntity().getParent()),
              "x-axis" === this._pitchAxisType && null !== this._pitchAxisEntity
                ? this._pitchAxisEntity.getOrientation().getAxis(l, 0)
                : "y-axis" === this._pitchAxisType &&
                  null !== this._pitchAxisEntity
                  ? this._pitchAxisEntity.getOrientation().getAxis(l, 1)
                  : "z-axis" === this._pitchAxisType &&
                    null !== this._pitchAxisEntity
                    ? this._pitchAxisEntity.getOrientation().getAxis(l, 2)
                    : "position" === this._pitchAxisType &&
                      null !== this._pitchAxisEntity
                      ? l.normalize(this._pitchAxisEntity.getPosition())
                      : this.getEntity().getOrientation().getAxis(l, 0),
              (l.isNaN() || l.isZero()) &&
              this.getEntity().getOrientation().getAxis(l, 0),
              l.setNormalTo(a, l);
            const c = i.Quaternion.pool.get();
            c.setFromAxes(l, void 0, a),
              i.Vector3.pool.release(l),
              i.Vector3.pool.release(a);
            const h = i.Vector3.pool.get();
            h.rotateInverse(c, this.getEntity().getPosition());
            let u = 1;
            if (this._slowWhenCloseToParent) {
              const t = this.getEntity().getParent().getOcclusionRadius();
              u = i.MathUtils.clamp((h.magnitude() - t) / t, 0.001, 1);
            }
            const d = i.LatLonAlt.pool.get();
            i.Geometry.getLLAFromXYZOnSphere(d, h, 0),
              (d.lat += this._pitchChangeSmoothedValue * u),
              (d.lon += this._yawChangeSmoothedValue * u),
              d.lat < 1e-4 - i.MathUtils.halfPi &&
              (d.lat = 1e-4 - i.MathUtils.halfPi),
              d.lat > i.MathUtils.halfPi - 1e-4 &&
              (d.lat = i.MathUtils.halfPi - 1e-4),
              d.lat < this._pitchAngleLimits.min &&
              (d.lat = this._pitchAngleLimits.min),
              d.lat > this._pitchAngleLimits.max &&
              (d.lat = this._pitchAngleLimits.max),
              d.lon < this._yawAngleLimits.min &&
              (d.lon = this._yawAngleLimits.min),
              d.lon > this._yawAngleLimits.max &&
              (d.lon = this._yawAngleLimits.max),
              i.Geometry.getXYZFromLLAOnSphere(h, d, 0),
              i.LatLonAlt.pool.release(d),
              h.rotate(c, h),
              i.Quaternion.pool.release(c),
              this.getEntity().setPosition(h),
              i.Vector3.pool.release(h);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitKeyframeController: function () {
              return OrbitKeyframeController;
            },
          });
        var i = s(6);
        class OrbitKeyframeController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._positionKeyframes = []),
              (this._focusKeyframes = []),
              (this._upKeyframes = []),
              (this._timeOfFirstUpdate = NaN),
              (this._directionOfFirstUpdate = new i.Vector3()),
              (this._resolvePromise = null),
              (this._rejectPromise = null),
              (this._endPromise = new Promise((t, e) => {
                (this._resolvePromise = t), (this._rejectPromise = e);
              })),
              this.addModifiedState("position"),
              this.addModifiedState("velocity"),
              this.addModifiedState("orientation"),
              this.addModifiedState("angularVelocity");
          }
          setPositionKeyframe(t, e, s) {
            if (void 0 !== e) {
              const o = new PositionKeyframe(this.getEntity().getScene());
              (o.time = t),
                o.position.copy(e),
                o.relativeTo.setName(s),
                i.Sort.add(o, this._positionKeyframes, n);
            } else {
              const e = i.Sort.getIndex(t, this._positionKeyframes, o);
              e < this._positionKeyframes.length &&
                t === this._positionKeyframes[e].time &&
                this._positionKeyframes.splice(e, 1);
            }
          }
          setFocusKeyframe(t, e) {
            if (void 0 !== e) {
              const s = new FocusKeyframe(this.getEntity().getScene());
              (s.time = t),
                s.focus.setName(e),
                i.Sort.add(s, this._focusKeyframes, n);
            } else {
              const e = i.Sort.getIndex(t, this._focusKeyframes, o);
              e < this._focusKeyframes.length &&
                t === this._focusKeyframes[e].time &&
                this._focusKeyframes.splice(e, 1);
            }
          }
          setUpKeyframe(t, e) {
            if (void 0 !== e) {
              const s = new UpKeyframe();
              (s.time = t), s.up.copy(e), i.Sort.add(s, this._upKeyframes, n);
            } else {
              const e = i.Sort.getIndex(t, this._upKeyframes, o);
              e < this._upKeyframes.length &&
                t === this._upKeyframes[e].time &&
                this._upKeyframes.splice(e, 1);
            }
          }
          getEndPromise() {
            return this._endPromise;
          }
          __destroy() {
            super.__destroy(),
              null !== this._rejectPromise && this._rejectPromise();
          }
          __update() {
            const t = this.getEntity();
            let e = 0;
            if (isNaN(this._timeOfFirstUpdate)) {
              const e = t.getParent();
              if (null === e) return;
              (this._timeOfFirstUpdate = Date.now() / 1e3),
                t.getOrientation().getAxis(this._directionOfFirstUpdate, 1);
              const s = new PositionKeyframe(t.getScene());
              (s.time = 0),
                s.position.copy(t.getPosition()),
                s.relativeTo.setName(e.getName()),
                i.Sort.add(s, this._positionKeyframes, n);
              const o = new FocusKeyframe(t.getScene());
              (o.time = 0),
                o.focus.setName(""),
                i.Sort.add(o, this._focusKeyframes, n);
              const r = new UpKeyframe();
              (r.time = 0),
                t.getOrientation().getAxis(r.up, 2),
                i.Sort.add(r, this._upKeyframes, n);
            } else e = Date.now() / 1e3 - this._timeOfFirstUpdate;
            let s = !1;
            const r = i.Sort.getIndex(e, this._positionKeyframes, o);
            if (r > 0 && r < this._positionKeyframes.length) {
              const s = this._positionKeyframes[r - 1],
                n = this._positionKeyframes[r],
                o = s.relativeTo.get(),
                a = n.relativeTo.get();
              if (null !== o && null !== a) {
                let r = (e - s.time) / (n.time - s.time),
                  l = o;
                r >= 0.5 && (l = a), t.getParent() !== l && t.setParent(l);
                const c = i.Vector3.pool.get(),
                  h = i.Vector3.pool.get();
                o.getPositionRelativeToEntity(c, s.position, a),
                  a.getPositionRelativeToEntity(h, n.position, o);
                let u = Math.max(
                  0,
                  s.position.magnitude() - o.getOcclusionRadius(),
                ),
                  d = Math.max(0, h.magnitude() - o.getOcclusionRadius()),
                  p = Math.max(0, c.magnitude() - a.getOcclusionRadius()),
                  m = Math.max(
                    0,
                    n.position.magnitude() - a.getOcclusionRadius(),
                  );
                if (
                  ((u = Math.max(u, d / 1e4)),
                    (d = Math.max(d, u / 1e4)),
                    (p = Math.max(p, m / 1e4)),
                    (m = Math.max(m, d / 1e4)),
                    u !== d && p !== m)
                ) {
                  const t = (Math.pow(d, r) * Math.pow(u, 1 - r) - u) / (d - u),
                    e = (Math.pow(m, r) * Math.pow(p, 1 - r) - p) / (m - p);
                  r = i.MathUtils.lerp(t, e, r);
                }
                const _ = r * r;
                (r = _ / (2 * (_ - r) + 1)),
                  o.getPositionRelativeToEntity(c, s.position, l),
                  a.getPositionRelativeToEntity(h, n.position, l);
                const g = i.Vector3.pool.get();
                o === a ? g.slerp(c, h, r) : g.lerp(c, h, r),
                  t.setPosition(g),
                  i.Vector3.pool.release(g),
                  i.Vector3.pool.release(c),
                  i.Vector3.pool.release(h);
              }
            } else if (r === this._positionKeyframes.length) {
              const e =
                this._positionKeyframes[this._positionKeyframes.length - 1],
                i = e.relativeTo.get();
              t.getParent() !== i && t.setParent(i),
                t.setPosition(e.position),
                (s = !0);
            }
            const a = i.Vector3.pool.get();
            a.setMagnitude(t.getPosition(), -1);
            const l = i.Vector3.pool.get();
            t.getOrientation().getAxis(l, 2);
            let c = !1;
            const h = i.Sort.getIndex(e, this._focusKeyframes, o);
            if (h > 0 && h < this._focusKeyframes.length) {
              const s = this._focusKeyframes[h - 1],
                n = this._focusKeyframes[h],
                o = s.focus.get(),
                r = n.focus.get(),
                l = t.getParent();
              if (
                !(
                  ("" !== s.focus.getName() && null === o) ||
                  ("" !== n.focus.getName() && null === r) ||
                  null === l
                )
              ) {
                let c = (e - s.time) / (n.time - s.time);
                const h = c * c;
                c = h / (2 * (h - c) + 1);
                const u = i.Vector3.pool.get(),
                  d = i.Vector3.pool.get();
                "" !== s.focus.getName()
                  ? (l.getPositionRelativeToEntity(u, t.getPosition(), o),
                    u.setMagnitude(u, -1))
                  : u.copy(this._directionOfFirstUpdate),
                  "" !== n.focus.getName()
                    ? (l.getPositionRelativeToEntity(d, t.getPosition(), r),
                      d.setMagnitude(d, -1))
                    : d.copy(this._directionOfFirstUpdate),
                  a.slerp(u, d, c),
                  i.Vector3.pool.release(u),
                  i.Vector3.pool.release(d);
              }
            } else if (h === this._focusKeyframes.length) {
              const e = this._focusKeyframes[this._focusKeyframes.length - 1],
                s = e.focus.get(),
                i = t.getParent();
              ("" !== e.focus.getName() && null === s) ||
                null === i ||
                (i.getPositionRelativeToEntity(a, t.getPosition(), s),
                  a.setMagnitude(a, -1)),
                (c = !0);
            } else {
              const e = this._focusKeyframes[0],
                s = e.focus.get(),
                i = t.getParent();
              ("" !== e.focus.getName() && null === s) ||
                null === i ||
                ("" !== e.focus.getName()
                  ? (i.getPositionRelativeToEntity(a, t.getPosition(), s),
                    a.setMagnitude(a, -1))
                  : a.copy(this._directionOfFirstUpdate));
            }
            let u = !1;
            const d = i.Sort.getIndex(e, this._upKeyframes, o);
            if (d > 0 && d < this._upKeyframes.length) {
              const t = this._upKeyframes[d - 1],
                s = this._upKeyframes[d];
              let i = (e - t.time) / (s.time - t.time);
              const n = i * i;
              (i = n / (2 * (n - i) + 1)), l.slerp(t.up, s.up, i);
            } else if (d === this._upKeyframes.length) {
              const t = this._upKeyframes[this._upKeyframes.length - 1];
              l.copy(t.up), (u = !0);
            }
            const p = i.Quaternion.pool.get();
            l.setNormalTo(a, l),
              p.setFromAxes(void 0, a, l),
              t.setOrientation(p),
              i.Quaternion.pool.release(p),
              i.Vector3.pool.release(a),
              s &&
              c &&
              u &&
              ((this._rejectPromise = null), this._resolvePromise());
          }
        }
        class Keyframe {
          constructor() {
            this.time = NaN;
          }
        }
        class PositionKeyframe extends Keyframe {
          constructor(t) {
            super(),
              (this.position = new i.Vector3()),
              (this.relativeTo = new i.EntityRef(t));
          }
        }
        class FocusKeyframe extends Keyframe {
          constructor(t) {
            super(), (this.focus = new i.EntityRef(t));
          }
        }
        class UpKeyframe extends Keyframe {
          constructor() {
            super(), (this.up = new i.Vector3());
          }
        }
        function n(t, e) {
          return t.time < e.time;
        }
        function o(t, e) {
          return t.time < e;
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitalElementsController: function () {
              return OrbitalElementsController;
            },
            OrbitalElementsKeyFrame: function () {
              return OrbitalElementsKeyFrame;
            },
          });
        var i = s(6);
        class OrbitalElementsController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._orbitalElementsKeyFrames = []),
              this.setCoverage(
                new i.Interval(
                  Number.POSITIVE_INFINITY,
                  Number.NEGATIVE_INFINITY,
                ),
              ),
              this.addModifiedState("position"),
              this.addModifiedState("velocity");
          }
          getNumOrbitalElements() {
            return this._orbitalElementsKeyFrames.length;
          }
          getOrbitalElements(t) {
            return this._orbitalElementsKeyFrames[t];
          }
          addOrbitalElements(t, e) {
            i.Sort.add(
              { time: t, oe: e },
              this._orbitalElementsKeyFrames,
              n,
              r,
            ),
              this._updateCoverage();
          }
          removeOrbitalElements(t) {
            if (t < 0 || this._orbitalElementsKeyFrames.length <= t)
              throw new Error(
                `Invalid index for ${this}.removeOrbitalElements`,
              );
            this._orbitalElementsKeyFrames.splice(t, 1), this._updateCoverage();
          }
          __updatePositionAtTime(t, e) {
            this._getPositionAtTime(t, e);
          }
          __updateVelocityAtTime(t, e) {
            this._getVelocityAtTime(t, e);
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getTime();
            this._getPositionAtTime(a, t) && this.getEntity().setPosition(a),
              this._getVelocityAtTime(l, t) && this.getEntity().setVelocity(l);
          }
          _getPositionAtTime(t, e) {
            const s = i.Sort.getIndex(e, this._orbitalElementsKeyFrames, o),
              n = this._orbitalElementsKeyFrames[Math.max(s - 1, 0)],
              r =
                this._orbitalElementsKeyFrames[
                Math.min(s, this._orbitalElementsKeyFrames.length - 1)
                ],
              a = i.Vector3.pool.get(),
              c = i.Vector3.pool.get();
            n.oe.project(a, l, e), r.oe.project(c, l, e);
            const h = i.MathUtils.clamp01(
              r.time !== n.time ? (e - n.time) / (r.time - n.time) : 0,
            );
            return (
              t.slerp(a, c, h),
              i.Vector3.pool.release(a),
              i.Vector3.pool.release(c),
              !0
            );
          }
          _getVelocityAtTime(t, e) {
            const s = i.Sort.getIndex(e, this._orbitalElementsKeyFrames, o),
              n = this._orbitalElementsKeyFrames[Math.max(s - 1, 0)],
              r =
                this._orbitalElementsKeyFrames[
                Math.min(s, this._orbitalElementsKeyFrames.length - 1)
                ],
              l = i.Vector3.pool.get(),
              c = i.Vector3.pool.get();
            n.oe.project(a, l, e), r.oe.project(a, c, e);
            const h = i.MathUtils.clamp01(
              r.time !== n.time ? (e - n.time) / (r.time - n.time) : 0,
            );
            return (
              t.slerp(l, c, h),
              i.Vector3.pool.release(l),
              i.Vector3.pool.release(c),
              !0
            );
          }
          _updateCoverage() {
            const t = new i.Interval(
              Number.POSITIVE_INFINITY,
              Number.NEGATIVE_INFINITY,
            );
            this._orbitalElementsKeyFrames.length > 1 &&
              ((t.min = Math.min(
                t.min,
                this._orbitalElementsKeyFrames[0].time,
              )),
                (t.max = Math.max(
                  t.max,
                  this._orbitalElementsKeyFrames[
                    this._orbitalElementsKeyFrames.length - 1
                  ].time,
                ))),
              this.setCoverage(t);
          }
        }
        class OrbitalElementsKeyFrame {
          constructor() {
            (this.time = 0), (this.oe = new i.OrbitalElements());
          }
        }
        const n = (t, e) => t.time < e.time,
          o = (t, e) => t.time < e,
          r = (t, e) => t.time === e.time,
          a = new i.Vector3(),
          l = new i.Vector3();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            PickController: function () {
              return PickController;
            },
          });
        var i = s(6);
        class PickController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._pickedEntity = null),
              (this._callback = null),
              (this._triggerOnHover = !1),
              (this._pickedPosition = new i.Vector3()),
              this._pickedPosition.freeze();
          }
          getPickedEntity() {
            return this._pickedEntity;
          }
          setPickedEntity(t) {
            this._pickedEntity = t;
          }
          getCallback() {
            return this._callback;
          }
          setCallback(t) {
            this._callback = t;
          }
          getTriggerOnHover() {
            return this._triggerOnHover;
          }
          setTriggerOnHover(t) {
            this._triggerOnHover = t;
          }
          getPickedPosition() {
            return this._pickedPosition;
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getInput();
            if (
              (t.isSelected() || this._triggerOnHover) &&
              null !== this._callback &&
              null !== this._pickedEntity
            ) {
              const e = t.getActiveViewport();
              if (null !== e) {
                const s = e.getCamera();
                if (null !== s && s.getEntity() === this.getEntity()) {
                  const n = i.Vector3.pool.get();
                  e.getNormalSpacePositionFromPixelSpacePosition(
                    n,
                    t.getCursorPosition(),
                  ),
                    s.getCameraSpacePositionFromNormalSpacePosition(n, n),
                    n.normalize(n);
                  const o = i.Interval.pool.get(),
                    r = this.getEntity()
                      .getParent()
                      .getComponentByType("spheroid");
                  if (null !== r) {
                    const t = r.getEquatorialRadius() / r.getPolarRadius();
                    n.rotateInverse(this._pickedEntity.getOrientation(), n),
                      (n.z *= t);
                    const e = i.Vector3.pool.get();
                    e.copy(this._pickedEntity.getCameraSpacePosition(s)),
                      e.rotateInverse(this._pickedEntity.getOrientation(), e),
                      (e.z *= t),
                      i.Geometry.getLineSphereIntersectionWithLineStartAtOrigin(
                        o,
                        n,
                        e,
                        r.getEquatorialRadius(),
                      ),
                      (n.z /= t),
                      n.rotate(this._pickedEntity.getOrientation(), n),
                      i.Vector3.pool.release(e);
                  } else {
                    const t = this._pickedEntity.getCameraSpacePosition(s);
                    i.Geometry.getLineSphereIntersectionWithLineStartAtOrigin(
                      o,
                      n,
                      t,
                      this._pickedEntity.getOcclusionRadius(),
                    );
                  }
                  Number.isNaN(o.min) ||
                    (this._pickedPosition.thaw(),
                      this._pickedPosition.mult(n, o.min),
                      s
                        .getEntity()
                        .getPositionRelativeToEntity(
                          this._pickedPosition,
                          this._pickedPosition,
                          this._pickedEntity,
                        ),
                      this._pickedPosition.freeze(),
                      this.getEntity()
                        .getScene()
                        .getEngine()
                        .addCallback(
                          this._callback.bind(void 0, this._pickedPosition),
                          !1,
                        )),
                    i.Interval.pool.release(o),
                    i.Vector3.pool.release(n);
                }
              }
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            RollController: function () {
              return RollController;
            },
          });
        var i = s(6);
        class RollController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._rollSensitivity = 0.01),
              (this._rollSmoothness = 0.8),
              (this._rollAngleSmoothedValue = 0),
              this.addModifiedState("orientation");
          }
          getRollSensitivity() {
            return this._rollSensitivity;
          }
          setRollSensitivity(t) {
            this._rollSensitivity = t;
          }
          getRollSmoothness() {
            return this._rollSmoothness;
          }
          setRollSmoothness(t) {
            this._rollSmoothness = t;
          }
          __update() {
            this.getEntity().getOrientation().isNaN() &&
              this.getEntity().setOrientation(i.Quaternion.Identity);
            let t = 0;
            const e = this.getEntity().getScene().getEngine().getInput(),
              s = e.getActiveViewport();
            if (null !== s) {
              const n = s.getCamera();
              if (null !== n && n.getEntity() === this.getEntity()) {
                let s = 1;
                e.isKeyPressed("x") && (s = 0.05),
                  e.isShiftPressed() && (s = 5);
                const n = e.getRotatedOffset();
                0 !== n &&
                  (t += i.MathUtils.clamp(
                    n * this._rollSensitivity * s,
                    -0.1,
                    0.1,
                  )),
                  e.isKeyPressed("c") && (t += this._rollSensitivity * s),
                  e.isKeyPressed("z") && (t -= this._rollSensitivity * s);
              }
            }
            if (
              ((this._rollAngleSmoothedValue = i.MathUtils.lerp(
                t,
                this._rollAngleSmoothedValue,
                this._rollSmoothness,
              )),
                Math.abs(this._rollAngleSmoothedValue) < 1e-4 &&
                (this._rollAngleSmoothedValue = 0),
                0 !== this._rollAngleSmoothedValue)
            ) {
              const t = i.Quaternion.pool.get(),
                e = i.Quaternion.pool.get();
              e.setFromAxisAngle(i.Vector3.YAxis, this._rollAngleSmoothedValue),
                t.mult(this.getEntity().getOrientation(), e),
                this.getEntity().setOrientation(t),
                i.Quaternion.pool.release(t),
                i.Quaternion.pool.release(e);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            RotateController: function () {
              return RotateController;
            },
          });
        var i = s(6);
        class RotateController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._rotation = new i.Quaternion()),
              this._rotation.freeze(),
              (this._rotatingPosition = !0),
              (this._rotatingOrientation = !0),
              this.addModifiedState("position"),
              this.addModifiedState("orientation");
          }
          getRotation() {
            return this._rotation;
          }
          setRotation(t) {
            this._rotation.thaw(),
              this._rotation.copy(t),
              this._rotation.freeze();
          }
          isRotatingPosition() {
            return this._rotatingPosition;
          }
          setRotatingPosition(t) {
            (this._rotatingPosition = t),
              t
                ? this.addModifiedState("position")
                : this.removeModifiedState("position");
          }
          isRotatingOrientation() {
            return this._rotatingOrientation;
          }
          setRotatingOrientation(t) {
            (this._rotatingOrientation = t),
              t
                ? this.addModifiedState("orientation")
                : this.removeModifiedState("orientation");
          }
          __updatePositionAtTime(t, e) {
            this._rotatingPosition && t.rotate(this._rotation, t);
          }
          __updateVelocityAtTime(t, e) {
            this._rotatingPosition && t.rotate(this._rotation, t);
          }
          __updateOrientationAtTime(t, e) {
            this._rotatingOrientation && t.mult(this._rotation, t);
          }
          __update() {
            if (this._rotatingPosition) {
              const t = i.Vector3.pool.get();
              t.rotate(this._rotation, this.getEntity().getPosition()),
                this.getEntity().setPosition(t),
                i.Vector3.pool.release(t);
            }
            if (this._rotatingOrientation) {
              const t = i.Quaternion.pool.get();
              t.mult(this._rotation, this.getEntity().getOrientation()),
                this.getEntity().setOrientation(t),
                i.Quaternion.pool.release(t);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            RotateByEntityOrientationController: function () {
              return RotateByEntityOrientationController;
            },
          });
        var i = s(6);
        class RotateByEntityOrientationController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._entityRef = new i.EntityRef(this.getEntity().getScene())),
              (this._rotatingPosition = !0),
              (this._rotatingOrientation = !0),
              this.addModifiedState("position"),
              this.addModifiedState("orientation");
          }
          setEntityForOrientation(t) {
            "" !== this._entityRef.getName() &&
              this.addDependentState(this._entityRef.getName(), "orientation"),
              this._entityRef.setName(t),
              this.addDependentState(t, "orientation");
          }
          isRotatingPosition() {
            return this._rotatingPosition;
          }
          setRotatingPosition(t) {
            (this._rotatingPosition = t),
              t
                ? this.addModifiedState("position")
                : this.removeModifiedState("position");
          }
          isRotatingOrientation() {
            return this._rotatingOrientation;
          }
          setRotatingOrientation(t) {
            (this._rotatingOrientation = t),
              t
                ? this.addModifiedState("orientation")
                : this.removeModifiedState("orientation");
          }
          __updatePositionAtTime(t, e) {
            if (this._rotatingPosition) {
              const s =
                "" !== this._entityRef.getName()
                  ? this._entityRef.get()
                  : this.getEntity()
                    .getScene()
                    .getEntity(this.getEntity().getParentAtTime(e));
              if (null !== s) {
                const n = i.Quaternion.pool.get();
                s.getOrientationAtTime(n, e),
                  t.rotate(n, t),
                  i.Quaternion.pool.release(n);
              }
            }
          }
          __updateVelocityAtTime(t, e) {
            if (this._rotatingPosition) {
              const s =
                "" !== this._entityRef.getName()
                  ? this._entityRef.get()
                  : this.getEntity()
                    .getScene()
                    .getEntity(this.getEntity().getParentAtTime(e));
              if (null !== s) {
                const n = i.Quaternion.pool.get();
                s.getOrientationAtTime(n, e),
                  t.rotate(n, t),
                  i.Quaternion.pool.release(n);
              }
            }
          }
          __updateOrientationAtTime(t, e) {
            if (this._rotatingOrientation) {
              const s =
                "" !== this._entityRef.getName()
                  ? this._entityRef.get()
                  : this.getEntity()
                    .getScene()
                    .getEntity(this.getEntity().getParentAtTime(e));
              if (null !== s) {
                const n = i.Quaternion.pool.get();
                s.getOrientationAtTime(n, e),
                  t.mult(n, t),
                  i.Quaternion.pool.release(n);
              }
            }
          }
          __update() {
            const t =
              "" !== this._entityRef.getName()
                ? this._entityRef.get()
                : this.getEntity().getParent();
            if (null !== t) {
              if (this._rotatingPosition) {
                const e = i.Vector3.pool.get();
                e.rotate(t.getOrientation(), this.getEntity().getPosition()),
                  this.getEntity().setPosition(e),
                  i.Vector3.pool.release(e);
              }
              if (this._rotatingOrientation) {
                const e = i.Quaternion.pool.get();
                e.mult(t.getOrientation(), this.getEntity().getOrientation()),
                  this.getEntity().setOrientation(e),
                  i.Quaternion.pool.release(e);
              }
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ScaleController: function () {
              return ScaleController;
            },
          });
        var i = s(6);
        class ScaleController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._scale = 1),
              this.addModifiedState("position");
          }
          getScale() {
            return this._scale;
          }
          setScale(t) {
            this._scale = t;
          }
          __updatePositionAtTime(t, e) {
            t.mult(t, this._scale);
          }
          __updateVelocityAtTime(t, e) {
            t.mult(t, this._scale);
          }
          __update() {
            const t = i.Vector3.pool.get();
            t.mult(this.getEntity().getPosition(), this._scale),
              this.getEntity().setPosition(t),
              i.Vector3.pool.release(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SelectController: function () {
              return SelectController;
            },
          });
        var i = s(6);
        class SelectController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s), (this._callback = null);
          }
          getCallback() {
            return this._callback;
          }
          setCallback(t) {
            this._callback = t;
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getInput();
            if (t.isSelected() && null !== this._callback) {
              const e = t.getActiveViewport();
              if (null !== e) {
                const s = e.getCamera();
                if (null !== s && s.getEntity() === this.getEntity()) {
                  const n = i.Vector3.pool.get();
                  e.getNormalSpacePositionFromPixelSpacePosition(
                    n,
                    t.getSelectedPosition(),
                  );
                  let o = null,
                    r = 0;
                  const a = i.Vector2.pool.get();
                  a.set(n.x, n.y);
                  const l = this.getEntity().getScene().getNumEntities();
                  for (let t = 0; t < l; t++) {
                    const e = this.getEntity().getScene().getEntity(t);
                    if (e.isEnabled()) {
                      const t = e.getComponentByType("label");
                      if (null !== t && "loaded" === t.getLoadState()) {
                        const i = t.getNormalSpaceBounds(s);
                        if (void 0 !== i && i.contains(a)) {
                          const t = e.getCameraSpacePosition(s).magnitude();
                          (null === o || r > t) && ((o = e), (r = t));
                        }
                      }
                    }
                  }
                  i.Vector2.pool.release(a),
                    null === o &&
                    (s.getCameraSpacePositionFromNormalSpacePosition(n, n),
                      n.mult(n, 1 / n.magnitude()),
                      (o = s.getNearestIntersectingEntity(n))),
                    i.Vector3.pool.release(n),
                    this.getEntity()
                      .getScene()
                      .getEngine()
                      .addCallback(this._callback.bind(null, o), !1);
                }
              }
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SetParentController: function () {
              return SetParentController;
            },
          });
        var i = s(6);
        class SetParentController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._parent = new i.EntityRef(this.getEntity().getScene()));
          }
          getParent() {
            return this._parent.getName();
          }
          setParent(t) {
            "" !== this._parent.getName() &&
              this.removeDependentState(this._parent.getName(), "position"),
              this._parent.setName(t),
              "" !== this._parent.getName() &&
              this.addDependentState(this._parent.getName(), "position");
          }
          __update() {
            const t = this._parent.get();
            this.getEntity().setParent(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SpinController: function () {
              return SpinController;
            },
          });
        var i = s(6);
        class SpinController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._axis = new i.Vector3(0, 0, 1)),
              this._axis.freeze(),
              (this._axisRelativeToEntity = !0),
              (this._rate = 0),
              (this._referenceAngle = 0),
              (this._referenceTime = void 0),
              (this._clampedToRealTime = !1),
              (this._usingRealTime = !1),
              (this._rotatingPosition = !1),
              (this._joint = ""),
              (this._jointObject = null),
              (this._model = null),
              (this._lastTime = s.getScene().getEngine().getTime()),
              this.addModifiedState("orientation");
          }
          getAxis() {
            return this._axis;
          }
          isAxisRelativeToEntity() {
            return this._axisRelativeToEntity;
          }
          setAxis(t, e) {
            this._axis.thaw(),
              this._axis.copy(t),
              this._axis.freeze(),
              (this._axisRelativeToEntity = e);
          }
          getRate() {
            return this._rate;
          }
          setRate(t) {
            this._rate = t;
          }
          getReferenceAngle() {
            return this._referenceAngle;
          }
          setReferenceAngle(t) {
            this._referenceAngle = t;
          }
          getReferenceTime() {
            return this._referenceTime;
          }
          setReferenceTime(t) {
            this._referenceTime = t;
          }
          isClampedToRealTime() {
            return this._clampedToRealTime;
          }
          setClampedToRealTime(t) {
            this._clampedToRealTime = t;
          }
          isUsingRealTime() {
            return this._usingRealTime;
          }
          setUsingRealTime(t) {
            this._usingRealTime = t;
          }
          isRotatingPosition() {
            return this._rotatingPosition;
          }
          setRotatingPosition(t) {
            (this._rotatingPosition = t),
              t
                ? this.addModifiedState("position")
                : this.removeModifiedState("position");
          }
          setJoint(t, e) {
            if (((this._joint = t), e)) this._model = e;
            else {
              const t = this.getEntity().get("model");
              null !== t && (this._model = t);
            }
            "" !== this._joint
              ? this.removeModifiedState("orientation")
              : this.addModifiedState("orientation");
          }
          __updatePositionAtTime(t, e) {
            if (this._rotatingPosition) {
              let s = 0;
              this._usingRealTime ||
                (void 0 !== this._referenceTime &&
                  ((s = e - this._referenceTime),
                    (s -= this._referenceAngle / this._rate)));
              const n = i.Quaternion.pool.get();
              if (
                (n.setFromAxisAngle(this._axis, this._rate * s),
                  null === this._jointObject)
              ) {
                if (this._axisRelativeToEntity) {
                  const t = i.Quaternion.pool.get();
                  this.getEntity().getOrientationAtTime(t, e),
                    n.mult(t, n),
                    n.multInverseR(n, t),
                    i.Quaternion.pool.release(t);
                }
                t.rotate(n, t);
              }
              i.Quaternion.pool.release(n);
            }
          }
          __updateOrientationAtTime(t, e) {
            t.isNaN() && t.copy(i.Quaternion.Identity);
            let s = 0;
            this._usingRealTime ||
              (void 0 !== this._referenceTime &&
                ((s = e - this._referenceTime),
                  (s -= this._referenceAngle / this._rate)));
            const n = i.Quaternion.pool.get();
            n.setFromAxisAngle(this._axis, this._rate * s),
              null === this._jointObject &&
              (this._axisRelativeToEntity &&
                (n.mult(t, n), n.multInverseR(n, t)),
                t.mult(n, t),
                t.normalize(t)),
              i.Quaternion.pool.release(n);
          }
          __update() {
            this.getEntity().getOrientation().isNaN() &&
              this.getEntity().setOrientation(i.Quaternion.Identity);
            const t = this.getEntity().getScene().getEngine();
            let e = 0;
            if (this._usingRealTime) e = t.getDeltaTime();
            else if (void 0 !== this._referenceTime)
              (e = t.getTime() - this._referenceTime),
                (e -= this._referenceAngle / this._rate);
            else if (
              ((e = t.getTime() - this._lastTime), this._clampedToRealTime)
            ) {
              const s = t.getDeltaTime();
              e = i.MathUtils.clamp(e, -s, s);
            }
            const s = i.Quaternion.pool.get();
            if (
              (s.setFromAxisAngle(this._axis, this._rate * e),
                null !== this._jointObject &&
                null !== this._model.getThreeJsObjects()[0] &&
                (this._jointObject = null),
                "" !== this._joint &&
                (null === this._jointObject ||
                  this._jointObject.name !== this._joint) &&
                null !== this._model)
            ) {
              const t = this._model.getThreeJsObjectByName(this._joint);
              null !== t && (this._jointObject = t);
            }
            const o = this.getEntity().getOrientation();
            if (null !== this._jointObject)
              this._axisRelativeToEntity ||
                (s.multInverseL(o, s), s.mult(s, o)),
                n.set(s.x, s.y, s.z, s.w),
                this._jointObject.quaternion.multiplyQuaternions(
                  n,
                  this._jointObject.quaternion,
                ),
                this._rotatingPosition &&
                this._jointObject.position.applyQuaternion(n);
            else {
              const t = i.Quaternion.pool.get();
              this._axisRelativeToEntity &&
                (s.mult(o, s), s.multInverseR(s, o)),
                t.mult(s, o),
                t.normalize(t);
              const e = i.Vector3.pool.get();
              if (
                (e.mult(this._axis, this._rate),
                  this._axisRelativeToEntity && e.rotate(t, e),
                  this.getEntity().setOrientation(t),
                  this.getEntity().setAngularVelocity(e),
                  i.Vector3.pool.release(e),
                  i.Quaternion.pool.release(t),
                  this._rotatingPosition)
              ) {
                const t = i.Vector3.pool.get();
                t.rotate(s, this.getEntity().getPosition()),
                  this.getEntity().setPosition(t),
                  i.Vector3.pool.release(t);
              }
            }
            i.Quaternion.pool.release(s), (this._lastTime = t.getTime());
          }
        }
        const n = new i.THREE.Quaternion();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TapController: function () {
              return TapController;
            },
          });
        var i = s(6);
        class TapController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s), (this._tapCallback = null);
          }
          getTapCallback() {
            return this._tapCallback;
          }
          setTapCallback(t) {
            this._tapCallback = t;
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getInput();
            (!t.isSelected() && t.getDraggedOffset().isZero()) ||
              (null !== this._tapCallback && this._tapCallback());
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TransitionController: function () {
              return TransitionController;
            },
          });
        var i = s(6);
        class TransitionController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._initialPosition = new i.Vector3()),
              this._initialPosition.copy(s.getPosition()),
              (this._initialOrientation = new i.Quaternion()),
              this._initialOrientation.copy(s.getOrientation()),
              (this._initialParent = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._transitionStart = Number.NaN),
              (this._transitionTime = 1),
              (this._transitionFunction = this._lerpTransitionFunction),
              (this._resolvePromise = null),
              (this._rejectPromise = null),
              (this._endPromise = new Promise((t, e) => {
                (this._resolvePromise = t), (this._rejectPromise = e);
              }));
            const n = this.getEntity().getParent();
            null !== n && this._initialParent.setName(n.getName());
            const o = this.getEntity().getControllerByType("transition");
            null !== o && this.getEntity().removeController(o);
            const r = this.getEntity().addController(
              "setParent",
              "transitionSetParent",
              this.getEntity().getController(0),
            );
            null !== n && r.setParent(n.getName());
          }
          getTransitionTime() {
            return this._transitionTime;
          }
          setTransitionTime(t) {
            this._transitionTime = t;
          }
          setTransitionFunction(t) {
            this._transitionFunction = t;
          }
          getParent() {
            const t = this.getEntity().getController("transitionSetParent");
            if (null !== t) return t.getName();
            {
              const t = this.getEntity().getParent();
              return null !== t ? t.getName() : null;
            }
          }
          setParent(t) {
            const e = this.getEntity().getController("transitionSetParent");
            null !== e && e.setParent(t);
          }
          getEndPromise() {
            return this._endPromise;
          }
          __destroy() {
            super.__destroy();
            const t = this.getEntity().getController("transitionSetParent");
            null !== t && this.getEntity().removeController(t),
              0 !== this._transitionTime &&
              this._rejectPromise(
                "Transition controller was destroyed before completing.",
              );
          }
          __update() {
            const t = this._initialParent.get(),
              e = this.getEntity().getParent();
            null === e &&
              ((this._transitionTime = 0),
                this.getEntity().removeController(this),
                this._rejectPromise(
                  "The final parent was destroyed or disabled before the transition could complete.",
                )),
              Number.isNaN(this._transitionStart) &&
              (this._transitionStart = Date.now() / 1e3);
            const s = this.getEntity().getController("transitionSetParent");
            if (null !== s) {
              if (null === t)
                return void this.getEntity()
                  .getScene()
                  .getEngine()
                  .addCallback(() => {
                    (this._transitionTime = 0),
                      this.getEntity().removeController(this),
                      "" !== this._initialParent.getName()
                        ? this._rejectPromise(
                          `The initial parent "${this._initialParent.getName()}" was destroyed or disabled before the first half of the transition could complete.`,
                        )
                        : this._resolvePromise();
                  }, !1);
              Date.now() / 1e3 - this._transitionStart >=
                this._transitionTime / 2 || t === e
                ? (this.getEntity().removeController(s),
                  t !== e &&
                  null !== t &&
                  null !== e &&
                  t.getPositionRelativeToEntity(
                    this._initialPosition,
                    this._initialPosition,
                    e,
                  ))
                : this.getEntity().setParent(t);
            }
            const n = this.getEntity().getPosition(),
              o = this.getEntity().getOrientation();
            let r = i.MathUtils.clamp01(
              (Date.now() / 1e3 - this._transitionStart) / this._transitionTime,
            );
            Number.isNaN(r) && (r = 1),
              this._transitionFunction(
                this.getEntity(),
                this._initialPosition,
                n,
                this._initialOrientation,
                o,
                r,
              ),
              Date.now() / 1e3 - this._transitionStart >=
              this._transitionTime &&
              this.getEntity()
                .getScene()
                .getEngine()
                .addCallback(() => {
                  (this._transitionTime = 0),
                    this.getEntity().removeController(this),
                    this._resolvePromise();
                }, !1);
          }
          _lerpTransitionFunction(t, e, s, n, o, r) {
            const a = i.Vector3.pool.get(),
              l = i.Quaternion.pool.get();
            a.lerp(e, s, r),
              l.slerp(n, o, r),
              t.setPosition(a),
              t.setOrientation(l),
              i.Vector3.pool.release(a),
              i.Quaternion.pool.release(l);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TranslateController: function () {
              return TranslateController;
            },
          });
        var i = s(6);
        class TranslateController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._translation = new i.Vector3(0, 0, 0)),
              this._translation.freeze(),
              (this._relativeToOrientation = !1),
              this.addModifiedState("position");
          }
          getTranslation() {
            return this._translation;
          }
          setTranslation(t) {
            this._translation.thaw(),
              this._translation.copy(t),
              this._translation.freeze();
          }
          setRelativeToOrientation(t) {
            this._relativeToOrientation = t;
          }
          __updatePositionAtTime(t, e) {
            const s = i.Vector3.pool.get();
            if (this._relativeToOrientation) {
              const t = i.Quaternion.pool.get();
              this.getEntity().getOrientationAtTime(t, e),
                s.rotate(t, this._translation),
                i.Quaternion.pool.release(t);
            } else s.copy(this._translation);
            t.add(s, t), i.Vector3.pool.release(s);
          }
          __update() {
            const t = i.Vector3.pool.get();
            this._relativeToOrientation
              ? t.rotate(this.getEntity().getOrientation(), this._translation)
              : t.copy(this._translation),
              t.add(t, this.getEntity().getPosition()),
              this.getEntity().setPosition(t),
              i.Vector3.pool.release(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ZoomController: function () {
              return ZoomController;
            },
          });
        var i = s(6);
        class ZoomController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._zoomSensitivity = 0.05),
              (this._zoomSmoothness = 0.8),
              (this._zoomSmoothedValue = 1),
              (this._distanceClamp = new i.Interval(
                0.001,
                Number.POSITIVE_INFINITY,
              )),
              this._distanceClamp.freeze(),
              (this._useSpheroidRadiusForDistance = !1),
              this.addModifiedState("position");
          }
          getZoomSensitivity() {
            return this._zoomSensitivity;
          }
          setZoomSensitivity(t) {
            this._zoomSensitivity = t;
          }
          getZoomSmoothness() {
            return this._zoomSmoothness;
          }
          setZoomSmoothness(t) {
            this._zoomSmoothness = t;
          }
          getDistanceClamp() {
            return this._distanceClamp;
          }
          setDistanceClamp(t) {
            this._distanceClamp.thaw(),
              this._distanceClamp.copy(t),
              this._distanceClamp.freeze();
          }
          getUseSpheroidRadiusForDistance() {
            return this._useSpheroidRadiusForDistance;
          }
          setUseSpheroidRadiusForDistance(t) {
            this._useSpheroidRadiusForDistance = t;
          }
          __update() {
            const t = this.getEntity().getScene().getEngine().getInput();
            let e = 1;
            const s = t.getActiveViewport();
            if (null !== s) {
              const i = s.getCamera();
              if (null !== i && i.getEntity() === this.getEntity()) {
                let s = 1;
                t.isKeyPressed("x") && (s = 0.05),
                  t.isShiftPressed() && (s = 5);
                const i = t.getZoomedOffset();
                0 !== i && (e *= Math.pow(2, i * this._zoomSensitivity * s)),
                  t.isKeyPressed("w") &&
                  (e /= Math.pow(2, this._zoomSensitivity * s)),
                  t.isKeyPressed("s") &&
                  (e *= Math.pow(2, this._zoomSensitivity * s));
              }
            }
            (this._zoomSmoothedValue = i.MathUtils.clamp(
              i.MathUtils.lerp(
                e,
                this._zoomSmoothedValue,
                this._zoomSmoothness,
              ),
              0.8,
              1.25,
            )),
              Math.abs(1 - this._zoomSmoothedValue) < 1e-7 &&
              (this._zoomSmoothedValue = 1);
            let n = 1;
            const o = i.LatLonAlt.pool.get();
            if (
              this._useSpheroidRadiusForDistance &&
              null !== this.getEntity().getParent()
            ) {
              const t = this.getEntity()
                .getParent()
                .getComponentByType("spheroid");
              if (null !== t) {
                const e = i.Vector3.pool.get();
                e.rotateInverse(
                  this.getEntity().getParent().getOrientation(),
                  this.getEntity().getPosition(),
                ),
                  t.llaFromXYZ(o, e),
                  (n = o.alt),
                  i.Vector3.pool.release(e);
              } else
                n =
                  this.getEntity().getPosition().magnitude() -
                  this.getEntity().getParent().getOcclusionRadius();
            } else n = this.getEntity().getPosition().magnitude();
            Number.isNaN(n) && (n = 1),
              (n *= this._zoomSmoothedValue),
              n < this._distanceClamp.min &&
              ((n = this._distanceClamp.min), (this._zoomSmoothedValue = 1)),
              n > this._distanceClamp.max &&
              ((n = this._distanceClamp.max), (this._zoomSmoothedValue = 1));
            const r = i.Vector3.pool.get();
            let a = n;
            if (
              this._useSpheroidRadiusForDistance &&
              null !== this.getEntity().getParent()
            ) {
              const t = this.getEntity()
                .getParent()
                .getComponentByType("spheroid");
              null !== t
                ? ((o.alt = n), t.xyzFromLLA(r, o), (a = r.magnitude()))
                : (a = n + this.getEntity().getParent().getOcclusionRadius());
            }
            r.normalize(this.getEntity().getPosition()),
              r.mult(r, a),
              this.getEntity().setPosition(r),
              i.Vector3.pool.release(r),
              i.LatLonAlt.pool.release(o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Types: function () {
              return Types;
            },
          });
        var i = s(6);
        class Types { }
        (Types.Components = new Map()),
          Types.Components.set("atmosphere", i.AtmosphereComponent),
          Types.Components.set("camera", i.CameraComponent),
          Types.Components.set("cmts", i.CMTSComponent),
          Types.Components.set("cometTail", i.CometTailComponent),
          Types.Components.set("connectedSprite", i.ConnectedSpriteComponent),
          Types.Components.set("div", i.DivComponent),
          Types.Components.set("dynEnvMap", i.DynamicEnvironmentMapComponent),
          Types.Components.set("gizmo", i.GizmoComponent),
          Types.Components.set("label", i.LabelComponent),
          Types.Components.set("lightSource", i.LightSourceComponent),
          Types.Components.set("model", i.ModelComponent),
          Types.Components.set("orbitalParticles", i.OrbitalParticlesComponent),
          Types.Components.set("particleSpray", i.ParticleSprayComponent),
          Types.Components.set("rings", i.RingsComponent),
          Types.Components.set("skybox", i.SkyboxComponent),
          Types.Components.set("spheroid", i.SpheroidComponent),
          Types.Components.set("spheroidLOD", i.SpheroidLODComponent),
          Types.Components.set("spout", i.SpoutComponent),
          Types.Components.set("sprite", i.SpriteComponent),
          Types.Components.set("starfield", i.StarfieldComponent),
          Types.Components.set("trail", i.TrailComponent),
          (Types.Controllers = new Map()),
          Types.Controllers.set("align", i.AlignController),
          Types.Controllers.set("animdata", i.AnimdataController),
          Types.Controllers.set("coverage", i.CoverageController),
          Types.Controllers.set("dynamo", i.DynamoController),
          Types.Controllers.set("fixed", i.FixedController),
          Types.Controllers.set("fixedToParent", i.FixedToParentController),
          Types.Controllers.set("freeFly", i.FreeFlyController),
          Types.Controllers.set("groundClamp", i.GroundClampController),
          Types.Controllers.set("keyframe", i.KeyframeController),
          Types.Controllers.set("look", i.LookController),
          Types.Controllers.set("modelAnimate", i.ModelAnimateController),
          Types.Controllers.set("orbit", i.OrbitController),
          Types.Controllers.set("orbitKeyframe", i.OrbitKeyframeController),
          Types.Controllers.set("orbitalElements", i.OrbitalElementsController),
          Types.Controllers.set("pick", i.PickController),
          Types.Controllers.set("roll", i.RollController),
          Types.Controllers.set("rotate", i.RotateController),
          Types.Controllers.set(
            "rotateByEntityOrientation",
            i.RotateByEntityOrientationController,
          ),
          Types.Controllers.set("scale", i.ScaleController),
          Types.Controllers.set("select", i.SelectController),
          Types.Controllers.set("setParent", i.SetParentController),
          Types.Controllers.set("spin", i.SpinController),
          Types.Controllers.set("tap", i.TapController),
          Types.Controllers.set("transition", i.TransitionController),
          Types.Controllers.set("translate", i.TranslateController),
          Types.Controllers.set("zoom", i.ZoomController);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DistanceLineComponent: function () {
              return DistanceLineComponent;
            },
          });
        var i = s(5);
        class DistanceLineComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._targetEntity = null),
              (this._color = new i.Color(0.48, 0.56, 0.66)),
              (this._distance = null),
              (this._sourceRelRadius = null),
              (this._targetRelRadius = null),
              (this._sourceMpIsSurface = !1),
              (this._targetMpIsSurface = !1),
              (this._switchStartPos = null),
              (this._depthTest = !1),
              (this._animation = {
                isAnimating: !1,
                duration: 300,
                sourceStartTime: null,
                targetStartTime: null,
              }),
              (this._width = 2),
              (this._lineMesh = null),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          setTargetEntity(t) {
            this._targetEntity = t;
          }
          setSourceMeasurePoint(t) {
            const e = "surface" === t;
            this._sourceMpIsSurface !== e &&
              ((this._sourceMpIsSurface = e),
                (this._animation.isAnimating = !0),
                (this._animation.sourceStartTime = Date.now()));
          }
          setTargetMeasurePoint(t) {
            const e = "surface" === t;
            this._targetMpIsSurface !== e &&
              ((this._targetMpIsSurface = e),
                (this._animation.isAnimating = !0),
                (this._animation.targetStartTime = Date.now()));
          }
          setColor(t) {
            this._color = t;
          }
          setWidth(t) {
            this._width = t;
          }
          setDistanceProps({ distance: t, sourceRadius: e, targetRadius: s }) {
            (this._distance = t),
              (this._sourceRelRadius = Math.max(
                Math.min(e / this._distance, 1),
                0,
              )),
              (this._targetRelRadius = Math.max(
                Math.min(s / this._distance, 1),
                0,
              ));
          }
          _applyEasing(t) {
            const e = 2 * t;
            return (e <= 1 ? Math.pow(e, 4) : 2 - Math.pow(2 - e, 4)) / 2;
          }
          _updateAnimation(t, e, s, i, n, o) {
            if (!this._animation.isAnimating) return;
            const {
              sourceStartTime: r,
              targetStartTime: a,
              duration: l,
            } = this._animation;
            if (r) {
              const a = Date.now() - r,
                c = a > l ? 1 : a / l;
              if (1 !== c) {
                const r = this._applyEasing(c);
                this._sourceMpIsSurface
                  ? this._switchStartPos
                    ? e.lerp(n, o, r)
                    : t.lerp(s, i, r)
                  : this._switchStartPos
                    ? e.lerp(o, n, r)
                    : t.lerp(i, s, r);
              } else
                (this._animation.isAnimating = !1),
                  (this._animation.sourceStartTime = null);
            }
            if (a) {
              const r = Date.now() - a,
                c = r > l ? 1 : r / l;
              if (1 !== c) {
                const r = this._applyEasing(c);
                this._targetMpIsSurface
                  ? this._switchStartPos
                    ? t.lerp(s, i, r)
                    : e.lerp(n, o, r)
                  : this._switchStartPos
                    ? t.lerp(i, s, r)
                    : e.lerp(o, n, r);
              } else
                (this._animation.isAnimating = !1),
                  (this._animation.targetStartTime = null);
            }
          }
          __loadResources() {
            return (
              (this._lineMesh = new i.LineMesh(this)),
              this._lineMesh.setColors([this._color, this._color]),
              this._lineMesh.setWidths([this._width, this._width]),
              this.setOpacity(1),
              Promise.resolve()
            );
          }
          setOpacity(t) {
            this._lineMesh.setAlphaMultiplier(t);
          }
          setDepthTest(t) {
            this._depthTest = t;
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          __prepareForRender(t) {
            const [e] = this.getThreeJsObjects();
            if (null === this._targetEntity)
              return void (e && (e.visible = !1));
            e?.material && (e.material.depthTest = this._depthTest),
              this._calcStartPos(t),
              this._updatePoints(t);
            const s = this._switchStartPos
              ? this._targetEntity
              : this.getEntity();
            i.ThreeJsHelper.setPositionToEntity(e, s, t),
              this._lineMesh.prepareForRender(t);
          }
          _calcStartPos(t) {
            const e = i.Vector3.pool.get();
            t.getEntity().getPositionRelativeToEntity(
              e,
              i.Vector3.Zero,
              this._targetEntity,
            );
            const s = e.magnitude() / this._distance < 0.001;
            this._switchStartPos !== s && (this._switchStartPos = s),
              i.Vector3.pool.release(e);
          }
          _updatePoints(t) {
            if (null === this._targetEntity) return;
            const e = i.Vector3.pool.get(),
              s = i.Vector3.pool.get(),
              n = i.Vector3.pool.get(),
              o = i.Vector3.pool.get();
            e.copy(i.Vector3.Zero),
              o.sub(
                this._targetEntity.getCameraSpacePosition(t),
                this.getEntity().getCameraSpacePosition(t),
              ),
              this._switchStartPos && o.neg(o);
            const r = this._switchStartPos
              ? this._targetRelRadius
              : this._sourceRelRadius,
              a =
                1 -
                (this._switchStartPos
                  ? this._sourceRelRadius
                  : this._targetRelRadius);
            s.lerp(e, o, r), n.lerp(e, o, a);
            const l = (
              this._switchStartPos
                ? this._targetMpIsSurface
                : this._sourceMpIsSurface
            )
              ? s
              : e,
              c = (
                this._switchStartPos
                  ? this._sourceMpIsSurface
                  : this._targetMpIsSurface
              )
                ? n
                : o;
            this._updateAnimation(l, c, e, s, o, n);
            const h = [l, c];
            this._lineMesh.setPositions(h),
              i.Vector3.pool.release(e),
              i.Vector3.pool.release(s),
              i.Vector3.pool.release(n),
              i.Vector3.pool.release(o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CancelToken: function () {
              return CancelToken;
            },
          });
        class CancelToken {
          constructor() {
            this._isCanceled = !1;
          }
          cancel() {
            this._isCanceled = !0;
          }
          get isCanceled() {
            return this._isCanceled;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AppUtils: function () {
              return AppUtils;
            },
          });
        var i = s(133),
          n = s.n(i),
          o = s(134),
          r = s.n(o),
          a = s(135),
          l = s.n(a),
          c = s(136),
          h = s.n(c),
          u = (s(137), s(138));
        class AppUtils {
          static conversionTable = {
            kmToMi: 0.621371,
            kmToFt: 3280.84,
            miToFt: 5280,
            kmToM: 1e3,
            auToKm: 149597871,
            ldToKm: 384398,
          };
          static constants = {
            speedOfLight: 299792.458,
            minDate: -8e15,
            maxDate: 8e15,
          };
          static isEmptyObject(t) {
            return t.constructor === Object && 0 === Object.keys(t).length;
          }
          static addStartToPath(t, e = "/") {
            return t.startsWith(e) ? t : e + t;
          }
          static cleanPathDuplicate(t, e = "/", s = "/") {
            const i = new RegExp(`${e}+`, "g");
            return t.replace(i, s);
          }
          static addEndToPath(t, e = "/") {
            return t.endsWith(e) ? t : t + e;
          }
          static isElement(t) {
            return t instanceof Element || t instanceof Document;
          }
          static isHTML(t) {
            return (
              "string" == typeof t &&
              null !== t.match(/<[^/>]+>/gm) &&
              null !== t.match(/<\/[^>]+>/gm)
            );
          }
          static hasHTML(t) {
            if ("string" != typeof t) return !1;
            const e = new DOMParser().parseFromString(t, "text/html");
            return Array.from(e.body.childNodes).some((t) => 1 === t.nodeType);
          }
          static async loadJSON(t) {
            t = AppUtils.addEndToPath(t, ".json");
            const e = await fetch(t);
            if (200 === e.status) return e.json();
            {
              const s = new Error(
                e.status +
                " (" +
                e.statusText +
                ') when trying to fetch "' +
                t +
                '"',
              );
              throw ((s.name = "NotFound"), s);
            }
          }
          static msToTime(t = 0) {
            const e = t % 1e3,
              s = (t = (t - e) / 1e3) % 60,
              i = (t = (t - s) / 60) % 60;
            return { hour: (t - i) / 60, minute: i, second: s, millisecond: e };
          }
          static deepCopy(t) {
            return JSON.parse(JSON.stringify(t));
          }
          static deepClone(t) {
            const e = Array.isArray(t) ? [] : {};
            for (const s in t) {
              const i = t[s];
              e[s] =
                "object" == typeof i && null !== i ? AppUtils.deepClone(i) : i;
            }
            return e;
          }
          static deepMerge(t, e) {
            const s = {
              isMergeableObject: (t) =>
                (!t || !t._isAMomentObject) &&
                Boolean(t) &&
                "object" == typeof t,
            };
            return n()(t, e, s);
          }
          static deepEqual(t, e) {
            if (!t || !e) return !1;
            const s = Object.keys(t),
              i = Object.keys(e);
            if (s.length !== i.length) return !1;
            for (const i of s) {
              const s = t[i],
                n = e[i],
                o = AppUtils.isObject(s) && AppUtils.isObject(n);
              if (o && !AppUtils.deepEqual(s, n)) return !1;
              if (!o && s !== n) return !1;
            }
            return !0;
          }
          static isObject(t) {
            return null !== t && "object" == typeof t;
          }
          static filterObject(t, e) {
            return Object.fromEntries(
              Object.entries(t).filter(([t, s]) => e(s, t)),
            );
          }
          static debounce() {
            return r()(...arguments);
          }
          static throttle() {
            return l()(...arguments);
          }
          static waitFor(t) {
            return new Promise((e) => {
              setTimeout(() => {
                e();
              }, t);
            });
          }
          static isPortrait() {
            return window.matchMedia("(orientation: portrait)").matches;
          }
          static isLandscape() {
            return window.matchMedia("(orientation: landscape)").matches;
          }
          static isMobileLandscape() {
            return window.matchMedia(
              "(min-width: 320px) and (max-width: 915px) and (orientation: landscape)",
            ).matches;
          }
          static isMobilePortrait() {
            return window.matchMedia(
              "(min-width: 320px) and (max-width: 640px) and (orientation: portrait)",
            ).matches;
          }
          static isMobile() {
            return AppUtils.isMobileLandscape() || AppUtils.isMobilePortrait();
          }
          static isiPhone() {
            return (
              "iPhone" ===
              (window.navigator?.userAgentData?.platform ||
                window.navigator?.platform ||
                "unknown")
            );
          }
          static isiPad() {
            const t =
              window.navigator?.userAgentData?.platform ||
              window.navigator?.platform ||
              "unknown",
              e = window.navigator.maxTouchPoints > 1;
            return "MacIntel" === t && e;
          }
          static isTabletPortrait() {
            return window.matchMedia(
              "(min-width: 641px) and (max-width: 1024px) and (orientation: portrait)",
            ).matches;
          }
          static isTabletLandscape() {
            return window.matchMedia(
              "(min-width: 916px) and (max-width: 1024px) and (orientation: landscape)",
            ).matches;
          }
          static isTablet() {
            return AppUtils.isTabletLandscape() || AppUtils.isTabletPortrait();
          }
          static isMobileMode() {
            return (
              AppUtils.isMobilePortrait() ||
              AppUtils.isMobileLandscape() ||
              AppUtils.isTabletLandscape() ||
              AppUtils.isTabletPortrait() ||
              AppUtils.isPanorama()
            );
          }
          static isDesktop() {
            return window.matchMedia(
              "(min-width: 1025px) and (min-height: 600px)",
            ).matches;
          }
          static isPanorama() {
            return window.matchMedia(
              "(min-width: 1025px) and (max-height: 599px) and (orientation: landscape)",
            ).matches;
          }
          static is2K() {
            return window.matchMedia(
              "(min-width: 2880px) and (min-height: 1620px)",
            ).matches;
          }
          static is4K() {
            return window.matchMedia(
              "(min-width: 3200px) and (min-height: 1800px)",
            ).matches;
          }
          static isTouch() {
            return (
              "ontouchstart" in window || window.navigator.maxTouchPoints > 0
            );
          }
          static isPrimaryTouch() {
            return window.matchMedia("(pointer: coarse)").matches;
          }
          static canHover() {
            return !matchMedia("(hover: none)").matches;
          }
          static htmlToElement(t) {
            const e = document.createElement("template");
            return (
              (e.innerHTML = t.replace(/[\t\n]+/g, "").trim()),
              e.content.firstElementChild
            );
          }
          static htmlToElements(t) {
            const e = document.createElement("template");
            return (
              (e.innerHTML = t.replace(/[\t\n]+/g, "").trim()),
              e.content.cloneNode(!0).childNodes
            );
          }
          static insertParamsToHTML(t, e = {}) {
            t = t.replace(/[\t\n]+/g, "").trim();
            const s = Object.keys(e);
            for (let i = s.length - 1; i >= 0; i--) {
              const n = s[i],
                o = `{$${n}}`;
              t = t.replaceAll(o, e[n]);
            }
            return (t = t.replaceAll(/{\$([A-Z])\w+}/gi, ""));
          }
          static htmlWithParamsToElement(t, e = {}) {
            return (
              (t = AppUtils.insertParamsToHTML(t, e)), AppUtils.htmlToElement(t)
            );
          }
          static onAttachElement(
            t,
            e,
            { interval: s = 100, timeout: i = 5e3 } = {},
          ) {
            const n = setInterval(() => {
              ("string" == typeof t
                ? null !== document.querySelector(t)
                : document.body.contains(t)) &&
                (clearInterval(n), clearTimeout(o), e());
            }, s),
              o = setTimeout(() => {
                clearInterval(n),
                  console.error(
                    `[AppUtils.onAttachElement] Timeout exceeded for "${t}".`,
                  );
              }, i);
          }
          static appendWithCallback(t, e, s, i) {
            new Promise((t) => {
              if (document.querySelector(s))
                return t(document.querySelector(s));
              const e = new MutationObserver(() => {
                document.querySelector(s) &&
                  (t(document.querySelector(s)), e.disconnect());
              });
              e.observe(document.body, { childList: !0, subtree: !0 });
            }).then(i),
              t.appendChild(e);
          }
          static elementReady(t, e = 1e3) {
            return new Promise((s, i) => {
              const n = document.querySelector(t);
              if (n) return void s(n);
              const o = new MutationObserver(() => {
                const e = document.querySelector(t);
                e && (o.disconnect(), clearTimeout(r), s(e));
              });
              o.observe(document.body, { childList: !0, subtree: !0 });
              const r = setTimeout(() => {
                o.disconnect(), i(console.warn(`${t} not found in DOM`));
              }, e);
            });
          }
          static addScrollbar(t, e = {}) {
            const s = {
              className: "os-theme-dark",
              resize: "none",
              clipAlways: !1,
              normalizeRTL: !1,
              paddingAbsolute: !0,
              autoUpdate: !1,
              sizeAutoCapable: !1,
              overflowBehavior: { x: "hidden", y: "scroll" },
              scrollbars: { clickScrolling: !0, autoHide: "move" },
              ...e,
            };
            return h()(t, s);
          }
          static formatNumber(t, e = 3, s) {
            return t.toLocaleString(void 0, {
              maximumFractionDigits: e,
              minimumFractionDigits: s,
            });
          }
          static formatDate(t, e = {}) {
            return t.toLocaleString(void 0, {
              year: "numeric",
              month: "long",
              day: "numeric",
              ...e,
            });
          }
          static tween(
            t,
            e,
            { onUpdate: s, onComplete: i, duration: n = 2e3 } = {},
          ) {
            let o = 0;
            const r = new u.Tween(t)
              .to(e, n)
              .onUpdate((t) => {
                void 0 !== s && s(t);
              })
              .onComplete(() => {
                "function" == typeof i && i(), cancelAnimationFrame(o);
              })
              .start(),
              a = (t) => {
                (o = requestAnimationFrame(a)), (0, u.update)(t);
              };
            return a(), r;
          }
          static convertObjType(t) {
            return (
              Object.entries(t).forEach(([e, s]) => {
                let i;
                switch (s.trim()) {
                  case "undefined":
                    i = void 0;
                    break;
                  case "null":
                    i = null;
                    break;
                  case "true":
                    i = !0;
                    break;
                  case "false":
                    i = !1;
                    break;
                  case "NaN":
                    i = NaN;
                    break;
                  case "":
                    break;
                  default:
                    i = isNaN(s) ? s : parseFloat(s);
                }
                t[e] = i;
              }),
              t
            );
          }
        }
      },
      ,
      ,
      ,
      ,
      ,
      ,
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AnimationUtils: function () {
              return AnimationUtils;
            },
          });
        class AnimationUtils { }
        (AnimationUtils.createAnimation = (t, e, s) => {
          const i = new KeyframeEffect(t, e, s);
          return new Animation(i, t.ownerDocument.timeline);
        }),
          (AnimationUtils.directionalFade = (
            t,
            {
              direction: e = "up",
              fade: s = "in",
              yOffset: i = 0,
              xOffset: n = 0,
              timings: o = AnimationUtils.defaultTimings,
            },
          ) => {
            const r = {
              x: { ori: 0, dest: 0 },
              y: { ori: 0, dest: 0 },
              opacity: { ori: 1, dest: 0 },
            };
            "up" === e || "down" === e
              ? ((r.y.ori = "in" === s ? 100 : 0),
                (r.y.dest = 100 - r.y.ori),
                "up" === e && ((r.y.ori *= -1), (r.y.dest *= -1)))
              : ((r.x.ori = "in" === s ? 100 : 0),
                (r.x.dest = 100 - r.x.ori),
                "left" === e && ((r.x.ori *= -1), (r.x.dest *= -1))),
              "in" === s && ((r.opacity.ori = 0), (r.opacity.dest = 1)),
              (r.x.ori += n),
              (r.x.dest += n),
              (r.y.ori += i),
              (r.y.dest += i);
            const a = [
              {
                transform: "translate(" + r.x.ori + "%, " + r.y.ori + "%)",
                opacity: r.opacity.ori,
              },
              {
                transform: "translate(" + r.x.dest + "%, " + r.y.dest + "%)",
                opacity: r.opacity.dest,
              },
            ];
            return AnimationUtils.createAnimation(t, a, o);
          }),
          (AnimationUtils.defaultTimings = {
            duration: 1e3,
            iteration: 1,
            fill: "forwards",
            easing: "ease",
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseComponent: function () {
              return BaseComponent;
            },
          });
        var i = s(2);
        class BaseComponent {
          constructor(
            t,
            e,
            s = { parent: null, config: {}, params: {}, isVisible: !0 },
          ) {
            (this._element = e),
              (this._app = t),
              (this._config = s.config || {}),
              delete s.config,
              "hiddenMode" in this._config ||
              (this._config.hiddenMode = "hidden"),
              (this._params = s.params || {}),
              delete s.params,
              "isVisible" in s || (s.isVisible = !1),
              (this._class = {
                isVisible: {
                  true: "active",
                  false:
                    "hidden" === this._config.hiddenMode
                      ? "hidden"
                      : "invisible",
                },
                fontSize: { small: "small", default: "", large: "" },
              }),
              (this._state = {
                ...s,
                isVisibleClass:
                  this._class.isVisible[s.isVisible ? "true" : "false"],
                fontSizeClass: this._class.fontSize.default,
              }),
              (this._oldState = {}),
              (this._children = {}),
              (this._components = []),
              (this._vars = {}),
              (this._parent = this._element
                ? this._element.parentElement
                : s.parent || null),
              (this._enabled = !1),
              (this._eventNames = ["statuschange", "visiblechange"]),
              (this._callbacks = {}),
              this._initCallbacks(),
              (this._callbackRegistry = []),
              this.bindFunctions([
                "resize",
                "isEnabled",
                "setEnabled",
                "show",
                "hide",
                "toggle",
                "loadHTML",
                "getState",
                "setState",
              ]);
          }
          get components() {
            return this._components;
          }
          get app() {
            return this._app;
          }
          resize() {
            this._updateFontSize();
          }
          _updateFontSize() {
            let t = this._class.fontSize.default;
            i.AppUtils.isMobile()
              ? (t = this._class.fontSize.small)
              : i.AppUtils.isTablet() || i.AppUtils.isPanorama()
                ? (t = this._class.fontSize.default)
                : (i.AppUtils.is2K() || i.AppUtils.is4K()) &&
                (t = this._class.fontSize.large),
              this.setState({ fontSizeClass: t });
          }
          get element() {
            return this._element;
          }
          getParent() {
            return this._parent;
          }
          setParent(t, e = null) {
            (this._parent = t),
              e && this._parent.removeChild(e),
              this._enabled && this._parent.appendChild(this._element);
          }
          async init(t = {}) {
            Object.assign(this._params, t);
            const e = this.constructor;
            void 0 !== e.html
              ? ((this._element = i.AppUtils.htmlWithParamsToElement(
                e.html,
                this._params,
              )),
                this._element.classList.add("{{fontSizeClass}}"),
                this._setVariables(this._element),
                this._setEventHandlersFromAttributes(this._element))
              : (this._element.classList.add("{{fontSizeClass}}"),
                this._setVariables(this._element)),
              this._updateFontSize();
          }
          getConfig() {
            return this._config;
          }
          setConfig(t) {
            Object.assign(this._config, t);
          }
          bindFunctions(t = []) {
            const e = this;
            for (let s = 0; s < t.length; s++) {
              const i = t[s];
              e[i] = e[i].bind(this);
            }
          }
          isEnabled() {
            return this._enabled;
          }
          setEnabled(t) {
            const e = this._enabled;
            t && !e ? this.__enable() : !t && e && this.__disable(),
              (this._enabled = t),
              this._components.forEach((e) => {
                ("string" == typeof e
                  ? this._app.getComponent(e)
                  : e
                ).setEnabled(t);
              });
          }
          destroy() {
            this.__destroy();
          }
          show() {
            this.setState(
              { isVisible: !0, isVisibleClass: this._class.isVisible.true },
              () => this.triggerCallbacks("visiblechange", [!0]),
            );
          }
          hide() {
            this.setState(
              { isVisible: !1, isVisibleClass: this._class.isVisible.false },
              () => this.triggerCallbacks("visiblechange", [!1]),
            );
          }
          toggle() {
            this._state.isVisible ? this.hide() : this.show();
          }
          async loadHTML(t, e = null) {
            const s = await fetch(t);
            if (s.ok) {
              const t = await s.text();
              this._parseHTML(t, e);
            } else console.error(s.status + ": " + s.statusText);
          }
          getState(t) {
            return t in this._state ? this._state[t] : null;
          }
          addState(t, e, s) {
            (this._state[t] = e), s && this._setVariables(s);
          }
          setState(t, e) {
            if (i.AppUtils.isEmptyObject(t)) return;
            let s = !1;
            for (const e in t)
              if (t[e] !== this._state[e]) {
                s = !0;
                break;
              }
            s &&
              ((this._oldState = { ...this._state }),
                (this._state = { ...this._state, ...t }),
                this._render(t),
                void 0 !== e && e());
          }
          _parseHTML(t, e = null) {
            if (!t) return;
            const s = e || this._element;
            this._roots = [...i.AppUtils.htmlToElements(t)];
            const n = document.createDocumentFragment();
            for (let t = 0; t < this._roots.length; t++) {
              const e = this._roots[t];
              e instanceof HTMLElement &&
                (this._setVariables(e),
                  this._setEventHandlersFromAttributes(e),
                  n.appendChild(e));
            }
            s.appendChild(n);
          }
          _containVar(t) {
            return (
              t &&
              "function" == typeof t.includes &&
              t.includes("{{") &&
              t.includes("}}")
            );
          }
          _splitNonEmpty(t) {
            return t.split(/\s+/g).filter((t) => "" !== t);
          }
          _setVariables(t, e = !0) {
            let s;
            if (t instanceof Element)
              for (let e = t.attributes.length - 1; e >= 0; e--) {
                const s = t.attributes[e];
                if ("key" === s.name) {
                  this._children[s.value] = t;
                  break;
                }
              }
            const n = [];
            if (t.nodeType === Node.TEXT_NODE)
              this._containVar(t.nodeValue) &&
                n.push({ field: "nodeValue", elementVar: t.nodeValue });
            else if (t instanceof Element) {
              let e = t.className;
              for (; this._containVar(e);) {
                const t = e.indexOf("}}") + 2;
                n.push({
                  field: "classList",
                  elementVar: e.substring(e.indexOf("{{"), t),
                }),
                  (e = e.substring(t));
              }
            }
            for (let e = 0; e < n.length; e++) {
              let { field: o, elementVar: r } = n[e];
              if (o && r.startsWith("{{") && r.endsWith("}}")) {
                const e = r.replace("{{", "").replace("}}", "");
                if ("classList" === o && t instanceof Element) {
                  t.classList.remove(r);
                  const s = this._state[e];
                  if (void 0 !== s) {
                    const e = this._splitNonEmpty(s);
                    t.classList.add(...e);
                  }
                } else if (i.AppUtils.isHTML(this._state[e])) {
                  const n = i.AppUtils.htmlToElement(this._state[e]);
                  t.parentNode.replaceChild(n, t), (s = n);
                } else if (i.AppUtils.hasHTML(this._state[e]))
                  if (t.nodeType === Node.TEXT_NODE) {
                    const i = document.createElement("span");
                    i.innerHTML = this._state[e];
                    (t.parentElement || t.parentNode).replaceChild(i, t),
                      (s = i),
                      (o = "innerHTML");
                  } else t.innerHTML = this._state[e];
                else {
                  t[o] = this._state[e];
                }
                void 0 === this._vars[e] && (this._vars[e] = []),
                  this._vars[e].push({ element: s || t, field: o });
              }
            }
            if (e)
              for (let e = t.childNodes.length - 1; e >= 0; e--)
                this._setVariables(t.childNodes[e]);
          }
          _setEventHandlersFromAttributes(t) {
            const e = [];
            for (let s = t.attributes.length - 1; s >= 0; s--) {
              const i = t.attributes[s];
              if (i.name.startsWith("on")) {
                const s = i.name.substring(2).toLowerCase(),
                  n = this[i.value];
                if (void 0 === n || !(n instanceof Function))
                  throw new Error(
                    "Could not find valid " +
                    s +
                    " handler " +
                    i.value +
                    " for element with id " +
                    t.id,
                  );
                const o = n.bind(this);
                e.push(i.name), t.addEventListener(s, o);
              }
            }
            for (let s = e.length - 1; s >= 0; s--) t.removeAttribute(e[s]);
            for (let e = t.children.length - 1; e >= 0; e--)
              this._setEventHandlersFromAttributes(t.children[e]);
          }
          _render(t) {
            const e = Object.keys(t);
            for (let s = e.length - 1; s >= 0; s--) {
              const n = e[s];
              if (n in this._vars && t[n] !== this._oldState[n]) {
                const e = this._vars[n];
                for (let s = 0; s < e.length; s++) {
                  const { field: o, element: r } = e[s];
                  if ("classList" === o) {
                    let e = this._splitNonEmpty(this._oldState[n]);
                    const s = r;
                    s[o].remove(...e),
                      (e = this._splitNonEmpty(t[n])),
                      s[o].add(...e);
                  } else if (i.AppUtils.isHTML(t[n])) {
                    const e = i.AppUtils.htmlToElement(t[n]);
                    r.parentNode.replaceChild(e, r),
                      (this._vars[n][s].element = e);
                  } else if (i.AppUtils.hasHTML(t[n]))
                    if (r.nodeType === Node.TEXT_NODE) {
                      const e = document.createElement("span");
                      e.innerHTML = t[n];
                      (r.parentElement || r.parentNode).replaceChild(e, r),
                        (this._vars[n][s].element = e),
                        (this._vars[n][s].field = "innerHTML");
                    } else r.innerHTML = t[n];
                  else {
                    r[o] = t[n];
                  }
                }
              }
            }
          }
          __enable() {
            window.addEventListener("resize", this.resize),
              this.registerCallbacks(),
              this._parent &&
              (this._parent.appendChild(this._element),
                this.triggerCallbacks("statuschange", [!0, this]));
          }
          __disable() {
            this._parent &&
              this._parent.contains(this._element) &&
              (this.triggerCallbacks("statuschange", [!1, this]),
                (this._element = this._parent.removeChild(this._element))),
              window.removeEventListener("resize", this.resize),
              this.removeCallbacks();
          }
          __destroy() {
            this.__disable(), (this._element = null), (this._parent = null);
          }
          _initCallbacks() {
            for (let t = 0; t < this._eventNames.length; t++)
              this._callbacks[this._eventNames[t]] = [];
          }
          registerCallback(t, e) {
            "function" != typeof e ||
              this._eventNames.indexOf(t) < 0 ||
              this._callbacks[t].includes(e) ||
              this._callbacks[t].push(e);
          }
          removeCallback(t, e) {
            if ("function" != typeof e || this._eventNames.indexOf(t) < 0)
              return;
            const s = this._callbacks[t].indexOf(e);
            s > -1 && this._callbacks[t].splice(s, 1);
          }
          triggerCallbacks(t, e = []) {
            for (let s = this._callbacks[t].length - 1; s >= 0; s--) {
              (0, this._callbacks[t][s])(...e);
            }
          }
          registerCallbacks() {
            for (let t = 0; t < this._callbackRegistry.length; t++) {
              const {
                emitter: e,
                event: s,
                callback: i,
              } = this._callbackRegistry[t];
              e.registerCallback(s, i);
            }
          }
          removeCallbacks() {
            for (let t = 0; t < this._callbackRegistry.length; t++) {
              const {
                emitter: e,
                event: s,
                callback: i,
              } = this._callbackRegistry[t];
              e.removeCallback(s, i);
            }
          }
        }
        (BaseComponent.create = async (t, e, s, i = !0, n = [], o = {}) => {
          const r = i
            ? await t.addComponentWithPlaceholder({
              type: s,
              name: e,
              args: n,
              options: o,
            })
            : await t.addComponent(e, s, ...n, o);
          return s.postCreationFunction && s.postCreationFunction(t, r), r;
        }),
          (BaseComponent.html = void 0),
          (BaseComponent.postCreationFunction = void 0);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(142);
        s(202), s(203);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(143),
          n = s(145),
          o = (s(5), s(2)),
          r = s(144),
          a = s.n(r);
        class Settings extends o.BaseComponent {
          constructor(t, e = {}) {
            const s = {
              isCollapsible: !0,
              allowToggleUnit: !1,
              allowLayers: !0,
              allowZoom: !0,
              allowFullscreen: i.default.isEnabled,
              allowPhotoMode: !1,
              allowInfoPanel: !0,
              allowLighting: !0,
              showLightOptions: !1,
              allowGuidedCamera: !1,
              zoomIn: t.getManager("camera").zoomIn,
              zoomOut: t.getManager("camera").zoomOut,
              ...e.config,
            };
            delete e.config,
              (s.orientation = {
                bigPortrait: {
                  check:
                    s.orientation?.bigPortrait?.check ||
                    (() =>
                      o.AppUtils.isPortrait() &&
                      !o.AppUtils.isMobilePortrait() &&
                      !o.AppUtils.isTabletPortrait()),
                  ori: s.orientation?.bigPortrait?.ori || "vertical",
                },
                tabletPortrait: {
                  check:
                    s.orientation?.tabletPortrait?.check ||
                    (() => o.AppUtils.isTabletPortrait()),
                  ori: s.orientation?.tabletPortrait?.ori || "vertical",
                },
                smallPortrait: {
                  check:
                    s.orientation?.smallPortrait?.check ||
                    (() => o.AppUtils.isMobilePortrait()),
                  ori: s.orientation?.smallPortrait?.ori || "vertical",
                },
                bigLandscape: {
                  check:
                    s.orientation?.bigLandscape?.check ||
                    (() =>
                      o.AppUtils.isLandscape() &&
                      !o.AppUtils.isMobileLandscape() &&
                      !o.AppUtils.isTabletLandscape()),
                  ori: s.orientation?.bigLandscape?.ori || "vertical",
                },
                tabletLandscape: {
                  check:
                    s.orientation?.tabletPortrait?.check ||
                    (() =>
                      o.AppUtils.isTabletLandscape() ||
                      o.AppUtils.isPanorama()),
                  ori: s.orientation?.tabletPortrait?.ori || "vertical",
                },
                smallLandscape: {
                  check:
                    s.orientation?.smallLandscape?.check ||
                    (() => o.AppUtils.isMobileLandscape()),
                  ori: s.orientation?.smallLandscape?.ori || "horizontal",
                },
              }),
              super(t, null, {
                isMetric: !1,
                isVisible: !0,
                isFullscreen: !1,
                isPhotoMode: !1,
                isGuidedCamera: !0,
                showOrbitLines: !0,
                showLabels: !0,
                lightType: "shadow",
                config: s,
                ...e,
              }),
              (this._ori = ""),
              (this._isMobileMode = o.AppUtils.isMobileMode()),
              (this._isHorizontal = null),
              Object.assign(this._class, {
                container: { collapse: "hidden", expand: "active" },
                isItemVisible: { true: "", false: "hidden" },
                icon: {
                  imperial: "icon-mi",
                  metric: "icon-km",
                  info: "icon-info",
                },
                fullscreen: { true: "fullscreen", false: "window" },
                photo: { true: "active", false: "" },
                light: {
                  natural: "icon-natural-light",
                  shadow: "icon-shadow-light",
                  flood: "icon-flood-light",
                },
                camera: { true: "icon-free-cam", false: "icon-auto-cam" },
                isHorizontal: { true: "horizontal", false: "vertical" },
              });
            const r = !this._isMobileMode,
              a = this._isMobileMode,
              l = this.isHorizontal(),
              c = this.app.getManager("camera");
            (this._fullLightColor = c.getFullLightColor()),
              (this._shadowLightColor = c.getShadowLightColor()),
              Object.assign(this._state, {
                isVisible: r,
                isCollapsed: a,
                isVisibleClass: this._class.isVisible[r],
                containerClass: a
                  ? this._class.container.collapse
                  : this._class.container.expand,
                isCollapsibleClass:
                  this._class.isItemVisible[this._config.isCollapsible],
                allowInfoPanelClass:
                  this._class.isItemVisible[this._config.allowInfoPanel],
                allowToggleUnitClass:
                  this._class.isItemVisible[this._config.allowToggleUnit],
                allowPhotoModeClass:
                  this._class.isItemVisible[this._config.allowPhotoMode],
                allowZoomClass:
                  this._class.isItemVisible[this._config.allowZoom],
                allowLightingClass:
                  this._class.isItemVisible[this._config.allowLighting],
                showLightingOptionsClass:
                  this._class.isItemVisible[this._config.showLightOptions],
                allowGuidedCameraClass:
                  this._class.isItemVisible[this._config.allowGuidedCamera],
                allowFullscreenClass:
                  this._class.isItemVisible[this._config.allowFullscreen],
                allowLayersClass:
                  this._class.isItemVisible[this._config.allowLayers],
                unitButton: this._state.isMetric
                  ? this._class.icon.imperial
                  : this._class.icon.metric,
                infoButton: this._class.icon.info,
                fullscreenClass:
                  this._class.fullscreen[this._state.isFullscreen],
                photoModeClass: this._class.photo[this._state.isPhotoMode],
                lightClass: this._class.light[this._state.lightType],
                guidedClass: this._class.camera[this._state.isGuidedCamera],
                isHorizontal: l,
                orientationClass: this._class.isHorizontal[l],
              }),
              this._eventNames.push(
                "unitchange",
                "photomodechange",
                "guidedcamerachange",
                "expandtoggle",
              ),
              this._initCallbacks(),
              (this._isMouseHold = !1),
              (this._isContinuousZoom = !1),
              (this._zoomInterval = null),
              (this._zoomTimeout = null),
              (this._tooltips = []),
              n.default.setDefaultProps({
                theme: "default",
                touch: ["hold", 2e3],
                delay: [600, null],
                plugins: [n.followCursor],
              }),
              this.bindFunctions([
                "toggleCollapse",
                "toggleUnit",
                "toggleLayers",
                "toggleFullscreen",
                "togglePhotoMode",
                "hideLightingOptions",
                "toggleLightOptions",
                "toggleLight",
                "toggleGuidedCamera",
                "toggleInfoPanel",
                "startGuidedCamera",
                "stopGuidedCamera",
                "_zoomIn",
                "_zoomOut",
                "_stopZooming",
                "_updateSize",
              ]);
          }
          init() {
            super.init();
            const {
              isCollapsible: t,
              allowToggleUnit: e,
              allowLayers: s,
              allowZoom: n,
              allowFullscreen: o,
              allowPhotoMode: r,
              allowInfoPanel: a,
              allowLighting: l,
              allowGuidedCamera: c,
            } = this._config,
              h = {};
            t && (h.isCollapsibleClass = this._class.isItemVisible[t]),
              a && (h.allowInfoPanelClass = this._class.isItemVisible[a]),
              e && (h.allowToggleUnitClass = this._class.isItemVisible[e]),
              r && (h.allowPhotoModeClass = this._class.isItemVisible[r]),
              n &&
              ((h.allowZoomClass = this._class.isItemVisible[n]),
                this._children.zoomInButton.addEventListener(
                  "mousedown",
                  () => {
                    this._stopZooming(), this._zoomIn(!0);
                  },
                ),
                this._children.zoomInButton.addEventListener(
                  "mouseleave",
                  this._stopZooming,
                ),
                this._children.zoomInButton.addEventListener("mouseup", () => {
                  this._isContinuousZoom || this._zoomIn(), this._stopZooming();
                }),
                this._children.zoomInButton.addEventListener(
                  "touchstart",
                  (t) => {
                    t.preventDefault(), this._stopZooming(), this._zoomIn(!0);
                  },
                ),
                this._children.zoomInButton.addEventListener(
                  "touchmove",
                  (t) => {
                    t.preventDefault();
                    "zoomInButton" !==
                      document
                        .elementFromPoint(
                          t.changedTouches[0].clientX,
                          t.changedTouches[0].clientY,
                        )
                        .getAttribute("key") && this._stopZooming();
                  },
                ),
                this._children.zoomInButton.addEventListener(
                  "touchend",
                  (t) => {
                    t.preventDefault(),
                      this._isContinuousZoom || this._zoomIn(),
                      this._stopZooming();
                  },
                ),
                this._children.zoomOutButton.addEventListener(
                  "mousedown",
                  () => {
                    this._stopZooming(), this._zoomOut(!0);
                  },
                ),
                this._children.zoomOutButton.addEventListener(
                  "mouseleave",
                  this._stopZooming,
                ),
                this._children.zoomOutButton.addEventListener("mouseup", () => {
                  this._isContinuousZoom || this._zoomOut(),
                    this._stopZooming();
                }),
                this._children.zoomOutButton.addEventListener(
                  "touchstart",
                  (t) => {
                    t.preventDefault(), this._stopZooming(), this._zoomOut(!0);
                  },
                ),
                this._children.zoomOutButton.addEventListener(
                  "touchmove",
                  (t) => {
                    t.preventDefault();
                    "zoomOutButton" !==
                      document
                        .elementFromPoint(
                          t.changedTouches[0].clientX,
                          t.changedTouches[0].clientY,
                        )
                        .getAttribute("key") && this._stopZooming();
                  },
                ),
                this._children.zoomOutButton.addEventListener(
                  "touchend",
                  (t) => {
                    t.preventDefault(),
                      this._isContinuousZoom || this._zoomOut(),
                      this._stopZooming();
                  },
                )),
              l &&
              ((h.allowLightingClass = this._class.isItemVisible[l]),
                (this._children.flood.onclick = this.toggleLightOptions.bind(
                  this._children.flood,
                  "flood",
                )),
                (this._children.shadow.onclick = this.toggleLightOptions.bind(
                  this._children.shadow,
                  "shadow",
                )),
                (this._children.natural.onclick = this.toggleLightOptions.bind(
                  this._children.natural,
                  "natural",
                )),
                this._children.shadow.classList.add("selected-lighting"),
                this.toggleLightOptions("shadow")),
              c && (h.allowGuidedCameraClass = this._class.isItemVisible[c]),
              o &&
              i.default.isEnabled &&
              ((h.allowFullscreenClass = this._class.isItemVisible[o]),
                i.default.on("change", () => {
                  const t = i.default.isFullscreen;
                  this.setState({
                    isFullscreen: t,
                    fullscreenClass: this._class.fullscreen[t],
                  });
                })),
              s && (h.allowLayersClass = this._class.isItemVisible[s]),
              this.setState(h);
            const u = this._element.querySelectorAll(
              '.settings button:not(.zoom), span[key="zoomInButton"], span[key="zoomOutButton"]',
            );
            this.addTooltips(u, {
              update: function (t) {
                this.setProps({ placement: t ? "top" : "left" });
              },
            }),
              this._updateSize(),
              this._callbackRegistry.push({
                emitter: this._app.getManager("time"),
                event: "ratechange",
                callback: this.onRateChange,
              });
          }
          addTooltips(t, e) {
            const s = e.props || {},
              i = (0, n.default)(t, s);
            if ("function" == typeof e.update)
              for (const t of i) t.update = e.update;
            if ("function" == typeof e.onclick)
              for (const t of i) t.popper.onclick = e.onclick;
            return this._tooltips.push(...i), 1 === i.length ? i[0] : i;
          }
          updateTooltips(t) {
            for (const e of this._tooltips)
              "function" == typeof e.update && e.update(t);
          }
          setConfig(t) {
            const { hideFullScreenToggle: e, lighting: s } =
              this.app.getManager("router").configs;
            if (
              (t.allowFullscreen &&
                !0 !== e &&
                (t.allowFullscreen = i.default.isEnabled),
                t.orientation)
            ) {
              const e = this._config.orientation,
                s = [
                  "bigPortrait",
                  "tabletPortrait",
                  "smallPortrait",
                  "bigLandscape",
                  "tabletLandscape",
                  "smallLandscape",
                ];
              for (let i = 0; i < s.length; i++) {
                const n = s[i];
                t.orientation[n]
                  ? ((t.orientation[n].check ??= e[n].check),
                    (t.orientation[n].ori ??= e[n].ori))
                  : (t.orientation[n] = e[n]);
              }
            }
            super.setConfig(t);
            const n = {};
            for (const e in t)
              if ("orientation" === e) {
                const t = this.isHorizontal();
                (n.isHorizontal = t),
                  (n[`${e}Class`] = this._class.isHorizontal[t]);
              } else n[`${e}Class`] = this._class.isItemVisible[t[e]];
            this.setState(n),
              !0 === e && this.hideFullScreenOption(),
              ("flood" !== s && "natural" !== s) || this.toggleLightOptions(s),
              this._updateSize(!0);
          }
          getOrientation() {
            return this._ori;
          }
          setOrientation(t = "") {
            this._ori = t;
          }
          isHorizontal() {
            if ("" !== this._ori) return "horizontal" === this._ori;
            for (const t in this._config.orientation) {
              const e = this._config.orientation[t];
              if (e.check()) return "horizontal" === e.ori;
            }
            return !1;
          }
          _updateSize(t = !1) {
            const e = this.isHorizontal();
            if (!t && this._isHorizontal === e) return;
            this._isHorizontal = e;
            let s = 1;
            const i = Array.from(
              this._children.content.querySelectorAll(":scope > button"),
            );
            for (let t = 0; t < i.length; t++)
              i[t].classList.contains("hidden") || s++;
            this._config.allowZoom && s++,
              this._isHorizontal
                ? ((this._element.style.width = `calc(${s} * 30px + ${s} * 2px)`),
                  (this._element.style.height = "30px"))
                : ((this._element.style.width = "30px"),
                  (this._element.style.height = `calc(${s} * 30px + ${s} * 2px)`)),
              this.updateTooltips(e);
          }
          _zoomContinuously(t) {
            (this._isMouseHold = !0),
              null !== this._zoomTimeout && clearTimeout(this._zoomTimeout),
              (this._zoomTimeout = setTimeout(() => {
                this._isMouseHold &&
                  ((this._isContinuousZoom = !0),
                    null !== this._zoomInterval &&
                    clearInterval(this._zoomInterval),
                    (this._zoomInterval = setInterval(() => {
                      this._isMouseHold
                        ? t(!0)
                        : clearInterval(this._zoomInterval);
                    }, 30)));
              }, 200));
          }
          _zoomIn(t = !1) {
            t
              ? this._zoomContinuously(this._config.zoomIn)
              : this._config.zoomIn();
          }
          _zoomOut(t = !1) {
            t
              ? this._zoomContinuously(this._config.zoomOut)
              : this._config.zoomOut();
          }
          _stopZooming() {
            clearInterval(this._zoomInterval),
              (this._isMouseHold = !1),
              (this._isContinuousZoom = !1);
          }
          show() {
            this.setState({
              isVisible: !0,
              isVisibleClass: this._class.isVisible.true,
            });
          }
          hide() {
            this.setState({
              isVisible: !1,
              isVisibleClass: this._class.isVisible.false,
              showLightingOptionsClass: this._class.isVisible.false,
            });
          }
          isVisible() {
            return this._state.isVisible;
          }
          expand() {
            this.setState({
              isCollapsed: !1,
              containerClass: this._class.container.expand,
            });
          }
          collapse() {
            this.setState({
              isCollapsed: !0,
              showLightingOptionsClass: this._class.isVisible.false,
              containerClass: this._class.container.collapse,
            });
          }
          toggleCollapse() {
            this._state.isCollapsed ? this.expand() : this.collapse(),
              this.triggerCallbacks("expandtoggle", [
                !this._state.isCollapsed,
                this._state.isPhotoMode,
              ]);
          }
          toggleUnit() {
            const t = !this._state.isMetric;
            this.setState(
              {
                isMetric: t,
                unitButton: t
                  ? this._class.icon.imperial
                  : this._class.icon.metric,
              },
              () => {
                this.triggerCallbacks("unitchange", [this._state.isMetric]);
              },
            );
          }
          toggleFullscreen() {
            i.default.isEnabled && i.default.toggle();
          }
          toggleLayers() {
            !this._app.getComponent("layerPanel").getState("isVisible")
              ? (this._app.getComponent("layerPanel").show(), this.collapse())
              : this._app.getComponent("layerPanel").hide();
          }
          togglePhotoMode() {
            const t = !this._state.isPhotoMode;
            this.setState(
              { isPhotoMode: t, photoModeClass: this._class.photo[t] },
              () => {
                this._state.isPhotoMode ? this.collapse() : this.expand(),
                  this.triggerCallbacks("photomodechange", [
                    this._state.isPhotoMode,
                  ]);
              },
            );
          }
          hideLightingOptions(t) {
            [
              this._children.lightToggle,
              this._children.lightOptions,
              this._children.flood,
              this._children.natural,
              this._children.shadow,
            ].includes(t.target) ||
              this.setState({
                showLightingOptionsClass: this._class.isVisible.false,
              }),
              window.removeEventListener("mousedown", this.hideLightingOptions),
              window.removeEventListener(
                "touchstart",
                this.hideLightingOptions,
              );
          }
          hideFullScreenOption() {
            const t = {};
            (t.allowFullscreenClass = this._class.isItemVisible[!1]),
              this.setState(t);
          }
          toggleLightOptions(t) {
            this.setState(
              {
                lightType: t,
                lightClass: this._class.light[t],
                showLightingOptionsClass: this._class.isVisible.false,
              },
              () => {
                "flood" === t
                  ? (this._app
                    .getManager("camera")
                    ?.toggleCameraLight(!0, this._fullLightColor),
                    this._app
                      .getManager("comparison")
                      ?.setCameraLight(!0, this._fullLightColor))
                  : "natural" === t
                    ? (this._app.getManager("camera")?.toggleCameraLight(!1),
                      this._app.getManager("comparison")?.setCameraLight(!1))
                    : "shadow" === t &&
                    (this._app
                      .getManager("camera")
                      ?.toggleCameraLight(!0, this._shadowLightColor),
                      this._app
                        .getManager("comparison")
                        ?.setCameraLight(!0, this._shadowLightColor));
                for (const e in this._children)
                  e === t ||
                    ("flood" !== e && "natural" !== e && "shadow" !== e) ||
                    this._children[e].classList.remove("selected-lighting");
                this._children[`${t}`].classList.add("selected-lighting");
              },
            );
          }
          toggleLight() {
            this.setState({
              showLightingOptionsClass:
                this.getState("showLightingOptionsClass") ===
                  this._class.isVisible.true
                  ? this._class.isVisible.false
                  : this._class.isVisible.true,
            }),
              this.getState("showLightingOptionsClass") ===
                this._class.isVisible.true
                ? (window.addEventListener(
                  "mousedown",
                  this.hideLightingOptions,
                ),
                  window.addEventListener(
                    "touchstart",
                    this.hideLightingOptions,
                  ))
                : (window.removeEventListener(
                  "mousedown",
                  this.hideLightingOptions,
                ),
                  window.removeEventListener(
                    "touchstart",
                    this.hideLightingOptions,
                  ));
          }
          startGuidedCamera() {
            this.setState(
              { isGuidedCamera: !0, guidedClass: this._class.camera.true },
              () =>
                this.triggerCallbacks("guidedcamerachange", [
                  this._state.isGuidedCamera,
                ]),
            );
          }
          stopGuidedCamera() {
            this.setState(
              { isGuidedCamera: !1, guidedClass: this._class.camera.false },
              () =>
                this.triggerCallbacks("guidedcamerachange", [
                  this._state.isGuidedCamera,
                ]),
            );
          }
          toggleGuidedCamera() {
            this._state.isGuidedCamera
              ? this.stopGuidedCamera()
              : this.startGuidedCamera();
          }
          toggleInfoPanel() {
            null !== this._app.getComponent("infoPanel") &&
              this._app.getComponent("infoPanel").openPanel();
          }
          resize() {
            super.resize();
            const t = this.isHorizontal();
            this._isHorizontal !== t &&
              this.setState({
                isHorizontal: t,
                orientationClass: this._class.isHorizontal[t],
              }),
              this._updateSize();
          }
        }
        (Settings.html = a()), (e.default = Settings);
      },
      ,
      function (t) {
        t.exports =
          '<div class="settings {{isVisibleClass}} {{orientationClass}}">\n\t<div key="container" class="container {{containerClass}}">\n\t\t<div key="content" class="content">\n\t\t\t<button class="clickable icon icon-box {{allowInfoPanelClass}}" onclick="toggleInfoPanel" data-tippy-content="Show info panel" aria-label="show info panel">\n\t\t\t\t<span class="icon {{infoButton}}"></span>\n\t\t\t</button>\n\t\t\t<button class="clickable icon icon-layers {{allowLayersClass}}" onclick="toggleLayers" data-tippy-content="Toggle layers" aria-label="toggle layers"></button>\n\t\t\t<button class="clickable icon {{unitButton}} {{allowToggleUnitClass}}" onclick="toggleUnit" data-tippy-content="Toggle between metric and imperial units" aria-label="toggle between metric and imperial units"></button>\n\t\t\t<button class="clickable icon icon-hide {{photoModeClass}} {{allowPhotoModeClass}}" onclick="togglePhotoMode" data-tippy-content="Show or hide UI" aria-label="show or hide UI"></button>\n\t\t\t<button class="clickable icon-bg zoom {{allowZoomClass}}">\n\t\t\t\t<span key="zoomInButton" class="icon icon-plus" data-tippy-content="Zoom in" aria-label="zoom in" role="button"></span>\n\t\t\t\t<div class="horizontal-line"></div>\n\t\t\t\t<span key="zoomOutButton" class="icon icon-minus" data-tippy-content="Zoom out" aria-label="zoom out" role="button"></span>\n\t\t\t</button>\n\t\t\t<button key="lightToggle" class="light-toggle clickable icon icon-box {{allowLightingClass}}" onclick="toggleLight" data-tippy-content="Toggle light modes" aria-label="toggle light modes">\n\t\t\t\t<span class="icon {{lightClass}}"></span>\n\t\t\t</button>\n\t\t\t<button class="clickable icon {{guidedClass}} {{allowGuidedCameraClass}}" onclick="toggleGuidedCamera" data-tippy-content="Toggle auto camera" aria-label="toggle auto camera"></button>\n\t\t\t<div key="lightOptions" class="lighting-option-container small {{showLightingOptionsClass}}">\n\t\t\t\t<button key="flood" class="button lighting-option clickable">\n\t\t\t\t\t<span class="lighting-icon icon icon-flood-light"></span>\n\t\t\t\t\t<span class="title">Flood Lighting</span>\n\t\t\t\t</button>\n\t\t\t\t<button key="shadow" class="button lighting-option clickable" value="shadow">\n\t\t\t\t\t<span class="lighting-icon icon icon-shadow-light"></span>\n\t\t\t\t\t<span class="title">Shadow Lighting</span>\n\t\t\t\t</button>\n\t\t\t\t<button key="natural" class="button lighting-option clickable" value="natural">\n\t\t\t\t\t<span class="lighting-icon icon icon-natural-light"></span>\n\t\t\t\t\t<span class="title">Natural Lighting</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<button class="clickable icon icon-fullscreen {{fullscreenClass}} {{allowFullscreenClass}}" onclick="toggleFullscreen" data-tippy-content="Toggle fullscreen" aria-label="toggle fullscreen"></button>\n\t\t</div>\n\t</div>\n\t<button class="toggle clickable icon icon-controls {{isCollapsibleClass}}" onclick="toggleCollapse" data-tippy-content="Show or hide settings" aria-label="show or hide settings"></button>\n</div>\n';
      },
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(205);
        s(207);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(2),
          n = s(206),
          o = s.n(n);
        class LoadIcon extends i.BaseComponent {
          init() {
            super.init(),
              this._callbackRegistry.push(
                {
                  emitter: this._app.getManager("scene"),
                  event: "loading",
                  callback: this.show,
                },
                {
                  emitter: this._app.getManager("scene"),
                  event: "loaded",
                  callback: this.hide,
                },
              ),
              this.hide();
          }
        }
        (LoadIcon.html = o()), (e.default = LoadIcon);
      },
      function (t) {
        t.exports =
          '<div class="load-icon {{isVisibleClass}}">\n\t<div class="bg face"></div>\n\t<div class="front face"></div>\n\t<div class="left face"></div>\n\t<div class="top face"></div>\n\t<div class="right face"></div>\n\t<div class="bottom face"></div>\n\t<div class="text">Loading</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(209);
        s(211);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        s(136);
        var i = s(2),
          n = s(210),
          o = s.n(n);
        class Overlay extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, {
              isVisible: !1,
              isOpenButtonVisible: !0,
              content: null,
              ...e,
            }),
              (this._class.isOpenButtonVisibleClass = {
                true: "",
                false: "hidden",
              }),
              Object.assign(this._state, {
                isOpenButtonVisibleClass:
                  this._class.isOpenButtonVisibleClass[
                  this._state.isOpenButtonVisible
                  ],
              }),
              (this._scrollbar = null);
          }
          init() {
            super.init(),
              null !== this._state.content &&
              this._children.overlayContent.appendChild(this._state.content),
              this._element.addEventListener("click", this.hide),
              this._element.addEventListener("animationend", () => {
                this._children.overlay.classList.contains("hidden") &&
                  (this._children.overlay.style.display = "none");
              });
          }
          setContent(t) {
            null === this._state.content
              ? this._children.overlayContent.appendChild(t)
              : this._children.overlayContent.replaceChild(
                t,
                this._state.content,
              ),
              (this._state.content = t);
          }
          show() {
            this._element.classList.add("initialized"),
              (this._children.overlay.style.display = ""),
              super.show();
          }
          __enable() {
            super.__enable(),
              null === this._scrollbar
                ? i.AppUtils.onAttachElement(this._children.overlay, () => {
                  this._scrollbar = i.AppUtils.addScrollbar(
                    this._children.overlay,
                  );
                })
                : this._scrollbar.scroll(0);
          }
        }
        (Overlay.html = o()), (e.default = Overlay);
      },
      function (t) {
        t.exports =
          '<div class="overlay-container">\n\t<button class="open-button icon icon-info clickable {{isOpenButtonVisibleClass}}" onclick="show"></button>\n\t<div key="overlay" class="overlay {{isVisibleClass}}">\n\t\t<div key="overlayContent" class="container"></div>\n\t\t<button class="close-button icon icon-close clickable" onclick="hide"></button>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(213);
        s(215);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(2),
          n = s(214),
          o = s.n(n);
        class Search extends i.BaseComponent {
          constructor(t, e = { config: {} }) {
            (e.config = {
              initialOpen: !1,
              allowFeatured: !1,
              allowDetail: !0,
              allowInfo: !1,
              stopOnExactMatch: !1,
              infoText: {
                default: "most popular",
                results: "result",
                suggestions: "suggestion",
                nomatches: "no matches",
              },
              maxSuggestions: 1,
              placeholderText: "Search...",
              nameSearch: ["iauName", "displayName"],
              nameDisplay: ["displayName", "iauName"],
              ...e.config,
            }),
              super(t, null, {
                text: "",
                searchInfo: e.config?.infoText?.default || "",
                alwaysOpen: !1,
                magClass: "mag-open",
                searchClass: "search-close",
                focusedClass: "",
                isFeaturedVisible: !1,
                ...e,
              }),
              (this._class.isItemVisible = { true: "", false: "hidden" }),
              Object.assign(this._state, {
                allowFeaturedClass:
                  this._class.isItemVisible[this._config.allowFeatured],
                isFeaturedVisibleClass:
                  this._class.isItemVisible[
                  this._config.allowFeatured && this._state.isFeaturedVisible
                  ],
                allowInfoClass:
                  this._class.isItemVisible[this._config.allowInfo],
              }),
              this._eventNames.push("resultselected"),
              this._initCallbacks(),
              (this._resultsScrollbar = null),
              (this._featuredScrollbar = null),
              (this.onResize = null),
              (this.results = []),
              (this._excludeResults = []),
              (this._suggestionsThreshold = 0.05),
              (this.index = -1),
              this.bindFunctions([
                "_find",
                "renderResults",
                "open",
                "close",
                "eraseInput",
                "onIconClick",
                "reset",
                "keydown",
                "onInputFocus",
                "_getDetails",
                "_handleClick",
              ]),
              window.addEventListener("setupSearch", this.resize);
          }
          init() {
            const { placeholderText: t } = this._config;
            super.init({ placeholderText: t });
            const e =
              0.9 * this._children.input.getAttribute("placeholder").length;
            (this._children.input.style.minWidth = `${e}ch`),
              document.addEventListener("keyup", (t) => {
                "KeyF" === t.code &&
                  (this.open(), this._children.input.focus());
              }),
              (this._children.input.onkeyup = (t) => {
                const e = 0 === this._children.input.value.length;
                this._config.allowFeatured &&
                  e !== this._state.isFeaturedVisible &&
                  (this._featuredScrollbar?.scroll(0),
                    this.setState({
                      isFeaturedVisible: e,
                      isFeaturedVisibleClass: this._class.isItemVisible[e],
                      ...(e && { searchInfo: this._config.infoText.default }),
                    }));
              }),
              this.resize(),
              this.registerManager(this._app.getManager("search"));
          }
          onIconClick() {
            "search-close" === this._state.searchClass
              ? (this._scrollbar?.scroll(0),
                this.open(),
                this._children.input.focus())
              : "" === this._children.input.value
                ? this.reset()
                : this._children.results
                  .querySelector(".active")
                  ?.firstChild.click();
          }
          resize() {
            super.resize(),
              "function" == typeof this.onResize && this.onResize();
          }
          reset() {
            this.eraseInput(), this._config.initialOpen || this.close();
          }
          keydown(t) {
            const e = t.key;
            "Escape" === e && (this.eraseInput(), this.close());
            const s = this.results.length;
            s &&
              ("ArrowDown" === e
                ? ((this.index = (this.index + 1) % s), t.preventDefault())
                : "ArrowUp" === e
                  ? ((this.index -= 1),
                    this.index < 0 && (this.index = s - 1),
                    t.preventDefault())
                  : "Enter" === e &&
                  (this._handleClick(
                    this.results[this.index]?.link || this.results[0]?.link,
                    this._searchString,
                  ),
                    t.preventDefault()),
                this.setSelected(this.index));
          }
          setSelected(t) {
            this.index = t;
            for (let t = 0; t < this.results.length; t++) {
              const e = this.results[t].element;
              e &&
                (t === this.index
                  ? e.classList.add("active")
                  : e.classList.remove("active"));
            }
          }
          onInputFocus() {
            this.setState({ focusedClass: "input-focused" });
          }
          eraseInput() {
            this._resultsScrollbar?.destroy(),
              (this._resultsScrollbar = null),
              (this._children.input.value = ""),
              (this._children.results.innerHTML = "");
          }
          registerManager(t) {
            this._searchManager = t;
          }
          _find(t, e) {
            this._searchTimeout && clearTimeout(this._searchTimeout),
              t && t.target && t.target.value && (e = t.target.value);
            const { maxEntries: s } = this._config;
            this._searchTimeout = setTimeout(async () => {
              if (this._searchManager) {
                const t = this._searchManager.find(e, s),
                  i =
                    t?.length && this._excludeResults?.length
                      ? t.filter(
                        ({ item: t }) => !this._excludeResults.includes(t.id),
                      )
                      : t;
                await this.renderResults(i, e);
              }
            }, 100);
          }
          async renderResults(t, e) {
            if (
              ((this.index = -1),
                (this.results = []),
                (this._searchString = e),
                this._resultsScrollbar?.destroy(),
                (this._resultsScrollbar = null),
                (this._children.results.innerHTML = ""),
                this._children.results.classList.remove("no-results"),
                !t || !Array.isArray(t))
            )
              return;
            const s = [],
              i = [];
            for (let n = 0; n < t.length; n++) {
              const o = t[n],
                { nameSearch: r } = this._config,
                a = o.item[r.find((t) => void 0 !== o.item[t])];
              if (
                this._config.stopOnExactMatch &&
                e.toLowerCase() === a.toLowerCase()
              ) {
                (i.length = 0), (s.length = 0), i.push(o);
                break;
              }
              o.score < this._suggestionsThreshold ? i.push(o) : s.push(o);
            }
            1 === i.length
              ? this._config.allowDetail
                ? await this._renderResultCard(i[0], e)
                : this._renderResultList(i, e)
              : 0 === i.length
                ? this._renderSuggestions(s, e)
                : this._renderResultList(i, e),
              (this._children.container.className =
                t && t.length > 0 ? "bar half-border" : "bar"),
              i.length > 3 &&
              (this._resultsScrollbar ??= this._createScrollbar(
                this._children.results,
              ));
            const {
              allowInfo: n,
              infoText: o,
              maxSuggestions: r,
            } = this._config;
            if (n) {
              let t = o.nomatches;
              i.length
                ? (t = `${i.length} ${o.results}${i.length > 1 ? "s" : ""}`)
                : s.length &&
                (t = `${Math.min(s.length, r)} ${o.suggestions}${s.length > 1 ? "s" : ""
                  }`),
                this.setState({ searchInfo: t });
            }
            this.setSelected(0);
          }
          async _renderResultCard(t, e) {
            try {
              let s = await this._getDetails(t);
              if (!s && t && t.item) {
                const { nameDisplay: e } = this._config;
                s = { title: t.item[e.find((e) => void 0 !== t.item[e])] };
              }
              const n = document.createElement("div");
              n.className = "card-title result-div";
              const o = document.createElement("h4");
              o.className = "semi clickable";
              let r = s.title;
              if ("string" == typeof r) {
                const t = r.toUpperCase().indexOf(e.toUpperCase());
                if (t > -1) {
                  const s = r.substring(t, t + e.length),
                    i = r.split(s);
                  i &&
                    2 === i.length &&
                    ((r = ""),
                      i[0].length > 0 &&
                      (r += `<span class='unmatch'>${i[0]}</span>`),
                      (r += s),
                      i[1].length > 0 &&
                      (r += `<span class='unmatch'>${i[1]}</span>`));
                }
              } else r = "";
              o.innerHTML = r;
              const a = i.AppUtils.addStartToPath(t.item.id);
              o.addEventListener(
                "mouseover",
                () => {
                  this.setSelected(0);
                },
                !1,
              ),
                o.addEventListener(
                  "click",
                  () => {
                    t.item && this._handleClick(t.item.id, e);
                  },
                  !1,
                ),
                n.appendChild(o),
                this.results.push({ link: a, element: n }),
                (this._children.results.innerHTML = ""),
                this._children.results.appendChild(n),
                s.cards && this._createStoryBlock(s.cards),
                s.featuredEvents &&
                s.featuredEvents.initial &&
                this._createEventsBlock(s.featuredEvents.initial, t.item.id),
                s.exploration &&
                s.exploration.initial &&
                this._createExplorationBlock(s.exploration.initial),
                s.featuredMoons &&
                this._createMoonsBlock(s.featuredMoons, t.item.id);
            } catch (s) {
              void 0 !== s.status && 404 === s.status
                ? this._renderResultList([t], e)
                : s && console.error(s);
            }
          }
          _createEventsBlock(t, e) {
            if (!Array.isArray(t) || 0 === t.length) return;
            const s = this._app.getManager("content").getEntityInfo(e);
            if (null === s || !s.hasEvents) return;
            const n = this._createBlockContainer();
            n.classList.add("events");
            this._createHeaderBlock("Featured Events", n);
            for (let s = 0; s < t.length; s++) {
              const o = t[s],
                r = o.title,
                a = i.AppUtils.addStartToPath(e + "/events/" + o.eventId),
                l = this._createSingleResult(r, a, n);
              this.results.push({ link: a, element: l });
            }
          }
          _createMoonsBlock(t) {
            if (!Array.isArray(t) || 0 === t.length) return;
            const e = this._createBlockContainer();
            e.classList.add("moons");
            this._createHeaderBlock("Featured Moons", e);
            for (let s = 0; s < t.length; s++) {
              const i = t[s],
                n = t[s],
                o = this._createSingleResult(i, n, e);
              this.results.push({ link: n, element: o });
            }
          }
          _createExplorationBlock(t) {
            if (!Array.isArray(t) || 0 === t.length) return;
            const e = this._createBlockContainer();
            e.classList.add("exploration");
            this._createHeaderBlock("Exploration", e);
            for (let s = 0; s < t.length; s++) {
              const i = t[s];
              let n = i.title;
              null !== i.info &&
                void 0 !== i.info &&
                (n += " (" + i.info + ")");
              const o = i.url,
                r = this._createSingleResult(n, o, e);
              this.results.push({ link: o, element: r });
            }
          }
          _createStoryBlock(t) {
            if (!Array.isArray(t) || 0 === t.length) return;
            const e = this._createBlockContainer();
            e.classList.add("stories");
            let s = !1;
            for (let i = 0; i < t.length; i++) {
              const n = t[i];
              if (void 0 !== n.storyId) {
                const t = this._app.getManager("content").getStoryList()
                  .stories[n.storyId];
                if (void 0 !== t) {
                  s || (this._createHeaderBlock("Stories", e), (s = !0));
                  const i = t.title,
                    o = "/story/" + n.storyId,
                    r = this._createSingleResult(i, o, e);
                  this.results.push({ link: o, element: r });
                }
              }
            }
          }
          _createBlockContainer() {
            const t = document.createElement("div");
            return (
              (t.className = "block-container"),
              this._children.results.appendChild(t),
              t
            );
          }
          _createHeaderBlock(t, e) {
            const s = document.createElement("div");
            s.className = "header";
            const i = document.createElement("span");
            (i.className = "title small semi"),
              (i.innerHTML = t),
              s.appendChild(i),
              e.appendChild(s);
          }
          _createSingleResult(t, e, s) {
            const i = document.createElement("div");
            i.className = "result-div";
            const n = document.createElement("button");
            (n.className = "small clickable capitalize"), (n.innerHTML = t);
            const o = this.results.length - 1 + 1;
            return (
              i.addEventListener(
                "click",
                () => {
                  this._handleClick(e, this._searchString);
                },
                !1,
              ),
              i.addEventListener(
                "mouseover",
                () => {
                  this.setSelected(o);
                },
                !1,
              ),
              i.appendChild(n),
              s.appendChild(i),
              i
            );
          }
          _renderResultList(t, e) {
            for (let s = 0; s < t.length; s++) {
              const n = t[s].item,
                { nameSearch: o } = this._config,
                r = n[o.find((t) => void 0 !== n[t])];
              if (!r) continue;
              const a = document.createElement("button");
              a.className = "entries clickable thin small";
              const l = n.url || n.id;
              let c = r;
              const h = r.toUpperCase().indexOf(e.toUpperCase());
              if (h > -1) {
                const t = c.substring(h, h + e.length);
                c = c.replace(t, `<span class='semi'>${t}</span>`);
              }
              a.innerHTML = c;
              const u = i.AppUtils.addStartToPath(l),
                d = document.createElement("div");
              (d.className = "result-div"),
                d.appendChild(a),
                d.addEventListener(
                  "mouseover",
                  () => {
                    this.setSelected(s);
                  },
                  !1,
                ),
                d.addEventListener(
                  "click",
                  () => {
                    this._handleClick(l, e);
                  },
                  !1,
                ),
                this.results.push({ link: u, element: d }),
                this._children.results.appendChild(d);
            }
          }
          _renderSuggestions(t, e) {
            const s = document.createElement("div");
            if (((s.className = "suggestion"), t.length > 0)) {
              const n = document.createElement("label");
              (n.className = "title small semi"),
                (n.innerHTML = "Did you mean...?"),
                s.appendChild(n);
              for (
                let n = 0;
                n < Math.min(this._config.maxSuggestions, t.length);
                n++
              ) {
                const o = document.createElement("button");
                o.className = "entries clickable";
                const r = t[n].item,
                  { nameSearch: a } = this._config,
                  l = r[a.find((t) => void 0 !== r[t])];
                if (l) {
                  const t = r.url || r.id;
                  o.innerHTML = l;
                  const a = i.AppUtils.addStartToPath(t);
                  o.addEventListener(
                    "mouseover",
                    () => {
                      this.setSelected(n);
                    },
                    !1,
                  ),
                    o.addEventListener(
                      "click",
                      () => {
                        this._handleClick(t, e);
                      },
                      !1,
                    );
                  const c = document.createElement("div");
                  (c.className = "result-div small"),
                    c.appendChild(o),
                    s.appendChild(c),
                    this.results.push({ link: a, element: c });
                }
              }
            } else if (!this._config.allowInfo) {
              const t = document.createElement("label");
              (t.className = "title no-match small"),
                (t.innerHTML = "No matches."),
                s.appendChild(t),
                this._children.results.classList.add("no-results");
            }
            this._children.results.appendChild(s);
          }
          open() {
            this.setState({
              magClass: "mag-close",
              searchClass: "search-open",
              isFeaturedVisible: this._config.allowFeatured,
              isFeaturedVisibleClass:
                this._class.isItemVisible[this._config.allowFeatured],
              ...(this._config.allowFeatured && {
                searchInfo: this._config.infoText.default,
              }),
            });
          }
          close() {
            this.getState("alwaysOpen")
              ? this.setState({
                magClass: "mag-close",
                searchClass: "search-open",
                focusedClass: "",
                isFeaturedVisible: !1,
                isFeaturedVisibleClass: this._class.isItemVisible.false,
              })
              : this.setState({
                magClass: "mag-open",
                searchClass: "search-close",
                focusedClass: "",
                isFeaturedVisible: !1,
                isFeaturedVisibleClass: this._class.isItemVisible.false,
              }),
              this._children.input?.blur();
          }
          setupFeaturedSuggestion(t = []) {
            this._children.featured.innerHTML = "";
            for (let e = 0; e < t.length; e++) {
              const { text: s, url: i } = t[e],
                n = document.createElement("li");
              (n.innerHTML = s),
                (n.className = "clickable thin"),
                n.addEventListener("click", () => {
                  this._handleClick(i, this._searchString);
                }),
                this._children.featured.appendChild(n);
            }
          }
          _createScrollbar(t) {
            return i.AppUtils.addScrollbar(t, { sizeAutoCapable: !0 });
          }
          _getLink(t) {
            return t;
          }
          _handleClick(t, e) {
            if (!t) return;
            this.reset(), this.triggerCallbacks("resultselected");
            const s = this._app.getManager("router"),
              i = this._getLink(t),
              n = "string" == typeof i ? i : i.path ?? "";
            if (n.includes("events")) s.navigate({}, n, { __remove: "all" });
            else {
              const { options: t = { keepTime: !0 }, query: e = {} } =
                "object" == typeof i && i;
              s.navigate(e, n, t);
            }
          }
          simulate(t) {
            const { input: e } = this._children;
            this.onIconClick(), (e.value = t), this._find({}, t), e.onkeyup();
          }
          async _getDetails(t) {
            return this._app.getManager("content").getEntityDesc(t.item.id);
          }
          setExcludeResults(t) {
            this._excludeResults = t;
          }
          __enable() {
            super.__enable(),
              this._config.allowFeatured &&
              this._children.featured?.parentElement &&
              (this._featuredScrollbar ??= this._createScrollbar(
                this._children.featured.parentElement,
              ));
          }
        }
        (Search.html = o()), (e.default = Search);
      },
      function (t) {
        t.exports =
          '<div class="search {{isVisibleClass}}">\n\t<span class="icon icon-search clickable {{magClass}}" onclick="onIconClick"></span>\n\t<div class="{{searchClass}} {{focusedClass}}">\n\t\t<div class="cover" onclick="reset"></div>\n\t\t<div key="container" class="bar">\n\t\t\t<span class="icon icon-search clickable"></span>\n\t\t\t<input key="input" type="text" placeholder="{$placeholderText}" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" oninput="_find" onfocus="onInputFocus" onkeydown="keydown"></input>\n\t\t\t<span class="close icon icon-close clickable search-close-icon" onclick="reset"></span>\n\t\t\t<div class="results-container">\n\t\t\t\t<div key="results" class="scrollable results gradient"></div>\n\t\t\t</div>\n\t\t\t<span class="search-info tiny {{allowInfoClass}}">{{searchInfo}}</span>\n\t\t\t<div class="featured gradient scrollable {{allowFeaturedClass}} {{isFeaturedVisibleClass}}">\n\t\t\t\t<ul key="featured"></ul>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(217);
        s(359);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Clock: function () {
              return Clock;
            },
          });
        var i = s(2),
          n = (s(218), s(358)),
          o = s.n(n);
        class Clock extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, {
              isVisible: !1,
              isDateVisible: !0,
              isTimeVisible: !0,
              isMeridiemVisible: !0,
              allowEdit: !0,
              date: "Date",
              time: "Time",
              meridiem: "",
              alert: "",
              ...e,
            }),
              Object.assign(this._state, {
                isDateVisibleClass:
                  this._class.isVisible[this._state.isDateVisible],
                isTimeVisibleClass:
                  this._class.isVisible[this._state.isTimeVisible],
                isMeridiemVisibleClass:
                  this._class.isVisible[this._state.isMeridiemVisible],
              }),
              this.bindFunctions(["update", "onDateTimeClick"]);
          }
          init() {
            super.init();
            const { allowEdit: t } = this._state;
            this._app
              .getManager("time")
              .setDateFormats({
                utc: { date: "MMM DD, YYYY", time: "HH[:]mm[:]ss" },
                local: {
                  date: "MMM DD, YYYY",
                  time: "hh[:]mm[:]ss",
                  meridiem: "a",
                  parse: [
                    "MMM D, YYYY h:m:s a",
                    "MMM D, YYYY h:m a",
                    "MMM D, YYYY h a",
                    "MMM D, YYYY",
                  ],
                },
              }),
              this._app.getManager("time").setDisplayUTC(!1);
            const {
              displayContainer: e,
              timeInput: s,
              timeForm: i,
            } = this._children;
            t &&
              (e.classList.add("editable"),
                s.addEventListener("keyup", (t) => {
                  t.stopPropagation();
                }),
                s.addEventListener("keydown", (t) => {
                  t.stopPropagation();
                }),
                i.classList.add("editable"),
                i.addEventListener("submit", (t) => {
                  s.blur(), this._parseTime(s.value), t.preventDefault();
                }),
                s.addEventListener("blur", (t) => {
                  i.classList.add("hidden"), e.classList.remove("hidden");
                })),
              this._setVariables(this._element),
              this._children.date.classList.add("semi"),
              this._children.time.classList.add("semi"),
              this._children.meridiem.classList.add("semi"),
              this._children.timeInput.classList.add("semi"),
              this._children.timeForm.classList.add("semi"),
              this._callbackRegistry.push({
                emitter: this._app.getManager("time"),
                event: "update",
                callback: this.update,
              });
          }
          onDateTimeClick() {
            const {
              displayContainer: t,
              timeInput: e,
              timeForm: s,
              date: i,
              time: n,
              meridiem: o,
            } = this._children;
            if (!this._state.allowEdit) return;
            const r = this._state.meridiem ? ` ${o.innerHTML}` : "";
            (e.value = `${i.innerHTML} ${n.innerHTML}${r}`),
              t.classList.add("hidden"),
              s.classList.remove("hidden"),
              e.focus();
          }
          isERT() {
            return this._isERT;
          }
          toggle(t, e) {
            switch (t) {
              case "date":
                this.setState({
                  isDateVisible: e,
                  isDateVisibleClass: this._class.isVisible[e],
                });
                break;
              case "time":
                this.setState({
                  isTimeVisible: e,
                  isTimeVisibleClass: this._class.isVisible[e],
                });
                break;
              case "meridiem":
                this.setState({
                  isMeridiemVisible: e,
                  isMeridiemVisibleClass: this._class.isVisible[e],
                });
            }
          }
          _parseTime(t) {
            const e = this._app.getManager("router"),
              s = this._app.getManager("time").parseTime(t, "parse");
            if (s.isValid()) {
              this._app.getManager("time").setDisplayUTC(s.isUTC());
              const t = this._app.getManager("time").getTimeUrl(s);
              e.navigate({ time: t }, e.currentRoute.url);
            } else
              console.error("Invalid input: " + t),
                e.navigate({ __remove: ["time"] }, e.currentRoute.url);
          }
          update(t) {
            this._state.isVisible &&
              this.setState({
                date: t.format(
                  this._app.getManager("time").getDateFormat("date"),
                ),
                time: t.format(
                  this._app.getManager("time").getDateFormat("time"),
                ),
                meridiem: this._app.getManager("time").isUTC()
                  ? ""
                  : t.format(
                    this._app.getManager("time").getDateFormat("meridiem"),
                  ),
                alert: this._app.getManager("time").forcedPause ? "alert" : "",
              });
          }
          setLimitMessage(t, e) {
            let s;
            if (e) s = `"${e}"`;
            else {
              const { currentView: e } = this._app.getManager("router"),
                { _isSpacecraft: i } = this._app.getView(e);
              let n = "time " + (1 === t ? "maximum" : "minimum");
              "event" === e
                ? (n = "event " + (1 === t ? "end" : "start"))
                : i && (n = "mission " + (1 === t ? "end" : "start")),
                (s =
                  1 === t ? `"cannot exceed ${n}"` : `"cannot preceed ${n}"`);
            }
            this._children.displayContainer?.style.setProperty(
              "--limit-message",
              s,
            ),
              this._displayLimitMessage(!0),
              (this.limitMessageTimeout = setTimeout(() => {
                this._displayLimitMessage(!1);
              }, 3e3));
          }
          _displayLimitMessage(t) {
            this._children.displayContainer?.classList.toggle("limit", t);
          }
          __disable() {
            this._displayLimitMessage(!1),
              clearTimeout(this.limitMessageTimeout),
              super.__disable();
          }
        }
        (Clock.html = o()), (e.default = Clock);
      },
      ,
      ,
      ,
      function (t, e, s) {
        var i = {
          "./af": 222,
          "./af.js": 222,
          "./ar": 223,
          "./ar-dz": 224,
          "./ar-dz.js": 224,
          "./ar-kw": 225,
          "./ar-kw.js": 225,
          "./ar-ly": 226,
          "./ar-ly.js": 226,
          "./ar-ma": 227,
          "./ar-ma.js": 227,
          "./ar-sa": 228,
          "./ar-sa.js": 228,
          "./ar-tn": 229,
          "./ar-tn.js": 229,
          "./ar.js": 223,
          "./az": 230,
          "./az.js": 230,
          "./be": 231,
          "./be.js": 231,
          "./bg": 232,
          "./bg.js": 232,
          "./bm": 233,
          "./bm.js": 233,
          "./bn": 234,
          "./bn-bd": 235,
          "./bn-bd.js": 235,
          "./bn.js": 234,
          "./bo": 236,
          "./bo.js": 236,
          "./br": 237,
          "./br.js": 237,
          "./bs": 238,
          "./bs.js": 238,
          "./ca": 239,
          "./ca.js": 239,
          "./cs": 240,
          "./cs.js": 240,
          "./cv": 241,
          "./cv.js": 241,
          "./cy": 242,
          "./cy.js": 242,
          "./da": 243,
          "./da.js": 243,
          "./de": 244,
          "./de-at": 245,
          "./de-at.js": 245,
          "./de-ch": 246,
          "./de-ch.js": 246,
          "./de.js": 244,
          "./dv": 247,
          "./dv.js": 247,
          "./el": 248,
          "./el.js": 248,
          "./en-au": 249,
          "./en-au.js": 249,
          "./en-ca": 250,
          "./en-ca.js": 250,
          "./en-gb": 251,
          "./en-gb.js": 251,
          "./en-ie": 252,
          "./en-ie.js": 252,
          "./en-il": 253,
          "./en-il.js": 253,
          "./en-in": 254,
          "./en-in.js": 254,
          "./en-nz": 255,
          "./en-nz.js": 255,
          "./en-sg": 256,
          "./en-sg.js": 256,
          "./eo": 257,
          "./eo.js": 257,
          "./es": 258,
          "./es-do": 259,
          "./es-do.js": 259,
          "./es-mx": 260,
          "./es-mx.js": 260,
          "./es-us": 261,
          "./es-us.js": 261,
          "./es.js": 258,
          "./et": 262,
          "./et.js": 262,
          "./eu": 263,
          "./eu.js": 263,
          "./fa": 264,
          "./fa.js": 264,
          "./fi": 265,
          "./fi.js": 265,
          "./fil": 266,
          "./fil.js": 266,
          "./fo": 267,
          "./fo.js": 267,
          "./fr": 268,
          "./fr-ca": 269,
          "./fr-ca.js": 269,
          "./fr-ch": 270,
          "./fr-ch.js": 270,
          "./fr.js": 268,
          "./fy": 271,
          "./fy.js": 271,
          "./ga": 272,
          "./ga.js": 272,
          "./gd": 273,
          "./gd.js": 273,
          "./gl": 274,
          "./gl.js": 274,
          "./gom-deva": 275,
          "./gom-deva.js": 275,
          "./gom-latn": 276,
          "./gom-latn.js": 276,
          "./gu": 277,
          "./gu.js": 277,
          "./he": 278,
          "./he.js": 278,
          "./hi": 279,
          "./hi.js": 279,
          "./hr": 280,
          "./hr.js": 280,
          "./hu": 281,
          "./hu.js": 281,
          "./hy-am": 282,
          "./hy-am.js": 282,
          "./id": 283,
          "./id.js": 283,
          "./is": 284,
          "./is.js": 284,
          "./it": 285,
          "./it-ch": 286,
          "./it-ch.js": 286,
          "./it.js": 285,
          "./ja": 287,
          "./ja.js": 287,
          "./jv": 288,
          "./jv.js": 288,
          "./ka": 289,
          "./ka.js": 289,
          "./kk": 290,
          "./kk.js": 290,
          "./km": 291,
          "./km.js": 291,
          "./kn": 292,
          "./kn.js": 292,
          "./ko": 293,
          "./ko.js": 293,
          "./ku": 294,
          "./ku.js": 294,
          "./ky": 295,
          "./ky.js": 295,
          "./lb": 296,
          "./lb.js": 296,
          "./lo": 297,
          "./lo.js": 297,
          "./lt": 298,
          "./lt.js": 298,
          "./lv": 299,
          "./lv.js": 299,
          "./me": 300,
          "./me.js": 300,
          "./mi": 301,
          "./mi.js": 301,
          "./mk": 302,
          "./mk.js": 302,
          "./ml": 303,
          "./ml.js": 303,
          "./mn": 304,
          "./mn.js": 304,
          "./mr": 305,
          "./mr.js": 305,
          "./ms": 306,
          "./ms-my": 307,
          "./ms-my.js": 307,
          "./ms.js": 306,
          "./mt": 308,
          "./mt.js": 308,
          "./my": 309,
          "./my.js": 309,
          "./nb": 310,
          "./nb.js": 310,
          "./ne": 311,
          "./ne.js": 311,
          "./nl": 312,
          "./nl-be": 313,
          "./nl-be.js": 313,
          "./nl.js": 312,
          "./nn": 314,
          "./nn.js": 314,
          "./oc-lnc": 315,
          "./oc-lnc.js": 315,
          "./pa-in": 316,
          "./pa-in.js": 316,
          "./pl": 317,
          "./pl.js": 317,
          "./pt": 318,
          "./pt-br": 319,
          "./pt-br.js": 319,
          "./pt.js": 318,
          "./ro": 320,
          "./ro.js": 320,
          "./ru": 321,
          "./ru.js": 321,
          "./sd": 322,
          "./sd.js": 322,
          "./se": 323,
          "./se.js": 323,
          "./si": 324,
          "./si.js": 324,
          "./sk": 325,
          "./sk.js": 325,
          "./sl": 326,
          "./sl.js": 326,
          "./sq": 327,
          "./sq.js": 327,
          "./sr": 328,
          "./sr-cyrl": 329,
          "./sr-cyrl.js": 329,
          "./sr.js": 328,
          "./ss": 330,
          "./ss.js": 330,
          "./sv": 331,
          "./sv.js": 331,
          "./sw": 332,
          "./sw.js": 332,
          "./ta": 333,
          "./ta.js": 333,
          "./te": 334,
          "./te.js": 334,
          "./tet": 335,
          "./tet.js": 335,
          "./tg": 336,
          "./tg.js": 336,
          "./th": 337,
          "./th.js": 337,
          "./tk": 338,
          "./tk.js": 338,
          "./tl-ph": 339,
          "./tl-ph.js": 339,
          "./tlh": 340,
          "./tlh.js": 340,
          "./tr": 341,
          "./tr.js": 341,
          "./tzl": 342,
          "./tzl.js": 342,
          "./tzm": 343,
          "./tzm-latn": 344,
          "./tzm-latn.js": 344,
          "./tzm.js": 343,
          "./ug-cn": 345,
          "./ug-cn.js": 345,
          "./uk": 346,
          "./uk.js": 346,
          "./ur": 347,
          "./ur.js": 347,
          "./uz": 348,
          "./uz-latn": 349,
          "./uz-latn.js": 349,
          "./uz.js": 348,
          "./vi": 350,
          "./vi.js": 350,
          "./x-pseudo": 351,
          "./x-pseudo.js": 351,
          "./yo": 352,
          "./yo.js": 352,
          "./zh-cn": 353,
          "./zh-cn.js": 353,
          "./zh-hk": 354,
          "./zh-hk.js": 354,
          "./zh-mo": 355,
          "./zh-mo.js": 355,
          "./zh-tw": 356,
          "./zh-tw.js": 356,
        };
        function n(t) {
          var e = o(t);
          return s(e);
        }
        function o(t) {
          if (!s.o(i, t)) {
            var e = new Error("Cannot find module '" + t + "'");
            throw ((e.code = "MODULE_NOT_FOUND"), e);
          }
          return i[t];
        }
        (n.keys = function () {
          return Object.keys(i);
        }),
          (n.resolve = o),
          (t.exports = n),
          (n.id = 221);
      },
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      function (t) {
        t.exports =
          '<time class="clock {{isVisibleClass}}">\n\t<div class="datetime-container {{alert}}">\n\t\t<div key="displayContainer" class="display-container">\n\t\t\t<div key="date" class="date {{isDateVisibleClass}} monospace" onclick="onDateTimeClick">{{date}}</div>\n\t\t\t<div key="time" class="time {{isTimeVisibleClass}} monospace" onclick="onDateTimeClick">{{time}}</div>\n\t\t\t<div key="meridiem" class="meridiem {{isMeridiemVisibleClass}} monospace" onclick="onDateTimeClick">{{meridiem}}</div>\n\t\t</div>\n\t\t<form key="timeForm" class="hidden" method="post" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false">\n\t\t\t<input key="timeInput" type="text" name="hour" class="hour-input" placeholder="hour" autocorrect="off" autocapitalize="off" spellcheck="false" size="25"></input>\n\t\t</form>\n\t</div>\n</time>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(361);
        s(202), s(363);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(145),
          n = (s(218), s(2)),
          o = s(362),
          r = s.n(o);
        class ClockShortcut extends n.BaseComponent {
          constructor(t) {
            super(t, null, {
              hasHover: !1,
              liveContainerClass: "hidden",
              liveClass: "live",
              liveText: "live",
              liveIcon: "icon-live",
              replayClass: "container",
              replayIcon: "icon-replay",
            }),
              (this._state.replayClass = "hidden"),
              (this._class.fontSize.small = "x-small"),
              (this._liveCallback = null),
              this.bindFunctions(["_replay", "backToLive", "update"]);
          }
          init() {
            super.init();
            const { canHover: t, isTouch: e } = this._app;
            t &&
              !e &&
              (this._children.liveContainer.addEventListener(
                "mouseenter",
                () => {
                  this.setState({ hasHover: !0, liveIcon: "icon-live" });
                },
              ),
                this._children.liveContainer.addEventListener(
                  "mouseleave",
                  () => {
                    this.setState({
                      hasHover: !1,
                      liveIcon: "icon-back-to-live",
                    });
                  },
                )),
              i.default.setDefaultProps({
                theme: "default",
                touch: ["hold", 2e3],
                delay: [600, null],
                plugins: [i.followCursor],
              }),
              (0, i.default)(this._children.liveContainer, {
                content: "Reset time to live.",
                placement: "top",
              }),
              this._children.live.classList.add("semi", "color"),
              this._children.replay.classList.add("semi", "color"),
              this._element.removeChild(this._children.replayContainer),
              this._callbackRegistry.push({
                emitter: this._app.getManager("time"),
                event: "update",
                callback: this.update,
              });
          }
          setCallback(t) {
            this._liveCallback = "function" == typeof t ? t : null;
          }
          backToLive() {
            if ("function" == typeof this._liveCallback) this._liveCallback();
            else {
              const t = this._app.getManager("router"),
                e = this._app.getManager("time");
              if (!e.isNow()) {
                const s = e.getTimeUrl(e.getNow()),
                  i = t.query.time;
                t.navigate({ __remove: ["time", "rate"] }, t.currentRoute.url),
                  i !== s && (e.setTimeRate(1), e.setToNow());
              }
            }
          }
          _replay() {
            this._app
              .getManager("router")
              .navigate({ __remove: ["time", "rate"] }) ||
              (this._app.getManager("time").setTimeRate(1),
                this._app.getManager("time").setToStart());
          }
          update(t) {
            if (!this._state.isVisible) return;
            const e = this._app.getManager("time").isNow(),
              s = this._app.getManager("time").getNow(),
              i = {
                liveContainerClass:
                  0 === this._app.getManager("time").isWithinLimits(s)
                    ? e
                      ? "active"
                      : "clickable"
                    : "hidden",
                liveClass: e ? "live" : "",
                replayClass: n.AppUtils.isMobileMode()
                  ? "icon icon-box"
                  : "container",
              };
            this._state.hasHover ||
              (i.liveIcon = e ? "icon-live" : "icon-back-to-live"),
              this.setState(i);
          }
        }
        (ClockShortcut.html = r()), (e.default = ClockShortcut);
      },
      function (t) {
        t.exports =
          '<nav class="clock-shortcut shortcut {{isVisibleClass}}">\n\t<div class="{{replayClass}} replay-container clickable" onclick="_replay" key="replayContainer">\n\t\t<span class="icon {{replayIcon}}" key="iconReplay"></span>\n\t\t<div class="replay text semi" key="replay">Replay</div>\n\t</div>\n\t<div class="{{liveContainerClass}} live-container container" onclick="backToLive" key="liveContainer" data-tippy-content="Reset time to live.">\n\t\t<span class="icon {{liveIcon}}" key="iconLive"></span>\n\t\t<div class="{{liveClass}} text" key="live">{{liveText}}</div>\n\t</div>\n</nav>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(365);
        s(202), s(368);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(145),
          n = s(2),
          o = s(366),
          r = s.n(o),
          a = s(367),
          l = s.n(a);
        class Carousel extends n.BaseComponent {
          constructor(t, e, s = {}) {
            const i = n.AppUtils.isPrimaryTouch()
              ? "Swipe/Tap"
              : "Scroll/Click";
            (s.config = {
              infinite: !1,
              initialSlideIndex: 0,
              vertical: !0,
              timeout: 1e3,
              navigationButtons: {
                prev: { text: "Prev", icon: "icon-greater up" },
                next: { text: "Next", icon: "icon-greater down" },
                replay: { text: "Back To Start", icon: "icon-replay" },
              },
              hintText: {
                default: `${i} arrows to continue`,
                first: `${i} arrow to continue`,
                last: `${i} arrow for previous`,
              },
              ...s.config,
            }),
              super(t, e, {
                slideType: "",
                previousIndex: -1,
                currentIndex: s.config.initialSlideIndex || 0,
                isScrolling: !1,
                isScrollingClass: "",
                isTimeout: !1,
                collapseClass: "expand",
                isCollapsed: !1,
                collapseButtonClass: "icon-collapse",
                isCloseButtonVisible: !1,
                closeButtonText: "Exit",
                isControlsVisible: !1,
                ...s,
              }),
              Object.assign(this._state, {
                isCloseButtonVisibleClass:
                  this._class.isVisible[this._state.isCloseButtonVisible],
                isControlsVisibleClass:
                  this._class.isVisible[this._state.isControlsVisible],
              }),
              (this._children = { track: null, slides: [] }),
              (this._progressTooltip = null),
              (this._onEnter = {}),
              (this._onLeave = {}),
              (this._slideTypes = ["panel", "overlay"]),
              (this._currentInfo = null),
              (this._onSlideChange = this.goToSlide),
              (this._toggleControls = null),
              this._eventNames.push("slidechange", "expandtoggle"),
              this._initCallbacks(),
              this.bindFunctions([
                "_setSlideTrackDimensions",
                "_updateCarousel",
                "_onScroll",
                "_toggleCollapse",
                "_onControlsToggle",
                "goToPrevSlide",
                "goToNextSlide",
                "close",
              ]);
          }
          get currentInfo() {
            return this._currentInfo;
          }
          _onControlsToggle() {
            this._toggleControls();
          }
          setOnControlsToggle(t) {
            this._toggleControls = t;
          }
          init() {
            super.init(),
              this._children.carousel.classList.add(
                this._config.vertical ? "vertical" : "horizontal",
              ),
              this._createSlideTrack(),
              this._updateCarousel(),
              this._children.carousel.classList.add("initialized"),
              window.addEventListener("keydown", (t) => {
                "Tab" === t.key &&
                  this._state.isScrolling &&
                  t.preventDefault();
              }),
              this._children.carousel.addEventListener(
                "transitionstart",
                (t) => {
                  t.target === this._children.track &&
                    "transform" === t.propertyName &&
                    (this.setState({
                      isScrolling: !0,
                      isScrollingClass: "scrolling",
                    }),
                      (this._children.carousel.style.pointerEvents = "all"));
                },
                !0,
              ),
              this._children.carousel.addEventListener(
                "transitionend",
                (t) => {
                  t.target === this._children.track &&
                    "transform" === t.propertyName &&
                    (this.setState({
                      isScrolling: !1,
                      isScrollingClass: "scrolling-done",
                    }),
                      (this._children.carousel.style.pointerEvents = "none"));
                },
                !0,
              ),
              this._children.progress.addEventListener(
                "wheel",
                this._onScroll,
                { passive: !1 },
              ),
              this._children.progress.addEventListener("touchstart", (t) => {
                const e = t.changedTouches[0];
                this._touchStartY = e.pageY;
              }),
              this._children.progress.addEventListener(
                "touchmove",
                (t) => {
                  const e = t.changedTouches[0];
                  (t.deltaY = e.pageY - this._touchStartY),
                    this._onScroll(t, "touch");
                },
                { passive: !1 },
              ),
              this._children.progress.addEventListener(
                "touchend",
                (t) => {
                  const e = t.changedTouches[0];
                  (t.deltaY = e.pageY - this._touchStartY),
                    this._onScroll(t, "touch");
                },
                { passive: !1 },
              );
          }
          resize() {
            super.resize(),
              setTimeout(this._setSlideTrackDimensions, 100),
              this._updateTooltipsProps();
          }
          _updateTooltipsProps() {
            const { slideType: t } = this._state;
            this._progressTooltip.setProps({
              offset: "overlay" === t ? [0, -30] : [0, 10],
            });
          }
          _createSlideTrack() {
            this._children.slides.forEach((t) => {
              this._children.track.appendChild(t);
            }),
              this._setSlideTrackDimensions();
          }
          _setSlideTrackDimensions() {
            const { track: t, slides: e } = this._children,
              { vertical: s } = this._config;
            if (
              (e.forEach((t) => {
                t.style.transition = "none";
              }),
                (t.style.transition = "none"),
                s)
            ) {
              const s = [...e].reduce(
                (t, e) => t + e.getBoundingClientRect().height,
                0,
              );
              t.style.height = s + "px";
            } else {
              const s = [...e].reduce(
                (t, e) => t + e.getBoundingClientRect().width,
                0,
              );
              t.style.width = s + "px";
            }
            (t.style.transition = ""),
              e.forEach((t) => {
                t.style.transition = "";
              }),
              this._updateTrackPosition();
          }
          _updateTrackPosition() {
            const { currentIndex: t } = this._state;
            let e = 0;
            for (let s = 0; s < t; s++)
              e += this._children.slides[s].getBoundingClientRect().height;
            const s = this._config.vertical
              ? `translateY(-${e}px)`
              : `translateX(-${e}px)`;
            this._children.track.style.transform = s;
          }
          _updateSlides() {
            const { previousIndex: t, currentIndex: e } = this._state,
              s = this._children.slides[t];
            s && (s.classList.remove("active"), s.classList.add("hidden"));
            const i = this._children.slides[e];
            i && (i.classList.remove("hidden"), i.classList.add("active"));
          }
          _updateCarousel() {
            this._updateTrackPosition(), this._updateSlides();
          }
          _onScroll(t, e = "mouse") {
            if (this._state.isCollapsed && !this._state.isTimeout)
              this.expand();
            else if (!this._state.isScrolling && !this._state.isTimeout) {
              const s =
                t.currentTarget.querySelector(".os-viewport") ||
                t.currentTarget,
                i = s.scrollTop,
                n = 0 === i,
                o =
                  Math.ceil(s.getBoundingClientRect().height + i) >=
                  s.scrollHeight;
              t.deltaY < 0
                ? "mouse" === e
                  ? t.deltaY < -4 && n && this.goToPrevSlide()
                  : t.deltaY < -5 && o && this.goToNextSlide()
                : t.deltaY > 0 &&
                ("mouse" === e
                  ? t.deltaY > 4 && o && this.goToNextSlide()
                  : t.deltaY > 5 && n && this.goToPrevSlide());
            }
            this.setState({ isTimeout: !0 }, () =>
              setTimeout(
                () => this.setState({ isTimeout: !1 }),
                this._config.timeout,
              ),
            ),
              ["wheel", "touchmove"].includes(t.type) && t.stopPropagation();
          }
          addSlide(t, { isLast: e = !1, isFirst: s = !1 } = {}) {
            const o = t.html || l(),
              { type: r, content: a } = t;
            this._slideTypes.includes(r) ||
              console.warn(
                `addSlide: Unknown slide type "${r}". Supported types: ${this._slideTypes}`,
              );
            const c = n.AppUtils.htmlWithParamsToElement(o, {
              prevButtonText: this._config.navigationButtons.prev.text,
              prevButtonIcon: this._config.navigationButtons.prev.icon,
              nextButtonText: this._config.navigationButtons.next.text,
              nextButtonIcon: this._config.navigationButtons.next.icon,
              replayButtonText: this._config.navigationButtons.replay.text,
              replayButtonIcon: this._config.navigationButtons.replay.icon,
              hintText: () =>
                e
                  ? this._config.hintText.last
                  : s
                    ? this._config.hintText.first
                    : this._config.hintText.default,
              type: r,
            });
            c.querySelector(".content").appendChild(a),
              e && c.classList.add("last"),
              s && c.classList.add("first"),
              t.classList && c.classList.add(...t.classList),
              t.id && (c.dataset.id = t.id),
              (c.dataset.type = t.type || ""),
              this._children.track.appendChild(c),
              this._children.slides.push(c);
            const h = c.firstChild;
            h.addEventListener("wheel", this._onScroll, { passive: !1 }),
              h.addEventListener("touchstart", (t) => {
                const e = t.changedTouches[0];
                this._touchStartY = e.pageY;
              }),
              h.addEventListener(
                "touchmove",
                (t) => {
                  const e = t.changedTouches[0];
                  (t.deltaY = e.pageY - this._touchStartY),
                    this._onScroll(t, "touch");
                },
                { passive: !1 },
              ),
              h.addEventListener(
                "touchend",
                (t) => {
                  const e = t.changedTouches[0];
                  (t.deltaY = e.pageY - this._touchStartY),
                    this._onScroll(t, "touch");
                },
                { passive: !1 },
              ),
              this._setVariables(c),
              this._setEventHandlersFromAttributes(c),
              this._setSlideTrackDimensions(),
              this._updateCarousel(),
              n.AppUtils.addScrollbar(h),
              (this._progressTooltip = (0, i.default)(
                this._children.progress.parentElement,
                {
                  theme: "default",
                  onShow(t) {
                    clearTimeout(t.timeout),
                      (t.timeout = setTimeout(() => {
                        t.hide();
                      }, 2e3));
                  },
                },
              ));
          }
          addSlides(t) {
            for (let e = 0; e < t.length; e++) this.addSlide(t[e]);
          }
          async onEnter(t) {
            const e = this._onEnter[t];
            for (let t = 0; t < e.length; t++)
              "function" == typeof e[t] && (await e[t]());
          }
          async onLeave(t) {
            "number" != typeof t && (t = this._state.currentIndex);
            const e = this._onLeave[t];
            for (let t = 0; t < e.length; t++)
              "function" == typeof e[t] && (await e[t]());
          }
          async goToSlide(t) {
            const e = this._state.currentIndex;
            t !== e && (await this.onLeave(e));
            const s = this._children.slides[t].dataset.type;
            this.setState(
              { currentIndex: t, previousIndex: e, slideType: s },
              () => {
                this._updateCarousel(),
                  (this._children.progress.style.top = `calc(${(100 * t) / (this._children.slides.length - 1)
                    }% - ${this._children.progress.offsetHeight / 2}px)`);
                const e =
                  this._children.slides[t].querySelector(".os-viewport");
                e && (e.scrollTop = 0),
                  this.triggerCallbacks("slidechange", [this._currentInfo]),
                  this._progressTooltip.setContent(
                    `${t + 1} of ${this._children.slides.length}`,
                  ),
                  this._updateTooltipsProps(),
                  this._state.isVisible && this._progressTooltip.show();
              },
            ),
              await this.onEnter(t);
          }
          goToPrevSlide() {
            const { currentIndex: t } = this._state,
              e = this._children.slides.length - 1,
              s = t - 1;
            s < 0
              ? this._config.infinite && this._onSlideChange(e)
              : this._onSlideChange(s);
          }
          goToNextSlide() {
            const { currentIndex: t } = this._state,
              e = t + 1;
            e > this._children.slides.length - 1
              ? this._config.infinite && this._onSlideChange(0)
              : this._onSlideChange(e);
          }
          goToFirstSlide() {
            this._onSlideChange(0);
          }
          isVisible() {
            return this._state.isVisible;
          }
          collapse() {
            this.setState({
              isCollapsed: !0,
              collapseClass: "collapse",
              collapseButtonClass: "icon-expand",
            }),
              this.triggerCallbacks("expandtoggle", [!1]);
          }
          expand() {
            this.setState({
              isCollapsed: !1,
              collapseClass: "expand",
              collapseButtonClass: "icon-collapse",
            }),
              this.triggerCallbacks("expandtoggle", [!0]);
          }
          close() { }
          show() {
            super.show(),
              this._updateCarousel(),
              null !== this._progressTooltip &&
              this._children.slides.length > 1 &&
              this._progressTooltip.show();
          }
          clear() {
            (this._children.track.innerHTML = ""),
              (this._children.slides = []),
              (this._onEnter = {}),
              (this._onLeave = {}),
              (this._currentInfo = null),
              (this._state.previousIndex = 1),
              (this._state.currentIndex = this._config.initialSlideIndex || 0);
          }
          _toggleCollapse() {
            this._state.isCollapsed ? this.expand() : this.collapse();
          }
        }
        (Carousel.html = r()), (e.default = Carousel);
      },
      function (t) {
        t.exports =
          '<div class="carousel-container {{isVisibleClass}} {{slideType}}">\n\t<button class="close-button clickable {{isCloseButtonVisibleClass}}" onclick="close">\n\t\t<span class="text">{{closeButtonText}}</span>\n\t\t<span class="icon icon-close"></span>\n\t</button>\n\t<div class="progress {{slideType}}">\n\t\t<span key="progress" class="icon icon-triangle"></span>\n\t</div>\n\t<div key="carousel" class="carousel {{collapseClass}} {{isScrollingClass}} {{slideType}}">\n\t\t<div class="track" key="track"></div>\n\t</div>\n</div>\n';
      },
      function (t) {
        t.exports =
          '<div class="slide hidden {$type}">\n\t<div class="container {{collapseClass}}">\n\t\t<div class="container-wrapper">\n\t\t\t<div class="mobile-hint small">\n\t\t\t\t<span class="icon icon-greater up clickable" onclick="goToPrevSlide"></span>\n\t\t\t\t<span class="hint-text">{$hintText}</span>\n\t\t\t\t<span class="icon icon-greater down clickable" onclick="goToNextSlide"></span>\n\t\t\t</div>\n\t\t\t<div class="content-container">\n\t\t\t\t<div class="content-wrapper">\n\t\t\t\t\t<div class="content"></div>\n\t\t\t\t\t<div class="controls {{isControlsVisibleClass}}">\n\t\t\t\t\t\t<button class="icon icon-clock clickable" onclick="_onControlsToggle"></button>\n\t\t\t\t\t\t<button class="icon collapse-button clickable {{collapseButtonClass}}" onclick="_toggleCollapse"></button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button class="navigation-button replay mobile clickable" onclick="goToFirstSlide">\n\t\t\t\t\t\t<span class="icon {$replayButtonIcon}"></span>\n\t\t\t\t\t\t{$replayButtonText}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<button class="navigation-button next clickable" onclick="goToNextSlide">\n\t\t\t\t{$nextButtonText}\n\t\t\t\t<span class="icon {$nextButtonIcon}"></span>\n\t\t\t</button>\n\t\t\t<button class="navigation-button replay clickable" onclick="goToFirstSlide">\n\t\t\t\t<span class="icon {$replayButtonIcon}"></span>\n\t\t\t\t{$replayButtonText}\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\t<div class="collapse-container {{collapseClass}}">\n\t\t<button class="mobile-collapse icon clickable {{collapseButtonClass}}" onclick="_toggleCollapse"></button>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(370);
        s(478);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(371),
          n = (s(473), s(474), s(475), s(476), s(2)),
          o = s(477),
          r = s.n(o);
        i.default.use([i.Navigation, i.Keyboard, i.Mousewheel]);
        const a = "OK, got it. Thanks!",
          l = "OK, let's go!";
        class TutorialOverlay extends n.BaseComponent {
          constructor(t, e = {}) {
            (e.config = {
              direction: "horizontal",
              speed: 600,
              slidesPerView: 1,
              spaceBetween: 100,
              keyboard: { enabled: !0 },
              mousewheel: { forceToAxis: !0, thresholdDelta: 100 },
              navigation: {
                prevEl: ".tutorial-carousel-prev",
                nextEl: ".tutorial-carousel-next",
              },
              ...e.config,
            }),
              super(t, null, {
                isVisible: !1,
                carouselClass: "tutorial-carousel",
                slideClass: "",
                dismissText: a,
                ...e,
              }),
              (this._swiper = null),
              (this._allTutorials = null),
              (this._elementMeasures = null),
              (this._currIndex = null),
              (this._slideViewedTimeout = null),
              (this._initTimeout = null),
              (this._bulletClass = "swiper-pagination-bullet"),
              (this._activeBulletClass = "swiper-pagination-bullet-active"),
              (this._swiperSlideClass = "swiper-slide"),
              (this._storageName = "EoA_Tutorials");
          }
          setTutorials(t) {
            (this._allTutorials = t), this._createSlides();
          }
          hideTutorialSlide(t) {
            const { tutorials: e } = this.app;
            return e.filter(({ id: e }) => e !== t);
          }
          _addEvents() {
            this._swiper.on("slideChange", ({ realIndex: t }) => {
              this._setHighlightedElement(t),
                this._setActiveBullet(t),
                this._currIndex !== t && this.navigateToTutorial(t);
              const { id: e } = this._allTutorials[t] || {},
                s = t === this._allTutorials.length - 1,
                i = e ? `tutorial-slide-${e}` : "";
              this.setState({ dismissText: s ? l : a, slideClass: i });
            }),
              this._children.swiperSlides.addEventListener("click", (t) => {
                const e = t?.target?.dataset?.def;
                e &&
                  this._app
                    .getComponent("definitionOverlay")
                    .navigateToDefinition(e);
              });
          }
          _createSlides() {
            const { isTouch: t } = this._app;
            this._allTutorials.forEach(
              ({ id: e, title: s, description: i, extra: n }) => {
                const o = [];
                if (s) {
                  const t = document.createElement("h2");
                  (t.innerHTML = s), o.push(t);
                }
                if (i) {
                  const e =
                    "object" == typeof i ? (t ? i.touch : i.desktop) : i;
                  if ("string" == typeof e) {
                    const t = document.createElement("p");
                    (t.innerHTML = e), o.push(t);
                  }
                }
                if (n) {
                  const e =
                    "object" == typeof n ? (t ? n.touch : n.desktop) : n;
                  if ("string" == typeof e) {
                    const t = document.createElement("div");
                    (t.className = "tutorial-extra"),
                      (t.innerHTML = e),
                      o.push(t);
                  }
                }
                const r = `${this._swiperSlideClass} tutorial-slide-${e}`;
                o.length && this._addSlide(o, r);
              },
            );
          }
          _addSlide(t = [], e) {
            const s = document.createElement("div");
            (s.className = e),
              s.replaceChildren(...t),
              this._children.swiperSlides.append(s);
          }
          _createBullets() {
            const { bullets: t } = this._children,
              { slides: e } = this._swiper,
              s = [...e].map((t, e) => {
                const s = document.createElement("span");
                return (
                  s.classList.add(this._bulletClass),
                  s.addEventListener("click", (t) => this._swiper.slideTo(e)),
                  s
                );
              });
            t.replaceChildren(...s);
          }
          _setActiveBullet(t = this._currIndex) {
            const { bullets: e } = this._children;
            e.childNodes.forEach((e, s) => {
              e.classList.remove(this._activeBulletClass),
                s === t && e.classList.add(this._activeBulletClass);
            });
          }
          _setHighlightedElement(t = this._currIndex, e = !1) {
            (!this._elementMeasures || e) &&
              (this._elementMeasures = this._calcElementMeasures());
            const s = this._elementMeasures[t],
              { mask: i } = this._allTutorials[t];
            if (s) {
              const { xPos: t, yPos: e, relWidth: n, relHeight: o } = s,
                { xSizeMult: r = 1, ySizeMult: a = 1 } = i || {},
                l = 15,
                c = (200 + n * l * 100) * r,
                h = (200 + o * l * 100) * a,
                u = Math.max(200, c),
                d = Math.max(200, h),
                p = 100 / (u - 100),
                m = 100 / (d - 100),
                _ = 0.5 - 0.5 * m + e * m,
                g = (100 * (0.5 - 0.5 * p + t * p)).toFixed(2),
                y = (100 * _).toFixed(2);
              this._element.style.setProperty(
                "--tutorial-mask-grad",
                "radial-gradient(transparent, black 5%)",
              ),
                this._element.style.setProperty(
                  "--tutorial-mask-pos",
                  `${g}% ${y}%`,
                ),
                this._element.style.setProperty(
                  "--tutorial-mask-size",
                  `${u}% ${d}%`,
                );
            } else
              this._element.style.setProperty("--tutorial-mask-grad", null),
                this._element.style.setProperty("--tutorial-mask-pos", null),
                this._element.style.setProperty("--tutorial-mask-size", null);
          }
          onQueryChange({ cancelToken: t, tutorial: e } = {}) {
            clearTimeout(this._slideViewedTimeout);
            const { currentRoute: s, homeRoute: i } =
              this.app.getManager("router");
            if (s.url !== i || t?.isCanceled) return;
            const n = this._getIndexByTutorialId(e);
            n !== this._currIndex &&
              ((this._currIndex = n),
                this._currIndex > -1
                  ? (this._state.isVisible
                    ? this._swiper.slideTo(this._currIndex)
                    : this.show(),
                    this._setSlideViewedTimeout(n))
                  : this.hide());
          }
          _initSwiper() {
            const { carouselClass: t } = this._state,
              e = `.${t} .swiper-wrapper > div`;
            n.AppUtils.elementReady(e).then(() => {
              this._initTimeout = setTimeout(() => {
                this._swiper
                  ? (this._swiper.update(),
                    this._swiper.slideTo(this._currIndex))
                  : ((this._swiper = new i.default(`.${t}`, this._config)),
                    this._postSwiperInitFunction(this._swiper)),
                  0 === this._currIndex &&
                  (this._setActiveBullet(), this._setHighlightedElement()),
                  super.show();
              }, 500);
            });
          }
          _postSwiperInitFunction() {
            this._addEvents(),
              this._createBullets(),
              this._swiper.slideTo(this._currIndex);
          }
          _getIndexByTutorialId(t) {
            return this._allTutorials?.findIndex(({ id: e }) => e === t);
          }
          _setSlideViewedTimeout(t) {
            this._slideViewedTimeout = setTimeout(() => {
              const e =
                localStorage?.getItem(this._storageName)?.split(",") || [];
              e.includes(t.toString()) ||
                (e.push(t),
                  e.sort(),
                  localStorage?.setItem(this._storageName, e));
            }, 3e3);
          }
          _calcElementMeasures() {
            const { clientWidth: t, clientHeight: e } = document.body;
            return this._allTutorials.map(({ targetSelector: s }) => {
              const i = [...document.body.querySelectorAll(s)].filter(
                (t) => null !== t.offsetParent,
              );
              if (!i.length) return !1;
              const {
                left: n,
                width: o,
                top: r,
                height: a,
              } = i[0].getBoundingClientRect();
              return {
                xPos: 1 - (n + 0.5 * o) / t,
                yPos: 1 - (r + 0.5 * a) / e,
                relWidth: o / t,
                relHeight: a / e,
              };
            });
          }
          show() {
            const t = this._app.getManager("layer");
            t.getLayer("ui").visible || t.toggleLayer("ui");
            const e = this._children.swiperSlides?.childNodes?.length;
            e && this._initSwiper();
            if (
              !0 === this._app.getManager("router").configs.hideExternalLinks
            ) {
              const t = document.getElementsByClassName(
                "tutorial-smallprint",
              )[0].innerHTML;
              document.getElementsByClassName(
                "tutorial-smallprint",
              )[0].innerHTML = this._app
                .getManager("content")
                .hideExternalLinksInText(t);
            }
          }
          hide() {
            clearTimeout(this._initTimeout),
              (this._currIndex = null),
              super.hide();
          }
          calcPriorityIndex() {
            const t =
              localStorage?.getItem(this._storageName)?.split(",") || [],
              e = this._allTutorials.filter(
                (e, s) => !t.includes(s.toString()),
              );
            return e.length ? this._getIndexByTutorialId(e[0].id) : null;
          }
          navigateToTutorial(t, e = !1) {
            const {
              homeRoute: s,
              currentRoute: i,
              navigate: n,
            } = this.app.getManager("router"),
              o = e ? s : i.url ?? "";
            if (
              "number" == typeof t &&
              t > -1 &&
              t < this._allTutorials.length
            ) {
              const { id: e } = this._allTutorials[t];
              n({ tutorial: e }, o);
            }
          }
          close() {
            this.app.getManager("router").navigate({ __remove: ["tutorial"] });
          }
          resize() {
            this._state.isVisible &&
              null !== this._currIndex &&
              this._setHighlightedElement(this._currIndex, !0);
          }
        }
        (TutorialOverlay.html = r()), (e.default = TutorialOverlay);
      },
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      function (t) {
        t.exports =
          '<div id="tutorial-overlay" class="{{isVisibleClass}} {{slideClass}}">\n\n\t<div class="swiper {{carouselClass}}">\n\t\t<div key="swiperSlides" class="swiper-wrapper"></div>\n\n\t\t<div class="swiper-button-prev icon prev-arrow tutorial-carousel-prev"></div>\n\t\t<div class="swiper-button-next icon next-arrow tutorial-carousel-next"></div>\n\n\t\t<div key="bullets" class="bullet-container"></div>\n\n\t</div>\n\n\t<div class="dismiss-container">\n\t\t<button class="dismiss-button clickable" onclick="close">{{dismissText}}</button>\n\t</div>\n\n\n\t<footer>\n\t\t<p class=\'tutorial-smallprint\'>The data used to generate this visualization is from the <a href=\'https://cneos.jpl.nasa.gov\' target=\'_blank\'>Center for Near-Earth Object Studies</a> and JPL\'s <a href=\'https://ssd.jpl.nasa.gov\' target=\'_blank\'>Solar System Dynamics</a> website. Visit the <a href=\'https://www.nasa.gov/planetarydefense/overview\' target=\'_blank\'>Planetary Defense Coordination Office</a> for more information on how NASA monitors for potentially hazardous asteroids and comets.</p>\n\t</footer>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(480);
        s(473), s(474), s(482), s(475), s(476), s(483);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(371),
          n = s(2),
          o = s(481),
          r = s.n(o);
        i.default.use([i.Navigation, i.Pagination, i.Keyboard, i.Mousewheel]);
        class CarouselPanel extends n.BaseComponent {
          constructor(t, e = {}) {
            const {
              paginationClass: s,
              prevButtonClass: i,
              nextButtonClass: n,
            } = e;
            (e.config = {
              direction: "horizontal",
              speed: 600,
              grabCursor: !0,
              touchStartPreventDefault: !1,
              slidesPerView: 1,
              spaceBetween: 100,
              keyboard: { enabled: !0 },
              mousewheel: { forceToAxis: !0, thresholdDelta: 100 },
              navigation: { prevEl: `.${i}`, nextEl: `.${n}` },
              ...(s && {
                pagination: {
                  el: `.${s}`,
                  type: "custom",
                  renderCustom: (t, e, s) => `${e} of ${s}`,
                },
              }),
              ...e.config,
            }),
              super(t, null, {
                isVisible: !1,
                preTitle: "viewing",
                title: "Panel Title",
                caption: "This is the panel subtitle",
                carouselClass: "",
                paginationClass: "",
                prevButtonClass: "",
                nextButtonClass: "",
                isExpandedClass: "collapsed",
                tabsVisibleClass: "hidden",
                tabNumClass: "",
                ...e,
              }),
              (this._swiper = null),
              (this._tabIndices = null),
              (this._activeTabIndex = null),
              (this._tabElements = null),
              (this._bulletClass = "swiper-pagination-bullet"),
              (this._activeBulletClass = "swiper-pagination-bullet-active"),
              (this._swiperSlideClass = "swiper-slide"),
              (this._onSlideChange = null),
              (this._expandOnShow = !1),
              (this._orientation = null),
              (this._resizeTimeout = null),
              (this._isInitialized = null),
              this._eventNames.push("expandtoggle"),
              this._initCallbacks(),
              this.bindFunctions(["_onTabClick"]);
          }
          _addEvents() {
            this._swiper.on("slideChange", (t) => {
              const { realIndex: e, previousIndex: s } = t;
              let i = e;
              "function" == typeof this._onSlideChange &&
                this._onSlideChange(t);
              const n = this._children.swiperSlides.childNodes[s];
              if (
                (n?._scrollInstance &&
                  ((n._isMousedown = !1), n._scrollInstance.scroll(0)),
                  this._tabElements)
              ) {
                const t = this._tabIndices.findIndex(
                  ({ start: t, end: s }) => e >= t && e <= s,
                ),
                  { start: s } = this._tabIndices[t];
                if (((i -= s), t > -1 && t !== this._activeTabIndex))
                  return (
                    this._tabElements.forEach((e, s) => {
                      e.classList.toggle("active", s === t);
                    }),
                    (this._activeTabIndex = t),
                    void this._createBullets(i)
                  );
              }
              this._setActiveBullet(i);
            }),
              this._children.swiperSlides.addEventListener("click", (t) => {
                const e = t?.target?.dataset?.def;
                e &&
                  this._app
                    .getComponent("definitionOverlay")
                    .navigateToDefinition(e);
              });
          }
          _hasOrientationChanged() {
            const t = n.AppUtils.isPortrait() ? "portrait" : "landscape",
              e = this._orientation !== t;
            return (this._orientation = t), e;
          }
          _addScrollbars() {
            const t = this._hasOrientationChanged();
            this._children?.swiperSlides?.childNodes?.forEach((e) => {
              const {
                clientHeight: s,
                scrollHeight: i,
                cHeight: o,
                sHeight: r,
              } = e;
              if (o && o === s && r && r === i && !t) return;
              e._scrollInstance?.destroy();
              const { clientHeight: a, scrollHeight: l } = e;
              if (((e.sHeight = a), (e.cHeight = l), l > a)) {
                e.classList.add("scrollable"),
                  (e._scrollInstance ??= n.AppUtils.addScrollbar(e)),
                  (e._isMousedown = !1),
                  (e._clientY = 0);
                const t = ({ clientY: t }) => {
                  if (e._isMousedown) {
                    const s = e._clientY - t;
                    e._scrollInstance.scroll({ y: `+=${s}` }), (e._clientY = t);
                  }
                };
                e.onmousedown = ({ clientY: s }) => {
                  (e._isMousedown = !0),
                    (e._clientY = s),
                    window.addEventListener("mousemove", t),
                    window.addEventListener("mouseup", function s() {
                      (e._isMousedown = !1),
                        window.removeEventListener("mousemove", t),
                        window.removeEventListener("mouseup", s);
                    });
                };
              }
            });
          }
          createTabs(t) {
            (this._tabIndices = []), (this._activeTabIndex = 0);
            let e = 0;
            this._swiper && this._destroy(),
              (this._tabElements = t.map(({ title: t, content: s }, i) => {
                const n = document.createElement("button");
                (n.innerHTML = t),
                  (n.className =
                    "clickable " +
                    (i === this._activeTabIndex ? "active" : "")),
                  n.addEventListener("click", this._onTabClick),
                  this._tabIndices.push({ start: e, end: e + s.length - 1 }),
                  (e += s.length);
                for (const t of s) {
                  const e = this._createSlideElements(t);
                  this.addSlide(e, t.onClick);
                }
                return n;
              })),
              this._children.tabsContainer.replaceChildren(
                ...this._tabElements,
              ),
              this.setState({
                tabsVisibleClass: "",
                tabNumClass: `tabs-${this._tabElements.length}`,
              });
          }
          _createSlideElements(t) {
            const { title: e, content: s, value: i } = t,
              n = [];
            if (e) {
              const t = document.createElement("h4");
              (t.className = "title semi"), (t.innerHTML = e), n.push(t);
            }
            if (s) {
              const t = document.createElement("div");
              (t.className = "description"), (t.innerHTML = s), n.push(t);
            }
            if (i) {
              const t = document.createElement("div");
              (t.className = "value semi"), (t.innerHTML = i), n.push(t);
            }
            return n;
          }
          _createBullets(t = 0) {
            const { bullets: e } = this._children,
              { slides: s } = this._swiper;
            let i = [...s],
              n = 0;
            if (this._tabElements) {
              const { start: t, end: e } =
                this._tabIndices[this._activeTabIndex];
              (n = t), (i = i.slice(t, e + 1));
            }
            const o = [...i].map((t, e) => {
              const s = document.createElement("span");
              return (
                s.classList.add(this._bulletClass),
                s.setAttribute("data-slide-index", e + n),
                s.addEventListener("click", (t) => {
                  const { slideIndex: e } = t.target.dataset;
                  this._swiper.slideTo(e);
                }),
                s
              );
            }),
              r = (s) => {
                (s && "width" !== s.propertyName) ||
                  (e.replaceChildren(...o),
                    e.classList.remove("hidden"),
                    this._setActiveBullet(t));
              };
            e.classList.contains("hidden")
              ? r()
              : (e.classList.add("hidden"),
                (e.ontransitionend = r),
                (e.ontransitioncancel = r));
          }
          _setActiveBullet(t) {
            const { bullets: e } = this._children;
            e.childNodes.forEach((e, s) => {
              e.classList.remove(this._activeBulletClass),
                s === t && e.classList.add(this._activeBulletClass);
            });
          }
          addSlide(t = [], e) {
            const s = document.createElement("div");
            (s.className = `${e ? "clickable" : ""} ${this._swiperSlideClass}`),
              e && s.addEventListener("click", e),
              s.replaceChildren(...t),
              this._children.swiperSlides.append(s);
          }
          initSwiper() {
            const { carouselClass: t } = this._state,
              e = `.${t} .swiper-wrapper > div`;
            return n.AppUtils.elementReady(e).then(() => {
              this._swiper
                ? (this._swiper.update(),
                  this._addScrollbars(),
                  this._createBullets(),
                  this._swiper.slideTo(0))
                : ((this._swiper = new i.default(`.${t}`, this._config)),
                  this._postSwiperInitFunction(this._swiper));
            });
          }
          _postSwiperInitFunction() {
            this._addEvents(),
              this._addScrollbars(),
              this._createBullets(),
              this._swiper.update(),
              this._swiper.slideTo(0);
          }
          _destroy() {
            (this._children.swiperSlides.innerHTML = ""),
              clearTimeout(this._resizeTimeout);
          }
          _onTabClick(t) {
            const e = this._tabElements.findIndex((e) => e === t.target),
              { start: s } = this._tabIndices[e];
            this._swiper.slideTo(s);
          }
          expand() {
            this.setState({ isExpanded: !0, isExpandedClass: "expanded" }),
              this.triggerCallbacks("expandtoggle", [!0]);
          }
          collapse() {
            this.setState({ isExpanded: !1, isExpandedClass: "collapsed" }),
              this.triggerCallbacks("expandtoggle", [!1]);
          }
          setExpandState(t) {
            this.setState({
              isExpanded: t,
              isExpandedClass: t ? "expanded" : "collapsed",
            }),
              this.triggerCallbacks("expandtoggle", [t]);
          }
          show(t = !0) {
            const e = this._app.getManager("layer").getLayer("ui").visible,
              s = this._children.swiperSlides?.childNodes?.length,
              i = () => {
                this._expandOnShow
                  ? (this.setState({
                    isVisible: !0,
                    isVisibleClass: this._class.isVisible.true,
                    isExpanded: !0,
                    isExpandedClass: "expanded",
                  }),
                    this.triggerCallbacks("expandtoggle", [!0]),
                    this.triggerCallbacks("visiblechange", [!0]))
                  : super.show();
              };
            t && e && s ? this.initSwiper().then(() => i()) : i();
          }
          hide() {
            this.setState({
              isVisible: !1,
              isVisibleClass: this._class.isVisible.false,
              isExpanded: !1,
              isExpandedClass: "collapsed",
            }),
              this.triggerCallbacks("expandtoggle", [!1, !1]),
              this.triggerCallbacks("visiblechange", [!1]),
              this._expandOnShow && (this._isInitialized = !1);
          }
          resize() {
            clearTimeout(this._resizeTimeout),
              (this._resizeTimeout = setTimeout(() => {
                this._addScrollbars();
              }, 200));
          }
        }
        (CarouselPanel.html = r()), (e.default = CarouselPanel);
      },
      function (t) {
        t.exports =
          '<section id="panel-container" class="{{panelTypeClass}} {{isVisibleClass}} {{isExpandedClass}}">\n\n\t\x3c!-- Simple panel (collapsed) --\x3e\n\t<div class="panel-simple clickable" onclick="expand">\n\t\t<div class="expand-button">\n\t\t\t<div class="icon circle-arrow"></div>\n\t\t</div>\n\t\t<h5 class="simple-pretitle">{{preTitle}}</h5>\n\t\t<h4 class="simple-title">{{title}}</h4>\n\t</div>\n\n\t\x3c!-- Main panel (expanded) --\x3e\n\t<div class="panel-main">\n\n\t\t<div class="panel-header">\n\t\t\t<div class="header-title">\n\t\t\t\t<div class="title-icon icon icon-large {{headerIconClass}}"></div>\n\t\t\t\t<h4 class="title-text">{{title}}</h4>\n\t\t\t\t<div class="collapse-button clickable" onclick="collapse">\n\t\t\t\t\t<div class="icon circle-arrow"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<h5 class="header-caption {{captionClass}}">{{caption}}</h5>\n\t\t</div>\n\n\t\t\x3c!-- Carousel content --\x3e\n\t\t<div key="content" class="panel-content">\n\t\t\t<nav key="tabsContainer" class="tabs-container {{tabsVisibleClass}} {{tabNumClass}}"></nav>\n\t\t\t<div class="swiper {{carouselClass}}">\n\t\t\t\t<div key="swiperSlides" class="swiper-wrapper"></div>\n\n\n\t\t\t\t<div class="swiper-pagination {{paginationClass}}"></div>\n\n\t\t\t\t<div class="swiper-button-prev icon prev-arrow {{prevButtonClass}}"></div>\n\t\t\t\t<div class="swiper-button-next icon next-arrow {{nextButtonClass}}"></div>\n\n\t\t\t\t<div key="bullets" class="bullet-container"></div>\n\n\t\t\t</div>\n\t\t</div>\n\n\t</div>\n\n\n\n</section>\n';
      },
      ,
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(485);
        s(202), s(487);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(145),
          n = s(2),
          o = s(486),
          r = s.n(o);
        class TimeController extends n.BaseComponent {
          constructor(t) {
            super(t, null, {
              isPlay: !1,
              playClass: "",
              rate: 0,
              rateDisplay: 0,
            }),
              (this._class.fontSize.small = "tiny"),
              (this._class.isPlay = { true: "icon-pause", false: "icon-play" }),
              (this._rates = [
                -94608e3, -31536e3, -6048e3, -604800, -86400, -36e3, -3600,
                -600, -60, -10, -1, 0, 1, 10, 60, 600, 3600, 36e3, 86400,
                604800, 6048e3, 31536e3, 94608e3,
              ]),
              (this._manager = this._app.getManager("time")),
              (this._router = this._app.getManager("router")),
              this._manager.setDefaultTimeRate(1);
            const e = this._manager.getTimeRate(),
              s = 0 !== e;
            this.setState({
              isPlay: s,
              playClass: this._class.isPlay[s],
              rate: e,
              rateDisplay: this.getRateDisplay(),
            }),
              this.bindFunctions([
                "getRateLimits",
                "setRateLimits",
                "setRate",
                "setDefaultRate",
                "setRealRate",
                "decreaseRate",
                "increaseRate",
                "togglePlayPause",
                "onRateChange",
                "onForcedPause",
                "onForcedPauseResume",
              ]);
          }
          init() {
            super.init(),
              i.default.setDefaultProps({
                theme: "default",
                touch: ["hold", 2e3],
                delay: [600, null],
                plugins: [i.followCursor],
              }),
              (0, i.default)(this._children.toggleBtn, { placement: "top" }),
              (0, i.default)(this._children.increaseBtn, { placement: "top" }),
              (0, i.default)(this._children.decreaseBtn, { placement: "top" }),
              this._children.decreaseContainer.classList.add(
                "bg-color",
                "gray",
                "dark",
              ),
              this._children.increaseContainer.classList.add(
                "bg-color",
                "gray",
                "dark",
              ),
              this._children.label.classList.add("semi"),
              this._children.rateDisplay.classList.add("semi"),
              this._callbackRegistry.push({
                emitter: this._app.getManager("time"),
                event: "ratechange",
                callback: this.onRateChange,
              });
          }
          getRateLimits() {
            return this._rates;
          }
          setRateLimits(t) {
            this._rates = t;
          }
          setRate(t) {
            this._router.navigate(
              { time: this._manager.getTimeUrl(), rate: t },
              this._router.currentRoute.url,
            );
          }
          decreaseRate() {
            if (0 === this._rates.length) return;
            const t = this._rates.indexOf(this._manager.getTimeRate());
            0 !== t && this.setRate(this._rates[t - 1]);
          }
          increaseRate() {
            if (0 === this._rates.length) return;
            const t = this._rates.indexOf(this._manager.getTimeRate());
            t !== this._rates.length - 1 && this.setRate(this._rates[t + 1]);
          }
          togglePlayPause() {
            !this._state.isPlay ? this._manager.play() : this._manager.pause(),
              this.setRate(this._manager.getTimeRate());
          }
          setDefaultRate() {
            this.setRate(this._manager.getDefaultTimeRate());
          }
          setRealRate() {
            this.setRate(1);
          }
          onRateChange() {
            const t = this._manager.getTimeRate(),
              e = 0 !== t;
            (e === this._state.isPlay && this._state.rate === t) ||
              (this._rates.length > 0 && !this._rates.includes(t)
                ? this.setRate(this._manager.getDefaultTimeRate())
                : this.setState({
                  isPlay: e,
                  rate: t,
                  playClass: this._class.isPlay[e],
                  rateDisplay: this.getRateDisplay(t),
                }));
          }
          onForcedPause() {
            this.setRate(0);
          }
          onForcedPauseResume() {
            this.setDefaultRate();
          }
          getRateUnit(t = null) {
            null === t && (t = this._manager.getTimeRate());
            const e = t / 31536e3,
              s = t / 2592e3,
              i = t / 604800,
              n = t / 86400,
              o = t / 3600,
              r = t / 60;
            let a = "";
            return (
              (e >= 1 || e <= -1) && e % 1 == 0
                ? ((t = e), (a = " yr"))
                : (s >= 1 || s <= -1) && s % 1 == 0
                  ? ((t = s), (a = " mth"))
                  : (i >= 1 || i <= -1) && i % 1 == 0
                    ? ((t = i), (a = " wk"))
                    : (n >= 1 || n <= -1) && n % 1 == 0
                      ? ((t = n), (a = " day"))
                      : (o >= 1 || o <= -1) && o % 1 == 0
                        ? ((t = o), (a = " hr"))
                        : (r >= 1 || r <= -1) && r % 1 == 0
                          ? ((t = r), (a = " min"))
                          : ((t %= 60), (a = " sec")),
              { rate: t, unit: a }
            );
          }
          getRateDisplay(t) {
            const { rate: e, unit: s } = this.getRateUnit(t);
            return 0 !== e ? e + s + "(s)/sec" : "paused";
          }
        }
        (TimeController.html = r()), (e.default = TimeController);
      },
      function (t) {
        t.exports =
          '<div class="time-controller {{isVisibleClass}}">\n\t<div class="rate-container">\n\t\t<button key="toggleBtn" class="icon {{playClass}} clickable play-pause" data-tippy-content="Pause / play" onclick="togglePlayPause"></button>\n\t\t<label key="label" class="rate-label">rate</label>\n\t\t<button key="decreaseBtn" class="prev-rate clickable" data-tippy-content="Decrease time rate" onclick="decreaseRate">\n\t\t\t<span key="decreaseContainer" class="container">\n\t\t\t\t<span class="icon icon-backward"></span>\n\t\t\t</span>\n\t\t</button>\n\t\t<div class="vertical-line"></div>\n\t\t<button key="increaseBtn" class="next-rate clickable" data-tippy-content="Increase time rate" onclick="increaseRate">\n\t\t\t<span key="increaseContainer" class="container">\n\t\t\t\t<span class="icon icon-forward"></span>\n\t\t\t</span>\n\t\t</button>\n\t\t<label key="rateDisplay" class="rate-display-label">{{rateDisplay}}</label>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LayerPanel: function () {
              return LayerPanel;
            },
          });
        var i = s(2),
          n = s(489),
          o = s.n(n);
        s(490);
        class LayerPanel extends i.BaseComponent {
          constructor(t, e = {}) {
            (e.config = {
              layers: e.layers || [],
              checkboxType: e.checkboxType || "default",
              ...e.config,
            }),
              super(t, null, {
                isVisible: !1,
                ui: t.getManager("layer").getLayer("ui").defaultVisibility,
                planets: t.getManager("layer").getLayer("planets")
                  .defaultVisibility,
                asteroids: t.getManager("layer").getLayer("asteroids")
                  .defaultVisibility,
                comets: t.getManager("layer").getLayer("comets")
                  .defaultVisibility,
                dwarfPlanets: t.getManager("layer").getLayer("dwarfPlanets")
                  .defaultVisibility,
                spacecraft: t.getManager("layer").getLayer("spacecraft")
                  .defaultVisibility,
                trails: t.getManager("layer").getLayer("trails")
                  .defaultVisibility,
                orbits: t.getManager("layer").getLayer("orbits")
                  .defaultVisibility,
                labels: t.getManager("layer").getLayer("labels")
                  .defaultVisibility,
                icons: t.getManager("layer").getLayer("icons")
                  .defaultVisibility,
                starfield: t.getManager("layer").getLayer("starfield")
                  .defaultVisibility,
                constellations: t.getManager("layer").getLayer("constellations")
                  .defaultVisibility,
                ...e,
              }),
              (this._eyesCheck = "eyes" === e.checkboxType),
              Object.assign(this._class, {
                checkbox: {
                  true: this._eyesCheck ? "active" : "active icon-checkmark",
                  false: this._eyesCheck ? "" : "checkbox-hover",
                },
                boxColor: { true: "settings-alt", false: "" },
                isVisible: { true: "", false: "" },
              }),
              Object.assign(this._state, {
                uiClass: this._class.checkbox[this._state.ui],
                uiColorClass: this._class.boxColor[this._state.ui],
                planetsClass: this._class.checkbox[this._state.planets],
                planetsColorClass: this._class.boxColor[this._state.planets],
                asteroidsClass: this._class.checkbox[this._state.asteroids],
                asteroidsColorClass:
                  this._class.boxColor[this._state.asteroids],
                cometsClass: this._class.checkbox[this._state.comets],
                cometsColorClass: this._class.boxColor[this._state.comets],
                dwarfPlanetsClass:
                  this._class.checkbox[this._state.dwarfPlanets],
                dwarfPlanetsColorClass:
                  this._class.boxColor[this._state.dwarfPlanets],
                constellationsClass:
                  this._class.checkbox[this._state.constellations],
                constellationsColorClass:
                  this._class.boxColor[this._state.constellations],
                spacecraftClass: this._class.checkbox[this._state.spacecraft],
                spacecraftColorClass:
                  this._class.boxColor[this._state.spacecraft],
                trailsClass: this._class.checkbox[this._state.trails],
                trailsColorClass: this._class.boxColor[this._state.trails],
                orbitsClass: this._class.checkbox[this._state.orbits],
                orbitsColorClass: this._class.boxColor[this._state.orbits],
                labelsClass: this._class.checkbox[this._state.labels],
                labelsColorClass: this._class.boxColor[this._state.labels],
                iconsClass: this._class.checkbox[this._state.icons],
                iconsColorClass: this._class.boxColor[this._state.icons],
                starfieldClass: this._class.checkbox[this._state.starfield],
                starfieldColorClass:
                  this._class.boxColor[this._state.starfield],
              }),
              (this._categories = {
                ui: "User Interface",
                planets: "Planet",
                asteroids: "Asteroid",
                comets: "Comet",
                dwarfPlanets: "Dwarf Planet",
                spacecraft: "Spacecraft",
                trails: "Trail",
                labels: "Label",
                icons: "Icons",
                starfield: "Star Field",
                constellations: "Constellations",
              }),
              (this._categoriesDisplay = {
                ui: "User Interface",
                planets: "Planets",
                asteroids: "Asteroids",
                comets: "Comets",
                dwarfPlanets: "Dwarf Planets",
                constellations: "Constellations",
                spacecraft: "Spacecraft",
                trails: "Trails",
                orbits: "Orbits",
                labels: "Labels",
                icons: "Icons",
                starfield: "Star Field",
              }),
              this.bindFunctions(["toggleLayer", "handleLayerToggle"]),
              (this._fadeInRight = null),
              (this._fadeOutRight = null),
              (this._fadeInBottom = null),
              (this._fadeOutBottom = null),
              (this._lastMode = i.AppUtils.isMobileMode()),
              this._initCallbacks();
          }
          resize() {
            super.resize(), this._updatePosition();
          }
          init() {
            super.init(),
              this._callbackRegistry.push({
                emitter: this._app.getManager("layer"),
                event: "toggleLayer",
                callback: this.handleLayerToggle,
              });
            const t = this._children.layerPanelBody;
            if (t) {
              t.textContent = "";
              const e = document.createElement("div");
              (e.className = "container"),
                this._config.layers.forEach((t) => {
                  const s = document.createElement("div");
                  s.classList.add("block");
                  const i = document.createElement("ul");
                  i.classList.add("layers"),
                    t.forEach((t) => {
                      const e = document.createElement("li");
                      if ((e.setAttribute("key", t), this._eyesCheck)) {
                        e.className = `layer-panel-layer item clickable {{${t}Class}}`;
                        const s = document.createElement("div");
                        s.classList.add("eyes-checkbox"),
                          (s.innerHTML = `<input type="checkbox" id="layer-panel-checkbox-${t}" ${this._state[t] ? "checked" : ""
                            }><label for="layer-panel-checkbox-${t}"></label>`),
                          e.append(s);
                      } else {
                        e.className = "layer-panel-layer item clickable";
                        const s = document.createElement("span");
                        (s.className = `checkbox icon {{${t}Class}} bg-color {{${t}ColorClass}}`),
                          e.append(s);
                      }
                      const s = document.createElement("span");
                      s.classList.add("small"),
                        (s.textContent = this._categoriesDisplay[t]),
                        e.append(s),
                        e.addEventListener("click", this.toggleLayer),
                        i.append(e);
                    }),
                    s.append(i),
                    e.append(s);
                }),
                t.append(e),
                this._setVariables(t);
            }
          }
          _createAnimations() {
            (this._fadeOutRight = i.AnimationUtils.directionalFade(
              this._element,
              { direction: "right", fade: "out", yOffset: 0 },
            )),
              (this._fadeInRight = i.AnimationUtils.directionalFade(
                this._element,
                { direction: "right", fade: "in", yOffset: 0 },
              )),
              (this._fadeOutBottom = i.AnimationUtils.directionalFade(
                this._element,
                { direction: "down", fade: "out", yOffset: 0 },
              )),
              (this._fadeInBottom = i.AnimationUtils.directionalFade(
                this._element,
                { direction: "down", fade: "in", yOffset: 0 },
              ));
          }
          _resetAnimations() {
            (this._fadeInRight.currentTime = 0),
              (this._fadeOutRight.currentTime = 0),
              (this._fadeInBottom.currentTime = 0),
              (this._fadeOutBottom.currentTime = 0),
              this._fadeInRight.pause(),
              this._fadeOutRight.pause(),
              this._fadeInBottom.pause(),
              this._fadeOutBottom.pause();
          }
          toggleLayer(t) {
            const e = t.target?.getAttribute("key") ?? t;
            this._app
              .getManager("layer")
              .toggleLayer(e, { category: this._categories[e] });
          }
          handleLayerToggle(t, e, s) {
            const i = t + "Class",
              n = t + "ColorClass";
            if (
              null !== this.getState(t) &&
              (this.setState({
                [t]: e,
                [i]: this._class.checkbox[e],
                [n]: this._class.boxColor[e],
              }),
                this._eyesCheck)
            ) {
              const s = document.getElementById(`layer-panel-checkbox-${t}`);
              s && (s.checked = e);
            }
          }
          isCategoryEnabled(t) {
            return !this._children[t]?.classList.contains("disabled");
          }
          setCategoryEnabled(t, e = !0) {
            this._children[t]?.classList.toggle("disabled", !e);
          }
          hide() {
            this.getState("isVisible") &&
              (super.hide(),
                i.AppUtils.isMobileMode()
                  ? ((this._fadeOutBottom = i.AnimationUtils.directionalFade(
                    this._element,
                    { direction: "down", fade: "out", yOffset: 0 },
                  )),
                    this._fadeOutBottom.play())
                  : ((this._fadeOutRight = i.AnimationUtils.directionalFade(
                    this._element,
                    { direction: "right", fade: "out", yOffset: 0 },
                  )),
                    this._fadeOutRight.play()));
          }
          show() {
            super.show(),
              i.AppUtils.isMobileMode()
                ? ((this._fadeInBottom = i.AnimationUtils.directionalFade(
                  this._element,
                  { direction: "down", fade: "in", yOffset: 0 },
                )),
                  this._fadeInBottom.play())
                : ((this._fadeInRight = i.AnimationUtils.directionalFade(
                  this._element,
                  { direction: "right", fade: "in", yOffset: 0 },
                )),
                  this._fadeInRight.play());
          }
          _updatePosition() {
            const t = i.AppUtils.isMobileMode();
            t !== this._lastMode &&
              ((this._lastMode = t), this._state.isVisible && this.show());
          }
          __enable() {
            super.__enable(), this._createAnimations();
          }
          __disable() {
            super.__disable(),
              (this._fadeInRight = null),
              (this._fadeOutRight = null),
              (this._fadeInBottom = null),
              (this._fadeOutBottom = null);
          }
        }
        LayerPanel.html = o();
      },
      function (t) {
        t.exports =
          '<div class="layer-panel {{isVisibleClass}}" id="layer-panel">\n\t<div class="header" onclick="hide">\n\t\t<h5 class="title">Layers</h5>\n\t\t<button class="icon icon-greater clickable close"></button>\n\t</div>\n\t<div key="layerPanelBody">\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Breadcrumb: function () {
              return Breadcrumb;
            },
          });
        var i = s(2),
          n = s(492),
          o = s.n(n);
        s(493);
        class Breadcrumb extends i.BaseComponent {
          constructor(t, e = { params: {} }) {
            (e.params = { title: "", ...e.params }),
              super(t, null, e),
              (this._class.isHomeActiveClass = { true: "active", false: "" }),
              (this._crumbTexts = {
                compare: "Compare Size",
                events: "Mission Events",
              }),
              this.setCrumbClickHandler((t) => {
                this._app
                  .getManager("router")
                  .navigate(t, "", { __remove: "all", keepTime: !0 });
              }),
              Object.assign(this._state, {
                isHomeActive: !1,
                isHomeActiveClass: this._class.isHomeActiveClass.false,
              }),
              this.bindFunctions(["_goToHome"]);
          }
          updateBreadcrumb(t) {
            this._element.innerHTML = "";
            const e = document.createDocumentFragment();
            !1 === this._app.getManager("router").configs.logo &&
              this._children.staticLogo.classList.add("hidden"),
              this._app.getManager("router").configs.locked &&
              this._children.static.classList.remove("clickable"),
              e.appendChild(this._children.static);
            const s =
              !t || 0 === t.length || (1 === t.length && "home" === t[0]);
            if (
              (s && (t = null),
                this.setState({
                  isHomeActive: s,
                  isHomeActiveClass: this._class.isHomeActiveClass[s],
                }),
                t && t.length > 0)
            )
              for (let s = 0; s < t.length; s++) {
                const i = t[s],
                  n = t.slice(0, s + 1).join("/"),
                  o = this._createCrumb(i, n);
                e.appendChild(o);
              }
            this._element.appendChild(e);
          }
          onRouteChange({ routeParts: t } = {}) {
            this.updateBreadcrumb(t);
          }
          setCrumbClickHandler(t) {
            this._onCrumbClick = t;
          }
          _goToHome() {
            this._app
              .getManager("router")
              .navigate({ __remove: "all" }, "/home");
          }
          _getCrumbText(t) {
            if (this._crumbTexts[t]) return this._crumbTexts[t];
            const e = this._app.getManager("content").getEntityInfo([t]);
            if (e) return e.displayName || e.iauName;
            const s = this._app.getManager("content").events[t];
            if (s) return s.title;
            const i = this._app.getManager("content").getStoryList().stories[t];
            return i ? i.title : "";
          }
          _createCrumb(t, e) {
            const s = document.createElement("nav"),
              { locked: i } = this._app.getManager("router").configs;
            (s.className = "container " + (i ? "" : "clickable")),
              i ||
              s.addEventListener("click", () => {
                this._onCrumbClick(e);
              });
            const n = document.createElement("span");
            (n.className = "separator icon icon-greater"), s.appendChild(n);
            const o = document.createElement("a");
            return (
              (o.innerHTML = this._getCrumbText(t) || t),
              (o.className = "text link"),
              s.appendChild(o),
              s
            );
          }
        }
        Breadcrumb.html = o();
      },
      function (t) {
        t.exports =
          '<nav class="breadcrumb semi">\n\t<nav key="static" class="container clickable home {{isHomeActiveClass}}" onclick="_goToHome">\n\t\t<span key="staticLogo" class="icon icon-nasa-logo"></span>\n\t\t<h1 class="text uppercase">{$title}</h1>\n\t</nav>\n</nav>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            StoryBaseContentBlock: function () {
              return StoryBaseContentBlock;
            },
          });
        var i = s(2);
        s(495);
        class StoryBaseContentBlock extends i.BaseComponent {
          constructor(t, e = { config: { info: {} } }) {
            (e.isVisible = !0),
              super(t, null, e),
              this._config.info.onEnter &&
              (this.onEnter = async () =>
                await this._config.info.onEnter(t, this)),
              this._config.info.onLeave &&
              (this.onLeave = async () =>
                await this._config.info.onLeave(t, this)),
              this.bindFunctions(["onEnter", "onLeave", "onClick"]);
          }
          init() {
            super.init(this._config.info),
              this._element.classList.add(
                "content-block",
                "{{isVisibleClass}}",
              ),
              Array.isArray(this._config.info.classList) &&
              this._element.classList.add(...this._config.info.classList),
              this._setVariables(this._element, !1),
              (this._config.info.clickable || this._config.info.func) &&
              (this._element.classList.add("clickable"),
                this._element.addEventListener("click", this.onClick));
          }
          async onEnter() { }
          async onLeave() { }
          async onClick() {
            const { type: t } = this._config.info;
            "buttons" !== t && (await this._config.info.func(this._app, this));
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            HintBlock: function () {
              return HintBlock;
            },
          });
        var i = s(2),
          n = s(497),
          o = s.n(n);
        s(498);
        class HintBlock extends i.StoryBaseContentBlock {
          constructor(t, e = {}) {
            super(t, {
              iconBefore: "icon-greater",
              iconAfter: "icon-greater",
              ...e,
            }),
              Object.assign(this._state, {
                text: this._config.info.text || "Scroll to continue",
                isIconBeforeVisibleClass:
                  this._class.isVisible[this._config.info.iconBeforeText || !1],
                isIconAfterVisibleClass:
                  this._class.isVisible[this._config.info.iconAfterText || !1],
              });
          }
        }
        HintBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="hint-block {$class}">\n\t<span class="icon before {{iconBefore}} {{isIconBeforeVisibleClass}}"></span>\n\t<span class="text">{{text}}</span>\n\t<span class="icon after {{iconAfter}} {{isIconAfterVisibleClass}}"></span>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ToggleBlock: function () {
              return ToggleBlock;
            },
          });
        var i = s(2),
          n = s(500),
          o = s.n(n);
        s(501);
        class ToggleBlock extends i.StoryBaseContentBlock {
          constructor(t, e = {}) {
            super(t, { isSelected: !1, ...e }),
              (this._class.isSelectedClass = { true: "selected", false: "" }),
              (this._config.info.selected = Boolean(
                this._config.info.selected,
              )),
              Object.assign(this._state, {
                isSelectedClass:
                  this._class.isSelectedClass[this._state.isSelected],
              });
          }
          async onEnter() {
            await super.onEnter(),
              this._config.info.selected !== this._state.isSelected &&
              (await this.onClick());
          }
          async onLeave() {
            await super.onLeave(),
              this._state.isSelected && (await this.onClick());
          }
          async onClick() {
            await super.onClick(),
              this._state.isSelected
                ? (this.unselect(), console.log("unselect"))
                : (this.select(), console.log("select"));
          }
          select() {
            this.setState({
              isSelected: !0,
              isSelectedClass: this._class.isSelectedClass.true,
            });
          }
          unselect() {
            this.setState({
              isSelected: !1,
              isSelectedClass: this._class.isSelectedClass.false,
            });
          }
        }
        ToggleBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="clickable toggle-block {{isSelectedClass}}">\n\t<button>\n\t\t{$text}\n\t</button>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TitleBlock: function () {
              return TitleBlock;
            },
          });
        var i = s(2),
          n = s(503),
          o = s.n(n);
        class TitleBlock extends i.StoryBaseContentBlock { }
        TitleBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="title-block">\n\t<h1 class="title">{$title}</h1>\n\t<h2 class="subtitle">{$subtitle}</h2>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ImageBlock: function () {
              return ImageBlock;
            },
          });
        var i = s(2),
          n = s(505),
          o = s.n(n);
        s(506);
        class ImageBlock extends i.StoryBaseContentBlock {
          onClick() {
            const t = this._element.cloneNode(!0);
            t.classList.add("fullscreen"),
              t.classList.remove("clickable"),
              this._app.getComponent("overlay").setContent(t),
              this._app.getComponent("overlay").show();
          }
        }
        ImageBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="image-block">\n\t<img class="{$className}" src="{$src}" alt="{$alt}">\n\t<span class="title">{$title}</span>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DescriptionBlock: function () {
              return DescriptionBlock;
            },
          });
        var i = s(2),
          n = s(508),
          o = s.n(n);
        s(509);
        class DescriptionBlock extends i.StoryBaseContentBlock {
          constructor(t, e = {}) {
            super(t, { hasMore: !1, isMoreVisible: !1, ...e }),
              (this._class.hasMoreClass = { true: "", false: "hidden" }),
              (this._more = {
                isVisible: {
                  moreMessage: "Show Less",
                  moreIcon: "icon-minus",
                  moreClass: "",
                },
                isHidden: {
                  moreMessage: "Show More",
                  moreIcon: "icon-plus",
                  moreClass: "hidden",
                },
              }),
              Object.assign(this._state, this._more.isHidden, {
                hasMoreClass: this._class.hasMoreClass[this._state.hasMore],
              });
          }
          init() {
            super.init();
            const t = Boolean(this._config.info.more);
            this.setState({
              hasMore: t,
              hasMoreClass: this._class.hasMoreClass[t],
            });
          }
          showMore() {
            this.setState({ isMoreVisible: !0, ...this._more.isVisible });
          }
          hideMore() {
            this.setState({ isMoreVisible: !1, ...this._more.isHidden });
          }
          toggleMore() {
            this._state.isMoreVisible ? this.hideMore() : this.showMore();
          }
        }
        DescriptionBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="description-block">\n\t<div key="header" class="header">\n\t\t<h2 class="title">{$title}</h2>\n\t\t<h3 class="subtitle semi">{$subtitle}</h3>\n\t</div>\n\t<div key="body" class="body">\n\t\t<div class="description">{$description}</div>\n\t\t<span class="more-description {{moreClass}}" >\n\t\t\t{$more}\n\t\t</span>\n\t\t<span class="clickable more-toggle {{hasMoreClass}}" onclick="toggleMore">\n\t\t\t<span class="x-small more-message">\n\t\t\t\t{{moreMessage}}\n\t\t\t</span>\n\t\t\t<span class="button clickable icon more-icon {{moreIcon}}"></span>\n\t\t</span>\n\t</div>\n\t<div key="footer" class="footer"></div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ReplayButtonBlock: function () {
              return ReplayButtonBlock;
            },
          });
        var i = s(2),
          n = s(511),
          o = s.n(n);
        s(512);
        class ReplayButtonBlock extends i.StoryBaseContentBlock {
          init() {
            this._config.info.text ||
              (this._config.info.text = this._config.info.fromStart
                ? "Restart Story"
                : "Replay Animation"),
              super.init(this._config.info);
          }
          async onClick() {
            const t = this._app.getManager("router");
            this._config.info.fromStart
              ? t.navigate(t.currentRoute.url)
              : t.reload();
          }
        }
        ReplayButtonBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="clickable replay-button-block" onclick="onClick">\n\t<button>\n\t\t<span class="icon icon-replay"></span>\n\t\t<span class="text semi">{$text}</span>\n\t</button>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ButtonsBlock: function () {
              return ButtonsBlock;
            },
          });
        var i = s(2),
          n = s(514),
          o = s.n(n);
        s(515);
        class ButtonsBlock extends i.StoryBaseContentBlock {
          constructor(t, e = {}) {
            super(t, { ...e }), (this._app = t), (this._options = e);
            t.pioneer
              .get("main")
              .getLoadedPromise()
              .then(() => (this.setUpHTML(e), !0))
              .catch((t) => {
                console.warn(t);
              });
          }
          async setUpHTML(t) {
            const { buttonContent: e } = t.config.info,
              s = document.getElementsByClassName("buttons-block");
            e.forEach((t, e) => {
              const { id: i, iconSrc: n, label: o } = t,
                r = document.createElement("button");
              s[0].appendChild(r),
                r.classList.add("clickable"),
                r.classList.add("custom-button"),
                r.classList.add(`${i}`),
                0 === e && r.classList.add("focused");
              const a = document.createElement("img");
              r.appendChild(a), a.classList.add("button-icon"), (a.src = n);
              const l = document.createTextNode(o);
              r.appendChild(l), (r.onclick = this.buttonClick);
            });
          }
          buttonClick = async (t) => {
            const { buttonContent: e } = this._options.config.info,
              s = this._app.getManager("time"),
              i = Object.values(e).find((e) =>
                t.target.classList.contains(e.id),
              );
            document
              .querySelectorAll(".custom-button")
              .forEach((t) => t.classList.remove("focused")),
              i.timeLimits
                ? (s.setMin(i.timeLimits.min), s.setMax(i.timeLimits.max))
                : s.resetLimits();
            const { _id: n } = this._app.getComponent("story"),
              o = this._app.getManager("content").getStory(n).slides[0].time;
            s.setTime(i.startTime ?? o),
              s.setTimeRate(300),
              t.target.classList.add("focused"),
              i.onClick();
          };
        }
        ButtonsBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="buttons-block">\n\t<div class="block-title">{$blockTitle}</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CheckboxBlock: function () {
              return CheckboxBlock;
            },
          });
        var i = s(2),
          n = s(517),
          o = s.n(n);
        s(518);
        class CheckboxBlock extends i.StoryBaseContentBlock {
          constructor(t, e = {}) {
            super(t, { ...e });
            t.pioneer
              .get("main")
              .getLoadedPromise()
              .then(() => (this.setUpHTML(e), !0))
              .catch((t) => {
                console.warn(t);
              });
          }
          async setUpHTML(t) {
            const { checkboxContent: e } = t.config.info,
              s = document.getElementsByClassName("checkboxes-block")[0];
            e.forEach((t) => {
              const { label: e, onChange: i } = t,
                n = document.createElement("label");
              n.classList.add("cb-container"), n.classList.add("clickable");
              const o = document.createElement("input");
              (o.type = "checkbox"), (o.checked = !0);
              const r = document.createElement("span");
              r.classList.add("checkmark"),
                n.appendChild(document.createTextNode(e)),
                n.appendChild(o),
                n.appendChild(r),
                s.appendChild(n),
                o.addEventListener("change", i);
            });
          }
        }
        CheckboxBlock.html = o();
      },
      function (t) {
        t.exports =
          '<div class="checkboxes-block">\n\t<div class="cb-block-title">{$checkboxBlockTitle}</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Story: function () {
              return Story;
            },
          });
        var i = s(2);
        s(520);
        class Story extends i.Carousel {
          constructor(t, e) {
            super(t, null, {
              isCloseButtonVisible: !0,
              closeButtonText: "Close",
              ...e,
            }),
              (this._id = ""),
              (this._info = []),
              (this._config.navigationButtons.next.text =
                i.AppUtils.isPrimaryTouch()
                  ? "Swipe to continue"
                  : "Scroll to continue"),
              (this._onSlideChange = async (t, e = !1) => {
                const s = { slide: this._children.slides[t].dataset.id };
                e
                  ? (s.time = this._app.getManager("time").getTimeUrl())
                  : (s.__remove = ["time"]);
                const i = this._app.getManager("router"),
                  n = i.currentRoute;
                await i.navigate(s, n.url);
              });
          }
          init() {
            super.init();
            this._element
              .querySelector(".close-button")
              ?.setAttribute("aria-label", "Close story"),
              this._setVariables(this._children.carousel, !1);
          }
          _setExpandToggleAriaLabel() {
            const t = this._element.querySelectorAll(".mobile-collapse"),
              e = this._state.isCollapsed
                ? "Collapse story panel"
                : "Expand story panel";
            t.forEach((t) => t.setAttribute("aria-label", e));
          }
          _toggleCollapse() {
            this._setExpandToggleAriaLabel(), super._toggleCollapse();
          }
          async onRouteChange(t, { cancelToken: e, slide: s, id: i } = {}) {
            if (e && e.isCanceled) return;
            if (
              (this.clear(),
                (this._info = t),
                (this._id = i),
                this._app.getManager("router").configs.locked)
            ) {
              const t = !1;
              this.setState({
                isCloseButtonVisible: t,
                isCloseButtonVisibleClass: this._class.isVisible[t],
              });
            }
            await this.setUp(), this._setExpandToggleAriaLabel();
            const n =
              (s &&
                this._children.slides.findIndex((t) => t.dataset.id === s)) ||
              0;
            void 0 !== t[n]?.rate &&
              this._app.getManager("time").setTimeRate(t[n].rate),
              await this.goToSlide(n);
          }
          async onQueryChange({ cancelToken: t, slide: e } = {}) {
            if (t && t.isCanceled) return;
            const s =
              (e &&
                this._children.slides.findIndex((t) => t.dataset.id === e)) ||
              0;
            void 0 !== this._info[s]?.rate &&
              this._app.getManager("time").setTimeRate(this._info[s].rate),
              await this.goToSlide(s);
          }
          async createBlockContent(t, e) {
            const { hideExternalLinks: s } =
              this.app.getManager("router").configs;
            let n;
            switch (t.type) {
              case "title": {
                const e = { ...t };
                (e.title =
                  !0 === s
                    ? this.app
                      .getManager("content")
                      .hideExternalLinksInText(e.title)
                    : e.title),
                  (n = new i.TitleBlock(this._app, { config: { info: e } }));
                break;
              }
              case "description": {
                const e = { ...t };
                (e.description =
                  !0 === s
                    ? this.app
                      .getManager("content")
                      .hideExternalLinksInText(e.description)
                    : e.description),
                  (n = new i.DescriptionBlock(this._app, {
                    config: { info: e },
                  }));
                break;
              }
              case "image":
              case "diagram":
                n = new i.ImageBlock(this._app, { config: { info: t } });
                break;
              case "toggle":
                n = new i.ToggleBlock(this._app, { config: { info: t } });
                break;
              case "hint":
                n = new i.HintBlock(this._app, { config: { info: t } });
                break;
              case "replay":
                n = new i.ReplayButtonBlock(this._app, { config: { info: t } });
                break;
              case "buttons":
                n = new i.ButtonsBlock(this._app, { config: { info: t } });
                break;
              case "checkboxes":
                n = new i.CheckboxBlock(this._app, { config: { info: t } });
            }
            return (
              await n.init(),
              this._onEnter[e].push(n.onEnter),
              this._onLeave[e].push(n.onLeave),
              n.element
            );
          }
          async createSlideContent(t, e) {
            if (!t.htmlFile) {
              const s = document.createDocumentFragment();
              for (let i = 0; i < t.content.length; i++) {
                const n = t.content[i],
                  o = await this.createBlockContent(n, e);
                o && s.appendChild(o);
              }
              return s;
            }
          }
          async setUp() {
            for (let t = 0; t < this._info.length; t++) {
              const {
                id: e,
                type: s,
                classList: i = [],
                onEnter: n,
                onLeave: o,
              } = this._info[t];
              (this._onEnter[t] = []),
                (this._onLeave[t] = []),
                n && this._onEnter[t].push(() => n(this._app, this));
              const r = await this.createSlideContent(this._info[t], t);
              i.push("grid-layout", "simple-grid"),
                o && this._onLeave[t].push(() => o(this._app, this)),
                this.addSlide(
                  { id: e, type: s, classList: i, content: r },
                  { isFirst: 0 === t, isLast: t === this._info.length - 1 },
                );
            }
          }
          close() {
            const t = this._app.getManager("router");
            t.navigate(t.homeRoute);
          }
          async onLeave(t) {
            if ((await super.onLeave(t), "number" != typeof t)) {
              this._app.getManager("router").removeQuery(["slide"]);
            }
          }
          _updateTooltipsProps() {
            const { slideType: t } = this._state,
              e = getComputedStyle(document.body),
              s = -(parseFloat(e.getPropertyValue("--gridHeaderHeight")) + 20);
            null !== this._progressTooltip &&
              this._progressTooltip.setProps({
                offset: "overlay" === t ? [0, s] : [0, 10],
              });
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseManager: function () {
              return BaseManager;
            },
          });
        s(5), s(2);
        class BaseManager {
          constructor(t) {
            (this._app = t),
              (this._pioneer = t.pioneer),
              (this._eventNames = []),
              (this._callbacks = {});
          }
          get pioneer() {
            return this._pioneer;
          }
          get app() {
            return this._app;
          }
          _initCallbacks() {
            for (let t = 0; t < this._eventNames.length; t++)
              this._callbacks[this._eventNames[t]] = [];
          }
          registerCallback(t, e) {
            "function" != typeof e ||
              this._eventNames.indexOf(t) < 0 ||
              this._callbacks[t].includes(e) ||
              this._callbacks[t].push(e);
          }
          removeCallback(t, e) {
            if ("function" != typeof e || this._eventNames.indexOf(t) < 0)
              return;
            const s = this._callbacks[t].indexOf(e);
            s > -1 && this._callbacks[t].splice(s, 1);
          }
          triggerCallbacks(t, e = []) {
            for (let s = this._callbacks[t].length - 1; s >= 0; s--) {
              (0, this._callbacks[t][s])(...e);
            }
          }
          bindFunctions(t = []) {
            const e = this;
            for (let s = 0; s < t.length; s++) {
              const i = t[s];
              e[i] = e[i].bind(this);
            }
          }
          destroy() {
            this.__destroy();
          }
          __destroy() { }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SelectionManager: function () {
              return SelectionManager;
            },
          });
        s(5);
        var i = s(2);
        class SelectionManager extends i.BaseManager {
          constructor(t, e) {
            super(t),
              (this._scene = e),
              (this._id = null),
              (this._isClickable = !0),
              (this._isSuppressed = !1),
              this._eventNames.push("3dselection"),
              this._initCallbacks(),
              this.bindFunctions(["setSuppress", "handle3DSelection"]);
          }
          setScene(t) {
            this._scene = t;
          }
          selectEntity(t) {
            const e = this._id;
            if (t !== e) {
              const s = new CustomEvent("selectionupdate", {
                detail: { new: t, old: this._id },
              });
              window.dispatchEvent(s),
                (this._id = t),
                this._switchSelectionClass(this._id, e);
            }
          }
          unselect() {
            const t = this._id;
            if (null !== t) {
              const t = new CustomEvent("unselect", { old: this._id });
              window.dispatchEvent(t);
            }
            (this._id = null), this._switchSelectionClass(this._id, t);
          }
          getCurrentId() {
            return this._id;
          }
          setClickable(t) {
            this._isClickable = t;
          }
          init3Dcallback(t) {
            t.setSelectionCallback(this.handle3DSelection);
          }
          _getLink(t) {
            return `/${t}`;
          }
          setSuppress(t) {
            this._isSuppressed = t;
          }
          handle3DSelection(t) {
            if (this._isClickable) {
              if (!this._isSuppressed && null !== t) {
                const e = this._app.getManager("router"),
                  s = t.getName(),
                  i = this._getLink(s),
                  n = "string" == typeof i ? i : i.path ?? "",
                  { options: o = { keepTime: !0 }, query: r = {} } =
                    "object" == typeof i && i,
                  a = e.navigate(r, n, o);
                this.triggerCallbacks("3dselection", [a, t]);
              }
              this._isSuppressed = !1;
            }
          }
          _switchSelectionClass(t, e) {
            if (null !== e) {
              const t = this._scene.get(e);
              if (null !== t) {
                const e = t.getComponentByType("div").getDiv();
                e && e.classList.remove("selection");
              }
            }
            if (null !== t) {
              const e = this._scene.get(t);
              if (null !== e) {
                const t = e.getComponentByType("div").getDiv();
                t && t.classList.add("selection");
              }
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LabelManager: function () {
              return LabelManager;
            },
          });
        s(5);
        var i = s(2);
        s(524);
        class LabelManager extends i.BaseManager {
          constructor(t, e) {
            super(t),
              (this._scene = e),
              this._eventNames.push("hoverchange", "labelclicked"),
              this._initCallbacks(),
              (this._iconMap = {
                Universe: "no-icon",
                Galaxy: "no-icon",
                Star: "no-icon",
                Barycenter: "icon-circle-white-small",
                "Landing site": "icon-hexagon",
                Moon: "icon-circle-white-small",
                Asteroid: "icon-circle-white-small",
                "Dwarf Planet": "icon-circle-white-small",
                Comet: "icon-circle-white-small",
                Spacecraft: "icon-hexagon",
                Planet: "icon-circle-",
                Default: "icon-circle-white-small",
              }),
              (this._weightMap = {
                Universe: "100",
                Galaxy: "100",
                Star: "100",
                Barycenter: "0",
                "Landing site": "5",
                Asteroid: "15",
                Comet: "15",
                Moon: "25",
                "Dwarf Planet": "28",
                Spacecraft: "30",
                Planet: "50",
              }),
              (this._weights = {}),
              (this._algorithm = this.Quadtree),
              (this._quadTree = new Quadtree(
                {
                  x: 0,
                  y: 0,
                  width: window.innerWidth,
                  height: window.innerHeight,
                },
                2,
                8,
              )),
              (this._labels = {}),
              (this._collidingLabels = []),
              (this._frameCount = 0),
              (this._frameStep = 1),
              (this._frameCycle = 3 * this._frameStep),
              (this._activeClass = "active"),
              (this._hiddenClass = "hidden"),
              (this._overlapThreshold = 0.25),
              (this._isClickable = !0),
              (this._isPaused = !1),
              (this._allLabelsHidden = !1),
              (this._exceptions = new Set()),
              (this._centerBoundingRect = {
                name: "center",
                x: 0,
                y: 0,
                width: 50,
                height: 50,
              }),
              this.bindFunctions([
                "update",
                "toggleLabels",
                "toggleLabelForEntity",
                "toggleIcons",
                "toggleIconForEntity",
                "_clickCallback",
                "setUpLabel",
                "removeLabel",
                "setUpIcon",
              ]);
          }
          setEntities(t) {
            this._labels = {};
            for (let e = t.size - 1; e >= 0; e--) {
              const s = t.get(e);
              this.addEntity(s);
            }
          }
          addEntity(t) {
            t.getComponentByType("div") &&
              (this._labels[t.getName()] = {
                name: t.getName(),
                el: t.getComponentByType("div").getDiv(),
                x: 0,
                y: 0,
                width: 0,
                height: 0,
                check: !1,
                collisions: [],
                isHidden: !1,
                isClickable: !0,
              });
          }
          removeEntity(t) {
            void 0 !== this._labels[t.getName()] &&
              delete this._labels[t.getName()];
          }
          setAlgorithm(t) {
            this._algorithm = t;
          }
          setScene(t) {
            this._scene = t;
          }
          setWeights(t, e = !0) {
            e && (this._weights = {});
            for (const e of Object.keys(t)) {
              const s = t[e].category;
              (this._weights[e] = {}),
                void 0 !== this._weightMap[s]
                  ? (this._weights[e].weight = this._weightMap[s])
                  : (this._weights[e].weight = 1);
            }
          }
          removeWeights(t) {
            for (const e of Object.keys(t))
              this._weights[e] && delete this._weights[e];
          }
          getWeight(t) {
            return Object.keys(this._weights).length <= 0
              ? 0
              : void 0 !== this._weights[t]
                ? this._weights[t].weight
                : 0;
          }
          isExisting(t) {
            return void 0 !== this._labels[t] || (delete this._labels[t], !1);
          }
          setUpLabel(t) {
            const e = this._app.getManager("content"),
              s = this._app.getManager("layer");
            this.addEntity(t),
              this.setLabelProps(
                {
                  getLabelClass: (t) => `no-select ${e.getClassName(t) ?? ""}`,
                },
                [t.getName()],
              );
            const i = t.getName(),
              n = s.getLayer("labels");
            null === n || n.visible || this.toggleLabelForEntity(!1, i);
          }
          removeLabel(t) {
            this.removeEntity(t);
          }
          setUpIcon(t) {
            const e = this._app.getManager("layer"),
              s = t.getName(),
              i = e.getLayer("icons");
            null === i || i.visible || this.toggleIconForEntity(!1, s);
          }
          setLabelClickable(t, e) {
            this._labels[t] &&
              ((this._labels[t].isClickable = e),
                this._labels[t].el.classList.toggle("clickable", e));
          }
          setClickable(t) {
            this._isClickable = t;
            for (let e = 0, s = this._scene.getNumEntities(); e < s; e++) {
              const s = this._scene.getEntity(e).get("div");
              if (null !== s) {
                const e = s.getDiv();
                t
                  ? e.classList.remove("unclickable")
                  : e.classList.add("unclickable");
              }
            }
          }
          addException(t) {
            this._exceptions.add(t);
          }
          removeException(t) {
            this._exceptions.delete(t);
          }
          addExceptions(t) {
            t.forEach((t) => this._exceptions.add(t));
          }
          removeExceptions(t) {
            t.forEach((t) => this._exceptions.delete(t));
          }
          toggleLabels(t, { scene: e } = {}) {
            void 0 === e && (e = this._scene);
            for (let s = 0; s < e.getNumEntities(); s++)
              this.toggleLabelForEntity(t, e.getEntity(s).getName(), {
                scene: e,
              });
          }
          toggleLabelForEntity(t, e, { scene: s } = {}) {
            let i = s;
            void 0 === i && (i = this._scene);
            const n = i.getEntity(e),
              o = n.get("div");
            this._exceptions.has(n.getName()) ||
              (null !== o &&
                (t
                  ? o.getDiv().lastElementChild?.classList.remove("hidden")
                  : o.getDiv().lastElementChild?.classList.add("hidden")));
          }
          toggleIcons(t, { scene: e } = {}) {
            void 0 === e && (e = this._scene);
            for (let s = 0; s < e.getNumEntities(); s++)
              this.toggleIconForEntity(t, e.getEntity(s).getName(), {
                scene: e,
              });
          }
          toggleIconForEntity(t, e, { scene: s } = {}) {
            let i = s;
            void 0 === i && (i = this._scene);
            const n = i.getEntity(e),
              o = n.get("div");
            this._exceptions.has(n.getName()) ||
              (null !== o &&
                (t
                  ? o.getDiv().firstElementChild?.classList.remove("hidden")
                  : o.getDiv().firstElementChild?.classList.add("hidden")));
          }
          _getLink(t) {
            return `/${t}`;
          }
          _clickCallback(t) {
            const e = this._app.getManager("router"),
              s = this._getLink(t.getName()),
              i = "string" == typeof s ? s : s.path ?? "",
              { options: n = { keepTime: !0 }, query: o = {} } =
                "object" == typeof s && s;
            e.navigate(o, i, n);
          }
          setLabelProps(
            {
              getLabelClass: t,
              getIconClass: e,
              getTextClass: s,
              handleClick: i,
              handleTouch: n,
              handleMouseEnter: o,
              handleMouseLeave: r,
            } = {},
            a = Object.keys(this._labels),
            l,
            c,
          ) {
            let h = l;
            h || (h = this._scene);
            let u = c;
            u || (u = h.get("camera"));
            const d = u.getComponentByType("camera");
            for (const l of a) {
              const a = h.getEntity(l),
                c = this._app.getManager("content").getEntityInfo(l),
                u = a.get("div");
              if (null === u) continue;
              u.setActiveCamera(d);
              const p = u.getDiv(),
                m = "function" == typeof t ? t(l) : "";
              p.className += ` ${m} clickable`;
              const _ = document.createElement("span"),
                g = document.createElement("span"),
                y = this._iconMap[c?.category] ?? this._iconMap.Default,
                f = "Planet" === c?.category ? l : "",
                b = "function" == typeof e ? e(l) : "";
              (_.className = `icon ${y}${f} ${b}`),
                (g.className = `text ${"function" == typeof s ? s(l) : ""}`),
                (g.innerHTML = c?.displayName || c?.iauName || p.innerHTML),
                (p.innerHTML = ""),
                p.appendChild(_),
                p.appendChild(g);
              const T = async (t) => {
                const e = this._labels[l];
                this._isClickable &&
                  e?.isClickable &&
                  null !== this._clickCallback &&
                  (this._clickCallback(a),
                    t.preventDefault(),
                    this.triggerCallbacks("labelclicked", [!0]));
              },
                S = async (t) => {
                  const e = this._labels[l];
                  this._isClickable &&
                    e?.isClickable &&
                    (this.app.isDragging() ||
                      this.app.isTouchMax() ||
                      null === this._clickCallback ||
                      (this._clickCallback(a),
                        t.preventDefault(),
                        this.triggerCallbacks("labelclicked", [!0])));
                };
              p.addEventListener("mousedown", (t) => {
                t.preventDefault(), this.triggerCallbacks("labelclicked", [!1]);
              }),
                p.addEventListener("touchstart", (t) => {
                  t.preventDefault(),
                    this.triggerCallbacks("labelclicked", [!1]);
                });
              const E = () => this.triggerCallbacks("hoverchange", [l, !0]),
                v = () => this.triggerCallbacks("hoverchange", [l, !1]),
                C = "function" == typeof i ? (t) => i(t, l) : T,
                x = "function" == typeof n ? (t) => n(t, l) : S,
                w = "function" == typeof o ? (t) => o(t, l) : E,
                I = "function" == typeof r ? (t) => r(t, l) : v;
              null !== i &&
                "true" !== p.getAttribute("hasClickListener") &&
                (p.setAttribute("hasClickListener", "true"),
                  p.addEventListener("click", C)),
                null !== n &&
                "true" !== p.getAttribute("hasTouchEndListener") &&
                (p.setAttribute("hasTouchEndListener", "true"),
                  p.addEventListener("touchend", x)),
                null !== o &&
                "true" !== p.getAttribute("hasMouseEnterListener") &&
                (p.setAttribute("hasMouseEnterListener", "true"),
                  p.addEventListener("mouseenter", w)),
                null !== r &&
                "true" !== p.getAttribute("hasMouseLeaveListener") &&
                (p.setAttribute("hasMouseLeaveListener", "true"),
                  p.addEventListener("mouseleave", I)),
                "true" !== p.getAttribute("hasMouseMoveListener") &&
                (p.setAttribute("hasMouseMoveListener", "true"),
                  p.addEventListener(
                    "mousemove",
                    (t) => {
                      t.preventDefault();
                    },
                    !0,
                  ));
            }
          }
          addClassToLabels(t, e) {
            for (const s of e) {
              const e = this._scene.getEntity(s)?.get("div")?.getDiv();
              e?.classList.add(t);
            }
          }
          removeClassFromLabels(t, e) {
            for (const s of e) {
              const e = this._scene.getEntity(s)?.get("div")?.getDiv();
              e?.classList.remove(t);
            }
          }
          getItemAtCenter() {
            (this._centerBoundingRect.x =
              window.innerWidth / 2 - this._centerBoundingRect.width / 2),
              (this._centerBoundingRect.y =
                window.innerHeight / 2 - this._centerBoundingRect.height / 2);
            const t = this._quadTree.retrieve(this._centerBoundingRect);
            for (let e = 0; e < t.length; e++) {
              const s = t[e];
              if (
                ((s.y += s.height / 2),
                  (s.width = this._centerBoundingRect.width),
                  (s.height = this._centerBoundingRect.height),
                  this._checkCollision(s, this._centerBoundingRect))
              )
                return s;
            }
            return null;
          }
          _buildQuadtree() {
            this._quadTree.clear();
            for (const [t, e] of Object.entries(this._labels)) {
              if (this._isPaused) return;
              const t = e.el,
                s = t.getBoundingClientRect();
              if ("0" === t.style.opacity) {
                e.check = !1;
                continue;
              }
              if (this._isOutOfWindow(s)) {
                e.check = !1;
                continue;
              }
              (e.x = s.x),
                (e.y = s.y),
                (e.width = s.width),
                (e.height = s.height),
                (e.check = !0),
                (e.collisions = []),
                (e.isHidden = !1);
              const i = this._scene.get("camera", "camera"),
                n = this._scene.get(e.name);
              (e.z = n.getCameraSpacePosition(i).magnitude()),
                this._quadTree.insert(e);
            }
          }
          _checkWithQuadtree() {
            for (const t of Object.keys(this._labels)) {
              if (this._isPaused) return;
              const e = this._labels[t];
              if (!e.check) continue;
              const s = this._quadTree.retrieve(e);
              for (let t = 0; t < s.length; t++) {
                const i = s[t];
                i.check &&
                  this._checkCollision(i, e) &&
                  e.name !== i.name &&
                  this._overlap(i, e) >= this._overlapThreshold &&
                  this._addCollision(i.name, e.name);
              }
            }
          }
          _addCollision(t, e) {
            this._collidingLabels.indexOf(t) < 0 &&
              this._collidingLabels.push(t),
              this._collidingLabels.indexOf(e) < 0 &&
              this._collidingLabels.push(e),
              this._labels[t]?.collisions.push(e);
          }
          _checkCollision(t, e) {
            return (
              t.x < e.x + e.width &&
              t.x + t.width > e.x &&
              t.y < e.y + e.height &&
              t.y + t.height > e.y
            );
          }
          _fixCollisions() {
            this._sort();
            for (let t = 0; t < this._collidingLabels.length; t++) {
              if (this._isPaused) return;
              const e = this._collidingLabels[t];
              if (this.isExisting(e) && !this._labels[e].isHidden) {
                this._showLabel(e);
                for (let t = 0; t < this._labels[e].collisions.length; t++) {
                  const s = this._labels[e].collisions[t];
                  this._hideLabel(s);
                }
              }
            }
            this._restoreLabels();
          }
          _sort() {
            this._collidingLabels.sort((t, e) =>
              this.getWeight(e) - this.getWeight(t) != 0
                ? this.getWeight(e) - this.getWeight(t)
                : this.getZ(t) - this.getZ(e),
            );
          }
          _overlap(t, e) {
            const s =
              (Math.min(t.x + t.width, e.x + e.width) - Math.max(t.x, e.x)) *
              (Math.min(t.y + t.height, e.y + e.height) - Math.max(t.y, e.y));
            return s / (t.width * t.height + e.width * e.height - s);
          }
          _isOutOfWindow(t) {
            return (
              t.x > window.innerWidth ||
              t.x + t.width < 0 ||
              t.y > window.innerHeight ||
              t.y + t.height < 0
            );
          }
          _restoreLabels() {
            if (!0 !== this._allLabelsHidden)
              for (const t of Object.keys(this._labels)) {
                const e = this._labels[t];
                e.isHidden || this._showLabel(e.name),
                  0 === e.collisions.length && this._showLabel(e.name);
              }
          }
          _showLabel(t) {
            const e = this.pioneer
              .get("main", t)
              .getComponentByType("div")
              .getDiv();
            e.classList.add(this._activeClass),
              e.classList.remove(this._hiddenClass),
              (this._labels[t].isHidden = !1);
          }
          _hideLabel(t) {
            if (this._exceptions.has(t)) return;
            const e = this.pioneer.get("main", t);
            if (null === e) return;
            const s = e.getComponentByType("div").getDiv();
            s.classList.add(this._hiddenClass),
              s.classList.remove(this._activeClass),
              (this._labels[t].isHidden = !0);
          }
          getZ(t) {
            if (this.isExisting(t)) return this._labels[t].z;
          }
          stop() {
            this._isPaused = !0;
          }
          start() {
            this._isPaused = !1;
          }
          update() {
            this._isPaused ||
              (0 === this._frameCount
                ? ((this._collidingLabels = []), this._buildQuadtree())
                : this._frameCount === this._frameCycle / 3
                  ? this._checkWithQuadtree()
                  : this._frameCount === (2 * this._frameCycle) / 3 &&
                  this._fixCollisions(),
                this._frameCount++,
                (this._frameCount %= this._frameCycle));
          }
        }
        (LabelManager.Quadtree = 1), (LabelManager.BruteForce = 0);
      },
      function () {
        !(function (t, e) {
          function s(t, e, s, i) {
            (this.max_objects = e || 10),
              (this.max_levels = s || 4),
              (this.level = i || 0),
              (this.bounds = t),
              (this.objects = []),
              (this.nodes = []);
          }
          (s.prototype.split = function () {
            var t = this.level + 1,
              i = e.round(this.bounds.width / 2),
              n = e.round(this.bounds.height / 2),
              o = e.round(this.bounds.x),
              r = e.round(this.bounds.y);
            (this.nodes[0] = new s(
              { x: o + i, y: r, width: i, height: n },
              this.max_objects,
              this.max_levels,
              t,
            )),
              (this.nodes[1] = new s(
                { x: o, y: r, width: i, height: n },
                this.max_objects,
                this.max_levels,
                t,
              )),
              (this.nodes[2] = new s(
                { x: o, y: r + n, width: i, height: n },
                this.max_objects,
                this.max_levels,
                t,
              )),
              (this.nodes[3] = new s(
                { x: o + i, y: r + n, width: i, height: n },
                this.max_objects,
                this.max_levels,
                t,
              ));
          }),
            (s.prototype.getIndex = function (t) {
              var e = -1,
                s = this.bounds.x + this.bounds.width / 2,
                i = this.bounds.y + this.bounds.height / 2,
                n = t.y < i && t.y + t.height < i,
                o = t.y > i;
              return (
                t.x < s && t.x + t.width < s
                  ? n
                    ? (e = 1)
                    : o && (e = 2)
                  : t.x > s && (n ? (e = 0) : o && (e = 3)),
                e
              );
            }),
            (s.prototype.insert = function (t) {
              var e,
                s = 0;
              if (void 0 === this.nodes[0] || -1 === (e = this.getIndex(t))) {
                if (
                  (this.objects.push(t),
                    this.objects.length > this.max_objects &&
                    this.level < this.max_levels)
                )
                  for (
                    void 0 === this.nodes[0] && this.split();
                    s < this.objects.length;

                  )
                    -1 !== (e = this.getIndex(this.objects[s]))
                      ? this.nodes[e].insert(this.objects.splice(s, 1)[0])
                      : (s += 1);
              } else this.nodes[e].insert(t);
            }),
            (s.prototype.retrieve = function (t) {
              var e = this.getIndex(t),
                s = this.objects;
              if (void 0 !== this.nodes[0])
                if (-1 !== e) s = s.concat(this.nodes[e].retrieve(t));
                else
                  for (var i = 0; i < this.nodes.length; i += 1)
                    s = s.concat(this.nodes[i].retrieve(t));
              return s;
            }),
            (s.prototype.clear = function () {
              this.objects = [];
              for (var t = 0; t < this.nodes.length; t += 1)
                void 0 !== this.nodes[t] && this.nodes[t].clear();
              this.nodes = [];
            }),
            (t.Quadtree = s);
        })(window, Math);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            RouteManager: function () {
              return RouteManager;
            },
          });
        var i = s(526),
          n = s.n(i),
          o = s(2);
        class RouteManager extends o.BaseManager {
          constructor(t) {
            super(t),
              (this._router = new (n())(null, !0)),
              (this._previousRoute = null),
              (this._currentRoute = {}),
              (this._firstLoad = !0),
              (this._query = {}),
              (this._configs = {}),
              (this._validQueries = []),
              (this._homeRoute = "/home"),
              (this._queryCallbacks = {}),
              (this._previousView = null),
              (this._currentView = null),
              (this._alwaysHiddenComponents = []),
              this.bindFunctions([
                "navigate",
                "onRootRoute",
                "onNotFound",
                "leave",
              ]);
          }
          get homeRoute() {
            return this._homeRoute;
          }
          get previousRoute() {
            return this._previousRoute;
          }
          get currentRoute() {
            return this._currentRoute;
          }
          get query() {
            return this._query;
          }
          get configs() {
            return this._configs;
          }
          get currentView() {
            return this._currentView;
          }
          set currentView(t) {
            this._currentView = t;
          }
          get previousView() {
            return this._previousView;
          }
          init(t, e) {
            this._router.hooks({
              before: async (e) => {
                (this._previousRoute = { ...this._currentRoute }),
                  (this._currentRoute = this._router.lastRouteResolved() || {}),
                  this._currentRoute.url &&
                  (this._currentRoute.url = this._currentRoute.url.replace(
                    /(\/)+/,
                    "/",
                  )),
                  this.addQuery(this.parseQuery(this.currentRoute.query)),
                  "function" == typeof t &&
                  (await t(this._currentRoute, this._previousRoute)),
                  e();
              },
              after: async () => {
                "function" == typeof e &&
                  (await e(this._currentRoute, this._previousRoute)),
                  (this._firstLoad = !1);
              },
            }),
              this._router
                .on(this.onRootRoute)
                .notFound(this.onNotFound)
                .on("milky_way", this.onNotFound)
                .on("observable_universe", this.onNotFound);
          }
          leave(t) {
            t.cancelToken.cancel();
          }
          onRootRoute(t) {
            this.reroute(this._homeRoute, t);
          }
          onNotFound(t) {
            let e = this._homeRoute;
            t && (e += "?" + t), this._router.navigate(e);
          }
          replaceState(t) {
            history.replaceState({}, "", t);
          }
          reroute(t, e = "") {
            let s;
            "string" == typeof e && (e = this.parseQuery(e));
            const i = o.AppUtils.filterObject(
              this._configs,
              (t) => void 0 !== t,
            );
            s = this.buildQuery({ ...e, ...i });
            const n = window.location.pathname;
            history.replaceState(s, "", `${n}#${t}${s}`),
              this._router.resolve();
          }
          addCancelToken(t) {
            const e = t || {};
            return (e.cancelToken = new o.CancelToken()), e;
          }
          lastRouteResolved() {
            return this._router.lastRouteResolved();
          }
          lastPathResolved() {
            const t = this._router.lastRouteResolved();
            return t.query ? t.url + "?" + t.query : t.url;
          }
          getOnlyURL(t) {
            let e = t;
            const s = t.split("#");
            return (
              (e =
                s.length > 1
                  ? this._cleanGETParam(s[1])
                  : this._cleanGETParam(s[0])),
              e
            );
          }
          _cleanGETParam(t) {
            return t.split(/\?(.*)?$/)[0];
          }
          getValidQueries() {
            return this._validQueries;
          }
          setValidQueries(t) {
            this._validQueries = t;
          }
          parseQuery(t) {
            if (!t) return {};
            t.replace("?", "");
            return t.split("&").reduce((t, e) => {
              const s = e.split("=");
              if (s.length > 1) {
                let e = decodeURIComponent(s[1].trim());
                switch (e.toLowerCase()) {
                  case "true":
                    e = !0;
                    break;
                  case "false":
                    e = !1;
                    break;
                  case "undefined":
                    e = void 0;
                    break;
                  case "null":
                    e = null;
                    break;
                  default: {
                    const t = Number(e);
                    Number.isNaN(t) || (e = t);
                    break;
                  }
                }
                const i = decodeURIComponent(s[0].trim());
                i in this._configs
                  ? void 0 === this._configs[i] && (this._configs[i] = e)
                  : (t[i] = e);
              }
              return t;
            }, {});
          }
          buildQuery(t) {
            let e = "";
            for (const [s, i] of Object.entries(t)) e += "&" + s + "=" + i;
            return (e = e.replace("&", "?")), e;
          }
          addQuery(t) {
            return (this._query = { ...this._query, ...t }), this._query;
          }
          removeQuery(t = []) {
            return t.forEach((t) => delete this._query[t]), this._query;
          }
          addConfigs(t) {
            return (this._configs = { ...this._configs, ...t }), this._configs;
          }
          removeConfigs(t = []) {
            return t.forEach((t) => delete this._configs[t]), this._configs;
          }
          updateQuery(t) {
            t.__remove &&
              ("all" === t.__remove
                ? (this._query = {})
                : this.removeQuery(t.__remove),
                delete t.__remove);
            const e = o.AppUtils.filterObject(
              this._configs,
              (t) => void 0 !== t,
            );
            return { ...this.addQuery(t), ...e };
          }
          updateQueryPath(t, e = "") {
            return (
              (e || this._router.lastRouteResolved().url).replace(
                /(\/)(?=\/*\1)/,
                "",
              ) + this.buildQuery(this.updateQuery(t))
            );
          }
          async resetView(t, e) {
            if (
              ((this._previousView = this._currentView),
                (this._currentView = t),
                this._currentView !== this._previousView)
            ) {
              null !== this._previousView &&
                (await this._app.getView(this._previousView).onLeave(e)),
                await this._app.getView(this._currentView).onEnter(e);
              const s = this._app.getViews();
              for (let e = s.length - 1; e >= 0; e--) {
                const i = s[e];
                this._app.getView(i).setEnabled(i === t);
              }
            }
          }
          async handleRoute(t, e, s) {
            e ||
              ((e = this.addCancelToken(e)), (this._currentRoute.params = e));
            let i = {};
            s && (i = this.parseQuery(s)),
              await this.resetView(t, { ...e, ...i, ...this._configs }),
              await this.goToView(t, e, { ...i, ...this._configs });
          }
          stillOnRoute(t) {
            const e = this._currentRoute.url.match(/^\/([^!/]*)/);
            return null !== e && void 0 !== e[1] && e[1] === t;
          }
          urlChanged(t, e) {
            return this.getOnlyURL(t) !== this.getOnlyURL(e);
          }
          routeChanged(t, e) {
            if ("" === t && !e) return !0;
            if (!e || o.AppUtils.isEmptyObject(e)) return !0;
            if (t.url) return t.url !== e.url;
            const s = o.AppUtils.deepCopy(t),
              i = o.AppUtils.deepCopy(e);
            return !o.AppUtils.deepEqual(s, i);
          }
          queryChanged(t, e) {
            if (!e) return !0;
            const s = o.AppUtils.deepCopy(t),
              i = {};
            for (const t in s)
              "function" == typeof s[t].toString && (s[t] = s[t].toString());
            return (
              e.split("&").forEach((t) => {
                const e = t.split("=");
                i[e[0]] = e[1];
              }),
              !o.AppUtils.deepEqual(s, i)
            );
          }
          async goToView(t, e, s) {
            this.routeChanged(this.currentRoute, this.previousRoute)
              ? await this._app.getView(t).onRouteChange({ ...e, ...s })
              : this.queryChanged(s, this.previousRoute.query) &&
              (await this._app.getView(t).onQueryChange({ ...e, ...s }));
          }
          addRoutes(t) {
            for (let e = 0; e < t.length; e++) {
              const { route: s, view: i } = t[e];
              this._router.on(
                s,
                async (t, e) => {
                  await this.handleRoute(i, t, e);
                },
                {
                  before: async (t, e) => {
                    await this.before(t, e, i);
                  },
                  leave: this.leave,
                },
              );
            }
          }
          before(t, e, s) {
            let i = {};
            this._currentRoute.query &&
              (i = this.parseQuery(this._currentRoute.query)),
              (e = this.addCancelToken(e));
            const n = this._app.getView(s)?.validateQuery({ ...e, ...i });
            n || (e.cancelToken.cancel(), "function" == typeof t && t(!1)),
              "function" == typeof t && t();
          }
          subscribeToQuery(t, e) {
            if ("function" == typeof e)
              return (
                this._queryCallbacks[t] || (this._queryCallbacks[t] = []),
                this._queryCallbacks[t].includes(e) ||
                this._queryCallbacks[t].push(e),
                () => {
                  const s = this._queryCallbacks[t].indexOf(e);
                  this._queryCallbacks[t].splice(s, 1);
                }
              );
          }
          start() {
            this._router.resolve(), this.handleEmbedQueries();
          }
          handleEmbedQueries() {
            const {
              hideFullScreenToggle: t,
              lighting: e,
              noKeyboard: s,
            } = this._configs,
              i = !0 === s,
              n = this.app.getComponent("search"),
              o = this.app.getComponent("settings");
            let r = [],
              a = null;
            const l = this.app.getComponent("tutorialOverlay");
            if (
              (!0 === t && o?.hideFullScreenOption?.(),
                ("flood" !== e && "natural" !== e) || o?.toggleLightOptions?.(e),
                i &&
                (this._alwaysHiddenComponents.push("search"),
                  n?.hide(),
                  (r = l?.hideTutorialSlide?.("search"))),
                !0 === this._configs.hideFullScreenToggle)
            ) {
              const t = this.app.tutorials.find((t) => "settings" === t.id);
              t.description = t.description.replace(
                t.description,
                t.alternateDescription,
              );
            }
            (a = this.app.setTutorialVariables?.(
              r.length ? r : this.app.tutorials,
            )),
              l?.setTutorials?.(a);
          }
          navigate(t, e = "", s = {}) {
            if (
              (o.AppUtils.isEmptyObject(s) ||
                ("string" == typeof t &&
                  ((e = o.AppUtils.cleanPathDuplicate(`${e}/${t}`)), (t = {}))),
                s.__remove && (t.__remove = s.__remove),
                s.keepTime)
            ) {
              const s = this._app.getManager("time");
              this.query.time &&
                s &&
                (e.includes("time=") || (t.time = t.time || s.getTimeUrl()),
                  e.includes("rate=") || (t.rate = t.rate || s.getTimeRate()));
            }
            return this._navigate(t, e);
          }
          _navigate(t, e = "") {
            if ("string" == typeof t) {
              const s = this.lastPathResolved();
              let i = t;
              if (
                (t.startsWith("/") || (i = "/" + t),
                  t.includes(e) || (i = e + t),
                  s !== i)
              ) {
                const t = i.split("?");
                if (t.length > 1) this._query = this.parseQuery(t[1]);
                else {
                  this._query = {};
                  const t = o.AppUtils.filterObject(
                    this._configs,
                    (t) => void 0 !== t,
                  );
                  i += this.buildQuery(t);
                }
                return this._router.navigate(i), !0;
              }
              return !1;
            }
            return this.navigate(this.updateQueryPath(t, e), e);
          }
          returnHome(t = !0) {
            const e = t ? this.buildQuery(this.query) : "";
            this.navigate(e);
          }
          async reload(t = !0, e = !1) {
            const s = await this._app.getView(this._currentView),
              { params: i, query: n } = this._router.lastRouteResolved();
            let o = {};
            !e && n && (o = this.parseQuery(n)),
              t
                ? s.onQueryChange({ ...i, ...o })
                : s.onRouteChange({ ...i, ...o });
          }
        }
      },
      ,
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ContentManager: function () {
              return ContentManager;
            },
          });
        var i = s(218),
          n = s.n(i),
          o = s(2);
        class ContentManager extends o.BaseManager {
          constructor(t) {
            super(t),
              (this._entityList = null),
              (this._entitiesByCategory = {}),
              (this._entitiesBySubCategory = {}),
              (this._stories = {}),
              (this._storyList = null),
              (this._target = null),
              (this._context = {}),
              (this._context.events = {}),
              (this._context.orderedEvents = {}),
              (this._context.eventDesc = {}),
              (this._context.story = {}),
              (this._folders = { description: "/", event: "/", stories: "/" });
          }
          getEntityList() {
            return this._entityList;
          }
          setEntityList(t) {
            for (const [e, s] of Object.entries(t))
              !0 === s.disabled && delete t[e];
            (this._entityList = t),
              Object.keys(this._entityList).forEach((t) => {
                const { category: e } = this._entityList[t];
                this._entitiesByCategory[e]
                  ? this._entitiesByCategory[e].push(this._entityList[t])
                  : (this._entitiesByCategory[e] = [this._entityList[t]]);
                let { subcategory: s } = this._entityList[t];
                (s && "" !== s) || (s = e),
                  this._entitiesBySubCategory[s]
                    ? this._entitiesBySubCategory[s].push(this._entityList[t])
                    : (this._entitiesBySubCategory[s] = [this._entityList[t]]);
              });
          }
          getEntityInfo(t) {
            return t in this._entityList ? this._entityList[t] : null;
          }
          async getEntityDesc(t) {
            let e = null;
            try {
              e = await o.AppUtils.loadJSON(
                this._folders.description + t + ".json",
              );
            } catch (t) {
              e = null;
            }
            return e;
          }
          setFolders(t = {}) {
            for (const e in t)
              Object.prototype.hasOwnProperty.call(t, e) &&
                ((t[e] = o.AppUtils.addEndToPath(t[e])),
                  (this._folders[e] = t[e]));
          }
          getStoryList() {
            return this._storyList;
          }
          setStoryList(t) {
            this._storyList = t;
          }
          getStory(t) {
            if (!t)
              throw new Error("[ContentManager.getStory]: id is required.");
            if (!this._stories[t])
              throw new Error(
                `[ContentManager.getStory]: Cannot find story with id ${t}.`,
              );
            return (
              (this._context.story = this._stories[t]), this._context.story
            );
          }
          setStories(t) {
            this._stories = t;
          }
          async loadDescriptions(t, e) {
            for (let s = 0; s < t.length; s++) {
              const i = t[s],
                n = await this.getEntityDesc(i);
              if (e && e.isCanceled) return;
              this._context[i] = n;
            }
          }
          async loadEvents(t, e = {}, s) {
            if (!t) return;
            const i = o.AppUtils.addEndToPath(this._folders.event + t);
            if (
              e.all &&
              (this._target !== t ||
                o.AppUtils.isEmptyObject(this._context.events))
            ) {
              let r = null;
              try {
                r = await o.AppUtils.loadJSON(i + e.all);
              } catch (t) {
                r = null;
              }
              if (s && s.isCanceled) return;
              if (((this._context.events = r), null !== this._context.events)) {
                const e = [];
                for (const [s, i] of Object.entries(this._context.events))
                  i.start
                    ? ((i.start = n().tz(i.start, "Etc/UTC")),
                      i.end && (i.end = n().tz(i.end, "Etc/UTC")),
                      e.push(i))
                    : console.error(
                      "[Content Manager] Error: event missing start date " +
                      t +
                      " " +
                      s,
                    );
                e.sort((t, e) => t.start.valueOf() - e.start.valueOf()),
                  (this._context.orderedEvents = e);
              } else this._context.orderedEvents = null;
            }
            if (e.event) {
              const t = this._context.events[e.event],
                n = t && t.template ? t.template : e.event;
              let r = null;
              try {
                r = await o.AppUtils.loadJSON(i + n);
              } catch (t) {
                r = null;
              }
              if (s && s.isCanceled) return;
              this._context.eventDesc = r;
            }
            this._target = t;
          }
          getSpheroidLayers(t) {
            return this._entityShperoidLayersList[t];
          }
          setSpheroidLayers(t) {
            this._entityShperoidLayersList = t;
          }
          getSpheroidFeatures(t) {
            return this._entityShperoidFeaturesList[t] || [];
          }
          setSpheroidFeatures(t) {
            this._entityShperoidFeaturesList = t;
          }
          getColorClass(t) {
            let e = "";
            if (!this.getEntityInfo(t)) return e;
            switch (this.getEntityInfo(t).category) {
              case "Asteroid":
                e = "asteroid";
                break;
              case "Instrument":
              case "Spacecraft":
                e = "spacecraft";
                break;
              case "Planet":
                e = t;
                break;
              case "Dwarf Planet":
                e = "dwarf-planet";
                break;
              case "Comet":
                e = "comet";
                break;
              case "Barycenter":
              case "Moon":
                e = "moon";
                break;
              case "Universe":
              case "Galaxy":
              case "Star":
                e = "sun";
                break;
              default:
                e = "";
            }
            return e;
          }
          hasLanded(t) {
            if (!t.landingDate || "" === t.landingDate) return !1;
            if (["Lander", "Rover"].indexOf(t.subcategory) < 0) return !1;
            const e = this._app.getManager("time").parseTime(t.landingDate);
            return !!this._app.getManager("time").getTime().isSameOrAfter(e);
          }
          getClassName(t, e) {
            const s = this.getEntityInfo(t);
            let i = t;
            if (e) i += " " + e.toLowerCase().replace(/ /g, "-");
            else if (null !== s && void 0 !== s.category) {
              i += " " + s.category.toLowerCase().replace(/ /g, "-");
            }
            return i.match(/^\d/) && (i = "_" + i), i;
          }
          hasKeyword(t, e) {
            if (void 0 !== this.getEntityInfo(t))
              return this.getEntityInfo(t).keywords.includes(e);
          }
          resetContext() {
            (this._context = {}),
              (this._context.events = {}),
              (this._context.eventDesc = {}),
              (this._context.orderedEvents = {}),
              (this._context.story = {});
          }
          hideExternalLinksInText(t) {
            return t.replaceAll(
              /<a.*?href=['"](https?:)?\/\/[^>]*>(.*?)<\/a>/g,
              "$2",
            );
          }
          hideExternalLinkStoryList() {
            const t = this.getStoryList(),
              e = {},
              s = t.external ? Object.keys(t.external) : [];
            for (const [i, n] of Object.entries(t))
              if ("external" !== i) {
                e[i] = n;
                if (Array.isArray(n)) {
                  const t = n.filter((t) => !s.includes(t));
                  t.length > 0 && (e[i] = t);
                } else {
                  const t = Object.keys(n).filter((t) => s.includes(t));
                  for (let e = 0; e < t.length; e++) delete n[t[e]];
                }
              }
            this.setStoryList(e);
          }
          _handleError(t, e = "") {
            console.error(e + t);
            let s = this.app.getManager("router").previousRoute.url;
            throw (
              (s || (s = this.app.getManager("router").homeRoute),
                (t.previousRoute = s),
                t)
            );
          }
          get entitiesByCategory() {
            return this._entitiesByCategory;
          }
          get entitiesBySubCategory() {
            return this._entitiesBySubCategory;
          }
          get context() {
            return this._context;
          }
          get events() {
            return this._context.events;
          }
          get orderedEvents() {
            return this._context.orderedEvents;
          }
          get eventDesc() {
            return this._context.eventDesc;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SceneManager: function () {
              return SceneManager;
            },
          });
        var i = s(218),
          n = s.n(i),
          o = s(5),
          r = s(529),
          a = s(2);
        class SceneManager extends a.BaseManager {
          constructor(t) {
            super(t),
              (this._scenes = {}),
              (this._scene = this.add("main")),
              (this._isHD = !1),
              (this._hdWMTSMap = {}),
              (this._loadingItems = []),
              (this._loadedComponents = []),
              (this._hdBreakpointSize = 512),
              (this._maxTextureSize = 4096),
              this._eventNames.push("loading", "loaded"),
              this._initCallbacks(),
              (this._isLoading = !1),
              (this._entityStatuses = new o.FastMap()),
              (this._entityExtraOptions = void 0),
              (this._entityLoadedCallbacks = []),
              (this._entityWillBeUnloadedCallbacks = []),
              (this._componentTypesNotVisible = new Set()),
              (this._mobileTextureSize = 1024),
              this.bindFunctions([
                "addLoading",
                "removeLoading",
                "update",
                "toggleStarfield",
                "toggleHeliosphere",
                "toggleConstellations",
                "addWMTSComponent",
                "tileIsReady",
                "enableWMTSComponent",
                "forceTextureSizeForEntity",
                "toggleHDTextureForEntity",
                "isEntityHD",
              ]),
              (this._tempEntities = []);
          }
          add(t) {
            return "main" === t && this._scene
              ? this._scene
              : ((this._scenes[t] = this.pioneer.addScene(t)),
                this._scenes[t].setAmbientLightColor(
                  new o.Color(0.005, 0.005, 0.005),
                ),
                this._scenes[t]);
          }
          addEntity(t, e) {
            if (this._entityStatuses.has(t))
              throw new Error(
                `Error adding entity: The entity ${t} has already been added.`,
              );
            this._entityStatuses.set(t, {
              forceVisible: !1,
              layerVisibility: this.app
                .getManager("layer")
                .isEntityVisibleWithCurrentLayers(t),
              dynamic: e,
              dependentEntities: [],
              entitiesForcingThisVisible: new Set(),
              visible: !0,
              componentTypesNotVisible: new Set(),
            });
          }
          removeEntity(t) {
            if (!this._entityStatuses.delete(t))
              throw new Error(
                `Error removing entity: The entity ${t} was not in the scene manager.`,
              );
            const e = this._scene.getEntity(t);
            if (null !== e) {
              for (
                let t = 0, s = this._entityWillBeUnloadedCallbacks.length;
                t < s;
                t++
              )
                this._entityWillBeUnloadedCallbacks[t](e);
              this._scene.removeEntity(t);
            }
          }
          getEntityStatus(t) {
            return this._entityStatuses.get(t);
          }
          addEntitiesFromSceneInfo(t) {
            const e = new Map();
            void 0 !== t.staticEntities &&
              (1 === t.staticEntities.length && "all" === t.staticEntities[0]
                ? r.Entity.getEntityNamesInGroup("").forEach((t) =>
                  e.set(t, !1),
                )
                : t.staticEntities.forEach((t) => e.set(t, !1))),
              void 0 !== t.staticEntityGroups &&
              t.staticEntityGroups.forEach((t) => {
                r.Entity.getEntityNamesInGroup(t).forEach((t) =>
                  e.set(t, !1),
                );
              }),
              void 0 !== t.dynamicEntities &&
              (1 === t.dynamicEntities.length &&
                "all" === t.dynamicEntities[0]
                ? r.Entity.getEntityNamesInGroup("").forEach((t) => {
                  e.has(t) || e.set(t, !0);
                })
                : t.dynamicEntities.forEach((t) => {
                  e.has(t) || e.set(t, !0);
                })),
              void 0 !== t.dynamicEntityGroups &&
              t.dynamicEntityGroups.forEach((t) => {
                r.Entity.getEntityNamesInGroup(t).forEach((t) => {
                  e.has(t) || e.set(t, !0);
                });
              });
            const s = this.app.getManager("content");
            for (const t of e.keys())
              null === s.getEntityInfo(t) && e.delete(t);
            e.forEach((t, e) => this.addEntity(e, t)),
              this.setExtraEntityOptions(t.entityOptions),
              this.updateEntityLayerVisibility();
          }
          addEntityLoadedCallback(t) {
            this._entityLoadedCallbacks.push(t);
          }
          removeEntityLoadedCallback(t) {
            for (let e = 0, s = this._entityLoadedCallbacks.length; e < s; e++)
              if (this._entityLoadedCallbacks[e] === t)
                return void this._entityLoadedCallbacks.splice(e, 1);
          }
          addEntityWillBeUnloadedCallback(t) {
            this._entityWillBeUnloadedCallbacks.push(t);
          }
          removeEntityWillBeUnloadedCallback(t) {
            for (
              let e = 0, s = this._entityWillBeUnloadedCallbacks.length;
              e < s;
              e++
            )
              if (this._entityWillBeUnloadedCallbacks[e] === t)
                return void this._entityWillBeUnloadedCallbacks.splice(e, 1);
          }
          setEntitiesForceVisible(t, e) {
            if (e)
              for (let t = 0, e = this._entityStatuses.size; t < e; t++) {
                this._entityStatuses.getAt(t).value.forceVisible = !1;
              }
            for (let e = 0, s = t.length; e < s; e++) {
              const s = t[e],
                i = this._entityStatuses.get(s);
              if (void 0 === i)
                throw new Error(
                  `Entity ${s} was set to force load, but isn't in the scene manager. Use addEntity().`,
                );
              i.forceVisible = !0;
            }
            this.update();
          }
          setExtraEntityOptions(t) {
            this._entityExtraOptions = { ...t };
          }
          updateEntityLayerVisibilityForChildren(t) {
            const e = this.app.getManager("layer"),
              s = this._scene.getEngine().getTime();
            for (let i = 0, n = this._entityStatuses.size; i < n; i++) {
              const n = this._entityStatuses.getAt(i);
              r.Parenting.getParentOfEntity(n.key, s) === t &&
                (n.value.layerVisibility = e.isEntityVisibleWithCurrentLayers(
                  n.key,
                ));
            }
          }
          updateEntityLayerVisibility() {
            const t = this.app.getManager("layer");
            for (let e = 0, s = this._entityStatuses.size; e < s; e++) {
              const s = this._entityStatuses.getAt(e);
              s.value.layerVisibility = t.isEntityVisibleWithCurrentLayers(
                s.key,
              );
            }
          }
          update() {
            const t = this.app.getManager("camera").cameraEntity;
            for (let e = 0, s = this._entityStatuses.size; e < s; e++) {
              const s = this._entityStatuses.getAt(e),
                i = s.key,
                n = s.value,
                o =
                  n.forceVisible ||
                  (!n.dynamic && n.layerVisibility) ||
                  (n.dynamic &&
                    n.layerVisibility &&
                    this._isEntityVisibleWithinParent(i)) ||
                  t?.getParent()?.getName() === i;
              let a = this._scene.getEntity(i);
              if (o && null === a) {
                this._createEntity(i);
                const t = r.SceneHelpers.getDependentEntities(i);
                for (const e of t)
                  null === this._scene.getEntity(e) && this._createEntity(e);
              } else if (!o && null !== a) {
                let t = !1;
                for (let e = 0, s = n.dependentEntities.length; e < s; e++)
                  null !== this._scene.get(n.dependentEntities[e]) && (t = !0);
                if (!t) {
                  for (
                    let t = 0, e = this._entityWillBeUnloadedCallbacks.length;
                    t < e;
                    t++
                  )
                    this._entityWillBeUnloadedCallbacks[t](a), (a = null);
                  (n.dependentEntities = []), this._scene.removeEntity(i);
                }
              }
              const l =
                n.forceVisible ||
                n.layerVisibility ||
                this._isAncestorOfCamera(t, i) ||
                n.entitiesForcingThisVisible.size > 0;
              null !== a && n.visible !== l && this.setVisibility(l, i);
            }
          }
          _createEntity(t) {
            const e = r.Entity.create(t, this._scene, this._entityExtraOptions);
            this._entityStatuses.get(t).visible || this.setVisibility(!1, t);
            const s = r.SceneHelpers.getDependentEntities(t);
            for (const e of s) {
              let s = this._entityStatuses.get(e);
              void 0 === s &&
                (this.addEntity(e, this._entityStatuses.get(t).dynamic),
                  (s = this._entityStatuses.get(e))),
                s.dependentEntities.push(t);
            }
            for (let t = 0, s = this._entityLoadedCallbacks.length; t < s; t++)
              this._entityLoadedCallbacks[t](e);
            return e;
          }
          _isAncestorOfCamera(t, e) {
            let s = t;
            for (; null !== s;) {
              if (s.getName() === e) return !0;
              for (let t = 0, i = s.getNumParentingTableEntries(); t < i; t++)
                if (s.getParentingTableEntry(t)[1] === e) return !0;
              s = s.getParent();
            }
            return !1;
          }
          setVisibility(t, e) {
            const s = this._entityStatuses.get(e);
            void 0 !== s && (s.visible = t);
            const i = this._scene.getEntity(e);
            if (null === i) return;
            const n = this.app.getManager("layer"),
              o = n.getLayer("trails").visible,
              r = n.getLayer("labels").visible;
            for (let e = 0; e < i.getNumComponents(); e++) {
              const n = i.getComponent(e),
                a = n.getType();
              "sun" !== i.getName() &&
                (t && "trail" === a
                  ? n.setEnabled(
                    t && o && !s.componentTypesNotVisible.has("trail"),
                  )
                  : t && "div" === a
                    ? n.setEnabled(
                      t && r && !s.componentTypesNotVisible.has("div"),
                    )
                    : n.setEnabled(
                      t && !s.componentTypesNotVisible.has(n.getType()),
                    ));
            }
            const a = this.app.getManager("content").getEntityInfo(e);
            if (void 0 !== a.forceVisibleEntities)
              for (let s = 0, i = a.forceVisibleEntities.length; s < i; s++) {
                const i = this._entityStatuses.get(a.forceVisibleEntities[s]);
                if (void 0 === i)
                  throw new Error(
                    `Entity ${e} was set to force load, but isn't in the scene manager. Use addEntity().`,
                  );
                t
                  ? i.entitiesForcingThisVisible.add(e)
                  : i.entitiesForcingThisVisible.delete(e);
              }
          }
          _isEntityVisibleWithinParent(t) {
            const e = r.Parenting.getParentOfEntity(
              t,
              this._scene.getEngine().getTime(),
            ),
              s = this._scene.getEntity(e);
            if (null === s) return !1;
            const i = r.Entity.getEntityOptions(e);
            return (
              ((i.systemRadius || 25 * i.radius || 25 * i.extentsRadius) /
                s.getExtentsRadius()) *
              s.getGreatestPixelSpaceExtentsRadius() >=
              20
            );
          }
          get(t) {
            return void 0 !== this._scenes[t] ? this._scenes[t] : null;
          }
          getEntitiesNames() {
            const t = [];
            for (let e = 0; e < this._scene.getNumEntities(); e++) {
              const s = this._scene.getEntity(e);
              t.push(s.getName());
            }
            return t;
          }
          getParent(t) {
            const e = this._scene.getEntity(t);
            if (null !== e) {
              const t = e.getParent();
              if (null !== t) return t.getName();
            }
            return null;
          }
          getParentList(t) {
            let e = this.getParent(t);
            const s = [];
            for (; null !== e && "" !== e;) s.push(e), (e = this.getParent(e));
            return s;
          }
          getDependencies(t) {
            const e = this._scene.getEntity(t),
              s = new Set();
            if (null !== e)
              for (let t = 0; t < e.getNumParentingTableEntries(); t++) {
                const i = e.getParentingTableEntry(t)[1];
                "" !== i && s.add(i);
              }
            const i = r.Entity.getEntityOptions(t);
            if (void 0 !== i)
              for (const e of Object.keys(i)) {
                const n = i[e];
                if ("parents" === e)
                  for (let t = 0; t < n.length; t++) {
                    const e = n[t][1];
                    "" !== e && s.add(e);
                  }
                "align" === e &&
                  (n.primary &&
                    n.primary.target &&
                    n.primary.target !== t &&
                    s.add(n.primary.target),
                    n.secondary &&
                    n.secondary.target &&
                    n.secondary.target !== t &&
                    s.add(n.secondary.target));
              }
            return Array.from(s);
          }
          async isReady(t, e) {
            (e =
              void 0 === e
                ? this.pioneer.getTime()
                : this.app.getManager("time").momentToET(e)),
              await r.SceneHelpers.waitTillEntitiesInPlace(this._scene, [t], e);
          }
          async isListReady(t, e) {
            const s = [];
            void 0 === e && (e = [void 0]);
            for (let i = 0; i < t.length; i++)
              for (let n = 0; n < e.length; n++)
                s.push(this.isReady(t[i], e[n]));
            await Promise.all(s);
          }
          async tileIsReady(t) {
            let e = null;
            return new Promise((s, i) => {
              const n = setInterval(() => {
                (t.isEnabled() && t.getEntity().isEnabled()) ||
                  (clearInterval(n), i(new Error("disabled"))),
                  null === e &&
                  null !== t.getTilesLoadedPromise() &&
                  (e = t.getTilesLoadedPromise().then(() => {
                    clearInterval(n), s(!0);
                  }));
              }, 30);
            });
          }
          async terrainIsReady(t) {
            let e = null;
            return new Promise((s) => {
              const i = setInterval(() => {
                (t.isEnabled() && t.getEntity().isEnabled()) ||
                  (clearInterval(i), s(!0)),
                  null === e &&
                  null !== t._loadedPromise &&
                  (e = t.getTilesLoadedPromise().then(() => {
                    clearInterval(i), s(!0);
                  }));
              }, 30);
            });
          }
          async componentIsReady(t) {
            if (t.isEnabled() && "loaded" === t.getLoadState()) return;
            return new Promise((e) => {
              const s = setInterval(() => {
                (t.isEnabled() && t.getEntity().isEnabled()) ||
                  (clearInterval(s), e(!0)),
                  "loaded" === t.getLoadState() && (clearInterval(s), e(!0));
              }, 30);
            });
          }
          toggleStarfield(t) {
            for (let e = 0; e < 7; e++)
              this._scene.get("sun", "starfield", e).setEnabled(t);
          }
          toggleHeliosphere(t) {
            this._scene.get("sun", "model").setEnabled(t);
          }
          async toggleConstellations(t) {
            const e = this._scene.get("sun");
            if (null === e) return;
            let s = e.getComponentByType("constellations");
            if (t && null === s) {
              (s = e.addComponent("constellations")),
                s instanceof r.ConstellationsComponent &&
                (s.setUrl("$STATIC_ASSETS_URL/stars/constellations.bin"),
                  s.setColor(new o.Color(0.35, 0.7, 1, 0.5))),
                await this.pioneer.waitUntilNextFrame(),
                await s.getLoadedPromise();
              const t = this.app.getManager("label"),
                i = this.app.getManager("content");
              t.stop();
              const n = new o.Color(0.35, 0.7, 1, 1),
                a = this.get("main")
                  .getEntity("camera")
                  .getComponentByType("camera");
              s.getNames().forEach((e) => {
                const r = `constellation_label_${e}`,
                  l = this._scene.getEntity(r);
                t.addEntity(l),
                  t.setLabelProps(
                    {
                      getLabelClass: (t) =>
                        `no-select ${i.getClassName(t, "constellation") ?? "constellation"
                        }`,
                      handleTouch: null,
                      handleMouseEnter: (t) => {
                        s.setHighlight(
                          s.getNearestConstellationIndex(
                            new o.Vector2(t.x, t.y),
                            a,
                          ),
                          n,
                          2.5,
                        );
                      },
                      handleMouseLeave: () => {
                        s.setHighlight(void 0, n, 2.5);
                      },
                      handleClick: null,
                    },
                    [r],
                  );
              }),
                t.start();
            } else if (!t && null !== s) {
              const t = this.app.getManager("label");
              t.stop(),
                s.getNames().forEach((e) => {
                  const s = `constellation_label_${e}`,
                    i = this._scene.getEntity(s);
                  t.removeEntity(i);
                }),
                t.start(),
                e.removeComponent(s);
            }
          }
          isHD() {
            return this._isHD;
          }
          hasHD(t) {
            const e = this._scene.get(t);
            if (null === e) return !1;
            if (Object.prototype.hasOwnProperty.call(this._hdWMTSMap, t))
              return !0;
            if (
              null !== e.getParent() &&
              Object.prototype.hasOwnProperty.call(
                this._hdWMTSMap,
                e.getParent().getName(),
              )
            )
              return !0;
            if (null !== e.get("spheroidLOD")) {
              const t = e.get("spheroidLOD").getTextureSizes("color");
              for (let e = 0; e < t.length; e++)
                if (t[e] > this._hdBreakpointSize) return !0;
            }
            return !1;
          }
          setHDBreakpoints(t, e) {
            (this._hdBreakpointSize = t), (this._maxTextureSize = e);
          }
          async toggleHD() {
            (this._isHD = !this._isHD),
              this._isHD ||
              this.pioneer
                .getConfig()
                .setValue("maxTextureSize", this._hdBreakpointSize);
            for (const t in this._hdWMTSMap) {
              const e = this._hdWMTSMap[t],
                s = this._scene.get(t),
                i = s.getComponentByType("spheroidLOD"),
                n = s.getComponent(e);
              if (
                (a.AppUtils.isMobileMode() && n.setMaxLevel(5),
                  n.setEnabled(this._isHD),
                  this._isHD)
              ) {
                this.addLoading(t, "wmts"),
                  await this.pioneer.waitUntilNextFrame();
                !0 ===
                  (await this.tileIsReady(n).catch(() => {
                    this.removeLoading(t, "wmts");
                  })) && (i.setEnabled(!1), this.removeLoading(t, "wmts"));
              } else i.setEnabled(!0);
              this._isHD &&
                this.pioneer
                  .getConfig()
                  .setValue("maxTextureSize", this._maxTextureSize);
            }
          }
          async forceTextureSizeForEntity(t, e, s = "color") {
            const i = this.app.pioneer.get("main", t, "spheroidLOD");
            null != i && i.forceTextureSize(s, e);
          }
          async isEntityHD(t) {
            const e = this.app.pioneer.get("main", t, "spheroidLOD");
            return (
              null != e &&
              (await e.getLoadedPromise(),
                e.getTextureCurrentSize("color", 0) > this._hdBreakpointSize)
            );
          }
          async toggleHDTextureForEntity(t) {
            const e = this.app.pioneer.get("main", t, "spheroidLOD");
            if (!1 === (await this.isEntityHD(t))) {
              let s = this._maxTextureSize;
              return (
                a.AppUtils.isiPhone() && (s = this._mobileTextureSize),
                this.addLoading(t, "spheroidLOD"),
                e.getTextureNames().forEach((e) => {
                  this.forceTextureSizeForEntity(t, s, e);
                }),
                await this.pioneer.waitUntilNextFrame(),
                await e.getLoadedPromise(),
                this.removeLoading(t, "spheroidLOD"),
                !0
              );
            }
            return (
              this.addLoading(t, "spheroidLOD"),
              e.getTextureNames().forEach((e) => {
                this.forceTextureSizeForEntity(t, this._hdBreakpointSize, e);
              }),
              await this.pioneer.waitUntilNextFrame(),
              await e.getLoadedPromise(),
              this.removeLoading(t, "spheroidLOD"),
              !1
            );
          }
          createRing(
            t,
            e,
            s,
            {
              orbitPlaneEntityName: i,
              color: n,
              numCircles: r = 1,
              numSpokes: a = 0,
              labelPosition: l = new o.Vector3(-e, 0, 0),
              labelText: c = "",
              isEnable: h = !0,
            } = {},
          ) {
            const u = this._scene.addEntity(t);
            u.setPosition(o.Vector3.Zero);
            const d = this._scene.getEntity(s);
            u.setParent(d);
            const p = u.addComponent("discGrid");
            p.setLineWidth(6),
              p.setSize(e),
              p.setNumCircles(r),
              p.setNumSpokes(a),
              p.setIgnoreDistance(!0),
              i && this.setAlignPlane(u, i),
              n instanceof o.Color && p.setColor(n);
            const m = this._scene.addEntity(`${t}Label`);
            m.setPosition(o.Vector3.Zero), m.setParent(d);
            m.addController("fixed").setPosition(l);
            const _ = m.addComponent("div");
            _.setFadeWhenCloseToCamera(!1);
            _.getDiv().classList.add("ring-label"),
              (_.getDiv().innerHTML = c),
              u.setEnabled(h),
              m.setEnabled(h);
          }
          createTorus(
            t,
            e,
            s,
            i,
            {
              orbitPlaneEntityName: n,
              color: r,
              visibleDistance: a = [
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
              ],
              labelPosition: l = new o.Vector3(-s, 0, 0),
              labelText: c = "",
              isEnable: h = !0,
            } = {},
          ) {
            const u = this._scene.addEntity(t);
            u.setPosition(o.Vector3.Zero);
            const d = this._scene.getEntity(i);
            u.setParent(d);
            const p = u.addComponent("torus");
            p.setInnerRadius(e),
              p.setOuterRadius(s),
              p.setVisibleDistanceInterval(new o.Interval(...a)),
              n && this.setAlignPlane(u, n),
              r instanceof o.Color && p.setColor(r);
            const m = this._scene.addEntity(`${t}Label`);
            m.setPosition(o.Vector3.Zero), m.setParent(d);
            m.addController("fixed").setPosition(l);
            const _ = m.addComponent("div");
            _.setFadeWhenCloseToCamera(!1);
            _.getDiv().classList.add("ring-label"),
              (_.getDiv().innerHTML = c),
              u.setEnabled(h),
              m.setEnabled(h);
          }
          setEntityHDWMTS(t, e) {
            this._hdWMTSMap[t] = e;
          }
          async enableWMTSComponent(t, e) {
            a.AppUtils.isMobileMode() && e.setMaxLevel(5);
            const s = this.get("main")
              .getEntity(t)
              .getComponentByType("spheroidLOD");
            this.addLoading(t, "wmts"),
              e.setEnabled(!0),
              await this.pioneer.waitUntilNextFrame();
            (await this.tileIsReady(e).catch(() => {
              this.removeLoading(t, "wmts");
            }))
              ? (s.setEnabled(!1), this.removeLoading(t, "wmts"))
              : s.setEnabled(!0);
          }
          async addWMTSComponent(t, e) {
            const s = this.app.pioneer.get("main", t);
            let i = s.getComponentByType("wmts");
            null === i && (i = s.addComponent("wmts", e.id)),
              i.setEnabled(!1),
              i.setEndPoint(e.endPoint),
              i.setLayer(e.layer),
              e.tile && i.setTileMatrixSet(e.tile);
            const n = new Date();
            "yesterday" === e.time
              ? (n.setDate(n.getDate() - 1),
                i.setDimensionValue(
                  "Time",
                  n.getFullYear() +
                  "-" +
                  String(n.getMonth() + 1).padStart(2, "0") +
                  "-" +
                  String(n.getDate()).padStart(2, "0"),
                ))
              : "now" === e.time &&
              i.setDimensionValue(
                "Time",
                n.getFullYear() +
                "-" +
                String(n.getMonth() + 1).padStart(2, "0") +
                "-" +
                String(n.getDate()).padStart(2, "0"),
              ),
              e.level ? i.setMaxLevel(e.level) : i.setMaxLevel(1 / 0),
              i.setMinLevel(2),
              await this.enableWMTSComponent(t, i);
          }
          loadWMTSFromJSON(t) {
            for (const e in t) {
              let s = "";
              for (const i in t[e])
                if ("hd" === i || "" === s)
                  (s = t[e][i]), (this._hdWMTSMap[e] = s);
                else {
                  const s = t[e][i],
                    n = this._scene.get(e).addComponent("wmts", i);
                  n.setEnabled(!1),
                    n.setEndPoint(s.endPoint),
                    n.setLayer(s.layer),
                    s.tile && n.setTileMatrixSet(s.tile);
                  const o = new Date();
                  "yesterday" === s.time
                    ? (o.setDate(o.getDate() - 1),
                      n.setDimensionValue(
                        "Time",
                        o.getFullYear() +
                        "-" +
                        String(o.getMonth() + 1).padStart(2, "0") +
                        "-" +
                        String(o.getDate()).padStart(2, "0"),
                      ))
                    : "now" === s.time &&
                    n.setDimensionValue(
                      "Time",
                      o.getFullYear() +
                      "-" +
                      String(o.getMonth() + 1).padStart(2, "0") +
                      "-" +
                      String(o.getDate()).padStart(2, "0"),
                    ),
                    s.level ? n.setMaxLevel(s.level) : n.setMaxLevel(1 / 0);
                }
            }
          }
          setAlignPlane(t, e) {
            const s = this._scene.getEntity(e),
              i = new o.Quaternion();
            s
              .getControllerByType("dynamo")
              .getOrbitOrientation(i, this.app.pioneer.getTime()),
              t.setOrientation(i);
          }
          clearTempEntities() {
            const t = this.app.getManager("camera").cameraEntity;
            if (null === t || null === t.getParent()) return;
            const e = t.getParent().getName();
            this._tempEntities = this._tempEntities.filter((t) => {
              if (e === t.getName()) return !0;
              return (
                this.app.getManager("label").removeEntity(t),
                this._scene.removeEntity(t?.getName()),
                !1
              );
            });
          }
          addTempEntity(t) {
            this._tempEntities.push(t);
          }
          addLoading(t, e) {
            const s = t + "_" + e;
            this._loadingItems.indexOf(s) < 0 && this._loadingItems.push(s),
              this._loadingItems.length > 0 &&
              ((this._isLoading = !0), this.triggerCallbacks("loading"));
          }
          removeLoading(t, e) {
            const s = t + "_" + e,
              i = this._loadingItems.indexOf(s);
            i >= 0 && this._loadingItems.splice(i, 1),
              0 === this._loadingItems.length &&
              ((this._isLoading = !1), this.triggerCallbacks("loaded", [t]));
          }
          forceLoad(t) {
            t.setForceLoaded(!0), this._loadedComponents.push(t);
          }
          removeForceLoad(t) {
            this._loadedComponents = this._loadedComponents.filter(
              (e) => e !== t || (t.setForceLoaded(!1), !1),
            );
          }
          clearForceLoad() {
            for (let t = 0; t < this._loadedComponents.length; t++) {
              this._loadedComponents[t].setForceLoaded(!1);
            }
            this._loadedComponents = [];
          }
          getDistance(
            t,
            e,
            { time: s, subtractRadius: i = !1, precision: n = 0 } = {},
          ) {
            const r = o.Vector3.pool.get(),
              a = this._scene.get(t),
              l = this._scene.get(e);
            let c = 0;
            if (void 0 !== s) {
              const t = o.TimeUtils.unixToEt(s.valueOf() / 1e3);
              a.getPositionRelativeToEntity(r, o.Vector3.Zero, l, t);
            } else a.getPositionRelativeToEntity(r, o.Vector3.Zero, l);
            if (((c = r.magnitude()), i)) {
              c -= a.getExtentsRadius() + l.getExtentsRadius();
            }
            if (n > 0) {
              const t = Math.pow(10, Math.floor(Math.log10(c)) - n);
              c = Math.round(c / t) * t;
            }
            return o.Vector3.pool.release(r), c;
          }
          getSpeed(t, e, { time: s } = {}) {
            const i = o.Vector3.pool.get(),
              n = this._scene.get(t);
            let r = null;
            if (
              ((r = void 0 === e ? n.getParent() : this._scene.get(e)),
                void 0 !== s)
            ) {
              const t = this.app.getManager("time").momentToET(s);
              n.getVelocityRelativeToEntity(i, o.Vector3.Zero, r, t);
            } else n.getVelocityRelativeToEntity(i, o.Vector3.Zero, r);
            return o.Vector3.pool.release(i), i.magnitude();
          }
          getCoverage(t, e = !0) {
            const s = {
              min: a.AppUtils.constants.maxDate,
              max: a.AppUtils.constants.minDate,
            },
              i = this.pioneer.get("main", t);
            let r = i.getPositionCoverage().min,
              l = i.getPositionCoverage().max;
            if (
              (e &&
                ((r = Math.max(
                  i.getPositionCoverage().min,
                  i.getOrientationCoverage().min,
                )),
                  (l = Math.min(
                    i.getPositionCoverage().max,
                    i.getOrientationCoverage().max,
                  ))),
                (s.min = i ? Math.min(r, s.min) : s.min),
                (s.max = i ? Math.max(l - 0.001, s.max) : s.max),
                s.min === -1 / 0 || s.min < a.AppUtils.minDate)
            )
              s.min = n()(a.AppUtils.constants.minDate);
            else {
              s.min = Math.ceil(1e3 * s.min) / 1e3;
              let t = 1e3 * o.TimeUtils.etToUnix(s.min);
              (t = Math.ceil(1e3 * t) / 1e3), (s.min = n().tz(t, "ETC/Utc"));
            }
            if (s.max === 1 / 0 || s.max > a.AppUtils.maxDate)
              s.max = n()(a.AppUtils.constants.maxDate);
            else {
              s.max = Math.floor(1e3 * s.max) / 1e3;
              let t = 1e3 * o.TimeUtils.etToUnix(s.max);
              (t = Math.floor(1e3 * t) / 1e3), (s.max = n().tz(t, "ETC/Utc"));
            }
            return s;
          }
          async toggleRing(t) {
            console.log("toggleRing", t);
          }
          get main() {
            return this._scene;
          }
          get isLoading() {
            return this._isLoading;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Cameras: function () {
              return i.Cameras;
            },
            DateTime: function () {
              return n.DateTime;
            },
            Entity: function () {
              return o.Entity;
            },
            Features: function () {
              return r.Features;
            },
            Mapping: function () {
              return a.Mapping;
            },
            Parenting: function () {
              return l.Parenting;
            },
            Placemarks: function () {
              return c.Placemarks;
            },
            SceneHelpers: function () {
              return h.SceneHelpers;
            },
            Transitions: function () {
              return u.Transitions;
            },
            AnnulusComponent: function () {
              return d.AnnulusComponent;
            },
            CelestialGridComponent: function () {
              return p.CelestialGridComponent;
            },
            ConstellationsComponent: function () {
              return m.ConstellationsComponent;
            },
            DiscGridComponent: function () {
              return _.DiscGridComponent;
            },
            ShadowConeComponent: function () {
              return g.ShadowConeComponent;
            },
            OrbitLineComponent: function () {
              return y.OrbitLineComponent;
            },
            TorusComponent: function () {
              return f.TorusComponent;
            },
            WMTSComponent: function () {
              return b.WMTSComponent;
            },
            KeyframePointingController: function () {
              return T.KeyframePointingController;
            },
            KeyframeSpinController: function () {
              return S.KeyframeSpinController;
            },
            PositionSumController: function () {
              return E.PositionSumController;
            },
            ZoomFitController: function () {
              return v.ZoomFitController;
            },
          });
        var i = s(530),
          n = s(531),
          o = s(532),
          r = s(533),
          a = s(534),
          l = s(535),
          c = s(536),
          h = s(537),
          u = s(538),
          d = s(539),
          p = s(540),
          m = s(541),
          _ = s(542),
          g = s(543),
          y = s(544),
          f = s(545),
          b = s(546),
          T = s(639),
          S = s(640),
          E = s(641),
          v = s(642);
        s(643),
          s(644),
          s(645),
          s(647),
          s(648),
          s(649),
          s(650),
          s(651),
          s(652),
          s(653),
          s(654),
          s(655),
          s(656),
          s(657),
          s(658),
          s(659),
          s(660),
          s(661),
          s(663),
          s(664),
          s(665);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Cameras: function () {
              return Cameras;
            },
          });
        var i = s(5);
        class Cameras {
          static createFullSizeViewportAndCamera(t, e = "main", s = "camera") {
            const n = t.getEngine().addViewport(e);
            (n.getDiv().style.width = "100%"),
              (n.getDiv().style.height = "100%");
            const o = t.addEntity(s).addComponentByClass(i.CameraComponent);
            n.setCamera(o);
          }
          static focusOnEntity(t, e, { up: s = !0, orbiter: n = !1 }) {
            const o = t.addControllerByClass(i.AlignController);
            o.setPrimaryAlignType("point"),
              o.setPrimaryAxis(i.Vector3.YAxis),
              o.setPrimaryTargetEntity(e.getName()),
              s &&
              (n
                ? (o.setSecondaryAlignType("position"),
                  o.setSecondaryAxis(i.Vector3.ZAxis),
                  o.setSecondaryTargetEntity(e.getName()))
                : (o.setSecondaryAlignType("align"),
                  o.setSecondaryAxis(i.Vector3.ZAxis),
                  o.setSecondaryTargetEntity(e.getName()),
                  o.setSecondaryTargetAxis(i.Vector3.ZAxis)));
          }
          static async lookAtEntity(
            t,
            e,
            {
              duration: s = 0.5,
              finalUp: n,
              finalUpRelativeEntity: o,
              finalUpPosition: r = !1,
            },
          ) {
            if (t.getPosition().isNaN()) return;
            const a = new i.Vector3();
            e.getPositionRelativeToEntity(a, i.Vector3.Zero, t), a.normalize(a);
            for (let e = 0; e < t.getNumControllers(); e++)
              t.getController(e).hasModifiedState("orientation") &&
                (t.removeController(e), e--);
            const l = t.addControllerByClass(i.AlignController);
            l.setPrimaryAlignType("point"),
              l.setPrimaryAxis(i.Vector3.YAxis),
              l.setPrimaryTargetEntity(e.getName()),
              void 0 !== n &&
              (void 0 === o && (o = e),
                r
                  ? (l.setSecondaryAlignType("position"),
                    l.setSecondaryAxis(i.Vector3.ZAxis),
                    l.setSecondaryTargetEntity(o.getName()))
                  : (l.setSecondaryAlignType("align"),
                    l.setSecondaryAxis(i.Vector3.ZAxis),
                    l.setSecondaryTargetEntity(o.getName()),
                    l.setSecondaryTargetAxis(n)));
            const c = t.addControllerByClass(i.TransitionController);
            c.setTransitionTime(s), await c.getEndPromise();
          }
          static async goToEntity(
            t,
            e,
            {
              up: s = !0,
              orbiter: n = !1,
              fixedToParent: o = !1,
              duration: r = 1,
              distance: a,
              zoom: l = !0,
              destination: c,
              destinationUp: h,
              destinationInFocusFrame: u = !1,
              transitionFunction: d,
            },
          ) {
            a || (a = 5 * e.getExtentsRadius()),
              (t.getPosition().isNaN() || t.getOrientation().isNaN()) &&
              (t.setParent(e),
                void 0 === c
                  ? t.setPosition(new i.Vector3(0, -a, 0))
                  : t.setPosition(c),
                t.setOrientation(i.Quaternion.Identity),
                (r = 0)),
              void 0 === c &&
              ((c = new i.Vector3()),
                t.getPositionRelativeToEntity(c, i.Vector3.Zero, e),
                c.normalize(c),
                c.mult(c, a),
                c.isNaN() && c.set(0, -a, 0)),
              t.clearControllers();
            const p = t.addControllerByClass(i.FixedController);
            if ((p.setPosition(c), void 0 !== h)) {
              const t = new i.Vector3(),
                e = new i.Vector3();
              t.neg(c), t.normalize(t), e.setNormalTo(t, h);
              const s = new i.Quaternion();
              s.setFromAxes(void 0, t, e), p.setOrientation(s);
            }
            if (u) {
              const e = t.addControllerByClass(
                i.RotateByEntityOrientationController,
              );
              void 0 === h && e.setRotatingOrientation(!1);
            }
            this.focusOnEntity(t, e, { up: s, orbiter: n });
            const m = t.addControllerByClass(i.TransitionController);
            m.setTransitionTime(r),
              m.setParent(e.getName()),
              d && m.setTransitionFunction(d),
              await m.getEndPromise(),
              t.clearControllers();
            const _ = t.addControllerByClass(i.OrbitController);
            s
              ? n
                ? _.setYawAxisType("position")
                : _.setYawAxisType("z-axis")
              : t.addController("roll"),
              o && t.addController("fixedToParent"),
              l && t.addController("zoom"),
              this.focusOnEntity(t, e, { up: s, orbiter: n });
          }
          static pickOnEntity(t, e, s) {
            const n = t.addControllerByClass(i.PickController);
            n.setPickedEntity(e),
              n.setCallback((t) => {
                const n = e.getComponentByClass(i.SpheroidComponent);
                if (null !== n) {
                  const o = i.Vector3.pool.get();
                  o.rotateInverse(e.getOrientation(), t);
                  const r = i.LatLonAlt.pool.get();
                  n.llaFromXYZ(r, o),
                    s(o, r),
                    i.LatLonAlt.pool.release(r),
                    i.Vector3.pool.release(o);
                }
              });
          }
          static getDistanceToFitEntities(t, e, s, n) {
            const o = t.getComponentByClass(i.CameraComponent);
            if (null === o) return NaN;
            let r = 0;
            const a = i.Vector3.pool.get(),
              l = Math.sin(o.getHorizontalFieldOfView() / 2),
              c = Math.sin(o.getVerticalFieldOfView() / 2),
              h = Math.tan(o.getHorizontalFieldOfView() / 2),
              u = Math.tan(o.getVerticalFieldOfView() / 2);
            for (let t = 0; t < n.length; t++) {
              const o = n[t];
              let d = 0;
              const p = o.getComponentByClass(i.RingsComponent);
              null !== p && (d = p.getOuterRadius()),
                o.getPositionRelativeToEntity(a, i.Vector3.Zero, s),
                a.rotateInverse(e, a),
                (r = Math.max(
                  r,
                  Math.abs(a.x) / h +
                  Math.max(o.getExtentsRadius(), d) / l -
                  a.y,
                )),
                (r = Math.max(
                  r,
                  Math.abs(a.z) / u +
                  Math.max(o.getExtentsRadius(), d) / c -
                  a.y,
                ));
            }
            return i.Vector3.pool.release(a), r;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DateTime: function () {
              return DateTime;
            },
          });
        var i = s(5);
        class DateTime {
          constructor(t = 1, e = 1, s = 1, i = 0, n = 0, o = 0, r = 0) {
            (this.year = t),
              (this.month = e),
              (this.day = s),
              (this.hour = i),
              (this.minute = n),
              (this.second = o),
              (this.millisecond = r);
          }
          copy(t) {
            (this.year = t.year),
              (this.month = t.month),
              (this.day = t.day),
              (this.hour = t.hour),
              (this.minute = t.minute),
              (this.second = t.second),
              (this.millisecond = t.millisecond);
          }
          fromET(t) {
            const e = i.TimeUtils.etToUnix(t);
            o.setTime(1e3 * e),
              (this.year = o.getUTCFullYear()),
              (this.month = o.getUTCMonth() + 1),
              (this.day = o.getUTCDate()),
              (this.hour = o.getUTCHours()),
              (this.minute = o.getUTCMinutes()),
              (this.second = o.getUTCSeconds()),
              (this.millisecond = o.getUTCMilliseconds());
            for (let s = 0, n = i.TimeUtils.leapSeconds.length; s < n; s++)
              if (
                Math.floor(e) === i.TimeUtils.leapSeconds[s] &&
                e === i.TimeUtils.etToUnix(t - 1)
              ) {
                this.second += 1;
                break;
              }
          }
          toET() {
            o.setUTCFullYear(this.year),
              o.setUTCMonth(this.month - 1),
              o.setUTCDate(this.day),
              o.setUTCHours(this.hour),
              o.setUTCMinutes(this.minute),
              o.setUTCSeconds(this.second),
              o.setUTCMilliseconds(this.millisecond);
            const t = o.getTime() / 1e3;
            let e = i.TimeUtils.unixToEt(t);
            if (60 === this.second)
              for (let s = 0, n = i.TimeUtils.leapSeconds.length; s < n; s++)
                if (Math.floor(t) === i.TimeUtils.leapSeconds[s] + 1) {
                  e -= 1;
                  break;
                }
            return e;
          }
          fromDOY(t, e, s = 0, i = 0, n = 0, o = 0) {
            let r = 0;
            (this.year = t),
              (this.month = 1),
              (this.hour = s),
              (this.minute = i),
              (this.second = n),
              (this.millisecond = o);
            let a = this.getDaysInMonth();
            for (; e > r + a && this.month < 12;)
              (r += a), (this.month += 1), (a = this.getDaysInMonth());
            this.day = e - r;
          }
          toDOY() {
            const t = this.month;
            let e = 0;
            for (this.month = 1; this.month < t; this.month++)
              e += this.getDaysInMonth();
            return (this.month = t), (e += this.day), e;
          }
          isLeapYear() {
            return (
              (this.year % 4 == 0 && this.year % 100 != 0) ||
              this.year % 400 == 0
            );
          }
          getDaysInMonth() {
            let t = n[this.month - 1];
            return 2 === this.month && this.isLeapYear() && (t += 1), t;
          }
          parse(t) {
            (this.year = parseInt(t.substring(0, 4))),
              t.length > 5
                ? (this.month = parseInt(t.substring(5, 7)))
                : (this.month = 1),
              t.length > 8
                ? (this.day = parseInt(t.substring(8, 10)))
                : (this.day = 1),
              t.length > 11
                ? ((this.hour = parseInt(t.substring(11, 13))),
                  (this.minute = parseInt(t.substring(14, 16))))
                : ((this.hour = 0), (this.minute = 0)),
              t.length > 17
                ? (this.second = parseInt(t.substring(17, 19)))
                : (this.second = 0),
              t.length > 20
                ? (this.millisecond =
                  parseInt(t.substring(20)) * Math.pow(10, 23 - t.length))
                : (this.millisecond = 0);
          }
          parseDOY(t) {
            const e = parseInt(t.substring(0, 4));
            let s = 1;
            t.length > 5 && (s = parseInt(t.substring(5, 8))),
              this.fromDOY(e, s),
              t.length > 9
                ? ((this.hour = parseInt(t.substring(9, 11))),
                  (this.minute = parseInt(t.substring(12, 14))))
                : ((this.hour = 0), (this.minute = 0)),
              t.length > 15
                ? (this.second = parseInt(t.substring(15, 17)))
                : (this.second = 0),
              t.length > 18
                ? (this.millisecond =
                  parseInt(t.substring(18)) * Math.pow(10, 21 - t.length))
                : (this.millisecond = 0);
          }
          toString() {
            return `${this.year.toString().padStart(4, "0")}-${this.month
              .toString()
              .padStart(2, "0")}-${this.day
                .toString()
                .padStart(2, "0")} ${this.hour
                  .toString()
                  .padStart(2, "0")}:${this.minute
                    .toString()
                    .padStart(2, "0")}:${this.second
                      .toString()
                      .padStart(2, "0")}.${Math.floor(1e3 * this.millisecond)
                        .toString()
                        .padStart(6, "0")}`;
          }
          toStringDOY() {
            return `${this.year.toString().padStart(4, "0")}-${this.toDOY()
              .toString()
              .padStart(3, "0")}`;
          }
        }
        const n = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
          o = new Date();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Entity: function () {
              return Entity;
            },
          });
        var i = s(5);
        class Entity {
          static register(t) {
            for (const e in t)
              Object.prototype.hasOwnProperty.call(t, e) &&
                this._entities.set(e, t[e]);
          }
          static create(t, e, s) {
            const i = Entity._entities.get(t);
            if (void 0 === i)
              throw new Error(
                "Could not find the options for the entity with name " + t,
              );
            return this.createFromOptions(t, i, e, s);
          }
          static createFromOptions(t, e, s, n) {
            let o = t;
            n &&
              (n.namePrefix && (o = n.namePrefix + o),
                n.nameSuffix && (o += n.nameSuffix));
            let r = s.getEntity(o);
            if (null !== r) return r;
            r = s.addEntity(o);
            try {
              e.radius &&
                (r.setOcclusionRadius(e.radius), r.setExtentsRadius(e.radius)),
                e.occlusionRadius && r.setOcclusionRadius(e.occlusionRadius),
                e.extentsRadius && r.setExtentsRadius(e.extentsRadius);
              for (const [t, s] of e.parents) r.addParentingTableEntry(t, s);
              if (e.label) {
                const t = r.addComponentByClass(i.DivComponent).getDiv();
                (t.innerHTML = e.label), (t.className = "pioneer-label-div");
              }
              if (e.labelFadeEntity) {
                const t = r.getComponentByClass(i.DivComponent);
                if (null === t) throw new Error("There is no label.");
                t.setFadeWhenCloseToEntity(e.labelFadeEntity);
              }
              if (e.trail) {
                const t = r.addComponentByClass(i.TrailComponent, e.trail.name);
                if (
                  (t.setStartTime(e.trail.length),
                    e.trail.color
                      ? t.setColor(
                        new i.Color(
                          e.trail.color[0],
                          e.trail.color[1],
                          e.trail.color[2],
                          e.trail.color[3],
                        ),
                      )
                      : t.setColor(new i.Color(1, 1, 1, 0.5)),
                    e.trail.relativeTo &&
                    t.setRelativeToEntity(e.trail.relativeTo),
                    e.trail.lengthCoverages)
                ) {
                  const t = e.trail.length;
                  for (
                    let s = 0, n = e.trail.lengthCoverages.length;
                    s < n;
                    s++
                  ) {
                    const n = e.trail.lengthCoverages[s],
                      o = r.addControllerByClass(
                        i.CoverageController,
                        `trail_length_coverage.${s}`,
                        r.getController(0) ?? void 0,
                      );
                    o.setCoverage(new i.Interval(n[1], n[2])),
                      o.setEnterFunction((t) => {
                        const e = t.getComponentByClass(i.TrailComponent);
                        null !== e && e.setStartTime(n[0]);
                      }),
                      o.setExitFunction((e) => {
                        const s = e.getComponentByClass(i.TrailComponent);
                        null !== s && s.setStartTime(t);
                      });
                  }
                }
              }
              if (e.spheroid) {
                const t = r.addComponentByClass(
                  i.SpheroidComponent,
                  e.spheroid.name,
                );
                t.setEquatorialRadius(e.spheroid.equatorialRadius),
                  t.setPolarRadius(e.spheroid.polarRadius),
                  t.setPlanetographic(e.spheroid.planetographic);
              }
              if (e.spheroidLOD) {
                const t = r.addComponentByClass(
                  i.SpheroidLODComponent,
                  e.spheroidLOD.name ?? "basic",
                );
                if (e.spheroidLOD.features)
                  for (let s = 0, i = e.spheroidLOD.features.length; s < i; s++)
                    t.setFeature(e.spheroidLOD.features[s], !0);
                if (e.spheroidLOD.textures) {
                  t.setMapping("cube");
                  for (const s in e.spheroidLOD.textures)
                    t.setTexture(
                      s,
                      "$STATIC_ASSETS_URL/maps/" +
                      e.spheroidLOD.textures[s].url,
                      e.spheroidLOD.textures[s].sizes,
                    );
                }
                e.spheroidLOD.shadowEntities &&
                  t.setShadowEntities(e.spheroidLOD.shadowEntities);
              }
              if (e.cmts) {
                const t = r.addComponentByClass(i.CMTSComponent, e.cmts.name);
                if (e.cmts.textures) {
                  for (const s in e.cmts.textures) {
                    const i = e.cmts.textures[s];
                    t.setBaseUrl(s, i);
                  }
                  t.setMaxLevel(e.cmts.maxLevel || 0);
                }
                e.cmts.shadowEntities &&
                  t.setShadowEntities(e.cmts.shadowEntities);
              }
              if (e.model) {
                const t = r.addComponentByClass(i.ModelComponent, e.model.name);
                if ((t.setUrl(e.model.url), e.model.rotate)) {
                  const s = new i.Quaternion();
                  s.set(1, 0, 0, 0);
                  for (let t = 0, n = e.model.rotate.length; t < n; t++) {
                    let n, o;
                    const r = e.model.rotate[t];
                    if (void 0 !== r.x) (n = new i.Vector3(1, 0, 0)), (o = r.x);
                    else if (void 0 !== r.y)
                      (n = new i.Vector3(0, 1, 0)), (o = r.y);
                    else {
                      if (void 0 === r.z)
                        throw new Error("Invalid model rotate axis.");
                      (n = new i.Vector3(0, 0, 1)), (o = r.z);
                    }
                    o = i.MathUtils.degToRad(o);
                    const a = new i.Quaternion();
                    a.setFromAxisAngle(n, o), s.mult(a, s);
                  }
                  t.setRotation(s);
                }
                if (e.model.scale) {
                  const s = e.model.scale;
                  Array.isArray(s)
                    ? t.setScale(new i.Vector3(s[0], s[1], s[2]))
                    : t.setScale(s);
                }
                !0 === e.model.useCompressedTextures &&
                  t.setUseCompressedTextures(!0),
                  e.model.shadowEntities &&
                  t.setShadowEntities(e.model.shadowEntities),
                  e.model.environmentMap &&
                  (e.model.environmentMap.cubemap
                    ? (t.setEnvironmentCubemapUrl(
                      e.model.environmentMap.cubemap,
                    ),
                      t.setEnvironmentCylindricalUrl(""))
                    : e.model.environmentMap.cylindrical &&
                    (t.setEnvironmentCylindricalUrl(
                      e.model.environmentMap.cylindrical,
                    ),
                      t.setEnvironmentCubemapUrl("")));
              }
              if (e.comet) {
                const t = r.addComponentByClass(
                  i.CometTailComponent,
                  e.comet.name,
                );
                void 0 !== e.comet.timeLength &&
                  t.setTimeLength(e.comet.timeLength),
                  t.setLightSource("sun");
                const s = r.addComponentByClass(i.CometTailComponent);
                s.setTimeLength(0.5 * t.getTimeLength()),
                  s.setColor(new i.Color(0.214, 0.235, 0.371, 0.5)),
                  s.setStarAccelerationMultiplier(10),
                  s.setLightSource("sun");
                const n = r.addComponentByClass(i.CometTailComponent);
                n.setStarAccelerationMultiplier(0),
                  n.setColor(new i.Color(1, 1, 1, 10)),
                  n.setNumberOfParticles(1),
                  n.setLightSource("sun");
              }
              if (e.controllers)
                for (let t = 0, n = e.controllers.length; t < n; t++) {
                  const n = e.controllers[t],
                    o = n.type;
                  let a;
                  if ("fixed" === o) {
                    if (
                      ((a = r.addControllerByClass(i.FixedController, n.name)),
                        n.position && a.setPosition(n.position),
                        n.orientation && a.setOrientation(n.orientation),
                        n.relativeToEntity)
                    ) {
                      const t = r.addControllerByClass(
                        i.RotateByEntityOrientationController,
                      );
                      t.setEntityForOrientation(n.relativeToEntity),
                        n.coverage &&
                        2 === n.coverage.length &&
                        t.setCoverage(
                          new i.Interval(n.coverage[0], n.coverage[1]),
                        );
                    }
                    if (n.llaOnSpheroid) {
                      const t = n.llaOnSpheroidEntity ?? e.parents[0][1],
                        o = s.getEntity(t);
                      if (null !== o) {
                        const e = o.getComponentByClass(i.SpheroidComponent);
                        if (null === e)
                          throw new Error("Missing spheroid component.");
                        n.coverage &&
                          2 === n.coverage.length &&
                          a.setCoverage(
                            new i.Interval(n.coverage[0], n.coverage[1]),
                          );
                        const s = new i.Vector3();
                        e.xyzFromLLA(s, n.llaOnSpheroid), a.setPosition(s);
                        const l = new i.Quaternion();
                        e.orientationFromLLA(l, n.llaOnSpheroid),
                          a.setOrientation(l);
                        const c = r.addControllerByClass(
                          i.RotateByEntityOrientationController,
                        );
                        n.coverage &&
                          2 === n.coverage.length &&
                          c.setCoverage(
                            new i.Interval(n.coverage[0], n.coverage[1]),
                          );
                        const h = r.addControllerByClass(
                          i.GroundClampController,
                        );
                        h.setGroundComponentRef(t, "cmts"),
                          n.coverage &&
                          2 === n.coverage.length &&
                          h.setCoverage(
                            new i.Interval(n.coverage[0], n.coverage[1]),
                          );
                      }
                    }
                  } else if ("dynamo" === o)
                    (a = r.addControllerByClass(i.DynamoController, n.name)),
                      n.customUrl
                        ? a.setBaseUrl(n.url)
                        : a.setBaseUrl("$DYNAMIC_ASSETS_URL/dynamo/" + n.url),
                      n.parentIsBarycenter && a.setHeaderValue("body", 1);
                  else if ("animdata" === o)
                    (a = r.addControllerByClass(i.AnimdataController, n.name)),
                      a.setBaseUrlAndStateType(
                        "$ANIMDATA_URL/" + n.url,
                        n.dataType,
                      );
                  else if ("align" === o)
                    (a = r.addControllerByClass(i.AlignController, n.name)),
                      a.setPrimaryAlignType(n.primary.type),
                      a.setPrimaryTargetEntity(n.primary.target),
                      a.setPrimaryAxis(n.primary.axis),
                      n.primary.targetAxis &&
                      a.setPrimaryTargetAxis(n.primary.targetAxis),
                      n.secondary &&
                      (a.setSecondaryAlignType(n.secondary.type),
                        a.setSecondaryTargetEntity(n.secondary.target),
                        a.setSecondaryAxis(n.secondary.axis),
                        n.secondary.targetAxis &&
                        a.setSecondaryTargetAxis(n.secondary.targetAxis));
                  else if ("spin" === o)
                    (a = r.addControllerByClass(i.SpinController, n.name)),
                      a.setAxis(n.axis, n.axisInFrameSpace ?? !0),
                      a.setRate(i.MathUtils.twoPi / (3600 * n.periodInHours)),
                      void 0 !== n.relativeToTime &&
                      a.setReferenceTime(n.relativeToTime);
                  else if ("rotateByEntityOrientation" === o)
                    (a = r.addControllerByClass(
                      i.RotateByEntityOrientationController,
                      n.name,
                    )),
                      n.entityForOrientation &&
                      a.setEntityForOrientation(n.entityForOrientation),
                      void 0 !== n.rotatingOrientation &&
                      a.setRotatingOrientation(n.rotatingOrientation),
                      void 0 !== n.rotatingPosition &&
                      a.setRotatingPosition(n.rotatingPosition);
                  else if ("orbitalElements" === o) {
                    a = r.addControllerByClass(
                      i.OrbitalElementsController,
                      n.name,
                    );
                    const t = n.epoch ?? 0,
                      e = new i.OrbitalElements();
                    if (
                      ((e.epoch = t),
                        (e.eccentricity = n.eccentricity),
                        (e.semiMajorAxis = n.semiMajorAxis),
                        (e.meanAngularMotion = n.meanAngularMotion),
                        (e.meanAnomalyAtEpoch = n.meanAnomalyAtEpoch),
                        void 0 !== n.orbitOrientation)
                    )
                      e.orbitOrientation.copy(n.orbitOrientation);
                    else {
                      if (
                        void 0 === n.inclination ||
                        void 0 === n.longitudeOfAscendingNode ||
                        void 0 === n.argumentOfPeriapsis
                      )
                        throw new Error(
                          "Either orbitOrientation or all of inclination, longitudeOfAscendingNode, and argumentOfPeriapsis must be defined.",
                        );
                      e.setOrbitOrientationFromElements(
                        n.inclination,
                        n.longitudeOfAscendingNode,
                        n.argumentOfPeriapsis,
                      );
                    }
                    a.addOrbitalElements(t, e);
                  } else if ("coverage" === o)
                    (a = r.addControllerByClass(i.CoverageController, n.name)),
                      a.setEnterFunction(n.enter),
                      a.setExitFunction(n.exit),
                      a.setUpdateFunction(n.update),
                      void 0 !== n.updateInterval &&
                      a.setUpdateInterval(n.updateInterval);
                  else {
                    if ("custom" !== o)
                      throw new Error(`The type "${o}" is unknown.`);
                    a = n.func(r);
                  }
                  n.coverage &&
                    2 === n.coverage.length &&
                    a.setCoverage(new i.Interval(n.coverage[0], n.coverage[1]));
                }
              e.postCreateFunction && e.postCreateFunction(r, n);
            } catch (t) {
              throw (
                (null !== r && s.removeEntity(r),
                  t instanceof Error &&
                  (t.message = `While creating "${o}": ${t.message}`),
                  t)
              );
            }
            return r;
          }
          static getEntityOptions(t) {
            return Entity._entities.get(t);
          }
          static getEntityNamesInGroup(t) {
            const e = new Set();
            if ("" !== t) {
              const s = t.split(",").map((t) => t.trim());
              for (const [t, i] of Entity._entities) {
                const n = i.groups;
                if (!n) continue;
                let o = !0;
                for (const t of s) n.includes(t) || (o = !1);
                o && e.add(t);
              }
            } else for (const t of Entity._entities.keys()) e.add(t);
            return e;
          }
          static getGroups() {
            const t = new Set();
            for (const e of this._entities.values()) {
              const s = e.groups;
              if (void 0 !== s) for (let e = 0; e < s.length; e++) t.add(s[e]);
            }
            return t;
          }
          static createGroup(t, e, s) {
            const i = this.getEntityNamesInGroup(t);
            for (const t of i) this.create(t, e, s);
          }
        }
        Entity._entities = new Map();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Features: function () {
              return Features;
            },
          });
        var i = s(5),
          n = s(532);
        class Features {
          static setEnabled(t, e, s, i) {
            const n = o[e];
            if (!n)
              throw new Error(
                `Attempted to access unavailable feature ${s} for ${e}.`,
              );
            const r = n[s];
            if (!r)
              throw new Error(
                `Attempted to access unavailable feature ${s} for ${e}.`,
              );
            r(t, i);
          }
          static isEnabled(t, e, s) {
            const i = r[e];
            if (!i)
              throw new Error(
                `Attempted to access unavailable feature ${s} for ${e}.`,
              );
            const n = i[s];
            if (!n)
              throw new Error(
                `Attempted to access unavailable feature ${s} for ${e}.`,
              );
            return n(t);
          }
          static setEnabledJupiterAuroras(t, e) {
            e
              ? Features._createJupiterModelComponent(t, "auroras", "auroras")
              : !1 === e && t.getEntity("jupiter").removeComponent("auroras");
          }
          static isEnabledJupiterAuroras(t) {
            return null !== t.getEntity("jupiter").getComponent("auroras");
          }
          static setEnabledJupiterMagnetosphere(t, e) {
            e
              ? Features._createJupiterModelComponent(
                t,
                "magnetosphere",
                "magnetosphere",
              )
              : t.getEntity("jupiter").removeComponent("magnetosphere");
          }
          static isEnabledJupiterMagnetosphere(t) {
            return (
              null !== t.getEntity("jupiter").getComponent("magnetosphere")
            );
          }
          static setEnabledJupiterRadiationBelt(t, e) {
            if (e)
              Features._createJupiterModelComponent(
                t,
                "radiation_belt_1",
                "radbelt1",
              ),
                Features._createJupiterModelComponent(
                  t,
                  "radiation_belt_2",
                  "radbelt2",
                ),
                Features._createJupiterModelComponent(
                  t,
                  "radiation_belt_3",
                  "radbelt3",
                ),
                Features._createJupiterModelComponent(
                  t,
                  "radiation_belt_4",
                  "radbelt4",
                );
            else {
              const e = t.getEntity("jupiter");
              e.removeComponent("radiation_belt_1"),
                e.removeComponent("radiation_belt_2"),
                e.removeComponent("radiation_belt_3"),
                e.removeComponent("radiation_belt_4");
            }
          }
          static isEnabledJupiterRadiationBelt(t) {
            const e = t.getEntity("jupiter");
            return (
              null !== e.getComponent("radiation_belt_1") &&
              null !== e.getComponent("radiation_belt_2") &&
              null !== e.getComponent("radiation_belt_3") &&
              null !== e.getComponent("radiation_belt_4")
            );
          }
          static setEnabledSaturnMagnetosphere(t, e) {
            e
              ? n.Entity.createFromOptions(
                "saturn_magnetosphere",
                {
                  radius: 5027500,
                  parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
                  model: {
                    url: "$STATIC_ASSETS_URL/models/saturn/magnetosphere/saturn_magnetosphere.gltf",
                    scale: 1078.27002124,
                    rotate: [{ x: 90 }],
                  },
                  controllers: [
                    { type: "fixed", position: i.Vector3.Zero },
                    {
                      type: "align",
                      primary: {
                        type: "align",
                        target: "saturn",
                        axis: i.Vector3.ZAxis,
                        targetAxis: i.Vector3.ZAxis,
                      },
                      secondary: {
                        type: "point",
                        target: "sun",
                        axis: i.Vector3.XAxis,
                      },
                    },
                  ],
                  postCreateFunction: (t) => {
                    t.setCanOcclude(!1);
                    const e = t.addComponentByClass(i.ModelComponent);
                    e.setUrl(
                      "$STATIC_ASSETS_URL/models/saturn/magnetosphere_thin/saturn_magnetosphere_thin.gltf",
                    ),
                      e.setScale(1078.27002124),
                      e.setRotation(
                        new i.Quaternion(
                          Math.sqrt(0.5),
                          Math.sqrt(0.5),
                          0,
                          0,
                        ),
                      ),
                      e.setPixelRadiusVisibleInterval(
                        new i.Interval(4e3, Number.POSITIVE_INFINITY),
                      ),
                      e.setResourcesLoadedCallback(() => {
                        e.getThreeJsObjects()[0].renderOrder = -1;
                      });
                    const s = t.getComponentByClass(i.ModelComponent);
                    s.setPixelRadiusVisibleInterval(new i.Interval(0, 4e3)),
                      s.setResourcesLoadedCallback(() => {
                        s.getThreeJsObjects()[0].renderOrder = -1;
                      });
                  },
                },
                t,
              )
              : t.removeEntity("saturn_magnetosphere");
          }
          static isEnabledSaturnMagnetosphere(t) {
            return null !== t.getEntity("saturn_magnetosphere");
          }
          static _createJupiterModelComponent(t, e, s) {
            const n = t
              .getEntity("jupiter")
              .addComponentByClass(i.ModelComponent, e);
            n.setUrl(
              `$STATIC_ASSETS_URL/models/jupiter/${e}/jupiter_${s}.gltf`,
            ),
              n.setScale(1337.08);
            const o = new i.Quaternion(Math.SQRT1_2, Math.SQRT1_2, 0, 0),
              r = new i.Quaternion(Math.SQRT1_2, 0, 0, Math.SQRT1_2);
            o.mult(r, o), n.setRotation(o);
          }
        }
        const o = {
          jupiter: {
            auroras: Features.setEnabledJupiterAuroras,
            magnetosphere: Features.setEnabledJupiterMagnetosphere,
            radiationBelt: Features.setEnabledJupiterRadiationBelt,
          },
          saturn: { magnetosphere: Features.setEnabledSaturnMagnetosphere },
        },
          r = {
            jupiter: {
              auroras: Features.isEnabledJupiterAuroras,
              magnetosphere: Features.isEnabledJupiterMagnetosphere,
              radiationBelt: Features.isEnabledJupiterRadiationBelt,
            },
            saturn: { magnetosphere: Features.isEnabledSaturnMagnetosphere },
          };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Mapping: function () {
              return Mapping;
            },
          });
        var i = s(5);
        class Mapping {
          static getTypes(t) {
            return Mapping._types[t] ?? [];
          }
          static async set(t, e, s) {
            await Mapping.setEnabled(t, e, s, !0);
            for (const i of Mapping.getTypes(e))
              i !== s && Mapping.setEnabled(t, e, i, !1);
            "basic" !== s && Mapping.setEnabled(t, e, "basic", !1);
          }
          static async setEnabled(t, e, s, i) {
            if ("basic" === s) Mapping.setBasic(t, e, i);
            else {
              if (!s.startsWith("cmts")) throw new Error(`Invalid type ${s}.`);
              await Mapping.setCMTS(t, e, s, i);
            }
          }
          static async setBasic(t, e, s) {
            const i = t.getEntity(e);
            if (null === i) throw new Error(`No entity named '${e}' exists.`);
            const n = i.getComponent("basic");
            if (null === n || "spheroidLOD" !== n.getType())
              throw new Error(
                `The entity '${e}' does not have a spheroidLOD named 'basic'.`,
              );
            n.setEnabled(s),
              s &&
              (n.setVisible(!1),
                await n.getLoadedPromise(),
                n.setVisible(!0));
          }
          static async setCMTS(t, e, s, n) {
            const o = t.getEntity(e);
            if (null === o) throw new Error(`No entity named '${e}' exists.`);
            if (n && !o.get("cmts")) {
              const t = o.addComponentByClass(i.CMTSComponent, s);
              "mars" === e
                ? (t.setBaseUrl(
                  "color",
                  "$DYNAMIC_ASSETS_URL/cmts/1/" + e + "/color",
                ),
                  t.setBaseUrl(
                    "height",
                    "$DYNAMIC_ASSETS_URL/cmts/1/" + e + "/height",
                  ),
                  t.addTileOffset(
                    new i.Vector3(
                      700.6128653358727,
                      3140.020080650305,
                      1073.622947405036,
                    ),
                    1,
                    12,
                    1585,
                    2747,
                    1592,
                    2752,
                  ),
                  t.addTileOffset(
                    new i.Vector3(
                      -2489.8644947661123,
                      2286.2056005322775,
                      -271.3458260440484,
                    ),
                    2,
                    12,
                    158,
                    1811,
                    169,
                    1825,
                  ),
                  t.addTileOffset(
                    new i.Vector3(
                      -2432.935716315694,
                      2349.9743692542434,
                      267.1293812071,
                    ),
                    2,
                    9,
                    8,
                    284,
                    8,
                    284,
                  ))
                : "moon" === e &&
                (t.setBaseUrl(
                  "color",
                  "$DYNAMIC_ASSETS_URL/cmts/" + e + "/color",
                ),
                  t.setBaseUrl(
                    "normal",
                    "$DYNAMIC_ASSETS_URL/cmts/" + e + "/normal",
                  ),
                  t.setBaseUrl(
                    "height",
                    "$DYNAMIC_ASSETS_URL/cmts/" + e + "/height",
                  )),
                t.setVisible(!1),
                await t.getLoadedPromise(),
                await t.getTilesLoadedPromise(),
                t.setVisible(!0);
            } else
              !n &&
                o.get("cmts") &&
                o.removeComponent(o.getComponentByType("cmts"));
          }
          static _types = { mars: ["cmts"] };
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Parenting: function () {
              return Parenting;
            },
          });
        var i = s(532),
          n = s(5);
        class Parenting {
          static getParentOfEntity(t, e) {
            const s = i.Entity.getEntityOptions(t);
            if (void 0 === s)
              throw new Error(`There are no entity options for ${t}.`);
            const r = s.parents,
              a = n.Sort.getIndex(e, r, o);
            return a < r.length && e === r[a][0]
              ? r[a][1]
              : a > 0
                ? r[a - 1][1]
                : "";
          }
          static getAllAncestorsOfEntity(t) {
            const e = new Set();
            return this._getAllAncestorsOfEntityRecursed(t, e), e;
          }
          static _getAllAncestorsOfEntityRecursed(t, e) {
            const s = i.Entity.getEntityOptions(t);
            if (void 0 === s || void 0 === s.parents) return;
            const n = s.parents;
            for (const t of n) {
              const s = t[1];
              e.has(s) ||
                (e.add(s), this._getAllAncestorsOfEntityRecursed(s, e));
            }
          }
        }
        function o(t, e) {
          return t[0] < e;
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Placemarks: function () {
              return Placemarks;
            },
          });
        var i = s(5);
        class Placemarks {
          static addPlacemark(t, e, s, n, o, r, a = !1) {
            const l = s.getScene().addEntity(t);
            l.setParent(s), l.setCanOcclude(!1), l.setExtentsRadius(1);
            const c = l.addComponentByClass(i.DivComponent);
            return (
              c.setAlignment(new i.Vector2(0.5, 0.5)),
              (c.getDiv().innerHTML = e),
              l.addController("fixed"),
              l.addController("rotateByEntityOrientation"),
              this.updateLLA(l, n, o, r, a),
              l
            );
          }
          static updateLLA(t, e, s, n, o = !1) {
            const r = t.getParent(),
              a = t.getControllerByClass(i.FixedController),
              l = r.getComponentByClass(i.SpheroidComponent);
            if (null === a || null === l)
              throw new Error("No fixed controller and/or spheroid component.");
            const c = i.LatLonAlt.pool.get(),
              h = i.Vector3.pool.get();
            if (
              (c.set(i.MathUtils.degToRad(e), i.MathUtils.degToRad(s), n),
                l.xyzFromLLA(h, c),
                a.setPosition(h),
                i.Vector3.pool.release(h),
                o)
            ) {
              const t = i.Quaternion.pool.get(),
                e = i.Vector3.pool.get(),
                s = i.Vector3.pool.get();
              l.eastFromLLA(e, c),
                l.northFromLLA(s, c),
                t.setFromAxes(e, s, void 0),
                a.setOrientation(t),
                i.Vector3.pool.release(e),
                i.Vector3.pool.release(s),
                i.Quaternion.pool.release(t);
            }
            i.LatLonAlt.pool.release(c);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SceneHelpers: function () {
              return SceneHelpers;
            },
          });
        var i = s(5),
          n = s(532);
        class SceneHelpers {
          static getEclipJ2000ToJ2000Rotation() {
            return this.eclipJ2000ToJ2000Rotation;
          }
          static async waitTillEntitiesInPlace(t, e, s, n = 5, o = 0.03) {
            const r = new Set();
            for (const s of e) {
              const e = t.getEntity(s);
              if (null === e)
                throw new Error(
                  'Entity "' +
                  s +
                  '" not added yet. Use Entity.create to add the entity.',
                );
              r.add(e);
            }
            const a = [];
            for (const t of r)
              for (let e = 0; e < t.getNumControllers(); e++)
                a.push(t.getController(e).getLoadedPromise());
            return (
              await Promise.all(a),
              void 0 === s && (s = t.getEngine().getTime()),
              new Promise((t, e) => {
                let a = 0;
                const l = setInterval(() => {
                  const c = i.Vector3.pool.get(),
                    h = i.Quaternion.pool.get();
                  for (const t of r) {
                    const e = t.getPositionCoverage().contains(s);
                    t.getPositionAtTime(c, s), t.getOrientationAtTime(h, s);
                    const i = !c.isNaN() && !h.isNaN();
                    (e && !i) || r.delete(t);
                  }
                  if (
                    (i.Quaternion.pool.release(h),
                      i.Vector3.pool.release(c),
                      0 === r.size && (clearInterval(l), t()),
                      (a += o),
                      a >= n)
                  ) {
                    clearInterval(l);
                    let t = "";
                    for (const e of r)
                      "" !== t && (t += ", "), (t += "'" + e.getName() + "'");
                    e(
                      new Error(
                        "Timed out (" +
                        n +
                        " seconds) while waiting for entities to be in place. The remaining entities were [" +
                        t +
                        "].",
                      ),
                    );
                  }
                }, 1e3 * o);
              }).then(() => t.getEngine().waitUntilNextFrame())
            );
          }
          static llaToXYZ(t, e, s, n) {
            const o = e.getComponentByClass(i.SpheroidComponent);
            null !== o &&
              (o.xyzFromLLA(t, s), n || t.rotate(e.getOrientation(), t));
          }
          static xyzToLLA(t, e, s, n) {
            const o = e.getComponentByClass(i.SpheroidComponent);
            if (null !== o) {
              const r = i.Vector3.pool.get();
              n ? r.copy(s) : r.rotateInverse(e.getOrientation(), s),
                o.llaFromXYZ(t, r),
                i.Vector3.pool.release(r);
            }
          }
          static getDependentEntities(t) {
            const e = new Set();
            return this._getDependentEntitiesRecursed(t, e), e.delete(t), e;
          }
          static _getDependentEntitiesRecursed(t, e) {
            const s = n.Entity.getEntityOptions(t);
            if (void 0 === s) return;
            const i = new Set(),
              o = s.parents;
            for (const t of o) "" !== t[1] && i.add(t[1]);
            void 0 !== s.lightSource && i.add(s.lightSource),
              void 0 !== s.trail &&
              void 0 !== s.trail.relativeTo &&
              i.add(s.trail.relativeTo);
            for (let t = 0, e = s.controllers.length; t < e; t++) {
              const e = s.controllers[t];
              "align" === e.type &&
                (void 0 !== e.primary.target && i.add(e.primary.target),
                  void 0 !== e.secondary &&
                  void 0 !== e.secondary.target &&
                  i.add(e.secondary.target));
            }
            if ((s.labelFadeEntity && i.add(s.labelFadeEntity), s.dependents))
              for (let t = 0, e = s.dependents.length; t < e; t++)
                i.add(s.dependents[t]);
            for (const t of i)
              e.has(t) || (e.add(t), this._getDependentEntitiesRecursed(t, e));
          }
        }
        (SceneHelpers.eclipJ2000ToJ2000Rotation = new i.Quaternion(
          0.9791532214288992,
          0.2031230389823101,
          0,
          0,
        )),
          SceneHelpers.eclipJ2000ToJ2000Rotation.freeze();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Transitions: function () {
              return Transitions;
            },
          });
        var i = s(5);
        class Transitions {
          static jumpToLocationOnSphere(t, e, s, n, o, r, a, l, c, h) {
            t <= 0 && (t = 0.001),
              (h = Transitions.easeInOut(h)),
              void 0 === n && (n = o.getParent());
            const u = i.Vector3.pool.get(),
              d = i.Vector3.pool.get();
            null !== o.getParent()
              ? (o.getParent().getPositionRelativeToEntity(u, r, n),
                o.getParent().getPositionRelativeToEntity(d, a, n))
              : (u.copy(r), d.copy(a));
            const p = u.magnitude() - e,
              m = d.magnitude() - e,
              _ = i.Vector3.pool.get();
            s && n ? n.getOrientation().getAxis(_, 2) : _.cross(u, d),
              _.normalize(_),
              _.isZero() && _.set(0, 0, 1);
            let g = 0;
            const y = i.Vector3.pool.get(),
              f = i.Vector3.pool.get(),
              b = i.Quaternion.pool.get();
            b.setFromAxis(_, 2), y.rotateInverse(b, u), f.rotateInverse(b, d);
            const T = i.LatLonAlt.pool.get(),
              S = i.LatLonAlt.pool.get();
            i.Geometry.getLLAFromXYZOnSphere(T, y, 0),
              i.Geometry.getLLAFromXYZOnSphere(S, f, 0),
              i.Vector3.pool.release(f),
              i.Vector3.pool.release(y);
            let E = T.lon * Math.cos(T.lat),
              v = S.lon * Math.cos(S.lat);
            E + Math.PI < v && (E += 2 * Math.PI),
              v + Math.PI < E && (v += 2 * Math.PI),
              (g =
                e *
                t *
                Math.sqrt(
                  (v - E) * (v - E) + (S.lat - T.lat) * (S.lat - T.lat),
                ));
            const C = i.Vector2.pool.get();
            Transitions._jumpOnCircle(C, g, p, m, h);
            const x = C.x,
              w = C.y;
            i.Vector2.pool.release(C);
            const I = i.Vector3.pool.get();
            I.normalize(u), I.mult(I, w + e);
            const M = i.LatLonAlt.pool.get();
            let N;
            (N = 0 !== g ? (g - x) / g : 0),
              (M.lat = i.MathUtils.lerp(T.lat, S.lat, N)),
              (M.lon = i.MathUtils.lerpAngle(T.lon, S.lon, N)),
              (M.alt = w),
              i.Geometry.getXYZFromLLAOnSphere(I, M, e),
              I.rotate(b, I),
              i.LatLonAlt.pool.release(M),
              i.LatLonAlt.pool.release(T),
              i.LatLonAlt.pool.release(S),
              i.Quaternion.pool.release(b),
              I.isNaN() && I.copy(d),
              null !== o.getParent() &&
              n.getPositionRelativeToEntity(I, I, o.getParent()),
              o.setPosition(I),
              i.Vector3.pool.release(I),
              i.Vector3.pool.release(_);
            const A = i.Vector3.pool.get();
            n.getPositionRelativeToEntity(A, i.Vector3.Zero, o), A.normalize(A);
            const R = i.Vector3.pool.get(),
              L = i.Quaternion.pool.get();
            s
              ? n.getOrientation().getAxis(R, 2)
              : (L.slerp(l, c, h), L.getAxis(R, 2)),
              R.setNormalTo(A, R),
              L.setFromAxes(void 0, A, R),
              o.setOrientation(L),
              i.Vector3.pool.release(R),
              i.Quaternion.pool.release(L),
              i.Vector3.pool.release(A),
              i.Vector3.pool.release(u),
              i.Vector3.pool.release(d);
          }
          static easeInOut(t) {
            const e = t * t;
            return e / (2 * (e - t) + 1);
          }
          static _jumpOnCircle(t, e, s, i, n) {
            let o = 0,
              r = 0;
            if (Math.abs(e / (i - s)) > 1e-6) {
              const t = (((i - s) / -e) * (i + s)) / 2 + e / 2,
                a =
                  Math.sign(e) *
                  Math.acos(
                    (s * i + (e - t) * -t) /
                    Math.sqrt(s * s + (e - t) * (e - t)) /
                    Math.sqrt(i * i + t * t),
                  ),
                l = Math.cos(n * a),
                c = Math.sin(n * a);
              (o = (e - t) * c + s * l), (r = t + (e - t) * l - s * c);
            } else (o = n * i + (1 - n) * s), (r = (1 - n) * e);
            1 === n && ((o = i), (r = 0)), t.set(r, o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AnnulusComponent: function () {
              return AnnulusComponent;
            },
          });
        var i = s(5);
        class AnnulusComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._sizeInner = 1),
              (this._sizeOuter = 1),
              (this._ignoreDistance = !1),
              (this._minDistanceM = 0),
              (this._minDistanceB = 0),
              (this._maxDistanceM = 0),
              (this._maxDistanceB = 0),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._alphaMultiplier = 1),
              (this._numPointsOnCircle = 200),
              (this._meshDirty = !0),
              this.__setRadius(this._sizeOuter),
              this.__setUsesEntityOrientation(!0);
          }
          getInnerRadius() {
            return this._sizeInner;
          }
          setInnerRadius(t) {
            (this._sizeInner = t), (this._meshDirty = !0);
          }
          getOuterRadius() {
            return this._sizeOuter;
          }
          setOuterRadius(t) {
            (this._sizeOuter = t), (this._meshDirty = !0), this.__setRadius(t);
          }
          setIgnoreDistance(t) {
            (this._ignoreDistance = t),
              (this._alphaMultiplier = 1),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          setMinDistance(t) {
            (this._minDistanceM = 1 / (t - t / 1.1)),
              (this._minDistanceB = (-1 * this._minDistanceM * t) / 1.1);
          }
          setMaxDistance(t) {
            (this._maxDistanceM = -1 / (1.1 * t - t)),
              (this._maxDistanceB = -1 * this._maxDistanceM * t * 1.1);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          __prepareForRender(t) {
            if (
              (i.ThreeJsHelper.setOrientationToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
              ),
                i.ThreeJsHelper.setPositionToEntity(
                  this.getThreeJsObjects()[0],
                  this.getEntity(),
                  t,
                ),
                this._meshDirty && this._updateMesh(),
                !this._ignoreDistance)
            ) {
              const e = this.getEntity().getCameraSpacePosition(t).magnitude(),
                s = this._minDistanceM * e + this._minDistanceB,
                n = this._maxDistanceM * e + this._maxDistanceB;
              (this._alphaMultiplier = i.MathUtils.clamp01(Math.min(s, n))),
                i.ThreeJsHelper.setUniformColorRGBA(
                  this.getThreeJsMaterials()[0],
                  "color",
                  this._color,
                  this._alphaMultiplier,
                );
            }
          }
          __loadResources() {
            const t = this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .getPreloaded("basic_alpha");
            this.getThreeJsMaterials().push(t),
              i.ThreeJsHelper.setUniformColorRGBA(
                t,
                "color",
                this._color,
                this._alphaMultiplier,
              );
            const e = i.ThreeJsHelper.createMeshObject(
              this,
              t,
              [{ name: "position", dimensions: 3 }],
              !1,
            );
            return this.getThreeJsObjects().push(e), Promise.resolve();
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyObject(this.getThreeJsObjects()[0]),
              i.ThreeJsHelper.destroyMaterial(this.getThreeJsMaterials()[0]);
          }
          _updateMesh() {
            const t = new Float32Array(4 * this._numPointsOnCircle * 3),
              e = new Uint16Array(6 * this._numPointsOnCircle);
            let s = 0,
              n = 0;
            const o = new i.Vector3(),
              r = new i.Vector3(),
              a = this._sizeOuter,
              l = this._sizeInner / this._sizeOuter;
            for (let c = 0; c < this._numPointsOnCircle; c++) {
              const h = (c / this._numPointsOnCircle) * i.MathUtils.twoPi,
                u =
                  (((c + 1) % this._numPointsOnCircle) /
                    this._numPointsOnCircle) *
                  i.MathUtils.twoPi;
              o.set(a * Math.cos(h), a * Math.sin(h), 0),
                r.set(a * Math.cos(u), a * Math.sin(u), 0),
                (t[s + 0] = o.x * l),
                (t[s + 1] = o.y * l),
                (t[s + 2] = o.z * l),
                (t[s + 3] = o.x),
                (t[s + 4] = o.y),
                (t[s + 5] = o.z),
                (t[s + 6] = r.x),
                (t[s + 7] = r.y),
                (t[s + 8] = r.z),
                (t[s + 9] = r.x * l),
                (t[s + 10] = r.y * l),
                (t[s + 11] = r.z * l),
                (e[n + 0] = s / 3 + 0),
                (e[n + 1] = s / 3 + 1),
                (e[n + 2] = s / 3 + 2),
                (e[n + 3] = s / 3 + 2),
                (e[n + 4] = s / 3 + 3),
                (e[n + 5] = s / 3 + 0),
                (s += 12),
                (n += 6);
            }
            const c = this.getThreeJsObjects()[0].geometry;
            i.ThreeJsHelper.setVertices(c, "position", t),
              i.ThreeJsHelper.setIndices(c, e),
              (this._meshDirty = !1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CelestialGridComponent: function () {
              return CelestialGridComponent;
            },
          });
        var i = s(5);
        class CelestialGridComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._degreesPerLine = 10),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._lineMesh = null),
              (this._meshDirty = !0);
          }
          setRadius(t) {
            this.__setRadius(t),
              i.ThreeJsHelper.setScale(
                this.getThreeJsObjects(),
                this.getRadius(),
              );
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              (this._meshDirty = !0);
          }
          getDegreesPerLine() {
            return this._degreesPerLine;
          }
          setDegreesPerLine(t) {
            (this._degreesPerLine = t), (this._meshDirty = !0);
          }
          __prepareForRender(t) {
            this._meshDirty && this._updateMesh(),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects(),
                this.getEntity(),
                t,
              ),
              this._lineMesh.prepareForRender(t);
          }
          __loadResources() {
            return (
              (this._lineMesh = new i.LineMesh(this)),
              this._updateMesh(),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          _updateMesh() {
            const t = [];
            for (let e = 0; e < 360; e += this._degreesPerLine) {
              const s = Math.min(e + this._degreesPerLine, 360),
                n = i.MathUtils.degToRad(e),
                o = i.MathUtils.degToRad(s);
              for (let e = -90; e < 90; e += this._degreesPerLine) {
                const s = Math.min(e + this._degreesPerLine, 90),
                  r = i.MathUtils.degToRad(e),
                  a = i.MathUtils.degToRad(s);
                -90 < e &&
                  e < 90 &&
                  (t.push(
                    new i.Vector3(
                      Math.sin(n) * Math.cos(r),
                      Math.cos(n) * Math.cos(r),
                      Math.sin(r),
                    ),
                  ),
                    t.push(
                      new i.Vector3(
                        Math.sin(o) * Math.cos(r),
                        Math.cos(o) * Math.cos(r),
                        Math.sin(r),
                      ),
                    )),
                  t.push(
                    new i.Vector3(
                      Math.sin(n) * Math.cos(r),
                      Math.cos(n) * Math.cos(r),
                      Math.sin(r),
                    ),
                  ),
                  t.push(
                    new i.Vector3(
                      Math.sin(n) * Math.cos(a),
                      Math.cos(n) * Math.cos(a),
                      Math.sin(a),
                    ),
                  );
              }
            }
            const e = [];
            for (let s = 0, i = t.length; s < i; s++) e.push(this._color);
            const s = [];
            for (let e = 0, i = t.length; e < i; e++) s.push(2);
            this._lineMesh.setPositions(t),
              this._lineMesh.setColors(e),
              this._lineMesh.setWidths(s),
              i.ThreeJsHelper.setOrientation(
                this.getThreeJsObjects(),
                i.Quaternion.Identity,
              ),
              i.ThreeJsHelper.setScale(
                this.getThreeJsObjects(),
                this.getRadius(),
              ),
              (this._meshDirty = !1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ConstellationsComponent: function () {
              return ConstellationsComponent;
            },
          });
        var i = s(537),
          n = s(5);
        class ConstellationsComponent extends n.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._url = ""),
              (this._database = []),
              (this._numVertices = []),
              (this._labelEntities = []),
              (this._color = new n.Color()),
              (this._lineWidth = 2),
              (this._glowWidth = 0),
              (this._highlightedIndex = void 0),
              (this._highlightColor = new n.Color()),
              (this._highlightWidth = 0),
              (this._lineMeshes = []),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          setColor(t) {
            this._color.copy(t);
            for (let t = 0; t < this._lineMeshes.length; t++) {
              const e = [];
              for (let s = 0; s < this._numVertices[t]; s++)
                e.push(this._color);
              this._lineMeshes[t].setColors(e);
            }
          }
          setLineWidth(t) {
            this._lineWidth = t;
            for (let e = 0; e < this._lineMeshes.length; e++)
              this._lineMeshes[e].setWidths(t);
          }
          setGlowWidth(t) {
            this._glowWidth = t;
            for (let t = 0, e = this._lineMeshes.length; t < e; t++)
              this._lineMeshes[t].setGlowWidth(this._glowWidth);
          }
          setUrl(t) {
            (this._url = t), this.resetResources();
          }
          getNames() {
            const t = [];
            for (let e = 0, s = this._database.length; e < s; e++)
              t.push(this._database[e].name);
            return t;
          }
          setHighlight(t, e, s) {
            if (
              this._lineMeshes.length > 0 &&
              void 0 !== this._highlightedIndex
            ) {
              const t = [];
              for (
                let e = 0, s = this._numVertices[this._highlightedIndex];
                e < s;
                e++
              )
                t.push(this._color);
              this._lineMeshes[this._highlightedIndex].setColors(t),
                this._lineMeshes[this._highlightedIndex].setWidths(
                  this._lineWidth,
                );
            }
            if (
              ((this._highlightedIndex = t),
                this._highlightColor.copy(e),
                (this._highlightWidth = s),
                this._lineMeshes.length > 0 && void 0 !== this._highlightedIndex)
            ) {
              const t = [];
              for (
                let e = 0, s = this._numVertices[this._highlightedIndex];
                e < s;
                e++
              )
                t.push(this._highlightColor);
              this._lineMeshes[this._highlightedIndex].setColors(t),
                this._lineMeshes[this._highlightedIndex].setWidths(
                  this._highlightWidth,
                );
            }
          }
          getNearestConstellationIndex(t, e) {
            let s,
              i = Number.POSITIVE_INFINITY;
            for (let n = 0, o = this._labelEntities.length; n < o; n++) {
              const o = t.distance(
                this._labelEntities[n].getPixelSpacePosition(e),
              );
              o < i && ((i = o), (s = n));
            }
            return s;
          }
          __prepareForRender(t) {
            n.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects(),
              this.getEntity(),
              t,
            );
            for (let e = 0; e < this._lineMeshes.length; e++)
              this._lineMeshes[e].prepareForRender(t);
          }
          async __loadResources() {
            (this._labelEntities = []),
              (this._lineMeshes = []),
              (this._numVertices = []);
            const t = await this.getEntity()
              .getScene()
              .getEngine()
              .getDownloader()
              .download(this._url, !0);
            if ("completed" === t.status && t.content instanceof ArrayBuffer) {
              const e = new n.Reader(t.content);
              for (; !e.isAtEnd();) {
                const t = { name: "", stars: [], segments: [], color: [] };
                (t.name = e.readString(e.readByte())),
                  (t.color = [
                    e.readByte(),
                    e.readByte(),
                    e.readByte(),
                    e.readByte(),
                  ]);
                const s = e.readByte();
                for (let i = 0; i < s; i++)
                  t.stars.push([
                    e.readFloat32(),
                    e.readFloat32(),
                    e.readFloat32(),
                  ]);
                const i = 2 * e.readByte();
                for (let s = 0; s < i; s++) t.segments.push(e.readByte());
                this._database.push(t);
              }
            }
            for (let t = 0; t < this._database.length; t++) {
              const e = this._database[t].stars,
                s = this._database[t].segments,
                i = [],
                o = [],
                r = [];
              for (let a = 0; a < s.length; a++) {
                const l = s[a];
                i.push(new n.Vector3(e[l][2], -e[l][0], e[l][1])),
                  o.push(
                    t === this._highlightedIndex
                      ? this._highlightColor
                      : this._color,
                  ),
                  r.push(
                    t === this._highlightedIndex
                      ? this._highlightWidth
                      : this._lineWidth,
                  );
              }
              const a = new n.LineMesh(this);
              a.setPositions(i),
                a.setColors(o),
                a.setWidths(r),
                a.setGlowWidth(this._glowWidth),
                this._lineMeshes.push(a),
                this._numVertices.push(s.length);
            }
            n.ThreeJsHelper.setOrientation(
              this.getThreeJsObjects(),
              i.SceneHelpers.getEclipJ2000ToJ2000Rotation(),
            );
            for (let t = 0; t < this._database.length; t++) {
              const e = this._database[t].stars,
                s = new n.Vector3(
                  Number.POSITIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                ),
                o = new n.Vector3(
                  Number.NEGATIVE_INFINITY,
                  Number.NEGATIVE_INFINITY,
                  Number.NEGATIVE_INFINITY,
                ),
                r = Math.sqrt(
                  e[0][0] * e[0][0] + e[0][1] * e[0][1] + e[0][2] * e[0][2],
                );
              for (let t = 0; t < e.length; t++) {
                const a = e[t],
                  l = new n.Vector3();
                l.set(a[2], -a[0], a[1]),
                  l.rotate(i.SceneHelpers.getEclipJ2000ToJ2000Rotation(), l),
                  l.normalize(l),
                  l.mult(l, r),
                  s.x > l.x && (s.x = l.x),
                  o.x < l.x && (o.x = l.x),
                  s.y > l.y && (s.y = l.y),
                  o.y < l.y && (o.y = l.y),
                  s.z > l.z && (s.z = l.z),
                  o.z < l.z && (o.z = l.z);
              }
              const a = new n.Vector3();
              a.add(s, o), a.mult(a, 0.5);
              const l = this.getEntity()
                .getScene()
                .addEntity("constellation_label_" + this._database[t].name);
              l.setParent(this.getEntity()),
                l.setOrientation(n.Quaternion.Identity),
                l.setPosition(a);
              const c = l.addComponentByClass(n.DivComponent);
              c.setAlignment(new n.Vector2(0.5, 0.5));
              const h = c.getDiv();
              h.classList.add("pioneer-constellation-label"),
                (h.innerHTML = this._database[t].name),
                this._labelEntities.push(l);
            }
          }
          __unloadResources() {
            for (let t = 0; t < this._labelEntities.length; t++)
              this.getEntity().getScene().removeEntity(this._labelEntities[t]);
            n.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMeshes = []),
              (this._database = []);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DiscGridComponent: function () {
              return DiscGridComponent;
            },
          });
        var i = s(5);
        class DiscGridComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._size = 1),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._lineWidth = 1),
              (this._numCircles = 10),
              (this._numSpokes = 20),
              (this._radialPower = 1),
              (this._ignoreDistance = !1),
              (this._lineMesh = null),
              (this._meshDirty = !0),
              this.__setRadius(this._size),
              this.__setUsesEntityOrientation(!0);
          }
          getSize() {
            return this._size;
          }
          setSize(t) {
            (this._size = t),
              this.__setRadius(this._size),
              null !== this._lineMesh && this._lineMesh.setScale(this._size);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              (this._meshDirty = !0);
          }
          getLineWidth() {
            return this._lineWidth;
          }
          setLineWidth(t) {
            (this._lineWidth = t),
              null !== this._lineMesh &&
              this._lineMesh.setWidths(this._lineWidth);
          }
          getNumCircles() {
            return this._numCircles;
          }
          setNumCircles(t) {
            (this._numCircles = t), (this._meshDirty = !0);
          }
          getNumSpokes() {
            return this._numSpokes;
          }
          setNumSpokes(t) {
            (this._numSpokes = t), (this._meshDirty = !0);
          }
          getRadialPower() {
            return this._radialPower;
          }
          setRadialPower(t) {
            (this._radialPower = t), (this._meshDirty = !0);
          }
          setIgnoreDistance(t) {
            this._ignoreDistance = t;
          }
          __prepareForRender(t) {
            if (
              (this._meshDirty && this._updateMesh(), !this._ignoreDistance)
            ) {
              const e =
                (0.02 - this.getEntity().getNormalSpaceExtentsRadius(t)) / 0.02;
              this._lineMesh.setAlphaMultiplier(e);
            }
            this._lineMesh.prepareForRender(t);
            for (let e = 0, s = this.getThreeJsObjects().length; e < s; e++)
              i.ThreeJsHelper.setOrientationToEntity(
                this.getThreeJsObjects()[e],
                this.getEntity(),
              ),
                i.ThreeJsHelper.setPositionToEntity(
                  this.getThreeJsObjects()[e],
                  this.getEntity(),
                  t,
                );
          }
          __loadResources() {
            return (
              (this._lineMesh = new i.LineMesh(this)),
              this._updateMesh(),
              this._lineMesh.setScale(this._size),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          _updateMesh() {
            const t = [];
            for (let e = 1; e <= this._numCircles; e++) {
              const s =
                1 !== this._radialPower
                  ? Math.pow(this._radialPower, e - this._numCircles)
                  : e / this._numCircles,
                n = 50;
              for (let e = 0; e < n; e++) {
                const o = (e / n) * i.MathUtils.twoPi,
                  r = (((e + 1) % n) / n) * i.MathUtils.twoPi;
                t.push(new i.Vector3(s * Math.cos(o), s * Math.sin(o), 0)),
                  t.push(new i.Vector3(s * Math.cos(r), s * Math.sin(r), 0));
              }
            }
            for (let e = 0; e < this._numSpokes; e++) {
              const s = (e / this._numSpokes) * i.MathUtils.twoPi;
              t.push(i.Vector3.Zero),
                t.push(new i.Vector3(Math.cos(s), Math.sin(s), 0));
            }
            const e = [];
            for (let s = 0, i = t.length; s < i; s++) e.push(this._color);
            this._lineMesh.setPositions(t),
              this._lineMesh.setColors(e),
              this._lineMesh.setWidths(this._lineWidth),
              (this._meshDirty = !1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ShadowConeComponent: function () {
              return ShadowConeComponent;
            },
          });
        var i = s(5);
        class ShadowConeComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._sourceEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._shadowType = "umbra"),
              (this._targetEntity = new i.EntityRef(
                this.getEntity().getScene(),
              )),
              (this._visibleDistanceInterval = new i.Interval(
                0,
                Number.POSITIVE_INFINITY,
              )),
              this._visibleDistanceInterval.freeze(),
              (this._alphaMultiplier = 1),
              (this._numberOfCirclePoints = 20),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          getSourceEntity() {
            return this._sourceEntity.getName();
          }
          setSourceEntity(t) {
            this._sourceEntity.setName(t);
          }
          getTargetEntity() {
            return this._targetEntity.getName();
          }
          setTargetEntity(t) {
            this._targetEntity.setName(t);
          }
          getShadowType() {
            return this._shadowType;
          }
          setShadowType(t) {
            (this._shadowType = t), this.resetResources();
          }
          getVisibleDistanceInterval() {
            return this._visibleDistanceInterval;
          }
          setVisibleDistanceInterval(t) {
            this._visibleDistanceInterval.thaw(),
              this._visibleDistanceInterval.copy(t),
              this._visibleDistanceInterval.freeze();
          }
          __prepareForRender(t) {
            this._updateMesh(),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
            const e = this.getEntity().getCameraSpacePosition(t).magnitude(),
              s =
                0.5 *
                (this._visibleDistanceInterval.max -
                  this._visibleDistanceInterval.min),
              n = Math.min(0.5 * this._visibleDistanceInterval.min, s),
              o = Math.min(0.5 * this._visibleDistanceInterval.max, s);
            e < this._visibleDistanceInterval.min + n
              ? (this._alphaMultiplier = Math.max(
                0,
                (e - this._visibleDistanceInterval.min) / n,
              ))
              : e > this._visibleDistanceInterval.max - o
                ? (this._alphaMultiplier = Math.max(
                  0,
                  (this._visibleDistanceInterval.max - e) / o,
                ))
                : (this._alphaMultiplier = 1),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          __loadResources() {
            const t = this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .getPreloaded("basic_alpha");
            this.getThreeJsMaterials().push(t),
              i.ThreeJsHelper.setUniformColorRGBA(
                t,
                "color",
                this._color,
                this._alphaMultiplier,
              );
            const e = i.ThreeJsHelper.createMeshObject(
              this,
              t,
              [{ name: "position", dimensions: 3 }],
              !1,
            );
            return (
              this.getThreeJsObjects().push(e),
              this._createMesh(),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _createMesh() {
            const t = new Float32Array(2 * this._numberOfCirclePoints * 3),
              e = new Uint16Array(6 * this._numberOfCirclePoints);
            for (let t = 0; t < this._numberOfCirclePoints; t++) {
              const s = (t + 1) % this._numberOfCirclePoints;
              (e[6 * t + 0] = t),
                (e[6 * t + 1] = s),
                (e[6 * t + 2] = s + this._numberOfCirclePoints),
                (e[6 * t + 3] = s + this._numberOfCirclePoints),
                (e[6 * t + 4] = t + this._numberOfCirclePoints),
                (e[6 * t + 5] = t);
            }
            const s = this.getThreeJsObjects()[0].geometry;
            i.ThreeJsHelper.setVertices(s, "position", t),
              i.ThreeJsHelper.setIndices(s, e);
          }
          _updateMesh() {
            const t = this._sourceEntity.get();
            if (null === t) return;
            const e = this._targetEntity.get(),
              s = t.getExtentsRadius(),
              n = this.getEntity().getExtentsRadius(),
              o = i.Vector3.pool.get();
            this.getEntity().getPositionRelativeToEntity(o, i.Vector3.Zero, t);
            const r = o.magnitude();
            if ((o.normalize(o), o.isNaN())) return;
            let a = 10 * n;
            if (null !== e) {
              const t = i.Vector3.pool.get();
              e.getPositionRelativeToEntity(
                t,
                i.Vector3.Zero,
                this.getEntity(),
              ),
                (a = t.magnitude()),
                i.Vector3.pool.release(t);
            }
            const l =
              this.getThreeJsObjects()[0].geometry.getAttribute("position"),
              c = l.array;
            let h, u, d, p;
            if ("umbra" === this._shadowType) {
              const t = (s - n) / r,
                e = n / t,
                i = t / Math.sqrt(1 - t * t);
              (d = n * t),
                (p = Math.min(a, e)),
                (h = i * (e - d)),
                (u = i * (e - p));
            } else {
              const t = (s + n) / r,
                e = -n / t,
                i = t / Math.sqrt(1 - t * t);
              (d = -n * t), (p = a), (h = -i * (e - d)), (u = -i * (e - p));
            }
            null !==
              this.getEntity().getComponentByClass(i.SpheroidComponent) &&
              (h *= 1.02);
            for (let t = 0; t < this._numberOfCirclePoints; t++) {
              const e = (t / this._numberOfCirclePoints) * i.MathUtils.twoPi,
                s = Math.cos(e),
                n = Math.sin(e);
              (c[3 * t + 0] = h * s),
                (c[3 * t + 1] = h * n),
                (c[3 * t + 2] = d),
                (c[3 * (t + this._numberOfCirclePoints) + 0] = u * s),
                (c[3 * (t + this._numberOfCirclePoints) + 1] = u * n),
                (c[3 * (t + this._numberOfCirclePoints) + 2] = p);
            }
            l.needsUpdate = !0;
            const m = i.Quaternion.pool.get(),
              _ = i.Quaternion.pool.get(),
              g = i.Vector3.pool.get();
            m.copyFromThreeJs(this.getThreeJsObjects()[0].quaternion),
              m.getAxis(g, 2),
              _.setFromVectorFromTo(g, o),
              m.mult(_, m),
              i.ThreeJsHelper.setOrientation(this.getThreeJsObjects()[0], m),
              i.Quaternion.pool.release(m),
              i.Vector3.pool.release(g),
              i.Quaternion.pool.release(_),
              i.Vector3.pool.release(o);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            OrbitLineComponent: function () {
              return OrbitLineComponent;
            },
          });
        var i = s(5);
        class OrbitLineComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._farSideAlphaFade = 1),
              (this._lineWidth = 5),
              (this._glowWidth = 0),
              (this._lineMesh = null),
              (this._positions = []),
              (this._colors = []),
              (this._widths = []),
              (this._pixelSpaceRadiiAlphaFade = [5, 1]),
              this.__setRadius(Number.POSITIVE_INFINITY);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            if (
              (this._color.thaw(),
                this._color.copy(t),
                this._color.freeze(),
                null !== this._lineMesh)
            ) {
              for (let t = 0, e = this._colors.length; t < e; t++)
                this._colors[t].copy(this._color);
              this._lineMesh.setColors(this._colors);
            }
          }
          getFarSideAlphaFade() {
            return this._farSideAlphaFade;
          }
          setFarSideAlphaFade(t) {
            this._farSideAlphaFade = t;
          }
          getLineWidth() {
            return this._lineWidth;
          }
          setLineWidth(t) {
            if (((this._lineWidth = t), null !== this._lineMesh)) {
              for (let t = 0, e = this._widths.length; t < e; t++)
                this._widths[t] = this._lineWidth;
              this._lineMesh.setWidths(this._widths);
            }
          }
          setGlowWidth(t) {
            (this._glowWidth = t),
              i.ThreeJsHelper.setUniformNumber(
                this.getThreeJsMaterials()[0],
                "glowWidth",
                this._glowWidth,
              );
          }
          setPixelSpaceRadiiAlphaFade(t, e) {
            (this._pixelSpaceRadiiAlphaFade[0] = t),
              (this._pixelSpaceRadiiAlphaFade[1] = e);
          }
          __prepareForRender(t) {
            this._updateMesh();
            const e = this.getEntity().getPixelSpaceExtentsRadius(t);
            if (isNaN(e)) this._lineMesh.setAlphaMultiplier(1);
            else {
              const t =
                (e - this._pixelSpaceRadiiAlphaFade[0]) /
                (this._pixelSpaceRadiiAlphaFade[1] -
                  this._pixelSpaceRadiiAlphaFade[0]);
              this._lineMesh.setAlphaMultiplier(
                i.MathUtils.lerp(0, 1, i.MathUtils.clamp01(t)),
              );
            }
            i.ThreeJsHelper.setPositionToEntity(
              this.getThreeJsObjects(),
              this.getEntity(),
              t,
            ),
              this._lineMesh.prepareForRender(t);
          }
          __loadResources() {
            this._lineMesh = new i.LineMesh(this);
            for (let t = 0, e = 720; t < e; t++)
              this._positions.push(new i.Vector3()),
                this._colors.push(new i.Color()),
                this._colors[t].copy(this._color),
                this._widths.push(this._lineWidth);
            return (
              this._lineMesh.setColors(this._colors),
              this._lineMesh.setWidths(this._widths),
              this._lineMesh.setGlowWidth(this._glowWidth),
              Promise.resolve()
            );
          }
          __unloadResources() {
            (this._positions = []),
              (this._colors = []),
              (this._widths = []),
              i.ThreeJsHelper.destroyAllObjectsAndMaterials(this),
              (this._lineMesh = null);
          }
          _updateMesh() {
            const t = this.getEntity(),
              e = t.getScene().getEngine().getTime();
            let s = 0;
            for (let n = t.getNumControllers() - 1; n >= 0; n--) {
              const o = t.getControllerByClass(i.DynamoController, n);
              if (
                null !== o &&
                o.getCoverage().contains(e) &&
                "orb" === o.getPointType()
              ) {
                s =
                  o.getHeaderValue("gravitationalParameter1") +
                  o.getHeaderValue("gravitationalParameter2");
                break;
              }
            }
            n.setFromPositionAndVelocity(
              t.getPosition(),
              t.getVelocity(),
              e,
              s,
            );
            const r = t.getPosition(),
              a = n.getTrueAnomalyFromPosition(r),
              l = n.getEccentricAnomalyFromTrueAnomaly(a);
            let c = !1;
            for (let t = 0; t < 360; t += 1) {
              const e = 2 * t,
                s =
                  (2 * t - 1 + this._positions.length) % this._positions.length;
              let a = n.getEccentricAnomalyFromTrueAnomaly(
                i.MathUtils.degToRad(t - 180),
              );
              const h = n.getEccentricAnomalyFromTrueAnomaly(
                i.MathUtils.degToRad(t + 1 - 180),
              );
              ((a < l && l < h) || (h < l && l < a)) && (a = l);
              const u = n.getMeanAnomalyFromEccentricAnomaly(a),
                d = n.epoch + (u - n.meanAnomalyAtEpoch) / n.meanAngularMotion,
                p = this._positions[e];
              if (
                (n.project(p, o, d),
                  p.sub(p, r),
                  this._positions[s].copy(p),
                  isNaN(u))
              ) {
                c = !0;
                const t = (e + 1) % this._positions.length,
                  i = (s - 1 + this._positions.length) % this._positions.length;
                this._positions[e].set(0, 0, 0),
                  this._positions[s].set(0, 0, 0),
                  this._positions[t].set(0, 0, 0),
                  this._positions[i].set(0, 0, 0),
                  (this._colors[e].a = 0),
                  (this._colors[s].a = 0),
                  (this._colors[t].a = 0),
                  (this._colors[i].a = 0);
                continue;
              }
              let m = 0;
              (m = i.MathUtils.angle(a, l) / Math.PI),
                (m = i.MathUtils.clamp01(m));
              const _ = i.MathUtils.lerp(1, this._farSideAlphaFade, m);
              this._colors[e].mult(this._color, _),
                c || this._colors[s].mult(this._color, _),
                (c = !1);
            }
            n.eccentricity >= 1 &&
              (this._positions[this._positions.length - 2].copy(
                this._positions[this._positions.length - 3],
              ),
                this._positions[this._positions.length - 1].copy(
                  this._positions[this._positions.length - 3],
                ),
                (this._colors[this._colors.length - 2].a = 0),
                (this._colors[this._colors.length - 1].a = 0)),
              this._lineMesh.setPositions(this._positions),
              this._lineMesh.setColors(this._colors);
          }
        }
        const n = new i.OrbitalElements(),
          o = new i.Vector3();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TorusComponent: function () {
              return TorusComponent;
            },
          });
        var i = s(5);
        class TorusComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._color = new i.Color(1, 1, 1, 1)),
              this._color.freeze(),
              (this._innerRadius = 1),
              (this._outerRadius = 10),
              (this._visibleDistanceInterval = new i.Interval(
                0,
                Number.POSITIVE_INFINITY,
              )),
              this._visibleDistanceInterval.freeze(),
              (this._alphaMultiplier = 1),
              this.__setRadius(this._outerRadius),
              this.__setUsesEntityOrientation(!0);
          }
          getColor() {
            return this._color;
          }
          setColor(t) {
            this._color.thaw(),
              this._color.copy(t),
              this._color.freeze(),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          getInnerRadius() {
            return this._innerRadius;
          }
          setInnerRadius(t) {
            (this._innerRadius = t), this.resetResources();
          }
          getOuterRadius() {
            return this._outerRadius;
          }
          setOuterRadius(t) {
            (this._outerRadius = t),
              this.__setRadius(this._outerRadius),
              this.resetResources();
          }
          getVisibleDistanceInterval() {
            return this._visibleDistanceInterval;
          }
          setVisibleDistanceInterval(t) {
            this._visibleDistanceInterval.thaw(),
              this._visibleDistanceInterval.copy(t),
              this._visibleDistanceInterval.freeze();
          }
          __prepareForRender(t) {
            i.ThreeJsHelper.setOrientationToEntity(
              this.getThreeJsObjects()[0],
              this.getEntity(),
            ),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects()[0],
                this.getEntity(),
                t,
              );
            const e = this.getEntity().getCameraSpacePosition(t).magnitude(),
              s =
                0.5 *
                (this._visibleDistanceInterval.max -
                  this._visibleDistanceInterval.min),
              n = Math.min(0.5 * this._visibleDistanceInterval.min, s),
              o = Math.min(0.5 * this._visibleDistanceInterval.max, s);
            e < this._visibleDistanceInterval.min + n
              ? (this._alphaMultiplier = Math.max(
                0,
                (e - this._visibleDistanceInterval.min) / n,
              ))
              : e > this._visibleDistanceInterval.max - o
                ? (this._alphaMultiplier = Math.max(
                  0,
                  (this._visibleDistanceInterval.max - e) / o,
                ))
                : (this._alphaMultiplier = 1),
              i.ThreeJsHelper.setUniformColorRGBA(
                this.getThreeJsMaterials()[0],
                "color",
                this._color,
                this._alphaMultiplier,
              );
          }
          __loadResources() {
            const t = this.getEntity()
              .getScene()
              .getEngine()
              .getMaterialManager()
              .getPreloaded("basic_alpha");
            this.getThreeJsMaterials().push(t),
              i.ThreeJsHelper.setUniformColorRGBA(
                t,
                "color",
                this._color,
                this._alphaMultiplier,
              );
            const e = i.ThreeJsHelper.createMeshObject(
              this,
              t,
              [{ name: "position", dimensions: 3 }],
              !1,
            );
            return (
              this.getThreeJsObjects().push(e),
              this._createMesh(),
              Promise.resolve()
            );
          }
          __unloadResources() {
            i.ThreeJsHelper.destroyAllObjectsAndMaterials(this);
          }
          _createMesh() {
            const t = 100,
              e = 20,
              s = new Float32Array(6e3),
              n = new Uint16Array(12e3),
              o = (this._outerRadius + this._innerRadius) / 2,
              r = (this._outerRadius - this._innerRadius) / 2;
            for (let a = 0; a < t; a++) {
              const l = (a / t) * i.MathUtils.twoPi,
                c = Math.cos(l),
                h = Math.sin(l);
              for (let l = 0; l < e; l++) {
                const u = (l / e) * i.MathUtils.twoPi,
                  d = Math.cos(u),
                  p = Math.sin(u),
                  m = 3 * (a * e + l);
                (s[m + 0] = c * (o + r * d)),
                  (s[m + 1] = h * (o + r * d)),
                  (s[m + 2] = r * p);
                const _ = 6 * (a * e + l),
                  g = (a + 1) % t,
                  y = (l + 1) % e;
                (n[_ + 0] = a * e + l),
                  (n[_ + 1] = g * e + l),
                  (n[_ + 2] = a * e + y),
                  (n[_ + 3] = g * e + y),
                  (n[_ + 4] = a * e + y),
                  (n[_ + 5] = g * e + l);
              }
            }
            const a = this.getThreeJsObjects()[0].geometry;
            i.ThreeJsHelper.setVertices(a, "position", s),
              i.ThreeJsHelper.setIndices(a, n);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            WMTSComponent: function () {
              return WMTSComponent;
            },
          });
        var i = s(5),
          n = s(547);
        class WMTSComponent extends i.BaseComponent {
          constructor(t, e, s) {
            super(t, e, s),
              (this._capabilities = null),
              (this._endPoint = ""),
              (this._layerIdentifier = ""),
              (this._tileMatrixSetIdentifier = ""),
              (this._style = ""),
              (this._dimensionValues = new Map()),
              (this._minLevel = Number.NEGATIVE_INFINITY),
              (this._maxLevel = Number.POSITIVE_INFINITY),
              (this._splitJoinThresholdFactor = 512),
              (this._layer = null),
              (this._tileMatrixSet = null),
              (this._tileUrl = ""),
              (this._shadowEntities = []),
              (this._engine = this.getEntity().getScene().getEngine()),
              (this._cameraPositions = []),
              (this._rootTile = null),
              (this._tilePixelSize = void 0),
              (this._tilesLoadedPromise = null),
              (this._transitionsCompleteCallback = null),
              (this._loadsThisFrame = 0),
              (this._atmosphereComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._atmosphereComponentRef.setByType(
                this.getEntity().getName(),
                "atmosphere",
              ),
              (this._spheroidComponentRef = new i.ComponentRef(
                this.getEntity().getScene(),
              )),
              this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
              ),
              this._spheroidComponentRef.setRefChangedCallback(
                this._spheroidRefChangedCallback.bind(this),
              ),
              (this._spheroidChangedCallback =
                this._spheroidChangedCallback.bind(this)),
              this.__setUsesEntityOrientation(!0);
          }
          async setEndPoint(t) {
            (this._endPoint = t), this.resetResources();
          }
          setLayer(t) {
            (this._layerIdentifier = t), this.resetResources();
          }
          setTileMatrixSet(t) {
            (this._tileMatrixSetIdentifier = t), this.resetResources();
          }
          setStyle(t) {
            (this._style = t), this.resetResources();
          }
          setDimensionValue(t, e) {
            this._dimensionValues.set(t, e), this.resetResources();
          }
          getLayers() {
            return null !== this._capabilities
              ? this._capabilities.layers
              : new Map();
          }
          getMinLevel() {
            return this._minLevel;
          }
          setMinLevel(t) {
            this._minLevel = t;
          }
          getMaxLevel() {
            return this._maxLevel;
          }
          setMaxLevel(t) {
            this._maxLevel = t;
          }
          getTilesLoadedPromise() {
            return this._tilesLoadedPromise || Promise.resolve();
          }
          setSpheroidReference(t) {
            "string" == typeof t
              ? this._spheroidComponentRef.setByName(
                this.getEntity().getName(),
                t,
              )
              : this._spheroidComponentRef.setByType(
                this.getEntity().getName(),
                "spheroid",
                t,
              );
          }
          __getLayer() {
            return this._layer;
          }
          __getTileMatrixSet() {
            return this._tileMatrixSet;
          }
          __getTileUrl() {
            return this._tileUrl;
          }
          __getLayerBounds() {
            return null !== this._layer ? this._layer.boundingBox : null;
          }
          __getMaxLevel() {
            return this._maxLevel;
          }
          __getMinLevel() {
            return this._minLevel;
          }
          __getSplitJoinFactor() {
            return this._splitJoinThresholdFactor;
          }
          __getTilePixelSize() {
            return this._tilePixelSize;
          }
          __setTilePixelSize(t) {
            this._tilePixelSize = t;
          }
          __getLoadsThisFrame() {
            return this._loadsThisFrame;
          }
          __incLoadsThisFrame() {
            this._loadsThisFrame += 1;
          }
          __getCameraPositions() {
            return this._cameraPositions;
          }
          __getSpheroidComponent() {
            return this._spheroidComponentRef.get();
          }
          __destroy() {
            const t = this._spheroidComponentRef.get();
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              super.__destroy();
          }
          __update() {
            if ((this._spheroidComponentRef.update(), null === this._rootTile))
              return;
            for (
              ;
              this._cameraPositions.length > this._engine.getNumViewports();

            )
              this._cameraPositions.pop();
            for (
              ;
              this._cameraPositions.length < this._engine.getNumViewports();

            )
              this._cameraPositions.push(new i.Vector3());
            const t = i.Vector3.pool.get();
            for (let e = 0, s = this._engine.getNumViewports(); e < s; e++)
              t.neg(
                this.getEntity().getCameraSpacePosition(
                  this._engine.getViewport(e).getCamera(),
                ),
              ),
                this._cameraPositions[e].rotateInverse(
                  this.getEntity().getOrientation(),
                  t,
                );
            i.Vector3.pool.release(t), (this._loadsThisFrame = 0);
            const e = this._rootTile.update();
            if (
              (null === this._tilesLoadedPromise &&
                e &&
                (this._tilesLoadedPromise = new Promise((t) => {
                  this._transitionsCompleteCallback = t;
                })),
                null !== this._tilesLoadedPromise && !e)
            ) {
              const t = this._transitionsCompleteCallback;
              (this._tilesLoadedPromise = null),
                (this._transitionsCompleteCallback = null),
                t();
            }
          }
          __prepareForRender(t) {
            i.ThreeJsHelper.setOrientationToEntity(
              this.getThreeJsObjects(),
              this.getEntity(),
            ),
              i.ThreeJsHelper.setPositionToEntity(
                this.getThreeJsObjects(),
                this.getEntity(),
                t,
              );
            const e = this._atmosphereComponentRef.get();
            i.MaterialUtils.setUniforms(
              this.getThreeJsMaterials(),
              t,
              this.getEntity(),
              this._shadowEntities,
              e,
              !0,
            );
          }
          async __loadResources() {
            if ("" !== this._endPoint) {
              (this._capabilities = new n.Capabilities(
                this._endPoint,
                this._engine,
              )),
                await this._capabilities.readyPromise;
              let t = this._layerIdentifier;
              if ("" === t) {
                const e = this._capabilities.layers;
                if (1 === e.size) for (const [, s] of e) t = s;
              }
              if ("" === t) return;
              if (
                ((this._layer = this._capabilities.getLayer(t)),
                  null === this._layer)
              )
                throw new Error('Invalid layer: "' + t + '".');
              let e = this._tileMatrixSetIdentifier;
              if ("" === e) {
                const t = this._layer.tileMatrixSets;
                if (1 === t.size) for (const s of t) e = s;
              }
              if (
                ((this._tileMatrixSet = this._capabilities.getTileMatrixSet(e)),
                  null === this._tileMatrixSet)
              )
                throw new Error('Invalid tile matrix set: "' + e + '".');
              await this._tileMatrixSet.readyPromise;
              const s = new i.Rect();
              s.copy(this._tileMatrixSet.boundingBox),
                1 === this._tileMatrixSet.getNumTiles(0).x && (s.size.x *= 2),
                1 === this._tileMatrixSet.getNumTiles(0).y &&
                ((s.origin.y -= s.size.y), (s.size.y *= 2));
              let o = this._style;
              "" === o && (o = this._layer.defaultStyle);
              for (const [t, e] of this._layer.dimensions)
                this._dimensionValues.has(t) || this._dimensionValues.set(t, e);
              (this._tileUrl = this._layer.url),
                (this._tileUrl = this._tileUrl.replace(
                  "{TileMatrixSet}",
                  this._tileMatrixSet.identifier,
                )),
                (this._tileUrl = this._tileUrl.replace("{Style}", o)),
                this._dimensionValues.forEach((t, e) => {
                  this._tileUrl = this._tileUrl.replace("{" + e + "}", t);
                }),
                (this._rootTile = new WMTSTile(this, null, -1, 0, 0, s));
            }
          }
          __unloadResources() {
            (this._capabilities = null),
              (this._layer = null),
              (this._tileMatrixSet = null),
              (this._tileUrl = ""),
              this._rootTile.destroy(),
              (this._rootTile = null);
          }
          _spheroidRefChangedCallback(t, e) {
            null !== t &&
              t.removeChangedCallback(this._spheroidChangedCallback),
              null !== e && e.addChangedCallback(this._spheroidChangedCallback),
              this._spheroidChangedCallback();
          }
          _spheroidChangedCallback() {
            const t = this._spheroidComponentRef.get();
            null !== t
              ? this.__setRadius(
                Math.max(t.getEquatorialRadius(), t.getPolarRadius()),
              )
              : this.__setRadius(0),
              this.resetResources();
          }
        }
        class WMTSTile extends i.Tile {
          constructor(t, e, s, n, o, r) {
            super(e),
              (this._component = t),
              (this._level = s),
              (this._row = n),
              (this._col = o),
              (this._tileBounds = new i.Rect()),
              this._tileBounds.copy(r),
              (this._center = new i.Vector3()),
              (this._radius = 0),
              (this._threeJsMaterial = null),
              (this._threeJsObject = null);
            const a = t.__getSpheroidComponent(),
              l = this._component.__getTileMatrixSet(),
              c = new i.Vector3();
            l.crsUnitsToXYZ(c, this._tileBounds.origin, a);
            const h = new i.Vector2();
            h.add(this._tileBounds.origin, this._tileBounds.size);
            const u = new i.Vector3();
            l.crsUnitsToXYZ(u, h, a);
            const d = new i.Vector2();
            d.addMult(this._tileBounds.origin, this._tileBounds.size, 0.5),
              l.crsUnitsToXYZ(this._center, d, a);
            const p = new i.Vector3(),
              m = new i.Vector3();
            (p.x = Math.min(c.x, u.x, this._center.x)),
              (p.y = Math.min(c.y, u.y, this._center.y)),
              (p.z = Math.min(c.z, u.z, this._center.z)),
              (m.x = Math.max(c.x, u.x, this._center.x)),
              (m.y = Math.max(c.y, u.y, this._center.y)),
              (m.z = Math.max(c.z, u.z, this._center.z)),
              this._center.add(p, m),
              this._center.mult(this._center, 0.5);
            const _ = new i.Vector3();
            _.sub(this._center, p), (this._radius = _.magnitude());
          }
          createNewTile(t, e, s) {
            const n = t._level + 1,
              o = 2 * t._row + e,
              r = 2 * t._col + s,
              a = t._component.__getTileMatrixSet().getNumTiles(t._level + 1);
            if (o >= a.y || r >= a.x) return null;
            const l = new i.Rect();
            return (
              l.origin.set(
                t._tileBounds.origin.x + 0.5 * s * t._tileBounds.size.x,
                t._tileBounds.origin.y + 0.5 * (1 - e) * t._tileBounds.size.y,
              ),
              l.size.set(
                0.5 * t._tileBounds.size.x,
                0.5 * t._tileBounds.size.y,
              ),
              new WMTSTile(t._component, t, n, o, r, l)
            );
          }
          checkSplit() {
            if (
              this._level >=
              this._component.__getTileMatrixSet().numLevels - 1
            )
              return !1;
            if (
              !this._tileBounds.intersects(this._component.__getLayerBounds())
            )
              return !1;
            if (this._level >= this._component.__getMaxLevel()) return !1;
            if (this._component.__getLoadsThisFrame() >= 1) return !1;
            if (this._level < this._component.__getMinLevel()) return !0;
            if (-1 === this._level) return !0;
            let t = this._component.__getTilePixelSize();
            if (void 0 === t && null !== this._threeJsMaterial) {
              if (
                ((t =
                  this._threeJsMaterial.uniforms.colorTexture.value.image
                    .width),
                  1 === t)
              )
                return !1;
              this._component.__setTilePixelSize(t);
            }
            return (
              this._getNearestDistance() <
              (this._component.__getSplitJoinFactor() * this._radius) / t
            );
          }
          checkJoin() {
            if (-1 === this._level) return !1;
            if (this._component.__getLoadsThisFrame() >= 1) return !1;
            if (this._level > this._component.__getMaxLevel()) return !0;
            if (this._level <= this._component.__getMinLevel()) return !1;
            let t = this._component.__getTilePixelSize();
            return (
              void 0 === t &&
              null !== this._threeJsMaterial &&
              ((t =
                this._threeJsMaterial.uniforms.colorTexture.value.image
                  .width),
                this._component.__setTilePixelSize(t)),
              this._getNearestDistance() >
              (this._component.__getSplitJoinFactor() * this._radius * 4) / t
            );
          }
          async load() {
            if (-1 === this._level) return Promise.resolve();
            if (
              (this._component.__incLoadsThisFrame(),
                null !== this._threeJsMaterial)
            )
              throw new Error("Tile already has material.");
            if (
              this._tileBounds.intersects(this._component.__getLayerBounds())
            ) {
              (this._threeJsMaterial = i.MaterialUtils.get()),
                this._component
                  .getThreeJsMaterials()
                  .push(this._threeJsMaterial);
              let t = this._component.__getTileUrl();
              (t = t.replace("{TileMatrix}", "" + this._level)),
                (t = t.replace("{TileRow}", "" + this._row)),
                (t = t.replace("{TileCol}", "" + this._col));
              try {
                await i.ThreeJsHelper.loadTextureIntoUniform(
                  this._component,
                  this._threeJsMaterial,
                  "colorTexture",
                  t,
                  !1,
                  !1,
                );
              } catch (t) {
                await i.ThreeJsHelper.loadTextureIntoUniform(
                  this._component,
                  this._threeJsMaterial,
                  "colorTexture",
                  "gray",
                  !1,
                  !1,
                );
              }
            }
          }
          async unload() {
            if (-1 !== this._level) {
              if (null !== this._threeJsMaterial) {
                const t = this._component.getThreeJsMaterials();
                for (let e = 0, s = t.length; e < s; e++)
                  if (t[e] === this._threeJsMaterial) {
                    t.splice(e, 1);
                    break;
                  }
                this._threeJsMaterial.uniforms.colorTexture.value &&
                  this._threeJsMaterial.uniforms.colorTexture.value.dispose(),
                  this._threeJsMaterial.dispose(),
                  (this._threeJsMaterial = null);
              }
              this._threeJsMaterial = null;
            }
          }
          async activate() {
            if (-1 === this._level) return;
            (this._threeJsObject = i.ThreeJsHelper.createMeshObject(
              this._component,
              this._threeJsMaterial,
              [
                { name: "position", dimensions: 3 },
                { name: "normal", dimensions: 3 },
                { name: "uv", dimensions: 2 },
              ],
              !1,
            )),
              this._component.getThreeJsObjects().push(this._threeJsObject),
              i.ThreeJsHelper.useInDynEnvMap(this._threeJsObject, !0);
            const t = 21,
              e = new Float32Array(1323),
              s = new Float32Array(1323),
              n = new Float32Array(882),
              o = new Uint16Array(2520),
              r = this._component.__getLayer().boundingBox,
              a = new i.Vector2(),
              l = new i.Vector2(),
              c = new i.Vector3();
            for (let h = 0; h < 21; h++) {
              let u = 1 - h / 20;
              (a.y = i.MathUtils.lerp(
                this._tileBounds.origin.y,
                this._tileBounds.origin.y + this._tileBounds.size.y,
                u,
              )),
                (l.y = i.MathUtils.clamp(
                  a.y,
                  r.origin.y,
                  r.origin.y + r.size.y,
                )),
                (u += (l.y - a.y) / this._tileBounds.size.y);
              for (let d = 0; d < t; d++) {
                let p = d / 20;
                (a.x = i.MathUtils.lerp(
                  this._tileBounds.origin.x,
                  this._tileBounds.origin.x + this._tileBounds.size.x,
                  p,
                )),
                  (l.x = i.MathUtils.clamp(
                    a.x,
                    r.origin.x,
                    r.origin.x + r.size.x,
                  )),
                  (p += (l.x - a.x) / this._tileBounds.size.x),
                  this._component
                    .__getTileMatrixSet()
                    .crsUnitsToXYZ(
                      c,
                      l,
                      this._component.__getSpheroidComponent(),
                    );
                const m = h * t + d;
                (e[3 * m + 0] = c.x),
                  (e[3 * m + 1] = c.y),
                  (e[3 * m + 2] = c.z),
                  c.normalize(c),
                  (s[3 * m + 0] = c.x),
                  (s[3 * m + 1] = c.y),
                  (s[3 * m + 2] = c.z),
                  (n[2 * m + 0] = p),
                  (n[2 * m + 1] = 1 - u);
                const _ = h * t + d;
                d < 20 &&
                  h < 20 &&
                  ((o[6 * _ + 0] = t * (h + 0) + (d + 0)),
                    (o[6 * _ + 1] = t * (h + 1) + (d + 0)),
                    (o[6 * _ + 2] = t * (h + 1) + (d + 1)),
                    (o[6 * _ + 3] = t * (h + 0) + (d + 0)),
                    (o[6 * _ + 4] = t * (h + 1) + (d + 1)),
                    (o[6 * _ + 5] = t * (h + 0) + (d + 1)));
              }
            }
            i.ThreeJsHelper.setVertices(
              this._threeJsObject.geometry,
              "position",
              e,
            ),
              i.ThreeJsHelper.setVertices(
                this._threeJsObject.geometry,
                "normal",
                s,
              ),
              i.ThreeJsHelper.setVertices(
                this._threeJsObject.geometry,
                "uv",
                n,
              ),
              i.ThreeJsHelper.setIndices(this._threeJsObject.geometry, o);
          }
          async deactivate() {
            if (-1 === this._level) return;
            const t = this._component.getThreeJsObjects();
            for (let e = 0, s = t.length; e < s; e++)
              if (t[e] === this._threeJsObject) {
                t.splice(e, 1);
                break;
              }
            i.ThreeJsHelper.destroyObject(this._threeJsObject),
              (this._threeJsObject = null);
          }
          update() {
            let t = this.check();
            for (let e = 0, s = this.children.length; e < s; e++)
              t = this.children[e].update() || t;
            return t;
          }
          _getNearestDistance() {
            let t = Number.POSITIVE_INFINITY;
            const e = i.Vector3.pool.get();
            for (
              let s = 0, i = this._component.__getCameraPositions().length;
              s < i;
              s++
            ) {
              const i = this._component.__getCameraPositions()[s];
              e.sub(this._center, i);
              const n = Math.max(0, e.magnitude() - this._radius);
              t > n && (t = n);
            }
            return i.Vector3.pool.release(e), t;
          }
          toString() {
            return this._level + "-" + this._row + "-" + this._col;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Capabilities: function () {
              return Capabilities;
            },
            Layer: function () {
              return Layer;
            },
            TileMatrixSet: function () {
              return TileMatrixSet;
            },
          });
        var i = s(5),
          n = s(548);
        class Capabilities {
          constructor(t, e) {
            (this._endPoint = t),
              (this._capabilitiesXML = null),
              (this._layers = new Map()),
              (this._readyPromise = null),
              (this._readyPromise = e
                .getDownloader()
                .download(this._endPoint + "/1.0.0/WMTSCapabilities.xml", !1)
                .then((t) => {
                  if (
                    ("string" == typeof t.content &&
                      (this._capabilitiesXML = new DOMParser().parseFromString(
                        t.content,
                        "application/xml",
                      )),
                      null !== this._capabilitiesXML)
                  ) {
                    const t =
                      this._capabilitiesXML.querySelectorAll(
                        "Contents > Layer",
                      );
                    for (const e of t) {
                      const t = e.querySelector("*|Title").textContent,
                        s = e.querySelector("*|Identifier").textContent;
                      this._layers.set(t, s);
                    }
                  }
                }));
          }
          get readyPromise() {
            return this._readyPromise;
          }
          get endPoint() {
            return this._endPoint;
          }
          get layers() {
            return this._layers;
          }
          getLayer(t) {
            let e = null;
            if (null !== this._capabilitiesXML) {
              const s =
                this._capabilitiesXML.querySelectorAll("Contents > Layer");
              for (const i of s) {
                t === i.querySelector("*|Identifier").textContent &&
                  (e = new Layer(i, this._endPoint + "/1.0.0"));
              }
            }
            return e;
          }
          getTileMatrixSet(t) {
            let e = null;
            if (null !== this._capabilitiesXML) {
              const s = this._capabilitiesXML.querySelectorAll(
                "Contents > TileMatrixSet",
              );
              for (const i of s) {
                t === i.querySelector("*|Identifier").textContent &&
                  (e = new TileMatrixSet(i));
              }
            }
            return e;
          }
        }
        class Layer {
          constructor(t, e) {
            (this._baseUrl = e),
              (this._title = t.querySelector("*|Title").textContent),
              (this._identifier = t.querySelector("*|Identifier").textContent),
              (this._styles = new Map()),
              (this._defaultStyle = ""),
              (this._boundingBox = new i.Rect()),
              (this._dimensions = new Map()),
              (this._tileMatrixSets = new Set()),
              (this._url = "");
            const s = t.querySelectorAll("Style");
            for (const t of s) {
              const e = t.querySelector("*|Title").textContent,
                s = t.querySelector("*|Identifier").textContent;
              this._styles.set(e, s),
                "true" === t.getAttribute("isDefault") &&
                (this._defaultStyle = s);
            }
            let n = t.querySelector("*|BoundingBox");
            if (
              (null === n && (n = t.querySelector("*|WGS84BoundingBox")),
                null === n)
            )
              throw new Error(
                'Layer "' +
                this._identifier +
                '" missing a BoundingBox or a WGS84BoundingBox tag.',
              );
            const o = n.querySelector("*|LowerCorner").textContent.split(" "),
              r = n.querySelector("*|UpperCorner").textContent.split(" ");
            this._boundingBox.origin.set(
              Number.parseFloat(o[0]),
              Number.parseFloat(o[1]),
            ),
              this._boundingBox.size.set(
                Number.parseFloat(r[0]) - this._boundingBox.origin.x,
                Number.parseFloat(r[1]) - this._boundingBox.origin.y,
              );
            const a = t.querySelectorAll("Dimension");
            for (const t of a) {
              const e = t.querySelector("*|Identifier").textContent,
                s = t.querySelector("Default").textContent;
              this._dimensions.set(e, s);
            }
            const l = t.querySelectorAll("TileMatrixSetLink");
            for (const t of l) {
              const e = t.querySelector("TileMatrixSet").textContent;
              this._tileMatrixSets.add(e);
            }
            const c = t.querySelector("ResourceURL");
            (this._url = c.getAttribute("template")),
              /^(?:[a-z]+:)?\/\//i.test(this._url) ||
              (this._url = this._baseUrl + this._url);
          }
          get title() {
            return this._title;
          }
          get identifier() {
            return this._identifier;
          }
          get styles() {
            return this._styles;
          }
          get defaultStyle() {
            return this._defaultStyle;
          }
          get boundingBox() {
            return this._boundingBox;
          }
          get dimensions() {
            return this._dimensions;
          }
          get tileMatrixSets() {
            return this._tileMatrixSets;
          }
          get url() {
            return this._url;
          }
        }
        class TileMatrixSet {
          constructor(t) {
            let e;
            (this._identifier = t.querySelector("*|Identifier").textContent),
              (this._crs = t.querySelector("*|SupportedCRS").textContent),
              (this._boundingBox = new i.Rect()),
              (this._numTiles = []),
              (this._readyPromise = null);
            let s = 0;
            for (const n of t.querySelectorAll("TileMatrix")) {
              const t = n.querySelector("ScaleDenominator");
              if (!t)
                throw new Error(
                  "ScaleDenominator tag not found for TileMatrix " + s + ".",
                );
              const o = parseFloat(t.innerHTML);
              if (void 0 !== e && Math.abs(2 * o - e) / o > 0.01)
                throw new Error(
                  "ScaleDenominator for TileMatrix " +
                  s +
                  " must be half of the next higher level, but is not.",
                );
              (e = o),
                (this._numTiles[s] = new i.Vector2(
                  parseFloat(n.querySelector("MatrixWidth").innerHTML),
                  parseFloat(n.querySelector("MatrixHeight").innerHTML),
                )),
                (s += 1);
            }
            this._numLevels = s;
            const o = t.querySelector("TileMatrix"),
              r = Number.parseFloat(
                o.querySelector("ScaleDenominator").textContent,
              ),
              a = new i.Vector2(
                Number.parseFloat(o.querySelector("TileWidth").textContent),
                Number.parseFloat(o.querySelector("TileHeight").textContent),
              ),
              l = 28e-8 * r,
              c = new i.Vector2(l * a.x, l * a.y),
              h = new i.Vector2(
                c.x * this._numTiles[0].x,
                c.y * this._numTiles[0].y,
              ),
              u = o.querySelector("TopLeftCorner").textContent.split(" ");
            this._boundingBox.origin.set(
              Number.parseFloat(u[0]),
              Number.parseFloat(u[1]),
            ),
              (this._readyPromise = TileMatrixSet.setCRS(this._crs).then(
                (t) => {
                  this._crs = t;
                  let e = 1e3;
                  const s = n.default.defs(this._crs);
                  s.to_meter
                    ? (e = 1e3 / s.to_meter)
                    : "degrees" === s.units
                      ? (e = 0.00898315284)
                      : ("feet" !== s.units && "us feet" !== s.units) ||
                      (e = 3280.83333335),
                    (this._boundingBox.size.x =
                      Math.round(h.x * e * 1e6) / 1e6),
                    (this._boundingBox.size.y =
                      Math.round(h.y * e * 1e6) / 1e6),
                    (this._boundingBox.origin.y =
                      this._boundingBox.origin.y - this._boundingBox.size.y);
                },
              ));
          }
          get readyPromise() {
            return this._readyPromise;
          }
          get identifier() {
            return this._identifier;
          }
          get boundingBox() {
            return this._boundingBox;
          }
          get numLevels() {
            return this._numLevels;
          }
          getNumTiles(t) {
            return this._numTiles[t];
          }
          crsUnitsToXYZ(t, e, s) {
            const o = i.LatLonAlt.pool.get(),
              r = i.MathUtils.clamp(
                e.x,
                this._boundingBox.origin.x,
                this._boundingBox.origin.x + this._boundingBox.size.x,
              ),
              a = i.MathUtils.clamp(
                e.y,
                this._boundingBox.origin.y,
                this._boundingBox.origin.y + this._boundingBox.size.y,
              ),
              l = (0, n.default)(this._crs, "WGS84", [r, a]);
            o.set(i.MathUtils.degToRad(l[1]), i.MathUtils.degToRad(l[0]), 0),
              s.xyzFromLLA(t, o),
              i.LatLonAlt.pool.release(o);
          }
          static async setCRS(t) {
            t.startsWith("urn:ogc:def:crs:") &&
              (t = t.substring("urn:ogc:def:crs:".length));
            let e = o.get(t);
            if (void 0 === e && t.startsWith("EPSG::")) {
              const s =
                "https://epsg.io/" + t.substring("EPSG::".length) + ".proj4",
                i = await fetch(s);
              e = await i.text();
            }
            return n.default.defs(t, e), t;
          }
        }
        const o = new Map();
        o.set(
          "EPSG::104903",
          'GEOGCS["GCS_Moon_2000",DATUM["D_Moon_2000",SPHEROID["Moon_2000_IAU_IAG",1737400.0,0.0]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]',
        ),
          o.set(
            "EPSG::104905",
            'GEOGCS["GCS_Mars_2000",DATUM["D_Mars_2000",SPHEROID["Mars_2000_IAU_IAG",3396190.0,169.8944472236118]],PRIMEM["Reference_Meridian",0.0],UNIT["Degree",0.0174532925199433]]',
          ),
          o.set(
            "EPSG::4326",
            "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
          ),
          o.set(
            "EPSG::3857",
            "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs",
          ),
          o.set("OGC:1.3:84", n.default.defs("WGS84")),
          o.set("OGC:1.3:CRS84", n.default.defs("WGS84")),
          o.set("OGC:2:84", n.default.defs("WGS84"));
      },
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      ,
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            KeyframePointingController: function () {
              return KeyframePointingController;
            },
          });
        var i = s(5);
        class KeyframePointingController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._keyframes = []),
              (this._direction = new i.Vector3(1, 0, 0)),
              this.addModifiedState("orientation");
          }
          setKeyframes(t) {
            for (let t = 0, e = this._keyframes.length; t < e; t++) {
              let e = this._keyframes[t][1];
              e.startsWith("-") && (e = e.substring(1)),
                "velocity" === e
                  ? this.removeDependentState(
                    this.getEntity().getName(),
                    "velocity",
                  )
                  : this.removeDependentState(e, "position");
            }
            this._keyframes = [];
            for (let e = 0, s = t.length; e < s; e++) {
              this._keyframes.push([t[e][0], t[e][1]]);
              let s = this._keyframes[e][1];
              s.startsWith("-") && (s = s.substring(1)),
                "velocity" === s
                  ? this.addDependentState(
                    this.getEntity().getName(),
                    "velocity",
                  )
                  : this.addDependentState(s, "position");
            }
            this._keyframes.sort((t, e) => t[0] - e[0]);
          }
          setDirection(t) {
            this._direction.copy(t);
          }
          __updateOrientationAtTime(t, e) {
            t.isNaN() && t.copy(i.Quaternion.Identity),
              this._getNewOrientation(t, e, t);
          }
          __update() {
            if (0 === this._keyframes.length) return;
            const t = this.getEntity(),
              e = t.getScene().getEngine().getTime();
            t.getOrientation().isNaN() &&
              t.setOrientation(i.Quaternion.Identity);
            const s = i.Quaternion.pool.get();
            this._getNewOrientation(s, e, t.getOrientation()),
              t.setOrientation(s),
              i.Quaternion.pool.release(s);
          }
          _getNewOrientation(t, e, s) {
            const n = i.Sort.getIndex(e, this._keyframes, (t, e) => t[0] < e);
            let o = 0,
              r = 0;
            n === this._keyframes.length
              ? ((o = this._keyframes.length - 1),
                (r = this._keyframes.length - 1))
              : n > 0 && ((o = n - 1), (r = n));
            const a = this._keyframes[o],
              l = this._keyframes[r],
              c = l[0] > a[0] ? (e - a[0]) / (l[0] - a[0]) : 0,
              h = i.Vector3.pool.get(),
              u = i.Vector3.pool.get();
            this._getDirection(h, e, a[1]),
              this._getDirection(u, e, l[1]),
              u.slerp(h, u, c),
              u.normalize(u),
              h.rotate(s, this._direction);
            const d = i.Quaternion.pool.get();
            d.setFromVectorFromTo(h, u),
              t.mult(d, s),
              i.Quaternion.pool.release(d),
              i.Vector3.pool.release(u),
              i.Vector3.pool.release(h);
          }
          _getDirection(t, e, s) {
            const n = this.getEntity(),
              o = s.startsWith("-");
            if ((o && (s = s.substring(1)), s.startsWith("velocity")))
              if ((s = s.substring(8)).startsWith(" rel ")) {
                s = s.substring(5);
                const o = n.getScene().getEntity(s);
                null !== o &&
                  n.getVelocityRelativeToEntity(t, i.Vector3.Zero, o, e);
              } else n.getVelocityAtTime(t, e);
            else {
              const o = n.getScene().getEntity(s);
              null !== o
                ? o.getPositionRelativeToEntity(t, i.Vector3.Zero, n, e)
                : t.copy(i.Vector3.NaN);
            }
            t.normalize(t), o && t.mult(t, -1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            KeyframeSpinController: function () {
              return KeyframeSpinController;
            },
          });
        var i = s(5);
        class KeyframeSpinController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._keyframes = []),
              (this._axis = new i.Vector3(1, 0, 0)),
              (this._startingAngle = 0),
              this.addModifiedState("orientation");
          }
          setKeyframes(t) {
            this._keyframes = [];
            let e = 0;
            for (let s = 0, n = t.length; s < n; s++)
              s > 0 &&
                (e = i.MathUtils.wrap(
                  e + (t[s][0] - t[s - 1][0]) * (t[s - 1][1] + t[s][1]) * 0.5,
                  0,
                  2 * Math.PI,
                )),
                this._keyframes.push([t[s][0], t[s][1], e]);
            this._keyframes.sort((t, e) => t[0] - e[0]);
          }
          setAxis(t) {
            this._axis.copy(t);
          }
          setStartingAngle(t) {
            this._startingAngle = t;
          }
          __updateOrientationAtTime(t, e) {
            t.isNaN() && t.copy(i.Quaternion.Identity),
              this._getNewOrientation(t, e, t);
          }
          __update() {
            if (0 === this._keyframes.length) return;
            const t = this.getEntity(),
              e = t.getScene().getEngine().getTime();
            t.getOrientation().isNaN() &&
              t.setOrientation(i.Quaternion.Identity);
            const s = i.Quaternion.pool.get();
            this._getNewOrientation(s, e, t.getOrientation()),
              t.setOrientation(s),
              i.Quaternion.pool.release(s);
          }
          _getNewOrientation(t, e, s) {
            const n = i.Sort.getIndex(e, this._keyframes, (t, e) => t[0] < e);
            let o = 0,
              r = 0;
            n === this._keyframes.length
              ? ((o = this._keyframes.length - 1),
                (r = this._keyframes.length - 1))
              : n > 0 && ((o = n - 1), (r = n));
            const a = this._keyframes[o],
              l = this._keyframes[r],
              c = l[0] > a[0] ? (e - a[0]) / (l[0] - a[0]) : 0,
              h = i.MathUtils.wrap(
                this._startingAngle +
                a[2] +
                ((e - a[0]) * (a[1] + c * l[1])) / (1 + c),
                0,
                2 * Math.PI,
              ),
              u = i.Vector3.pool.get();
            u.rotate(s, this._axis);
            const d = i.Quaternion.pool.get();
            d.setFromAxisAngle(u, h),
              t.mult(d, s),
              i.Vector3.pool.release(u),
              i.Quaternion.pool.release(d);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            PositionSumController: function () {
              return PositionSumController;
            },
          });
        var i = s(5);
        class PositionSumController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._entities = new i.FastMap()),
              this.addModifiedState("position");
          }
          addEntity(t, e, s) {
            const n = new i.EntityRef(this.getEntity().getScene());
            n.setName(t),
              this._entities.set(t, { ref: n, mult: e, add: s }),
              this.addDependentState(t, "position");
          }
          removeEntity(t) {
            this._entities.delete(t), this.removeDependentState(t, "position");
          }
          setEntityParams(t, e, s) {
            if (!this._entities.has(t))
              throw new Error(
                `The entity ${t} has not been previously added to the controller.`,
              );
            const i = this._entities.get(t);
            void 0 !== e && (i.mult = e), void 0 !== s && (i.add = s);
          }
          __update() {
            const t = i.Vector3.pool.get(),
              e = i.Vector3.pool.get();
            t.set(0, 0, 0);
            for (let s = 0, n = this._entities.size; s < n; s++) {
              const n = this._entities.getAt(s).value,
                o = n.ref.get();
              if (null === o) continue;
              o.getPositionRelativeToEntity(
                e,
                i.Vector3.Zero,
                this.getEntity().getParent(),
              );
              const r = e.magnitude();
              t.addMult(t, e, n.mult + (r > 0 ? n.add / r : 0));
            }
            this.getEntity().setPosition(t),
              i.Vector3.pool.release(t),
              i.Vector3.pool.release(e);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ZoomFitController: function () {
              return ZoomFitController;
            },
          });
        var i = s(5);
        class ZoomFitController extends i.BaseController {
          constructor(t, e, s) {
            super(t, e, s),
              (this._entities = new i.FastMap()),
              (this._tightFit = !1),
              (this._zoomOutOnly = !1),
              (this._edgeSize = 0),
              this.addModifiedState("position");
          }
          addEntity(t) {
            const e = new i.EntityRef(this.getEntity().getScene());
            e.setName(t),
              this._entities.set(t, { ref: e }),
              this.addDependentState(t, "position");
          }
          removeEntity(t) {
            this._entities.delete(t), this.removeDependentState(t, "position");
          }
          setTightFit(t) {
            this._tightFit = t;
          }
          setZoomOutOnly(t) {
            this._zoomOutOnly = t;
          }
          setEdgeSize(t) {
            this._edgeSize = t;
          }
          __update() {
            let t = 1;
            const e = this.getEntity().getComponentByClass(i.CameraComponent);
            if (null !== e) {
              const s = Math.min(
                e.getHorizontalFieldOfView(),
                e.getVerticalFieldOfView(),
              );
              this._tightFit && (t = Math.tan(s / 2)), (t = Math.tan(s / 2));
            }
            const s = i.Vector3.pool.get();
            s.normalize(this.getEntity().getPosition()),
              0 === s.magnitudeSqr() &&
              (this.getEntity().getOrientation().getAxis(s, 1), s.neg(s)),
              s.isNaN() && s.copy(i.Vector3.YAxisNeg);
            const n = (1 + this._edgeSize / (0.5 - this._edgeSize)) / t;
            let o = 0;
            const r = i.Vector3.pool.get();
            for (let t = 0, e = this._entities.size; t < e; t++) {
              const e = this._entities.getAt(t).value.ref.get();
              if (null === e) continue;
              e.getPositionRelativeToEntity(
                r,
                i.Vector3.Zero,
                this.getEntity().getParent(),
              );
              const a = e.getExtentsRadius();
              let l = 0;
              if (this._tightFit) {
                const t = r.dot(s);
                r.addMult(r, s, -t);
                l = t + n * r.magnitude() + a * Math.sqrt(n * n + 1);
              } else l = r.magnitude() + a;
              o = Math.max(o, l);
            }
            i.Vector3.pool.release(r),
              this._tightFit || (o *= Math.sqrt(n * n + 1)),
              (!this._zoomOutOnly ||
                o > this.getEntity().getPosition().magnitude()) &&
              (s.mult(s, o), this.getEntity().setPosition(s)),
              i.Vector3.pool.release(s);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(537),
          o = s(5);
        i.Entity.register({
          observable_universe: {
            groups: ["stars"],
            radius: 5e23,
            systemRadius: 5e23,
            label: "Observable Universe",
            parents: [],
            controllers: [
              {
                type: "fixed",
                position: o.Vector3.Zero,
                orientation: o.Quaternion.Identity,
              },
            ],
            postCreateFunction: (t) => {
              t.setCanOcclude(!1);
            },
          },
          milky_way: {
            groups: ["stars"],
            radius: 1e18,
            systemRadius: 13e18,
            label: "Milky Way",
            parents: [[Number.NEGATIVE_INFINITY, "observable_universe"]],
            controllers: [
              {
                type: "fixed",
                position: o.Vector3.Zero,
                orientation: o.Quaternion.Identity,
              },
            ],
            postCreateFunction: (t, e) => {
              t.setCanOcclude(!1);
              const s = t.getControllerByClass(o.FixedController),
                i = new o.Vector3(),
                n = (192.85948120833 * Math.PI) / 180,
                r = (27.12825119444 * Math.PI) / 180;
              (i.x = Math.cos(n) * Math.cos(r)),
                (i.y = Math.sin(n) * Math.cos(r)),
                (i.z = Math.sin(r));
              const a = new o.Vector3(),
                l = (266.40499625 * Math.PI) / 180,
                c = (-28.93617241667 * Math.PI) / 180;
              (a.x = Math.cos(l) * Math.cos(c)),
                (a.y = Math.sin(l) * Math.cos(c)),
                (a.z = Math.sin(c));
              const h = new o.Quaternion();
              if (
                (h.setFromAxes(a, void 0, i),
                  s.setOrientation(h),
                  e && e.milkyWaySprite)
              ) {
                const e = t.addComponentByClass(o.SpriteComponent);
                e.setTextureUrl("$STATIC_ASSETS_URL/sprites/milky_way.png"),
                  e.setSize(new o.Vector2(12e17, 12e17)),
                  e.setTransparent(!0),
                  e.setBlending("normal"),
                  e.setFadeDistance(12e15);
              }
              const u = t.addControllerByClass(o.SpinController);
              u.setAxis(
                new o.Vector3(
                  -0.8676661356982597,
                  -0.19807638974470915,
                  0.45598379452940485,
                ),
                !1,
              ),
                u.setRate(-2192686e-23),
                u.setReferenceAngle(0),
                u.setReferenceTime(0);
            },
          },
          sun: {
            groups: ["stars"],
            radius: 695500,
            systemRadius: 2991957e7,
            label: "Sun",
            parents: [[Number.NEGATIVE_INFINITY, "milky_way"]],
            spheroid: {
              equatorialRadius: 695500,
              polarRadius: 695500,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["colorMapEmmissive"],
              textures: {
                color: { url: "sun/color_$SIZE_$FACE.png", sizes: [4, 512] },
              },
            },
            controllers: [
              {
                type: "fixed",
                position: o.Vector3.Zero,
                orientation: o.Quaternion.Identity,
              },
            ],
            postCreateFunction: (t, e) => {
              t.addComponentByClass(
                o.LightSourceComponent,
              ).setAbsoluteMagnitude(4.83);
              const s = t.addComponentByClass(o.AtmosphereComponent);
              s.setEmissivity(1),
                s.setScaleHeight(2e5),
                s.setDensity(8e-7),
                s.setColor(new o.Color(1, 1, 64 / 255));
              const i = t.addComponentByClass(o.SpriteComponent);
              i.setBillboard(!0),
                i.setTextureUrl("$STATIC_ASSETS_URL/sprites/sun_glow.png"),
                i.setSize(new o.Vector2(100, 100)),
                i.setSizeUnits("pixels"),
                i.setTransparent(!0),
                i.setColorMultiplier(new o.Color(1, 1, 0.5)),
                i.setRenderOrder(-2);
              const r = t.addControllerByClass(o.OrbitalElementsController),
                a = new o.OrbitalElements();
              if (
                ((a.epoch = 0),
                  (a.eccentricity = 0),
                  (a.semiMajorAxis = 246237071e9),
                  (a.meanAngularMotion = -2192686e-23),
                  (a.meanAnomalyAtEpoch = Math.PI),
                  a.orbitOrientation.set(
                    -0.48894750765094835,
                    -0.4832106839985283,
                    0.19625375824756275,
                    0.6992297419646486,
                  ),
                  r.addOrbitalElements(-1e100, a),
                  r.addOrbitalElements(1e100, a),
                  void 0 !== e && !0 === e.skybox)
              ) {
                t.addComponentByClass(o.SkyboxComponent).setTextureUrl(
                  "$STATIC_ASSETS_URL/textures/starmap_" +
                  (e.skyboxResolution || 2048) +
                  ".jpg",
                );
              }
              if (
                void 0 === e ||
                (!0 === e.skybox && !0 === e.starfield) ||
                !1 !== e.starfield
              ) {
                t.addComponentByClass(o.StarfieldComponent).setUrl(
                  "$STATIC_ASSETS_URL/stars/galaxies.0.bin",
                );
                for (let e = 0; e < 6; e++) {
                  t.addComponentByClass(o.StarfieldComponent).setUrl(
                    "$STATIC_ASSETS_URL/stars/stars." + e + ".bin",
                  );
                }
              }
              if (void 0 !== e && e.heliosphere) {
                const e = t.addComponentByClass(o.ModelComponent);
                e.setUrl(
                  "$STATIC_ASSETS_URL/models/heliosphere/voyager_heliosphere.gltf",
                ),
                  e.setScale(new o.Vector3(201e6, 19e7, 19e7)),
                  e.setForceLoaded(!0);
                const s = new o.LatLonAlt(0, (-105 * Math.PI) / 180, 0),
                  i = new o.Vector3();
                o.Geometry.getXYZFromLLAOnSphere(i, s, 1),
                  i.rotate(n.SceneHelpers.getEclipJ2000ToJ2000Rotation(), i),
                  i.normalize(i);
                const r = new o.Quaternion();
                r.setFromVectorFromTo(
                  new o.Vector3(
                    0.9937396508197329,
                    0.11171728072160429,
                    0.0008692392338424033,
                  ),
                  i,
                ),
                  e.setRotation(r);
              }
            },
          },
          mercury: {
            groups: ["planets"],
            radius: 2439.4,
            systemRadius: 292764,
            label: "Mercury",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.6, 0.6, 0.6, 0.7] },
            spheroid: {
              equatorialRadius: 2439.4,
              polarRadius: 2439.4,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "mercury/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 4096],
                },
              },
            },
            controllers: [
              { type: "dynamo", url: "mercury/sun/orb" },
              { type: "dynamo", url: "mercury/ori" },
            ],
          },
          venus: {
            groups: ["planets"],
            radius: 6051.8,
            systemRadius: 726216,
            label: "Venus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.9, 0.8, 0.45, 0.7] },
            spheroid: {
              equatorialRadius: 6051.8,
              polarRadius: 6051.8,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: { url: "venus/color_$SIZE_$FACE.png", sizes: [4, 512] },
              },
            },
            controllers: [
              { type: "dynamo", url: "venus/sun/orb" },
              { type: "dynamo", url: "venus/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.AtmosphereComponent);
              e.setScaleHeight(15),
                e.setDensity(0.001),
                e.setColor(new o.Color(213 / 255, 160 / 255, 94 / 255)),
                e.setSunBrightness(0.25);
            },
          },
          earth: {
            groups: ["planets"],
            radius: 6378.1,
            systemRadius: 765372,
            label: "Earth",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0, 0.6, 0.8, 0.7] },
            spheroid: {
              equatorialRadius: 6378.137,
              polarRadius: 6356.752,
              planetographic: !0,
            },
            spheroidLOD: {
              features: [
                "normalMap",
                "specularMap",
                "nightMap",
                "decalMap",
                "nightMapEmmissive",
                "shadowEntities",
              ],
              textures: {
                color: {
                  url: "earth/color_$SIZE_$FACE.png",
                  sizes: [16, 512, 4096],
                },
                normal: {
                  url: "earth/normal_$SIZE_$FACE.png",
                  sizes: [16, 512, 4096],
                },
                specular: {
                  url: "earth/specular_$SIZE_$FACE.png",
                  sizes: [16, 512, 4096],
                },
                night: {
                  url: "earth/night_$SIZE_$FACE.png",
                  sizes: [16, 512, 4096],
                },
                decal: {
                  url: "earth/cloud_$SIZE_$FACE.png",
                  sizes: [16, 512, 4096],
                },
              },
              shadowEntities: ["moon"],
            },
            controllers: [
              { type: "dynamo", url: "earth/sun/orb" },
              { type: "dynamo", url: "earth/ori" },
            ],
            postCreateFunction: (t, e) => {
              if (e && !1 === e.clouds) {
                t.getComponentByClass(o.SpheroidLODComponent).setTexture(
                  "decal",
                  "",
                );
              }
              const s = t.addComponentByClass(o.AtmosphereComponent);
              s.setScaleHeight(8),
                s.setDensity(0.0015),
                s.setColor(new o.Color(214.5 / 255, 267 / 255, 1.5)),
                s.setSunBrightness(2),
                s.setSunsetColor(new o.Color(1, 0.5, 0)),
                s.setSunsetIntensity(1.2);
            },
          },
          mars: {
            groups: ["planets"],
            radius: 3396.2,
            systemRadius: 46922,
            label: "Mars",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.89, 0.51, 0.35, 0.7] },
            spheroid: {
              equatorialRadius: 3396.19,
              polarRadius: 3376.2,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "mars/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 4096],
                },
              },
              shadowEntities: ["phobos", "deimos"],
            },
            controllers: [
              { type: "dynamo", url: "mars/sun/orb" },
              { type: "dynamo", url: "mars/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.AtmosphereComponent);
              e.setScaleHeight(10.8),
                e.setDensity(0.001),
                e.setColor(new o.Color(225 / 255, 178 / 255, 112 / 255)),
                e.setSunBrightness(0.8),
                e.setSunsetColor(new o.Color(10 / 255, 75 / 255, 140 / 255)),
                e.setSunsetIntensity(1);
            },
          },
          jupiter: {
            groups: ["planets"],
            radius: 71492,
            systemRadius: 3782501,
            label: "Jupiter",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            spheroid: {
              equatorialRadius: 71492,
              polarRadius: 66854,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "jupiter/color_$SIZE_$FACE.jpg",
                  sizes: [16, 512, 4096],
                },
              },
              shadowEntities: ["io", "europa", "ganymede", "callisto"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter/sun/orb" },
              { type: "dynamo", url: "jupiter/ori" },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY],
                update: (t) => {
                  if (t.getOrientation().isNaN()) return;
                  const e = t.getScene().getEngine().getTime(),
                    s = r.rotations;
                  let i =
                    (s[s.length - 1][1] - s[s.length - 2][1]) /
                    (s[s.length - 1][0] - s[s.length - 2][0]),
                    n = r.hintIndex;
                  if (e < s[n][0] || (n < s.length - 1 && s[n + 1][0] <= e))
                    if (e >= s[s.length - 1][0]) n = s.length - 1;
                    else if (e < s[0][0]) (n = 0), (i = 0);
                    else
                      for (let t = s.length - 2; t >= 0; t--)
                        s[t][0] <= e &&
                          e < s[t + 1][0] &&
                          ((n = t),
                            (i =
                              (s[t + 1][1] - s[t][1]) / (s[t + 1][0] - s[t][0])));
                  else
                    n < s.length - 1 &&
                      (i = (s[n + 1][1] - s[n][1]) / (s[n + 1][0] - s[n][0]));
                  r.hintIndex = n;
                  const a = s[n][1] + (e - s[n][0]) * i,
                    l = o.MathUtils.wrap(
                      r.referenceAngleInSystemIII -
                      (a +
                        r.textureAngleOffset -
                        r.referenceAngleInSystemII) +
                      (e - r.referenceTime) * r.offsetFactor,
                      0,
                      360,
                    ),
                    c = t.getComponentByClass(o.SpheroidLODComponent);
                  null !== c && c.setLongitudeRotation(o.MathUtils.degToRad(l));
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.AtmosphereComponent);
              e.setScaleHeight(200),
                e.setDensity(5e-5),
                e.setColor(new o.Color(234 / 255, 202 / 255, 170 / 255)),
                e.setSunBrightness(0.25);
            },
          },
          saturn: {
            groups: ["planets"],
            radius: 60268,
            systemRadius: 7184413,
            label: "Saturn",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 60268,
              polarRadius: 54364,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities", "shadowRings"],
              textures: {
                color: { url: "saturn/color_$SIZE_$FACE.png", sizes: [4, 512] },
              },
              shadowEntities: ["iapetus", "dione", "rhea", "tethys", "titan"],
            },
            controllers: [
              { type: "dynamo", url: "saturn/sun/orb" },
              { type: "dynamo", url: "saturn/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.RingsComponent);
              e.setInnerRadius(74270.580913),
                e.setOuterRadius(140478.924731),
                e.setTopTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/saturn_rings_top.png",
                ),
                e.setBottomTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/saturn_rings_bottom.png",
                ),
                e.setFadeDistance(250),
                e.setShadowEntities([
                  "iapetus",
                  "dione",
                  "rhea",
                  "tethys",
                  "titan",
                ]);
              const s = t.addComponentByClass(o.AtmosphereComponent);
              s.setScaleHeight(200),
                s.setDensity(5e-5),
                s.setColor(new o.Color(234 / 255, 202 / 255, 151 / 255));
            },
          },
          uranus: {
            groups: ["planets"],
            radius: 25559,
            systemRadius: 1164893,
            label: "Uranus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            spheroid: {
              equatorialRadius: 25559,
              polarRadius: 24973,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: { url: "uranus/color_$SIZE_$FACE.png", sizes: [4, 256] },
              },
              shadowEntities: [
                "titania",
                "oberon",
                "umbriel",
                "ariel",
                "miranda",
              ],
            },
            controllers: [
              { type: "dynamo", url: "uranus/sun/orb" },
              { type: "dynamo", url: "uranus/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.RingsComponent);
              e.setInnerRadius(26840),
                e.setOuterRadius(103e3),
                e.setTopTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/uranus_rings.png",
                ),
                e.setBottomTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/uranus_rings.png",
                ),
                e.setFadeDistance(250),
                e.setShadowEntities([
                  "miranda",
                  "ariel",
                  "umbriel",
                  "titania",
                  "oberon",
                ]);
              const s = t.addComponentByClass(o.AtmosphereComponent);
              s.setScaleHeight(200),
                s.setDensity(5e-5),
                s.setColor(new o.Color(147 / 255, 183 / 255, 201 / 255)),
                s.setSunsetColor(new o.Color(164 / 255, 168 / 255, 0.4)),
                s.setSunsetIntensity(1);
            },
          },
          neptune: {
            groups: ["planets"],
            radius: 24764,
            systemRadius: 43213894,
            label: "Neptune",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            spheroid: {
              equatorialRadius: 24764,
              polarRadius: 24341,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "neptune/color_$SIZE_$FACE.png",
                  sizes: [4, 256],
                },
              },
              shadowEntities: [
                "triton",
                "proteus",
                "despina",
                "galatea",
                "larissa",
              ],
            },
            controllers: [
              { type: "dynamo", url: "neptune/sun/orb" },
              { type: "dynamo", url: "neptune/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.RingsComponent);
              e.setInnerRadius(40900),
                e.setOuterRadius(62964),
                e.setTopTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/neptune_rings.png",
                ),
                e.setBottomTextureUrl(
                  "$STATIC_ASSETS_URL/sprites/neptune_rings.png",
                ),
                e.setFadeDistance(250);
              const s = t.addComponentByClass(o.AtmosphereComponent);
              s.setScaleHeight(200),
                s.setDensity(5e-5),
                s.setColor(new o.Color(138 / 255, 160 / 255, 1));
            },
          },
        });
        const r = {
          hintIndex: 0,
          textureAngleOffset: -60.38,
          referenceTime: 617098056,
          referenceAngleInSystemII: 313.47,
          referenceAngleInSystemIII: 305,
          offsetFactor: -3074e-9,
          rotations: [
            [-1136116758, 15],
            [-1037534358, 28],
            [-938951958, 22],
            [-867931156, 0],
            [-812721554, 12],
            [-744292752, 47],
            [-639143949, 62],
            [-533822346, 48],
            [-483883145, 27],
            [-391953544, 15],
            [102427264, 85],
            [315576066, 138],
            [615211269, 312],
            [660052869, 347],
          ],
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          "1_ceres": {
            groups: ["dwarf planets"],
            radius: 473,
            label: "Ceres",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            spheroid: {
              equatorialRadius: 482.6,
              polarRadius: 445.6,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "1_ceres/color_$SIZE_$FACE.jpg",
                  sizes: [16, 512, 4096],
                },
              },
            },
            controllers: [
              { type: "dynamo", url: "1_ceres/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "101955_bennu": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.246,
            label: "Bennu",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/101955_bennu/Bennu.gltf",
              rotate: [{ x: 83 }, { z: -168 }],
              scale: 9956e-7,
            },
            controllers: [
              { type: "dynamo", url: "101955_bennu/sun/orb" },
              { type: "dynamo", url: "101955_bennu/ori" },
            ],
          },
          "11351_leucus": {
            groups: ["asteroids"],
            radius: 17.0775,
            label: "Leucus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 17.0775,
            },
            controllers: [
              { type: "dynamo", url: "11351_leucus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 445.732 },
            ],
          },
          "12923_zephyr": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 1.03,
            label: "Zephyr",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.03, 1.03, 1.03],
            },
            controllers: [
              { type: "dynamo", url: "12923_zephyr/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.891 },
            ],
          },
          "134340_pluto": {
            groups: ["dwarf planets", "moons", "134340_pluto_barycenter"],
            radius: 1187,
            label: "Pluto",
            labelFadeEntity: "sun",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            spheroid: {
              equatorialRadius: 1187,
              polarRadius: 1187,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "134340_pluto/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 4096],
                },
              },
            },
            controllers: [
              {
                type: "dynamo",
                url: "134340_pluto/134340_pluto_barycenter/orb",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "charon",
                },
                secondary: {
                  type: "velocity",
                  axis: n.Vector3.YAxis,
                  target: "charon",
                },
              },
            ],
          },
          "134340_pluto_barycenter": {
            groups: ["134340_pluto", "barycenters"],
            occlusionRadius: 0.001,
            extentsRadius: 28e3,
            systemRadius: 130153,
            label: "Barycenter",
            labelFadeEntity: "134340_pluto",
            trail: { length: void 0 },
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            controllers: [
              { type: "dynamo", url: "134340_pluto_barycenter/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
            postCreateFunction: (t) => {
              t
                .getComponentByClass(n.DivComponent)
                .setFadeWhenCloseToCamera(!1),
                t.setCanOcclude(!1);
            },
          },
          "136108_haumea": {
            groups: ["dwarf planets", "TNOs"],
            radius: 816,
            label: "Haumea",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/136108_haumea/haumea.gltf",
              scale: [1, 1, 1],
            },
            controllers: [
              { type: "dynamo", url: "136108_haumea/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          "136199_eris": {
            groups: ["dwarf planets", "TNOs"],
            radius: 1163,
            label: "Eris",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            spheroid: {
              equatorialRadius: 1163,
              polarRadius: 1163,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "136199_eris/color_$SIZE_$FACE.png",
                  sizes: [4, 512],
                },
              },
            },
            controllers: [
              { type: "dynamo", url: "136199_eris/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          "136472_makemake": {
            groups: ["dwarf planets", "TNOs"],
            radius: 715,
            label: "Makemake",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            spheroid: {
              equatorialRadius: 717,
              polarRadius: 710,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "136472_makemake/color_$SIZE_$FACE.png",
                  sizes: [4, 512],
                },
              },
            },
            controllers: [
              { type: "dynamo", url: "136472_makemake/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          "14827_hypnos": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.4535,
            label: "Hypnos",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.4535, 0.4535, 0.4535],
            },
            controllers: [
              { type: "dynamo", url: "14827_hypnos/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "15094_polymele": {
            groups: ["asteroids"],
            radius: 10.5375,
            label: "Polymele",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 10.5375,
            },
            controllers: [
              { type: "dynamo", url: "15094_polymele/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 5.8607 },
            ],
          },
          "1566_icarus": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.805,
            label: "Icarus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.805, 0.8, 0.585],
            },
            controllers: [
              { type: "dynamo", url: "1566_icarus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.2726 },
            ],
          },
          "16_psyche": {
            groups: ["asteroids"],
            radius: 125,
            label: "16 Psyche",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/16_psyche/psycheAsteroid.gltf",
              scale: [100, 100, 100],
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "16_psyche/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          "1620_geographos": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 2.5,
            label: "Geographos",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2.5, 1, 1.05],
            },
            controllers: [
              { type: "dynamo", url: "1620_geographos/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 5.224 },
            ],
          },
          "162173_ryugu": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.45,
            label: "Ryugu",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/162173_ryugu/ryugu.gltf",
              rotate: [{ x: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "ssd/162173_ryugu/sun/orb" },
              { type: "dynamo", url: "162173_ryugu/ori" },
            ],
          },
          "1862_apollo": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.75,
            label: "Apollo",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.75, 0.75, 0.75],
            },
            controllers: [
              { type: "dynamo", url: "1862_apollo/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.065 },
            ],
          },
          "1981_midas": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.975,
            label: "Midas",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.975, 0.975, 0.975],
            },
            controllers: [
              { type: "dynamo", url: "1981_midas/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 5.22 },
            ],
          },
          "1991_vg": {
            groups: ["asteroids", "NEOs"],
            radius: 0.00425,
            label: "1991 VG",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.00425, 0.00425, 0.00425],
            },
            controllers: [
              { type: "dynamo", url: "1991_vg/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "1993_hd": {
            groups: ["asteroids", "asteroid belt"],
            radius: 0.005,
            label: "1993 HD",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "1993_hd/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "1994_cc_a": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.325,
            label: "1994 CC",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.325, 0.325, 0.325],
            },
            controllers: [
              { type: "dynamo", url: "1994_cc_a/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.3886 },
            ],
          },
          "1996_xb27": {
            groups: ["asteroids", "NEOs"],
            radius: 0.042,
            label: "1996 XB<sub>27</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.042, 0.042, 0.042],
            },
            controllers: [
              { type: "dynamo", url: "1996_xb27/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 1.195 },
            ],
          },
          "1998_ky26": {
            groups: ["asteroids", "NEOs"],
            radius: 0.015,
            label: "1998 KY<sub>26</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.015, 0.015, 0.015],
            },
            controllers: [
              { type: "dynamo", url: "1998_ky26/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 0.1784 },
            ],
          },
          "1998_ml14": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.5,
            label: "1998 ML<sub>14</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.5, 0.5, 0.5],
            },
            controllers: [
              { type: "dynamo", url: "1998_ml14/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 14.28 },
            ],
          },
          "1998_qe2": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 1.375,
            label: "1998 QE<sub>2</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.375, 1.375, 1.375],
            },
            controllers: [
              { type: "dynamo", url: "1998_qe2/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 4.749 },
            ],
          },
          "1999_ao10": {
            groups: ["asteroids", "NEOs"],
            radius: 0.025,
            label: "1999 AO<sub>10</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.025, 0.025, 0.025],
            },
            controllers: [
              { type: "dynamo", url: "1999_ao10/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "1999_cg9": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "1999 CG<sub>9</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "1999_cg9/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "1999_vx25": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "1999 VX<sub>25</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "1999_vx25/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2_pallas": {
            groups: ["asteroids", "asteroid belt"],
            radius: 291,
            label: "Pallas",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [291, 278, 250],
            },
            controllers: [
              { type: "dynamo", url: "2_pallas/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 7.8132 },
            ],
          },
          "2000_ae205": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2000 AE<sub>205</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2000_ae205/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2000_lg6": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2000 LG<sub>6</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2000_lg6/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2000_sg344": {
            groups: ["asteroids", "NEOs"],
            radius: 0.0185,
            label: "2000 SG<sub>344</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.0185, 0.0185, 0.0185],
            },
            controllers: [
              { type: "dynamo", url: "2000_sg344/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2001_bb16": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2001 BB<sub>16</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2001_bb16/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2001_fr85": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2001 FR<sub>85</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2001_fr85/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2001_gp2": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2001 GP<sub>2</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2001_gp2/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2001_qj142": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2001 QJ<sub>142</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2001_qj142/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2001_sn263_a": {
            groups: ["asteroids", "NEOs"],
            radius: 1.45,
            label: "(153591) 2001 SN<sub>263</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.4, 1.35, 1.45],
            },
            controllers: [
              { type: "dynamo", url: "2001_sn263_a/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.423 },
            ],
          },
          "2003_sm84": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2003 SM<sub>84</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2003_sm84/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2003_uv11": {
            groups: ["asteroids", "NEOs"],
            radius: 0.13,
            label: "(503941) 2003 UV<sub>11</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.13, 0.13, 0.13],
            },
            controllers: [
              { type: "dynamo", url: "2003_uv11/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 18.25 },
            ],
          },
          "2003_yn107": {
            groups: ["asteroids", "NEOs"],
            radius: 0.01,
            label: "2003 YN<sub>107</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.01, 0.01, 0.01],
            },
            controllers: [
              { type: "dynamo", url: "2003_yn107/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2005_er95": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2003 ER<sub>95</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2005_er95/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2005_lc": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2005 LC",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2005_lc/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2005_qp87": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2005 QP<sub>87</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2005_qp87/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2005_yu55": {
            groups: ["asteroids", "NEOs"],
            radius: 0.18,
            label: "2005 YU<sub>55</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.18, 0.18, 0.18],
            },
            controllers: [
              { type: "dynamo", url: "2005_yu55/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 18 },
            ],
          },
          "2006_bz147": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2006 BZ<sub>147</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2006_bz147/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2006_jy26": {
            groups: ["asteroids", "NEOs"],
            radius: 0.00475,
            label: "2006 JY<sub>26</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.00475, 0.00475, 0.00475],
            },
            controllers: [
              { type: "dynamo", url: "2006_jy26/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2006_qq56": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2006 QQ<sub>56</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2006_qq56/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2006_rh120": {
            groups: ["asteroids", "NEOs"],
            radius: 0.00125,
            label: "2006 RH<sub>120</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.00125, 0.00125, 0.00125],
            },
            controllers: [
              { type: "dynamo", url: "2006_rh120/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 0.04583 },
            ],
          },
          "2006_ub17": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2006 UB<sub>17</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2006_ub17/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2007_tf15": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2007 TF<sub>15</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2007_tf15/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2007_un12": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2007 UN<sub>12</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2007_un12/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2007_vu6": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2007 VU<sub>6</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2007_vu6/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_bt2": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 BT<sub>2</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_bt2/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_cx118": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 CX<sub>118</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_cx118/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_ea9": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 EA<sub>9</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_ea9/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_el": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 EL",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_el/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_hu4": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 HU<sub>4</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_hu4/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_jl24": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 JL<sub>24</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_jl24/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 0.05385 },
            ],
          },
          "2008_kt": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 KT",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_kt/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_tc3": {
            groups: ["asteroids", "NEOs"],
            radius: 0.00205,
            label: "2008 TC<sub>3</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.00205, 0.00205, 0.00205],
            },
            controllers: [
              { type: "dynamo", url: "2008_tc3/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 0.0269409 },
            ],
          },
          "2008_ts10": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2008 TS<sub>10</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2008_ts10/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2008_ua202": {
            groups: ["asteroids", "NEOs"],
            radius: 0.025,
            label: "2008 UA<sub>202</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.025, 0.025, 0.025],
            },
            controllers: [
              { type: "dynamo", url: "2008_ua202/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2009_bd": {
            groups: ["asteroids", "NEOs"],
            radius: 0.0055,
            label: "2009 BD",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.0055, 0.0055, 0.0055],
            },
            controllers: [
              { type: "dynamo", url: "2009_bd/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2009_os5": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2009 OS<sub>5</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2009_os5/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2009_rt1": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2009 RT<sub>1</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2009_rt1/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2009_yf": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2009 YF",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2009_yf/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_an61": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 AN<sub>61</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_an61/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_dj": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 DJ",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_dj/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_jw34": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 JW<sub>34</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_jw34/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_tg19": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 TG<sub>19</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_tg19/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_tn167": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 TN<sub>167</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_tn167/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2010_ub": {
            groups: ["asteroids", "NEOs"],
            radius: 0.005,
            label: "2010 UB",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.005, 0.005, 0.005],
            },
            controllers: [
              { type: "dynamo", url: "2010_ub/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2063_bacchus": {
            groups: ["asteroids", "NEOs"],
            radius: 0.555,
            label: "Bacchus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.555, 0.265, 0.25],
            },
            controllers: [
              { type: "dynamo", url: "2063_bacchus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 14.904 },
            ],
          },
          "21_lutetia": {
            groups: ["asteroids", "asteroid belt"],
            radius: 60.5,
            label: "Lutetia",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [60.5, 50.5, 37.5],
            },
            controllers: [
              { type: "dynamo", url: "21_lutetia/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 8.1655 },
            ],
          },
          "2101_adonis": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.2615,
            label: "Adonis",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.2615, 0.2615, 0.2615],
            },
            controllers: [
              { type: "dynamo", url: "2101_adonis/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "2102_tantalus": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.8245,
            label: "Tantalus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.8245, 0.8245, 0.8245],
            },
            controllers: [
              { type: "dynamo", url: "2102_tantalus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.384 },
            ],
          },
          "2135_aristaeus": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.5,
            label: "Aristaeus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.5, 0.5, 0.5],
            },
            controllers: [
              { type: "dynamo", url: "2135_aristaeus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "216_kleopatra": {
            groups: ["asteroids", "asteroid belt"],
            radius: 138,
            label: "Kleopatra",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [138, 47, 39],
            },
            controllers: [
              { type: "dynamo", url: "216_kleopatra/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 5.385 },
            ],
          },
          "21900_orus": {
            groups: ["asteroids"],
            radius: 25.405,
            label: "Orus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: 25.405,
            },
            controllers: [
              { type: "dynamo", url: "21900_orus/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 13.45 },
            ],
          },
          "225088_2007_or10": {
            groups: ["dwarf planets", "TNOs"],
            radius: 615,
            label: "2007 OR<sub>10</sub>",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [615, 615, 596.55],
            },
            controllers: [
              { type: "dynamo", url: "225088_2007_or10/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 22.4 },
            ],
          },
          "2340_hathor": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.105,
            label: "Hathor",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.105, 0.105, 0.105],
            },
            controllers: [
              { type: "dynamo", url: "2340_hathor/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.35 },
            ],
          },
          "243_ida": {
            groups: ["asteroids", "asteroid belt"],
            radius: 29.9,
            label: "Ida",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [18.6 * 1.3, 25.4 * 1.3, 77.74],
              rotate: [{ y: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "243_ida/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 4.634 },
            ],
          },
          "25143_itokawa": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.165,
            label: "Itokawa",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/25143_itokawa/itokawa.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "25143_itokawa/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12.132 },
            ],
          },
          "253_mathilde": {
            groups: ["asteroids", "asteroid belt"],
            radius: 33,
            label: "Mathilde",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [33, 24, 23],
            },
            controllers: [
              { type: "dynamo", url: "253_mathilde/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 417.7 },
            ],
          },
          "2867_steins": {
            groups: ["asteroids", "asteroid belt"],
            radius: 3.415,
            label: "Šteins",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3.415, 2.85, 2.21],
            },
            controllers: [
              { type: "dynamo", url: "2867_steins/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 6.049 },
            ],
          },
          "3_juno": {
            groups: ["asteroids", "asteroid belt"],
            radius: 160,
            label: "Juno",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [160, 133.5, 100],
            },
            controllers: [
              { type: "dynamo", url: "3_juno/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 7.21 },
            ],
          },
          "3122_florence": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 2.2,
            label: "Florence",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2.2, 2.2, 2.2],
            },
            controllers: [
              { type: "dynamo", url: "3122_florence/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.3581 },
            ],
          },
          "3200_phaethon": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 2.9,
            label: "Phaethon",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2.9, 2.9, 2.9],
            },
            controllers: [
              { type: "dynamo", url: "3200_phaethon/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.604 },
            ],
          },
          "3362_khufu": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.35,
            label: "Khufu",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.35, 0.35, 0.35],
            },
            controllers: [
              { type: "dynamo", url: "3362_khufu/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "3548_eurybates": {
            groups: ["asteroids"],
            radius: 31.9425,
            label: "Eurybates",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 31.9425,
            },
            controllers: [
              { type: "dynamo", url: "3548_eurybates/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 8.711 },
            ],
          },
          "367943_duende": {
            groups: ["asteroids", "NEOs"],
            radius: 0.02,
            label: "Duende",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.01, 0.01, 0.02],
            },
            controllers: [
              { type: "dynamo", url: "367943_duende/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 9.485 },
            ],
          },
          "37655_illapa": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.75,
            label: "Illapa",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.75, 0.75, 0.75],
            },
            controllers: [
              { type: "dynamo", url: "37655_illapa/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.6556 },
            ],
          },
          "4_vesta": {
            groups: ["asteroids", "asteroid belt"],
            radius: 262.7,
            label: "Vesta",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/4_vesta/4_vesta.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "4_vesta/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "4015_wilson-harrington": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 2,
            label: "Wilson-Harrington",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
            },
            controllers: [
              { type: "dynamo", url: "4015_wilson-harrington/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.5736 },
            ],
          },
          "4179_toutatis": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 2.13,
            label: "Toutatis",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.35, 1.015, 2.13],
            },
            controllers: [
              { type: "dynamo", url: "4179_toutatis/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 176 },
            ],
          },
          "4183_cuno": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 1.8255,
            label: "Cuno",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.8255, 1.8255, 1.89255],
            },
            controllers: [
              { type: "dynamo", url: "4183_cuno/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.5595 },
            ],
          },
          "433_eros": {
            groups: ["asteroids", "NEOs"],
            radius: 8.42,
            label: "Eros",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: { url: "$STATIC_ASSETS_URL/models/433_eros/433_eros.gltf" },
            controllers: [
              { type: "dynamo", url: "433_eros/sun/orb" },
              { type: "dynamo", url: "433_eros/ori" },
            ],
          },
          "4450_pan": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.5,
            label: "Pan",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.5, 0.5, 0.5],
            },
            controllers: [
              { type: "dynamo", url: "4450_pan/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 56.48 },
            ],
          },
          "4486_mithra": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 1.175,
            label: "Mithra",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.175, 0.825, 0.72],
            },
            controllers: [
              { type: "dynamo", url: "4486_mithra/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 67.5 },
            ],
          },
          "4769_castalia": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.9,
            label: "Castalia",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.4, 0.4, 0.9],
            },
            controllers: [
              { type: "dynamo", url: "4769_castalia/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 4.095 },
            ],
          },
          "486958_arrokoth": {
            groups: ["TNOs"],
            radius: 15,
            label: "Arrokoth",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/486958_arrokoth/mu69.gltf",
              scale: [1, 1, 1],
              rotate: [{ x: -110 }, { y: 180 }],
            },
            controllers: [
              { type: "dynamo", url: "486958_arrokoth/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
              {
                type: "spin",
                axis: new n.Vector3(
                  -6.121453676996425e-10,
                  0.9396926211599973,
                  0.34202014229786787,
                ),
                periodInHours: 13,
              },
            ],
            postCreateFunction: (t) => {
              const e = t.getControllerByClass(n.SpinController);
              null !== e &&
                (e.setReferenceAngle(0), e.setReferenceTime(599590968));
            },
          },
          "5011_ptah": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.78,
            label: "Ptah",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.78, 0.78, 0.78],
            },
            controllers: [
              { type: "dynamo", url: "5011_ptah/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 12 },
            ],
          },
          "52246_donaldjohanson": {
            groups: ["asteroids"],
            radius: 1.9475,
            label: "Donaldjohanson",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: 1.9475,
            },
            controllers: [
              { type: "dynamo", url: "52246_donaldjohanson/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          "5535_annefrank": {
            groups: ["asteroids"],
            radius: 2.412,
            label: "Annefrank",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 2.412,
            },
            controllers: [
              { type: "dynamo", url: "5535_annefrank/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 15.12 },
            ],
          },
          "617_patroclus": {
            groups: ["asteroids", "617_patroclus_barycenter"],
            radius: 64,
            label: "Patroclus",
            labelFadeEntity: "sun",
            parents: [[Number.NEGATIVE_INFINITY, "617_patroclus_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [64, 58, 49],
              shadowEntities: ["menoetius"],
            },
            controllers: [
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "menoetius",
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByClass(n.AlignController),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0),
                (s.semiMajorAxis = 664),
                (s.meanAngularMotion = 1697791e-11),
                (s.meanAnomalyAtEpoch = Math.PI),
                s.setOrbitOrientationFromElements(1.97244894756, 0, 0),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          "617_patroclus_barycenter": {
            groups: ["asteroids"],
            radius: 664,
            label: "Patroclus",
            labelFadeEntity: "617_patroclus",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            controllers: [
              { type: "dynamo", url: "617_patroclus/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
            postCreateFunction: (t) => {
              t.setCanOcclude(!1);
            },
          },
          "6239_minos": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.237,
            label: "Minos",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.237, 0.237, 0.237],
            },
            controllers: [
              { type: "dynamo", url: "6239_minos/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 3.5558 },
            ],
          },
          "6489_golevka": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.265,
            label: "Golevka",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.265, 0.265, 0.265],
            },
            controllers: [
              { type: "dynamo", url: "6489_golevka/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 6.026 },
            ],
          },
          "65803_didymos": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.39,
            label: "Didymos",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/65803_didymos/Didymos.gltf",
              rotate: [{ z: 180 }, { x: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "65803_didymos/sun/orb" },
              { type: "fixed", orientation: new n.Quaternion(0, 1, 0, 0) },
              {
                type: "spin",
                axis: n.Vector3.ZAxis,
                periodInHours: 2.2593,
                relativeToTime: 0,
              },
            ],
          },
          "66391_moshup": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.766,
            label: "Moshup",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.766, 0.7475, 0.6735],
            },
            controllers: [
              { type: "dynamo", url: "66391_moshup/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 2.7645 },
            ],
          },
          "69230_hermes": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.425,
            label: "Hermes",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [0.425, 0.425, 0.425],
            },
            controllers: [
              { type: "dynamo", url: "69230_hermes/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 13.894 },
            ],
          },
          "90377_sedna": {
            groups: ["dwarf planets", "TNOs"],
            radius: 497.5,
            label: "Sedna",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [497.5, 497.5, 497.5],
            },
            controllers: [
              { type: "dynamo", url: "90377_sedna/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 10.273 },
            ],
          },
          "951_gaspra": {
            groups: ["asteroids", "asteroid belt"],
            radius: 9.1,
            label: "Gaspra",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: { url: "$STATIC_ASSETS_URL/models/951_gaspra/gaspra.gltf" },
            controllers: [
              { type: "dynamo", url: "951_gaspra/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 7.042 },
            ],
          },
          "9969_braille": {
            groups: ["asteroids", "asteroid belt"],
            radius: 1.05,
            label: "Braille",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.05, 0.5, 0.5],
            },
            controllers: [
              { type: "dynamo", url: "9969_braille/sun/orb" },
              { type: "spin", axis: n.Vector3.ZAxis, periodInHours: 226.4 },
            ],
          },
          "99942_apophis": {
            groups: ["asteroids", "NEOs", "PHAs"],
            radius: 0.225,
            label: "Apophis",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/99942_apophis/apophis.gltf",
            },
            controllers: [
              { type: "dynamo", url: "99942_apophis/sun/orb" },
              {
                type: "spin",
                axis: new n.Vector3(
                  0.20112425201023415,
                  0.46925803805904115,
                  0.8598522715968735,
                ),
                periodInHours: 30.4,
              },
            ],
          },
          "152830_dinkinesh": {
            groups: ["asteroids"],
            radius: 0.45,
            label: "Dinkinesh",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 0.45,
            },
            controllers: [
              { type: "dynamo", url: "152830_dinkinesh/sun/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          charon: {
            groups: ["134340_pluto", "moons", "134340_pluto_barycenter"],
            radius: 603.5,
            label: "Charon",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            spheroid: {
              equatorialRadius: 603.5,
              polarRadius: 603.5,
              planetographic: !1,
            },
            spheroidLOD: {
              textures: {
                color: {
                  url: "charon/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
            },
            controllers: [
              { type: "dynamo", url: "charon/134340_pluto_barycenter/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "134340_pluto",
                },
                secondary: {
                  type: "velocity",
                  axis: n.Vector3.YAxis,
                  target: "134340_pluto",
                },
              },
            ],
          },
          dactyl: {
            groups: ["243_ida", "moons"],
            radius: 0.7,
            label: "Dactyl",
            parents: [[Number.NEGATIVE_INFINITY, "243_ida"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [0.8, 0.7, 0.6],
              rotate: [{ z: 90 }],
            },
            controllers: [
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "243_ida",
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByClass(n.AlignController),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0),
                (s.semiMajorAxis = 90),
                (s.meanAngularMotion = 8726646e-11),
                (s.meanAnomalyAtEpoch = 0),
                s.orbitOrientation.set(
                  0.8728453580255966,
                  0.1876084386162498,
                  -0.08948587100888229,
                  0.4415159494547423,
                ),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          dimorphos: {
            groups: ["65803_didymos", "moons"],
            radius: 0.085,
            label: "Dimorphos",
            parents: [[Number.NEGATIVE_INFINITY, "65803_didymos"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/dimorphos/Dimorphos.gltf",
            },
            controllers: [
              { type: "dynamo", url: "dimorphos/65803_didymos/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "65803_didymos",
                },
                secondary: {
                  type: "align",
                  axis: n.Vector3.ZAxis,
                  target: "65803_didymos",
                  targetAxis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          hiiaka: {
            groups: ["136108_haumea", "moons"],
            radius: 160,
            label: "Hi'iaka",
            parents: [[Number.NEGATIVE_INFINITY, "136108_haumea"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [160, 160, 160],
            },
            controllers: [
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "136108_haumea",
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByType("align"),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0.0513),
                (s.semiMajorAxis = 49880),
                (s.meanAngularMotion = 148049e-11),
                (s.meanAnomalyAtEpoch = 0),
                s.setOrbitOrientationFromElements(2.20532822965, 0, 0),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          hydra: {
            groups: ["134340_pluto", "moons", "134340_pluto_barycenter"],
            radius: 25,
            label: "Hydra",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [25, 25, 25],
              shadowEntities: ["134340_pluto"],
            },
            controllers: [
              { type: "dynamo", url: "hydra/134340_pluto_barycenter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kerberos: {
            groups: ["134340_pluto", "moons", "134340_pluto_barycenter"],
            radius: 8.25,
            label: "Kerberos",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [8.25, 8.25, 8.25],
              shadowEntities: ["134340_pluto"],
            },
            controllers: [
              { type: "dynamo", url: "kerberos/134340_pluto_barycenter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          menoetius: {
            groups: ["617_patroclus_barycenter", "moons"],
            radius: 58,
            label: "Menoetius",
            parents: [[Number.NEGATIVE_INFINITY, "617_patroclus_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [58, 54, 45],
              shadowEntities: ["617_patroclus"],
            },
            controllers: [
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "617_patroclus",
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByType("align"),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0),
                (s.semiMajorAxis = 664),
                (s.meanAngularMotion = 1697791e-11),
                (s.meanAnomalyAtEpoch = 0),
                s.setOrbitOrientationFromElements(1.97244894756, 0, 0),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          namaka: {
            groups: ["136108_haumea", "moons"],
            radius: 85,
            label: "Nāmaka",
            parents: [[Number.NEGATIVE_INFINITY, "136108_haumea"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [85, 85, 85],
            },
            controllers: [
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: n.Vector3.XAxis,
                  target: "136108_haumea",
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByType("align"),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0.249),
                (s.semiMajorAxis = 25657),
                (s.meanAngularMotion = 39786e-10),
                (s.meanAnomalyAtEpoch = 0),
                s.setOrbitOrientationFromElements(1.97244894756, 0, 0),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          nix: {
            groups: ["134340_pluto", "moons", "134340_pluto_barycenter"],
            radius: 24,
            label: "Nix",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [24, 24, 24],
              shadowEntities: ["134340_pluto"],
            },
            controllers: [
              { type: "dynamo", url: "nix/134340_pluto_barycenter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          styx: {
            groups: ["134340_pluto", "moons", "134340_pluto_barycenter"],
            radius: 5.5,
            label: "Styx",
            parents: [[Number.NEGATIVE_INFINITY, "134340_pluto_barycenter"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [5.5, 5.5, 5.5],
              shadowEntities: ["134340_pluto"],
            },
            controllers: [
              { type: "dynamo", url: "styx/134340_pluto_barycenter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(646),
          o = s(5);
        i.Entity.register({
          "1i_oumuamua": {
            groups: ["comets"],
            occlusionRadius: 0.03,
            extentsRadius: 0.225,
            label: "ʻOumuamua",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/1i_oumuamua/oumuamua.gltf",
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "1i_oumuamua/sun/orb" },
              {
                type: "spin",
                axis: new o.Vector3(
                  0.57735026919,
                  0.57735026919,
                  0.57735026919,
                ),
                periodInHours: 8.1,
              },
            ],
          },
          "1p_halley": {
            groups: ["comets"],
            radius: 6,
            label: "Halley (1P/Halley)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [6, 6, 6],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "1p_halley/sun/orb" },
              {
                type: "spin",
                periodInHours: 52,
                axis: o.Vector3.ZAxis,
                axisInFrameSpace: !1,
              },
            ],
          },
          "103p_hartley_2": {
            groups: ["comets"],
            radius: 2,
            label: "Hartley 2 (103P/Hartley)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/103p_hartley_2/hartley_2.gltf",
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "103p_hartley_2/sun/orb" },
              { type: "dynamo", url: "103p_hartley_2/ori" },
            ],
          },
          "9p_tempel_1": {
            groups: ["comets"],
            radius: 5,
            label: "Tempel 1 (9P/Tempel)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/9p_tempel_1/9p_tempel.gltf",
              rotate: [{ y: 90 }],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "9p_tempel_1/sun/orb" },
              { type: "dynamo", url: "9p_tempel_1/ori" },
            ],
          },
          "81p_wild_2": {
            groups: ["comets"],
            radius: 2.5,
            label: "Wild 2 (81P/Wild)",
            parents: [
              [Number.NEGATIVE_INFINITY, "sun"],
              [-800047271, "jupiter"],
              [-797029475, "sun"],
            ],
            trail: {
              length: void 0,
              lengthCoverages: [
                [1356976800, Number.NEGATIVE_INFINITY, -611927948.817],
                [189345600, -611927948.817, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2.5, 2.5, 2.5],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "81p_wild_2/sun/1/orb" },
              { type: "dynamo", url: "81p_wild_2/jupiter/orb" },
              { type: "dynamo", url: "81p_wild_2/sun/2/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          "67p_churyumov_gerasimenko": {
            groups: ["comets"],
            radius: 4.1,
            label: "Churyumov–Gerasimenko (67P/C-G)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/67p_churyumov_gerasimenko/67p_churyumov_gerasimenko.gltf",
              rotate: [{ x: 90 }],
              scale: 0.00124,
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "67p_churyumov_gerasimenko/sun/orb" },
              {
                type: "spin",
                axis: new o.Vector3(
                  0.15191127889562422,
                  0.404099951782066,
                  0.9020123016422935,
                ),
                axisInFrameSpace: !1,
                periodInHours: 12.0550932412,
              },
              { type: "dynamo", url: "67p_churyumov_gerasimenko/ori" },
            ],
            postCreateFunction: (t) => {
              t.setOrientation(
                new o.Quaternion(
                  0.26732846830704055,
                  0.017948528101847026,
                  0.22012096235022358,
                  0.9379552773483394,
                ),
              ),
                n.EntityUtils.addGeyser(
                  t,
                  1,
                  1,
                  100,
                  1,
                  1,
                  [1, -0.25, 1.2],
                  [0, 0, 1],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  2,
                  0.5,
                  100,
                  1,
                  1,
                  [-1.2, -0.25, 0.6],
                  [0.2, -0.5, 1],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  1,
                  0.07,
                  100,
                  1,
                  10,
                  [-1.2, 0.1, 0.6],
                  [0.2, -0.5, 1],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  1,
                  1,
                  100,
                  1,
                  1,
                  [-0.8, 0.75, 1],
                  [0.2, 0.5, 1],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  1,
                  0.5,
                  100,
                  1,
                  1,
                  [-0.8, 0.35, -1],
                  [0.2, 0.25, -1],
                );
            },
          },
          "19p_borrelly": {
            groups: ["comets"],
            radius: 2.4,
            label: "Borrelly (19P/Borrelly)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/19p_borrelly/borrelly.gltf",
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "19p_borrelly/sun/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          c_1995_o1: {
            groups: ["comets"],
            radius: 5,
            label: "Hale-Bopp (C/1995 O1)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [5, 5, 5],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_1995_o1/sun/orb" },
              {
                type: "spin",
                axis: o.Vector3.ZAxis,
                axisInFrameSpace: !1,
                periodInHours: 11.766666666,
              },
            ],
          },
          c_2010_x1: {
            groups: ["comets"],
            radius: 5,
            label: "Elenin (C/2010 X1)",
            parents: [
              [Number.NEGATIVE_INFINITY, "sun"],
              [370699266.182, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [5, 5, 5],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_2010_x1/sun/pos" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          c_2012_s1: {
            groups: ["comets"],
            radius: 3,
            label: "ISON (C/2012 S1)",
            parents: [
              [Number.NEGATIVE_INFINITY, "sun"],
              [440596867.184, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_2012_s1/sun/pos" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          c_2013_a1: {
            groups: ["comets"],
            radius: 5,
            label: "Siding Spring (C/2013 A1)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [5, 5, 5],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_2013_a1/sun/pos" },
              {
                type: "spin",
                axis: o.Vector3.ZAxis,
                axisInFrameSpace: !1,
                periodInHours: 8,
              },
            ],
          },
          c_2019_y4: {
            groups: ["comets"],
            radius: 3,
            label: "ATLAS (C/2019 Y4)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_2019_y4/sun/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          c_2020_f3: {
            groups: ["comets"],
            radius: 6,
            label: "NEOWISE (C/2020 F3)",
            parents: [[Number.NEGATIVE_INFINITY, "sun"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [6, 6, 6],
            },
            comet: {},
            controllers: [
              { type: "dynamo", url: "c_2020_f3/sun/orb" },
              {
                type: "spin",
                axis: o.Vector3.ZAxis,
                axisInFrameSpace: !1,
                periodInHours: 7.58,
              },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            EntityUtils: function () {
              return EntityUtils;
            },
          });
        var i = s(5);
        class EntityUtils {
          static addGeyser(t, e, s, n, o, r, a, l) {
            const c = t.addComponentByClass(i.ParticleSprayComponent);
            c.setNumberOfParticles(n),
              c.setSizeOfParticles(0.25 * e * r),
              c.setSpeedOfParticles(o * e),
              c.setColorOfParticles(new i.Color(1, 1, 1, 0.5 * s)),
              c.setSpread(1 * r),
              c.setParticleSpacingRandom(!1),
              c.setLength(2.5 * e),
              c.setOriginOffset(new i.Vector3(a[0], a[1], a[2])),
              c.setDirection(new i.Vector3(l[0], l[1], l[2]));
          }
          static showSubObjectDuringInterval(t, e, s, n) {
            t.getComponentByClass(i.ModelComponent).setHiddenObject(e, !0);
            const o = t.addControllerByClass(i.CoverageController);
            o.setCoverage(new i.Interval(s, n)),
              o.setEnterFunction((t) => {
                t.getComponentByClass(i.ModelComponent).setHiddenObject(e, !1);
              }),
              o.setExitFunction((t) => {
                t.getComponentByClass(i.ModelComponent).setHiddenObject(e, !0);
              });
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s(532).Entity.register({
            moon: {
              groups: ["earth", "moons"],
              radius: 1737.4,
              label: "Moon",
              parents: [[Number.NEGATIVE_INFINITY, "earth"]],
              trail: { length: void 0, color: [0, 0.6, 0.8, 0.7] },
              spheroid: {
                equatorialRadius: 1737.4,
                polarRadius: 1737.4,
                planetographic: !0,
              },
              spheroidLOD: {
                features: ["normalMap", "shadowEntities"],
                textures: {
                  color: {
                    url: "moon/color_$SIZE_$FACE.png",
                    sizes: [16, 512, 4096],
                  },
                  normal: {
                    url: "moon/normal_$SIZE_$FACE.png",
                    sizes: [16, 512, 2048],
                  },
                },
                shadowEntities: ["earth"],
              },
              controllers: [
                { type: "dynamo", url: "moon/earth/orb" },
                { type: "dynamo", url: "moon/ori" },
              ],
            },
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s(532).Entity.register({
            adrastea: {
              groups: ["jupiter", "moons", "amalthea", "inner", "regular"],
              radius: 8.2,
              label: "Adrastea",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
                scale: [8.2, 8.2, 8.2],
                shadowEntities: ["jupiter"],
              },
              controllers: [
                { type: "dynamo", url: "adrastea/jupiter/orb" },
                { type: "dynamo", url: "adrastea/ori" },
              ],
            },
            amalthea: {
              groups: ["jupiter", "moons", "amalthea", "inner", "regular"],
              radius: 83.5,
              label: "Amalthea",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
                scale: [83.5, 83.5, 83.5],
                shadowEntities: ["jupiter"],
              },
              controllers: [
                { type: "dynamo", url: "amalthea/jupiter/orb" },
                { type: "dynamo", url: "amalthea/ori" },
              ],
            },
            callisto: {
              groups: ["jupiter", "moons", "main", "galilean", "regular"],
              radius: 2410.3,
              label: "Callisto",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              spheroid: {
                equatorialRadius: 2410.3,
                polarRadius: 2410.3,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "callisto/color_$SIZE_$FACE.png",
                    sizes: [4, 512],
                  },
                },
                shadowEntities: ["jupiter", "io", "europa", "ganymede"],
              },
              controllers: [
                { type: "dynamo", url: "callisto/jupiter/orb" },
                { type: "dynamo", url: "callisto/ori" },
              ],
            },
            europa: {
              groups: ["jupiter", "moons", "main", "galilean", "regular"],
              radius: 1569,
              label: "Europa",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              spheroid: {
                equatorialRadius: 1569,
                polarRadius: 1569,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "europa/color_$SIZE_$FACE.png",
                    sizes: [4, 512, 1024],
                  },
                },
                shadowEntities: ["jupiter", "io", "callisto", "ganymede"],
              },
              controllers: [
                { type: "dynamo", url: "europa/jupiter/orb" },
                { type: "dynamo", url: "europa/ori" },
              ],
            },
            ganymede: {
              groups: ["jupiter", "moons", "main", "galilean", "regular"],
              radius: 2634.1,
              label: "Ganymede",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              spheroid: {
                equatorialRadius: 2634.1,
                polarRadius: 2634.1,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "ganymede/color_$SIZE_$FACE.png",
                    sizes: [4, 512],
                  },
                },
                shadowEntities: ["jupiter", "io", "europa", "callisto"],
              },
              controllers: [
                { type: "dynamo", url: "ganymede/jupiter/orb" },
                { type: "dynamo", url: "ganymede/ori" },
              ],
            },
            io: {
              groups: ["jupiter", "moons", "main", "galilean", "regular"],
              radius: 1821.3,
              label: "Io",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              spheroid: {
                equatorialRadius: 1821.3,
                polarRadius: 1821.3,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "io/color_$SIZE_$FACE.png",
                    sizes: [4, 512, 1024],
                  },
                },
                shadowEntities: ["jupiter", "europa", "ganymede", "callisto"],
              },
              controllers: [
                { type: "dynamo", url: "io/jupiter/orb" },
                { type: "dynamo", url: "io/ori" },
              ],
            },
            metis: {
              groups: ["jupiter", "moons", "amalthea", "inner", "regular"],
              radius: 21.5,
              label: "Metis",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
                scale: [21.5, 21.5, 21.5],
                shadowEntities: ["jupiter"],
              },
              controllers: [
                { type: "dynamo", url: "metis/jupiter/orb" },
                { type: "dynamo", url: "metis/ori" },
              ],
            },
            thebe: {
              groups: ["jupiter", "moons", "amalthea", "inner", "regular"],
              radius: 49,
              label: "Thebe",
              parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
              trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
                scale: [49, 49, 49],
                shadowEntities: ["jupiter"],
              },
              controllers: [
                { type: "dynamo", url: "thebe/jupiter/orb" },
                { type: "dynamo", url: "thebe/ori" },
              ],
            },
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          aitne: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1.5,
            label: "Aitne",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "aitne/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          ananke: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 14,
            label: "Ananke",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [14, 14, 14],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "ananke/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          aoede: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 2,
            label: "Aoede",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "aoede/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          arche: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1.5,
            label: "Arche",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "arche/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          autonoe: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 2,
            label: "Autonoe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "autonoe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          callirrhoe: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 4.3,
            label: "Callirrhoe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [4.3, 4.3, 4.3],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "callirrhoe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          carme: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 23,
            label: "Carme",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [23, 23, 23],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "carme/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          carpo: {
            groups: ["jupiter", "moons", "irregular"],
            radius: 1.5,
            label: "Carpo",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "carpo/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          chaldene: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1.9,
            label: "Chaldene",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.9, 1.9, 1.9],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "chaldene/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          cyllene: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Cyllene",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "cyllene/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          dia: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 2,
            label: "Dia",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: 2,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "dia/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          eirene: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 2,
            label: "Eirene",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 2,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "eirene/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          elara: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 43,
            label: "Elara",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [43, 43, 43],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "elara/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          erinome: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1.6,
            label: "Erinome",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.6, 1.6, 1.6],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "erinome/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          ersa: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 1.5,
            label: "Ersa",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 1.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "ersa/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          euanthe: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1.5,
            label: "Euanthe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "euanthe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          eukelade: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 2,
            label: "Eukelade",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "eukelade/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          eupheme: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Eupheme",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "eupheme/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          euporie: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Euporie",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "euporie/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          eurydome: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1.5,
            label: "Eurydome",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "eurydome/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          harpalyke: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 2.2,
            label: "Harpalyke",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2.2, 2.2, 2.2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "harpalyke/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          hegemone: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1.5,
            label: "Hegemone",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "hegemone/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          helike: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 2,
            label: "Helike",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "helike/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          hermippe: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 2,
            label: "Hermippe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "hermippe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          herse: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Herse",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "herse/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          himalia: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 85,
            label: "Himalia",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [85, 85, 85],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "himalia/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          iocaste: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 2.6,
            label: "Iocaste",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2.6, 2.6, 2.6],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "iocaste/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          isonoe: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1.9,
            label: "Isonoe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.9, 1.9, 1.9],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "isonoe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_li: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Jupiter LI",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_li/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lii: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 0.5,
            label: "Jupiter LII",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lii/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_liv: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 0.5,
            label: "Jupiter LIV",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_liv/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lv: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Jupiter LV",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lv/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lvi: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 0.5,
            label: "Jupiter LVI",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lvi/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lix: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Jupiter LIX",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lix/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxi: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Jupiter LXI",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxi/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxiii: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Jupiter LXIII",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxiii/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxiv: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Jupiter LXIV",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxiv/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxvi: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Jupiter LXVI",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxvi/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxvii: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Jupiter LXVII",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxvii/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxviii: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Jupiter LXVIII",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxviii/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxix: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "Jupiter LXIX",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxix/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxx: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1.5,
            label: "Jupiter LXX",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxx/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          jupiter_lxxii: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Jupiter LXXII",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "jupiter_lxxii/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kale: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Kale",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "kale/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kallichore: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Kallichore",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "kallichore/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kalyke: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 2.6,
            label: "Kalyke",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2.6, 2.6, 2.6],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "kalyke/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kore: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Kore",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "kore/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          leda: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 10,
            label: "Leda",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [10, 10, 10],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "leda/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          lysithea: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 18,
            label: "Lysithea",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [18, 18, 18],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "lysithea/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          megaclite: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 2.7,
            label: "Megaclite",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2.7, 2.7, 2.7],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "megaclite/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          mneme: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Mneme",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "mneme/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          orthosie: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Orthosie",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "orthosie/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          pandia: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 1.5,
            label: "Pandia",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: 1.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "pandia/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          pasiphae: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 30,
            label: "Pasiphae",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [30, 30, 30],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "pasiphae/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          pasithee: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "Pasithee",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "pasithee/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          philophrosyne: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Philophrosyne",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "philophrosyne/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          praxidike: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 3.4,
            label: "Praxidike",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [3.4, 3.4, 3.4],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "praxidike/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_2: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "S/2003 J 2",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_2/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_4: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "S/2003 J 4",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_4/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_9: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2003 J 9",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_9/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_10: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "S/2003 J 10",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_10/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_12: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 0.5,
            label: "S/2003 J 12",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_12/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_16: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "S/2003 J 16",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_16/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_23: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "S/2003 J 23",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_23/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2003_j_24: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "S/2003 J 24",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2003_j_24/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2011_j_3: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 1.5,
            label: "S/2011 J 3",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2011_j_3/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2016_j_3: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "S/2016 J 3",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2016_j_3/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2016_j_4: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 0.5,
            label: "S/2016 J 4",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2016_j_4/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2018_j_2: {
            groups: ["jupiter", "moons", "irregular", "himalia"],
            radius: 1.5,
            label: "S/2018 J 2",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2018_j_2/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2018_j_3: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2018 J 3",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2018_j_3/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2018_j_4: {
            groups: ["jupiter", "moons", "irregular", "carpo"],
            radius: 1,
            label: "S/2018 J 4",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2018_j_4/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_1: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 0.5,
            label: "S/2021 J 1",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_1/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_2: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "S/2021 J 2",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_2/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_3: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "S/2021 J 3",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_3/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_4: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2021 J 4",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_4/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_5: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 1,
            label: "S/2021 J 5",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_5/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2021_j_6: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2021 J 6",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2021_j_6/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2022_j_1: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2022 J 1",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2022_j_1/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2022_j_2: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 0.5,
            label: "S/2022 J 2",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2022_j_2/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2022_j_3: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 0.5,
            label: "S/2022 J 3",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "s_2022_j_3/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sinope: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 19,
            label: "Sinope",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [19, 19, 19],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "sinope/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sponde: {
            groups: ["jupiter", "moons", "irregular", "pasiphae"],
            radius: 1,
            label: "Sponde",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "sponde/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          taygete: {
            groups: ["jupiter", "moons", "irregular", "carme"],
            radius: 2.5,
            label: "Taygete",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "taygete/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          thelxinoe: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 1,
            label: "Thelxinoe",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1, 1, 1],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "thelxinoe/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          themisto: {
            groups: ["jupiter", "moons", "irregular"],
            radius: 4,
            label: "Themisto",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [4, 4, 4],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "themisto/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          thyone: {
            groups: ["jupiter", "moons", "irregular", "ananke"],
            radius: 2,
            label: "Thyone",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "thyone/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          valetudo: {
            groups: ["jupiter", "moons", "irregular"],
            radius: 0.5,
            label: "Valetudo",
            parents: [[Number.NEGATIVE_INFINITY, "jupiter"]],
            trail: { length: void 0, color: [0.95, 0.71, 0.64, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.5,
              shadowEntities: ["jupiter"],
            },
            controllers: [
              { type: "dynamo", url: "valetudo/jupiter/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s(532).Entity.register({
            phobos: {
              groups: ["mars", "moons"],
              radius: 14,
              label: "Phobos",
              parents: [[Number.NEGATIVE_INFINITY, "mars"]],
              trail: { length: void 0, color: [0.89, 0.51, 0.35, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/phobos/phobos.gltf",
                scale: [1, 1, 1],
                rotate: [{ z: 90 }, { y: 90 }],
                shadowEntities: ["mars"],
              },
              controllers: [
                { type: "dynamo", url: "phobos/mars/orb" },
                { type: "dynamo", url: "phobos/ori" },
              ],
            },
            deimos: {
              groups: ["mars", "moons"],
              radius: 8.70951,
              label: "Deimos",
              parents: [[Number.NEGATIVE_INFINITY, "mars"]],
              trail: { length: void 0, color: [0.89, 0.51, 0.35, 0.7] },
              model: {
                url: "$STATIC_ASSETS_URL/models/deimos/deimos.gltf",
                scale: [1, 1, 1],
                rotate: [{ y: -180 }],
                shadowEntities: ["mars"],
              },
              controllers: [
                { type: "dynamo", url: "deimos/mars/orb" },
                { type: "dynamo", url: "deimos/ori" },
              ],
            },
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          despina: {
            groups: ["neptune", "moons", "regular"],
            radius: 90,
            label: "Despina",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [90, 90, 90],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "despina/neptune/orb" },
              { type: "dynamo", url: "despina/ori" },
            ],
          },
          galatea: {
            groups: ["neptune", "moons", "regular"],
            radius: 102,
            label: "Galatea",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [102, 102, 102],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "galatea/neptune/orb" },
              { type: "dynamo", url: "galatea/ori" },
            ],
          },
          halimede: {
            groups: ["neptune", "moons", "irregular"],
            radius: 31,
            label: "Halimede",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [31, 31, 31],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "halimede/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          hippocamp: {
            groups: ["neptune", "moons", "regular"],
            radius: 17.4,
            label: "Hippocamp",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [17.4, 17.4, 17.4],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "hippocamp/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          laomedeia: {
            groups: ["neptune", "moons", "irregular"],
            radius: 21,
            label: "Laomedeia",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [21, 21, 21],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "laomedeia/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          larissa: {
            groups: ["neptune", "moons", "regular"],
            radius: 108,
            label: "Larissa",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [108, 108, 108],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "larissa/neptune/orb" },
              { type: "dynamo", url: "larissa/ori" },
            ],
          },
          naiad: {
            groups: ["neptune", "moons", "regular"],
            radius: 48,
            label: "Naiad",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [48, 48, 48],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "naiad/neptune/orb" },
              { type: "dynamo", url: "naiad/ori" },
            ],
          },
          nereid: {
            groups: ["neptune", "moons", "irregular"],
            radius: 170,
            label: "Nereid",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [170, 170, 170],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "nereid/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          neso: {
            groups: ["neptune", "moons", "irregular"],
            radius: 30,
            label: "Neso",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [30, 30, 30],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "neso/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          proteus: {
            groups: ["neptune", "moons", "regular"],
            radius: 232.5,
            label: "Proteus",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/proteus/proteus.gltf",
              scale: [1, 1, 1],
            },
            controllers: [
              { type: "dynamo", url: "proteus/neptune/orb" },
              { type: "dynamo", url: "proteus/ori" },
            ],
          },
          psamathe: {
            groups: ["neptune", "moons", "irregular"],
            radius: 20,
            label: "Psamathe",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [20, 20, 20],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "psamathe/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sao: {
            groups: ["neptune", "moons", "irregular"],
            radius: 22,
            label: "Sao",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [22, 22, 22],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "sao/neptune/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          thalassa: {
            groups: ["neptune", "moons", "regular"],
            radius: 54,
            label: "Thalassa",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [54, 54, 54],
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "thalassa/neptune/orb" },
              { type: "dynamo", url: "thalassa/ori" },
            ],
          },
          triton: {
            groups: ["neptune", "moons", "irregular"],
            radius: 1353.4,
            label: "Triton",
            parents: [[Number.NEGATIVE_INFINITY, "neptune"]],
            trail: { length: void 0, color: [0.48, 0.69, 1, 0.7] },
            spheroid: {
              equatorialRadius: 1353.4,
              polarRadius: 1353.4,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "triton/color_$SIZE_$FACE.jpg",
                  sizes: [16, 512, 4096],
                },
              },
              shadowEntities: ["neptune"],
            },
            controllers: [
              { type: "dynamo", url: "triton/neptune/orb" },
              { type: "dynamo", url: "triton/ori" },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(646),
          o = s(5);
        i.Entity.register({
          dione: {
            groups: ["saturn", "moons", "inner", "major"],
            radius: 561.7,
            label: "Dione",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 561.7,
              polarRadius: 561.7,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "dione/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "dione/saturn/orb" },
              { type: "dynamo", url: "dione/ori" },
            ],
          },
          enceladus: {
            groups: ["saturn", "moons", "inner", "major"],
            radius: 252.1,
            label: "Enceladus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 252.1,
              polarRadius: 252.1,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "enceladus/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "enceladus/saturn/orb" },
              { type: "dynamo", url: "enceladus/ori" },
            ],
            postCreateFunction: (t) => {
              n.EntityUtils.addGeyser(
                t,
                100,
                0.1,
                20,
                0.002,
                4,
                [-20.16, 0.8 * -69.23, 0.8 * -240.99],
                [-0.0999, -0.2747, -0.9563],
              ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [-49.384, 0.8 * -24.61, 0.8 * -243.08],
                  [-0.2449, -0.0976, -0.9646],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [0.8 * -35.82, -37.496, -196],
                  [-0.1421, -0.1859, -0.9722],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [21.259, 0.7 * -17.54, -174.685],
                  [0.1205, -0.0696, -0.9902],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [0, 1.54, -176.393],
                  [0, 0.0087, -0.9999],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [-21.658, 21.658, -173.719],
                  [-0.1227, 0.1227, -0.9848],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [32.193, 0.7 * -34.55, 0.7 * -245.35],
                  [0.1824, -0.1371, -0.9736],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [-46.719, 0.68 * 0.9, -221.931],
                  [-0.2059, 0.0026, -0.9785],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [0.9 * -31.81, -12.024, -224.667],
                  [-0.1262, -0.053, -0.9905],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [0.9 * -5.49, -26.793, -225.162],
                  [-0.0217, -0.1181, -0.9927],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [14.886, -42.39, -222.309],
                  [0.0656, -0.1869, -0.9801],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [-13.176, 48.112, -195.328],
                  [-0.0653, 0.2386, -0.9689],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [51.52 * 0.8, 19.176, 0.8 * -245.51],
                  [0.2044, 0.0951, -0.9742],
                ),
                n.EntityUtils.addGeyser(
                  t,
                  100,
                  0.1,
                  20,
                  0.002,
                  4,
                  [22.504, 33.52 * 0.8, -198.536],
                  [0.1116, 0.133, -0.9848],
                );
            },
          },
          hyperion: {
            groups: ["saturn", "moons", "outer", "major"],
            radius: 135,
            label: "Hyperion",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/hyperion/hyperion.gltf",
              scale: [1, 1, 1],
            },
            controllers: [
              { type: "dynamo", url: "hyperion/saturn/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          iapetus: {
            groups: ["saturn", "moons", "outer", "major"],
            radius: 735.6,
            label: "Iapetus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 735.6,
              polarRadius: 735.6,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "iapetus/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "iapetus/saturn/orb" },
              { type: "dynamo", url: "iapetus/ori" },
            ],
          },
          mimas: {
            groups: ["saturn", "moons", "inner", "major"],
            radius: 198.3,
            label: "Mimas",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/mimas/mimas.gltf",
              scale: [1, 1, 1],
            },
            controllers: [
              { type: "dynamo", url: "mimas/saturn/orb" },
              { type: "dynamo", url: "mimas/ori" },
            ],
          },
          rhea: {
            groups: ["saturn", "moons", "outer", "major"],
            radius: 764.3,
            label: "Rhea",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 764.3,
              polarRadius: 764.3,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "rhea/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "rhea/saturn/orb" },
              { type: "dynamo", url: "rhea/ori" },
            ],
          },
          tethys: {
            groups: ["saturn", "moons", "inner", "major"],
            radius: 538.4,
            label: "Tethys",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 538.4,
              polarRadius: 527.5,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "tethys/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 2048],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "tethys/saturn/orb" },
              { type: "dynamo", url: "tethys/ori" },
            ],
          },
          titan: {
            groups: ["saturn", "moons", "outer", "major"],
            radius: 2575,
            label: "Titan",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            spheroid: {
              equatorialRadius: 2575,
              polarRadius: 2575,
              planetographic: !1,
            },
            spheroidLOD: {
              features: ["shadowEntities"],
              textures: {
                color: {
                  url: "titan/color_$SIZE_$FACE.png",
                  sizes: [4, 512, 1024],
                },
              },
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "titan/saturn/orb" },
              { type: "dynamo", url: "titan/ori" },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(o.AtmosphereComponent);
              e.setScaleHeight(75),
                e.setDensity(5e-4),
                e.setColor(new o.Color(179 / 255, 145 / 255, 53 / 255)),
                e.setSunsetColor(new o.Color(0, 71 / 255, 0.8)),
                e.setSunsetIntensity(0.5);
            },
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          aegaeon: {
            groups: ["saturn", "moons", "minor", "ring moonlet"],
            radius: 0.12,
            label: "Aegaeon",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.12, 0.12, 0.12],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "aegaeon/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          aegir: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Aegir",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "aegir/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          albiorix: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 16,
            label: "Albiorix",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [16, 16, 16],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "albiorix/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          alvaldi: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Alvaldi",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "alvaldi/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          angrboda: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "Angrboda",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "angrboda/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          anthe: {
            groups: ["saturn", "moons", "minor", "alkyonides"],
            radius: 0.9,
            label: "Anthe",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [0.9, 0.9, 0.9],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "anthe/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          atlas: {
            groups: ["saturn", "moons", "minor", "ring shepherd"],
            radius: 15.1,
            label: "Atlas",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [15.1, 15.1, 15.1],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "atlas/saturn/orb" },
              { type: "dynamo", url: "atlas/ori" },
            ],
          },
          bebhionn: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 3,
            label: "Bebhionn",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "bebhionn/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          beli: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "Beli",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "beli/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          bergelmir: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Bergelmir",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "bergelmir/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          bestla: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3.5,
            label: "Bestla",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3.5, 3.5, 3.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "bestla/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          calypso: {
            groups: ["saturn", "moons", "minor", "trojan"],
            radius: 10.7,
            label: "Calypso",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [10.7, 10.7, 10.7],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "calypso/saturn/orb" },
              { type: "dynamo", url: "calypso/ori" },
            ],
          },
          daphnis: {
            groups: ["saturn", "moons", "minor", "ring shepherd"],
            radius: 3.8,
            label: "Daphnis",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3.8, 3.8, 3.8],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "daphnis/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          eggther: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Eggther",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "eggther/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          epimetheus: {
            groups: ["saturn", "moons", "minor", "co-orbital"],
            radius: 58.1,
            label: "Epimetheus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [58.1, 58.1, 58.1],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "epimetheus/saturn/orb" },
              { type: "dynamo", url: "epimetheus/ori" },
            ],
          },
          erriapus: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 5,
            label: "Erriapus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [5, 5, 5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "erriapus/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          farbauti: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "Farbauti",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "farbauti/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          fenrir: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Fenrir",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "fenrir/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          fornjot: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Fornjot",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "fornjot/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          geirrod: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Geirrod",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "geirrod/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          gerd: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Gerd",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "gerd/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          greip: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Greip",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "greip/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          gridr: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Gridr",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "gridr/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          gunnlod: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Gunnlod",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "gunnlod/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          hati: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Hati",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "hati/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          helene: {
            groups: ["saturn", "moons", "minor", "trojan"],
            radius: 17.6,
            label: "Helene",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [17.6, 17.6, 17.6],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "helene/saturn/orb" },
              { type: "dynamo", url: "helene/ori" },
            ],
          },
          hyrrokkin: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Hyrrokkin",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "hyrrokkin/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          ijiraq: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 6,
            label: "Ijiraq",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [6, 6, 6],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "ijiraq/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          janus: {
            groups: ["saturn", "moons", "minor", "co-orbital"],
            radius: 89.5,
            label: "Janus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [89.5, 89.5, 89.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "janus/saturn/orb" },
              { type: "dynamo", url: "janus/ori" },
            ],
          },
          jarnsaxa: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Jarnsaxa",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "jarnsaxa/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kari: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Kari",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "kari/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          kiviuq: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 8,
            label: "Kiviuq",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [8, 8, 8],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "kiviuq/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          loge: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Loge",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "loge/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          methone: {
            groups: ["saturn", "moons", "minor", "alkyonides"],
            radius: 1.6,
            label: "Methone",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.6, 1.6, 1.6],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "methone/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          mundilfari: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3.5,
            label: "Mundilfari",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [3.5, 3.5, 3.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "mundilfari/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          narvi: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3.5,
            label: "Narvi",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3.5, 3.5, 3.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "narvi/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          paaliaq: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 11,
            label: "Paaliaq",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [11, 11, 11],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "paaliaq/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          pallene: {
            groups: ["saturn", "moons", "minor", "alkyonides"],
            radius: 2.5,
            label: "Pallene",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "pallene/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          pan: {
            groups: ["saturn", "moons", "minor", "ring shepherd"],
            radius: 14.1,
            label: "Pan",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [14.1, 14.1, 14.1],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "pan/saturn/orb" },
              { type: "dynamo", url: "pan/ori" },
            ],
          },
          pandora: {
            groups: ["saturn", "moons", "minor", "ring shepherd"],
            radius: 40.7,
            label: "Pandora",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [40.7, 40.7, 40.7],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "pandora/saturn/orb" },
              { type: "dynamo", url: "pandora/ori" },
            ],
          },
          phoebe: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 106.5,
            label: "Phoebe",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: { url: "$STATIC_ASSETS_URL/models/phoebe/phoebe.gltf" },
            controllers: [
              { type: "dynamo", url: "phoebe/saturn/orb" },
              { type: "dynamo", url: "phoebe/ori" },
            ],
          },
          polydeuces: {
            groups: ["saturn", "moons", "minor", "trojan"],
            radius: 1.3,
            label: "Polydeuces",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.3, 1.3, 1.3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "polydeuces/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          prometheus: {
            groups: ["saturn", "moons", "minor", "ring shepherd"],
            radius: 43.1,
            label: "Prometheus",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [43.1, 43.1, 43.1],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "prometheus/saturn/orb" },
              { type: "dynamo", url: "prometheus/ori" },
            ],
          },
          s_2004_s_7: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "S/2004 S 7",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_7/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_12: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "S/2004 S 12",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_12/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_13: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "S/2004 S 13",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_13/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_17: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 17",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_17/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_21: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 21",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_21/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_24: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 1.5,
            label: "S/2004 S 24",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_24/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_28: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 28",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_28/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_31: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2,
            label: "S/2004 S 31",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_31/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_36: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 36",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_36/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_37: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 37",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_37/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_39: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 39",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_39/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_1: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "S/2006 S 1",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_1/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_3: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "S/2006 S 3",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_3/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_2: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "S/2007 S 2",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_2/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_3: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "S/2007 S 3",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_3/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2009_s_1: {
            groups: ["saturn", "moons", "propeller moonlet"],
            radius: 0.15,
            label: "S/2009 S 1",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 0.15,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(
                n.OrbitalElementsController,
                void 0,
                t.getControllerByClass(n.FixedController),
              ),
                s = new n.OrbitalElements();
              (s.epoch = 0),
                (s.eccentricity = 0),
                (s.semiMajorAxis = 117e3),
                (s.meanAngularMotion = 0.00015472777),
                (s.meanAnomalyAtEpoch = -1.5),
                s.orbitOrientation.set(
                  -0.9397445462795919,
                  0.02005900203250964,
                  -0.052689008288728606,
                  -0.33719681579275607,
                ),
                e.addOrbitalElements(-1e100, s),
                e.addOrbitalElements(1e100, s);
            },
          },
          s_2019_s_1: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 3,
            label: "S/2019 S 1",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 3,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_1/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          saturn_lviii: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Saturn LVIII",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "saturn_lviii/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          saturn_lx: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2,
            label: "Saturn LX",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "saturn_lx/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          saturn_lxiv: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "Saturn LXIV",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 1.5,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "saturn_lxiv/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          siarnaq: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 20,
            label: "Siarnaq",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [20, 20, 20],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "siarnaq/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          skathi: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 4,
            label: "Skathi",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [4, 4, 4],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "skathi/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          skoll: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Skoll",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "skoll/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          skrymir: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Skrymir",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "skrymir/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          surtur: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3,
            label: "Surtur",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "surtur/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          suttungr: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3.5,
            label: "Suttungr",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [3.5, 3.5, 3.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "suttungr/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          tarqeq: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 3,
            label: "Tarqeq",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3, 3, 3],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "tarqeq/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          tarvos: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 7.5,
            label: "Tarvos",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [7.5, 7.5, 7.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "tarvos/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          telesto: {
            groups: ["saturn", "moons", "minor", "trojan"],
            radius: 12.4,
            label: "Telesto",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [12.4, 12.4, 12.4],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "telesto/saturn/orb" },
              { type: "dynamo", url: "telesto/ori" },
            ],
          },
          thiazzi: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "Thiazzi",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: 2,
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "thiazzi/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          thrymr: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 3.5,
            label: "Thrymr",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [3.5, 3.5, 3.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "thrymr/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          ymir: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 9,
            label: "Ymir",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: void 0, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [9, 9, 9],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "ymir/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_40: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 40",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 66061440, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_40/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_41: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 41",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 79022304, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_41/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_42: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 42",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 79998624, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_42/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_43: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 43",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 84678912, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_43/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_44: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "S/2004 S 44",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 88660224, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_44/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_45: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 45",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 89743680, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_45/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_46: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 46",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 95694912, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_46/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_47: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 47",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 65879136, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_47/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_48: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 48",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 107343360, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_48/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_49: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 49",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 109231200, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_49/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_50: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 50",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 108902016, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_50/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_51: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 51",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 131278752, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_51/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_52: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2004 S 52",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 141175872, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_52/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2004_s_53: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2004 S 53",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 115986816, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2004_s_53/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2005_s_4: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2.5,
            label: "S/2005 S 4",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 38899008, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2005_s_4/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2005_s_5: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2005 S 5",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 101763648, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2005_s_5/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_10: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2006 S 10",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 84943296, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_10/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_11: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2006 S 11",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 90052992, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_11/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_12: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 2,
            label: "S/2006 S 12",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 89428320, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_12/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_13: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2006 S 13",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 91638432, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_13/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_14: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2006 S 14",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 99591552, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_14/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_15: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2006 S 15",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 104886144, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_15/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_16: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2006 S 16",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 104329728, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_16/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_17: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2006 S 17",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 109259712, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_17/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_18: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2006 S 18",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 112181760, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_18/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_19: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2006 S 19",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 120038112, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_19/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_20: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2.5,
            label: "S/2006 S 20",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 49012128, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2.5, 2.5, 2.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_20/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2006_s_9: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2006 S 9",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 55977696, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2006_s_9/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_5: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2007 S 5",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 64530432, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_5/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_6: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2007 S 6",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 82036800, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_6/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_7: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2007 S 7",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 65170656, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_7/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_8: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 2,
            label: "S/2007 S 8",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 72308160, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_8/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2007_s_9: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2007 S 9",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 93145248, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2007_s_9/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_10: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 10",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 97030656, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_10/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_11: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 11",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 96336e3, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_11/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_12: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 12",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 98396640, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_12/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_13: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 13",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 98921088, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_13/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_14: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2,
            label: "S/2019 S 14",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 77167296, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_14/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_15: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 15",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 100357056, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_15/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_16: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 16",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 115877088, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_16/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_17: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 17",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 111576096, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_17/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_18: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 18",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 114657984, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_18/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_19: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 19",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 113879520, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_19/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_2: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 2",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 69104448, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_2/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_20: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 20",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 118838880, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_20/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_21: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 21",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 141378048, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_21/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_3: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 3",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 72380736, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_3/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_4: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 4",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 78128064, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_4/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_5: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2019 S 5",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 85568832, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_5/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_6: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2,
            label: "S/2019 S 6",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 79202880, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_6/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_7: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 7",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 93337056, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_7/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_8: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 8",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 94061952, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_8/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2019_s_9: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2019 S 9",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 94444704, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2019_s_9/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_1: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 2,
            label: "S/2020 S 1",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 38975040, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_1/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_10: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2020 S 10",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 131951808, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_10/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_2: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2020 S 2",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 77552640, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_2/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_3: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 1.5,
            label: "S/2020 S 3",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 78450336, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_3/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_4: {
            groups: ["saturn", "moons", "minor", "gallic"],
            radius: 1.5,
            label: "S/2020 S 4",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 80085888, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_4/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_5: {
            groups: ["saturn", "moons", "minor", "inuit"],
            radius: 1.5,
            label: "S/2020 S 5",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 80687232, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_5/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_6: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2020 S 6",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 100989504, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_6/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_7: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2020 S 7",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 74450880, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_7/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_8: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 1.5,
            label: "S/2020 S 8",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 106109568, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [1.5, 1.5, 1.5],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_8/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          s_2020_s_9: {
            groups: ["saturn", "moons", "minor", "norse"],
            radius: 2,
            label: "S/2020 S 9",
            parents: [[Number.NEGATIVE_INFINITY, "saturn"]],
            trail: { length: 132621408, color: [0.72, 0.65, 0.52, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [2, 2, 2],
              shadowEntities: ["saturn"],
            },
            controllers: [
              { type: "dynamo", url: "s_2020_s_9/saturn/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s(532).Entity.register({
            ariel: {
              groups: ["uranus", "moons", "major"],
              radius: 578.9,
              label: "Ariel",
              parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
              trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
              spheroid: {
                equatorialRadius: 578.9,
                polarRadius: 578.9,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "ariel/color_$SIZE_$FACE.png",
                    sizes: [4, 512],
                  },
                },
                shadowEntities: ["uranus"],
              },
              controllers: [
                { type: "dynamo", url: "ariel/uranus/orb" },
                { type: "dynamo", url: "ariel/ori" },
              ],
            },
            miranda: {
              groups: ["uranus", "moons", "major"],
              radius: 235.8,
              label: "Miranda",
              parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
              trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
              spheroid: {
                equatorialRadius: 235.8,
                polarRadius: 235.8,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "miranda/color_$SIZE_$FACE.png",
                    sizes: [4, 256],
                  },
                },
                shadowEntities: ["uranus"],
              },
              controllers: [
                { type: "dynamo", url: "miranda/uranus/orb" },
                { type: "dynamo", url: "miranda/ori" },
              ],
            },
            oberon: {
              groups: ["uranus", "moons", "major"],
              radius: 761.4,
              label: "Oberon",
              parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
              trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
              spheroid: {
                equatorialRadius: 761.4,
                polarRadius: 761.4,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "oberon/color_$SIZE_$FACE.png",
                    sizes: [4, 512],
                  },
                },
                shadowEntities: ["uranus"],
              },
              controllers: [
                { type: "dynamo", url: "oberon/uranus/orb" },
                { type: "dynamo", url: "oberon/ori" },
              ],
            },
            titania: {
              groups: ["uranus", "moons", "major"],
              radius: 788.4,
              label: "Titania",
              parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
              trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
              spheroid: {
                equatorialRadius: 788.4,
                polarRadius: 788.4,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "titania/color_$SIZE_$FACE.png",
                    sizes: [4, 512],
                  },
                },
                shadowEntities: ["uranus"],
              },
              controllers: [
                { type: "dynamo", url: "titania/uranus/orb" },
                { type: "dynamo", url: "titania/ori" },
              ],
            },
            umbriel: {
              groups: ["uranus", "moons", "major"],
              radius: 584.7,
              label: "Umbriel",
              parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
              trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
              spheroid: {
                equatorialRadius: 584.7,
                polarRadius: 584.7,
                planetographic: !1,
              },
              spheroidLOD: {
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "umbriel/color_$SIZE_$FACE.png",
                    sizes: [4, 256],
                  },
                },
                shadowEntities: ["uranus"],
              },
              controllers: [
                { type: "dynamo", url: "umbriel/uranus/orb" },
                { type: "dynamo", url: "umbriel/ori" },
              ],
            },
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          belinda: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 45,
            label: "Belinda",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [45, 45, 45],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "belinda/uranus/orb" },
              { type: "dynamo", url: "belinda/ori" },
            ],
          },
          bianca: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 25.7,
            label: "Bianca",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [25.7, 25.7, 25.7],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "bianca/uranus/orb" },
              { type: "dynamo", url: "bianca/ori" },
            ],
          },
          caliban: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 36,
            label: "Caliban",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [36, 36, 36],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "caliban/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          cordelia: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 20.1,
            label: "Cordelia",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [20.1, 20.1, 20.1],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "cordelia/uranus/orb" },
              { type: "dynamo", url: "cordelia/ori" },
            ],
          },
          cressida: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 39.8,
            label: "Cressida",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [39.8, 39.8, 39.8],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "cressida/uranus/orb" },
              { type: "dynamo", url: "cressida/ori" },
            ],
          },
          cupid: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 9,
            label: "Cupid",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [9, 9, 9],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "cupid/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          desdemona: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 32,
            label: "Desdemona",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [32, 32, 32],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "desdemona/uranus/orb" },
              { type: "dynamo", url: "desdemona/ori" },
            ],
          },
          ferdinand: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 10,
            label: "Ferdinand",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [10, 10, 10],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "ferdinand/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          francisco: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 11,
            label: "Francisco",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [11, 11, 11],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "francisco/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          juliet: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 46.8,
            label: "Juliet",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [46.8, 46.8, 46.8],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "juliet/uranus/orb" },
              { type: "dynamo", url: "juliet/ori" },
            ],
          },
          mab: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 12.5,
            label: "Mab",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [12.5, 12.5, 12.5],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "mab/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          margaret: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 10,
            label: "Margaret",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [10, 10, 10],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "margaret/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          ophelia: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 22.4,
            label: "Ophelia",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [22.4, 22.4, 22.4],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "ophelia/uranus/orb" },
              { type: "dynamo", url: "ophelia/ori" },
            ],
          },
          perdita: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 15,
            label: "Perdita",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [15, 15, 15],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "perdita/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          portia: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 67.6,
            label: "Portia",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [67.6, 67.6, 67.6],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "portia/uranus/orb" },
              { type: "dynamo", url: "portia/ori" },
            ],
          },
          prospero: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 25,
            label: "Prospero",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [25, 25, 25],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "prospero/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          puck: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 81,
            label: "Puck",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [81, 81, 81],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "puck/uranus/orb" },
              { type: "dynamo", url: "puck/ori" },
            ],
          },
          rosalind: {
            groups: ["uranus", "moons", "minor", "inner"],
            radius: 36,
            label: "Rosalind",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [36, 36, 36],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "rosalind/uranus/orb" },
              { type: "dynamo", url: "rosalind/ori" },
            ],
          },
          setebos: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 24,
            label: "Setebos",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [24, 24, 24],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "setebos/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          stephano: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 16,
            label: "Stephano",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_2/generic_asteroid_2.gltf",
              scale: [16, 16, 16],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "stephano/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sycorax: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 82,
            label: "Sycorax",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_3/generic_asteroid_3.gltf",
              scale: [82, 82, 82],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "sycorax/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          trinculo: {
            groups: ["uranus", "moons", "minor", "irregular"],
            radius: 9,
            label: "Trinculo",
            parents: [[Number.NEGATIVE_INFINITY, "uranus"]],
            trail: { length: void 0, color: [0.67, 0.92, 1, 0.7] },
            model: {
              url: "$STATIC_ASSETS_URL/models/generic/asteroid_1/generic_asteroid_1.gltf",
              scale: [9, 9, 9],
              shadowEntities: ["uranus"],
            },
            controllers: [
              { type: "dynamo", url: "trinculo/uranus/orb" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(646),
          o = s(5);
        i.Entity.register({
          sc_3d_winds: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.002,
            extentsRadius: 0.0025,
            label: "3D-Winds",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5573 },
            controllers: [{ type: "dynamo", url: "sc_3d_winds" }],
          },
          sc_ace: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 8e-4,
            extentsRadius: 0.0023,
            label: "ACE",
            parents: [
              [265550465.18489534, "earth"],
              [694267269.1839212, ""],
            ],
            trail: { length: 31715490 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ace/ace.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_ace", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxisNeg, periodInHours: 0.0033 },
            ],
          },
          sc_acrimsat: {
            groups: ["earth", "spacecraft"],
            radius: 0.0015,
            label: "ACRIMSAT",
            parents: [
              [-963797, "earth"],
              [459950467, ""],
            ],
            trail: { length: 5933.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_acrimsat/acrimsat.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_acrimsat" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              {
                type: "spin",
                axis: o.Vector3.YAxisNeg,
                periodInHours: 0.00238,
              },
            ],
          },
          sc_aim: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 7e-4,
            extentsRadius: 0.0014,
            label: "AIM",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5788.83 },
            controllers: [{ type: "dynamo", url: "sc_aim" }],
          },
          sc_aqua: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.004,
            extentsRadius: 0.015,
            label: "Aqua",
            parents: [[73781738, "earth"]],
            trail: { length: 5933.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_aqua/Aqua.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_aqua" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_aqua",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_ascends: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "ASCENDS",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5573 },
            controllers: [{ type: "dynamo", url: "sc_ascends" }],
          },
          sc_aura: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00345,
            extentsRadius: 0.017,
            label: "Aura",
            parents: [[143161358, "earth"]],
            trail: { length: 5933.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_aura/Aura.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_aura" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_aura",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_c_nofs: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "C/NOFS",
            parents: [
              [352800006.1854904, "earth"],
              [502051928.18300515, ""],
            ],
            trail: { length: 5573 },
            controllers: [{ type: "dynamo", url: "sc_c_nofs" }],
          },
          sc_calipso: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00165,
            extentsRadius: 0.005,
            label: "CALIPSO",
            parents: [[199506047, "earth"]],
            trail: { length: 5933 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_calipso/calipso.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_calipso" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_calipso",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_chandra: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0059,
            extentsRadius: 0.01,
            label: "Chandra",
            parents: [
              [339465600, "earth"],
              [709344e3, ""],
            ],
            trail: { length: 228505.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_chandra/chandra.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_chandra/earth/all",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: new o.Vector3(-0.70710678118, -0.70710678118, 0),
                },
              },
            ],
          },
          sc_clarreo: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "CLARREO",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5573 },
            controllers: [{ type: "dynamo", url: "sc_clarreo" }],
          },
          sc_cloudsat: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0025,
            extentsRadius: 0.0025,
            label: "CloudSat",
            parents: [[199491286, "earth"]],
            trail: { length: 5933.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cloudsat/CloudSat.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cloudsat" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cloudsat",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_cluster_ii_fm5: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00145,
            extentsRadius: 0.00435,
            label: "Rumba",
            parents: [[19105314, "earth"]],
            trail: { length: 195541.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cluster_ii/cluster_ii.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cluster_ii_fm5" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cluster_ii_fm5",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_cluster_ii_fm6: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00145,
            extentsRadius: 0.00435,
            label: "Salsa",
            parents: [[17028089, "earth"]],
            trail: { length: 195351 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cluster_ii/cluster_ii.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cluster_ii_fm6" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cluster_ii_fm6",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_cluster_ii_fm7: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00145,
            extentsRadius: 0.00435,
            label: "Samba",
            parents: [[17028093, "earth"]],
            trail: { length: 195316 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cluster_ii/cluster_ii.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cluster_ii_fm7" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cluster_ii_fm7",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_cluster_ii_fm8: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00145,
            extentsRadius: 0.00435,
            label: "Tango",
            parents: [[19105052, "earth"]],
            trail: { length: 195388 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cluster_ii/cluster_ii.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cluster_ii_fm8" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cluster_ii_fm8",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_cygnss_1: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 1",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_1" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_1",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_2: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 2",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_2",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_3: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 3",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_3" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_3",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_4: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 4",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_4" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_4",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_5: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 5",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_5" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_5",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_6: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 6",
            parents: [
              [548415404.1851876, "earth"],
              [722736069, ""],
            ],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_6" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_6",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_7: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 7",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_7" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_7",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_cygnss_8: {
            groups: ["earth", "spacecraft"],
            radius: 8e-4,
            label: "CYGNSS 8",
            parents: [[548415404.1851876, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cygnss/CYGNSS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_cygnss_8" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_cygnss_8",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_dscovr: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 9e-4,
            extentsRadius: 0.002,
            label: "DSCOVR",
            parents: [[476711467.18497694, "earth"]],
            trail: { length: 31536e3 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_dscovr/dscovr.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_dscovr/earth/all", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_dscovr",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_eo_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.001,
            label: "EO-1",
            parents: [
              [344589947.18311954, "earth"],
              [544104069.186, ""],
            ],
            trail: { length: 5933.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_eo_1/eo-1.gltf",
              rotate: [{ y: 45 }],
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_eo_1" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_eo_1",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_explorer_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.001,
            extentsRadius: 0.001,
            label: "Explorer 1",
            parents: [
              [-1322726967, "earth"],
              [-939025103, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_explorer_1_v2/explorer_1.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_explorer_1/earth" },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_explorer_1",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxisNeg, periodInHours: 22e-6 },
            ],
          },
          sc_face: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "FACE",
            parents: [
              [347025366.1839032, "earth"],
              [631022168.1838934, ""],
            ],
            trail: { length: 5933.33 },
            controllers: [{ type: "dynamo", url: "sc_face" }],
          },
          sc_fgrst: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0014,
            extentsRadius: 0.004,
            label: "FGRST",
            parents: [
              [344589947.18311954, "earth"],
              [661006268.1833516, ""],
            ],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_fgrst" }],
          },
          sc_gacm: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "GACM",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_gacm" }],
          },
          sc_galex: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.001,
            extentsRadius: 0.0014,
            label: "GALEX",
            parents: [
              [352800006.1854904, "earth"],
              [425718607.184, ""],
            ],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_galex" }],
          },
          sc_geo_cape: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "GEO-CAPE",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_geo_cape" }],
          },
          sc_geotail: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0018,
            extentsRadius: 0.003,
            label: "Geotail",
            parents: [
              [-234758765, "earth"],
              [722891591, ""],
            ],
            trail: { length: 450372 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_geotail/geotail.gltf",
              shadowEntities: ["earth"],
            },
            controllers: [
              { type: "dynamo", url: "sc_geotail/earth/orb" },
              {
                type: "fixed",
                orientation: new o.Quaternion(0.662, 0.749, 0, 0),
              },
              {
                type: "spin",
                axis: o.Vector3.YAxis,
                periodInHours: 0.00083333333,
                relativeToTime: 0,
              },
            ],
          },
          sc_goes_12: {
            groups: ["earth", "spacecraft"],
            radius: 0.003,
            label: "GOES 12",
            parents: [
              [344589947.18311954, "earth"],
              [661006268.1833516, ""],
            ],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_goes_12" }],
          },
          sc_goes_13: {
            groups: ["earth", "spacecraft"],
            radius: 0.003,
            label: "GOES 13",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_goes_13" }],
          },
          sc_goes_14: {
            groups: ["earth", "spacecraft"],
            radius: 0.003,
            label: "GOES 14",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_goes_14" }],
          },
          sc_goes_15: {
            groups: ["earth", "spacecraft"],
            radius: 0.003,
            label: "GOES 15",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5733 },
            controllers: [{ type: "dynamo", url: "sc_goes_15" }],
          },
          sc_gpm: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.002,
            extentsRadius: 0.007,
            label: "GPM",
            parents: [[629484755.7856493, "earth"]],
            trail: { length: 5549.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_gpm/GPM.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_gpm" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_gpm",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(o.SpinController);
              e.setJoint("GPM_antenna"),
                e.setRate(o.MathUtils.degToRad(192)),
                e.setAxis(o.Vector3.YAxisNeg, !0),
                e.setClampedToRealTime(!0);
            },
          },
          sc_grace_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.0019,
            label: "GRACE-1",
            parents: [
              [69656411.096817, "earth"],
              [562382552.2587994, ""],
            ],
            trail: { length: 5575 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grace/grace.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_grace_1/earth/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sc_grace_2",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY],
                update: (t) => {
                  const e = t.getComponent("microwave"),
                    s = t.getScene().getEngine(),
                    i = o.MathUtils.wrap(
                      e.getTextureYOffset() -
                      o.MathUtils.clamp(s.getTimeRate(), -1, 1) *
                      s.getDeltaTime(),
                      0,
                      1,
                    );
                  e.setTextureYOffset(i);
                  const n = t.getScene().getEntity("sc_grace_2"),
                    r =
                      null !== n &&
                      n.getPosition().distance(t.getPosition()) <= 3929;
                  r !== e.isEnabled() && e.setEnabled(r);
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(
                o.ConnectedSpriteComponent,
                "microwave",
              );
              e.setTextureUrl("$STATIC_ASSETS_URL/sprites/sine_wave.png"),
                e.setEntity1("sc_grace_1"),
                e.setEntity1Offset(new o.Vector3(0, -0.00165, 0)),
                e.setEntity2("sc_grace_2"),
                e.setEntity2Offset(new o.Vector3(0, -0.00165, 0)),
                e.setWidths(5e-4, 5e-4),
                e.setColorMultiplier(new o.Color(0.5, 1, 1)),
                e.setTextureRepeat(!0),
                e.setTextureStretch(4);
            },
          },
          sc_grace_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.0019,
            label: "GRACE-2",
            parents: [
              [69656411.096817, "earth"],
              [562382552.2588, ""],
            ],
            trail: { length: 5575 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grace/grace.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_grace_2/earth/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sc_grace_1",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_grace_fo1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.0019,
            label: "GRACE-FO 1",
            parents: [[580290547.185, "earth"]],
            trail: { length: 5575 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grace_fo/graceFO.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_grace_fo1" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sc_grace_fo2",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY],
                update: (t) => {
                  const e = t.getComponent("microwave"),
                    s = t.getScene().getEngine(),
                    i = o.MathUtils.wrap(
                      e.getTextureYOffset() -
                      o.MathUtils.clamp(s.getTimeRate(), -1, 1) *
                      s.getDeltaTime(),
                      0,
                      1,
                    );
                  e.setTextureYOffset(i);
                  const n = t.getScene().getEntity("sc_grace_fo2"),
                    r =
                      null !== n &&
                      n.getPosition().distance(t.getPosition()) <= 3929;
                  if (r !== e.isEnabled()) {
                    const s = t.getComponent("laser1"),
                      i = t.getComponent("laser2");
                    e.setEnabled(r), s.setEnabled(r), i.setEnabled(r);
                  }
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(
                o.ConnectedSpriteComponent,
                "microwave",
              );
              e.setTextureUrl("$STATIC_ASSETS_URL/sprites/sine_wave.png"),
                e.setEntity1("sc_grace_fo1"),
                e.setEntity1Offset(new o.Vector3(0, 0, -0.00165)),
                e.setEntity2("sc_grace_fo2"),
                e.setEntity2Offset(new o.Vector3(0, 0, -0.00165)),
                e.setWidths(5e-4, 5e-4),
                e.setColorMultiplier(new o.Color(0.5, 1, 1)),
                e.setTextureRepeat(!0),
                e.setTextureStretch(4);
              const s = t.addComponentByClass(
                o.ConnectedSpriteComponent,
                "laser1",
              );
              s.setTextureUrl("$STATIC_ASSETS_URL/sprites/line.png"),
                s.setEntity1("sc_grace_fo1"),
                s.setEntity1Offset(new o.Vector3(3e-4, 15e-5, -0.00165)),
                s.setEntity2("sc_grace_fo2"),
                s.setEntity2Offset(new o.Vector3(-3e-4, 15e-5, -0.00165)),
                s.setWidths(2e-5, 2e-5),
                s.setColorMultiplier(new o.Color(1, 0.24, 0.64)),
                s.setTextureRepeat(!1);
              const i = t.addComponentByClass(
                o.ConnectedSpriteComponent,
                "laser2",
              );
              i.setTextureUrl("$STATIC_ASSETS_URL/sprites/line.png"),
                i.setEntity1("sc_grace_fo1"),
                i.setEntity1Offset(new o.Vector3(-3e-4, 15e-5, -0.00165)),
                i.setEntity2("sc_grace_fo2"),
                i.setEntity2Offset(new o.Vector3(3e-4, 15e-5, -0.00165)),
                i.setWidths(2e-5, 2e-5),
                i.setColorMultiplier(new o.Color(1, 0.24, 0.64)),
                i.setTextureRepeat(!1);
            },
          },
          sc_grace_fo2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.0019,
            label: "GRACE-FO 2",
            parents: [[580290547.185, "earth"]],
            trail: { length: 5575 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grace_fo/graceFO.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_grace_fo2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sc_grace_fo1",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_grifex: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 15e-5,
            extentsRadius: 34e-5,
            label: "GRIFEX",
            parents: [[476542806.1849232, "earth"]],
            trail: { length: 5706.25 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grifex/grifex.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_grifex" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_grifex",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_hubble_space_telescope: {
            groups: ["earth", "spacecraft", "telescope"],
            occlusionRadius: 0.0066,
            extentsRadius: 0.0066,
            label: "Hubble",
            parents: [[-305719099.92837775, "earth"]],
            trail: { length: 5748.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_hubble/Hubble.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_hubble_space_telescope/earth/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_hubble_space_telescope",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_hyspiri: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.004,
            extentsRadius: 0.012,
            label: "HyspIRI",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5733 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_hyspiri/HyspIRI.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_hyspiri" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_hyspiri",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_ibex: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 5e-4,
            extentsRadius: 0.001,
            label: "IBEX",
            parents: [[277718464.1823969, "earth"]],
            trail: { length: 797489.16 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ibex/iBEX.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_ibex", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxis, periodInHours: 0.00416 },
            ],
          },
          sc_icesat_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00198,
            extentsRadius: 0.0065,
            label: "ICESat-2",
            parents: [[590288589.182, "earth"]],
            trail: { length: 5653.2 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_icesatii/ICESat2.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_icesat_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_icesat_2",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_image: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00113,
            extentsRadius: 0.006,
            label: "IMAGE",
            parents: [
              [7288547.186, "earth"],
              [188163587.1835355, ""],
            ],
            trail: { length: 55541 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_image/image.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_image" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_image",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_integral: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0025,
            extentsRadius: 0.005,
            label: "INTEGRAL",
            parents: [[367498866.18276465, "earth"]],
            trail: { length: 229689 },
            controllers: [{ type: "dynamo", url: "sc_integral" }],
          },
          sc_ipex: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 1e-4,
            extentsRadius: 15e-5,
            label: "IPEX",
            parents: [[439586087.183, "earth"]],
            trail: { length: 5862 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ipex/IPEX.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_ipex" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_ipex",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_isas: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.001,
            extentsRadius: 0.0015,
            label: "ISAS",
            parents: [
              [-186102945.06492478, "earth"],
              [-183424845.06434903, ""],
            ],
            trail: { length: 92680.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_isas/isas.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_isas", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_isas",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_iss: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.008,
            extentsRadius: 0.072,
            label: "ISS",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_iss/ISS_stationary.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_iss" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_iss",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = new o.Vector3(0, 0.5, 0.5 * Math.sqrt(3)),
                s = new o.Vector3(0, 0.5 * Math.sqrt(3), -0.5),
                i = new o.Vector3(0, 0.5, 0.5 * Math.sqrt(3));
              let r = t.addControllerByClass(o.AlignController);
              r.setJoint("20_P4_Truss"),
                r.setPrimaryAxis(o.Vector3.XAxis),
                r.setSecondaryAxis(e),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("23_S4_Truss"),
                r.setPrimaryAxis(o.Vector3.XAxis),
                r.setSecondaryAxis(e),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("20_P4_Truss_01"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("20_P4_Truss_02"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("23_S4_Truss_01"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("23_S4_Truss_02"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("32_S6_Truss_01"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("32_S6_Truss_02"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("08_P6_Truss_01"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun"),
                (r = t.addControllerByClass(o.AlignController)),
                r.setJoint("08_P6_Truss_02"),
                r.setPrimaryAxis(s),
                r.setSecondaryAxis(i),
                r.setSecondaryAlignType("point"),
                r.setSecondaryTargetEntity("sun");
              const a = t.addControllerByClass(o.SpinController);
              a.setJoint("RapidScat_dish"),
                a.setRate(o.MathUtils.degToRad(108)),
                a.setAxis(o.Vector3.ZAxis, !0),
                a.setClampedToRealTime(!0),
                a.setCoverage(new o.Interval(465418867.184, 524890952.183)),
                n.EntityUtils.showSubObjectDuringInterval(
                  t,
                  "Ecostress",
                  584127348,
                  Number.POSITIVE_INFINITY,
                ),
                n.EntityUtils.showSubObjectDuringInterval(
                  t,
                  "EMIT",
                  711345507,
                  Number.POSITIVE_INFINITY,
                ),
                n.EntityUtils.showSubObjectDuringInterval(
                  t,
                  "OCO3",
                  610718469,
                  Number.POSITIVE_INFINITY,
                ),
                n.EntityUtils.showSubObjectDuringInterval(
                  t,
                  "45_RapidScat",
                  465418867.184,
                  575406069.184,
                );
            },
          },
          sc_iss_ecostress: {
            groups: ["instrument", "sc_iss"],
            occlusionRadius: 0.001,
            extentsRadius: 0.0012,
            label: "ECOSTRESS",
            parents: [[584127348, "sc_iss"]],
            controllers: [
              {
                type: "fixed",
                orientation: o.Quaternion.Identity,
                position: new o.Vector3(0.0200195, -0.00202631, 0.0161099),
                coverage: [584127348, Number.POSITIVE_INFINITY],
              },
            ],
            postCreateFunction: (t) => {
              t.addControllerByClass(
                o.RotateByEntityOrientationController,
              ).setCoverage(
                new o.Interval(584127348, Number.POSITIVE_INFINITY),
              );
            },
          },
          sc_iss_emit: {
            groups: ["instrument", "sc_iss"],
            occlusionRadius: 8e-4,
            extentsRadius: 0.0013,
            label: "EMIT",
            parents: [[711345507, "sc_iss"]],
            controllers: [
              {
                type: "fixed",
                orientation: o.Quaternion.Identity,
                position: new o.Vector3(0.024, -0.00225, 0.00325),
                coverage: [711345507, Number.POSITIVE_INFINITY],
              },
            ],
            postCreateFunction: (t) => {
              t.addControllerByClass(
                o.RotateByEntityOrientationController,
              ).setCoverage(
                new o.Interval(711345507, Number.POSITIVE_INFINITY),
              );
            },
          },
          sc_iss_oco_3: {
            groups: ["instrument", "sc_iss"],
            occlusionRadius: 8e-4,
            extentsRadius: 0.0012,
            label: "OCO-3",
            parents: [[610718469, "sc_iss"]],
            controllers: [
              {
                type: "fixed",
                orientation: o.Quaternion.Identity,
                position: new o.Vector3(0.0156458, -0.00195982, 0.0200232),
                coverage: [610718469, Number.POSITIVE_INFINITY],
              },
            ],
            postCreateFunction: (t) => {
              t.addControllerByClass(
                o.RotateByEntityOrientationController,
              ).setCoverage(
                new o.Interval(610718469, Number.POSITIVE_INFINITY),
              );
            },
          },
          sc_iss_rapidscat: {
            groups: ["instrument", "sc_iss"],
            occlusionRadius: 8e-4,
            extentsRadius: 2e-4,
            label: "RapidScat",
            parents: [
              [465418867.184, "sc_iss"],
              [575406069.184, ""],
            ],
            controllers: [
              {
                type: "fixed",
                orientation: o.Quaternion.Identity,
                position: new o.Vector3(-0.0100725, -0.00133401, 0.0162145),
                coverage: [465418867.184, 575406069.184],
              },
            ],
            postCreateFunction: (t) => {
              t.addControllerByClass(
                o.RotateByEntityOrientationController,
              ).setCoverage(new o.Interval(465418867.184, 575406069.184));
            },
          },
          sc_ixpe: {
            groups: ["earth", "spacecraft", "telescope"],
            occlusionRadius: 0.0055,
            extentsRadius: 0.0026,
            label: "IXPE",
            parents: [[692324766.6007013, "earth"]],
            trail: { length: 5400 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ixpe/ixpe.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_ixpe" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          sc_jason_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0014,
            extentsRadius: 0.004,
            label: "Jason-1",
            parents: [
              [352800006.1854904, "earth"],
              [458074266.1839004, ""],
            ],
            trail: { length: 6744.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ostm/ostm.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_jason_1", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_jason_1",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_jason_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0014,
            extentsRadius: 0.004,
            label: "OSTM/Jason-2",
            parents: [
              [344589947.18311954, "earth"],
              [623851269.182, ""],
            ],
            trail: { length: 6744.25 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ostm/ostm.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_jason_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_jason_2",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_jason_3: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0014,
            extentsRadius: 0.004,
            label: "Jason-3",
            parents: [[506497796.18443054, "earth"]],
            trail: { length: 6721 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ostm/ostm.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_jason_3" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_jason_3",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_jwst: {
            groups: ["earth", "spacecraft"],
            radius: 0.01,
            label: "James Webb Space Telescope",
            parents: [[693708549.184, "earth"]],
            trail: { length: 5900033.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_jwst/webb_deployed.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_jwst/earth/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "sun",
                  axis: o.Vector3.ZAxis,
                  targetAxis: o.Vector3.ZAxis,
                },
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, 694937889.184],
                enter: (t) => {
                  t.getComponentByClass(o.ModelComponent).setUrl(
                    "$STATIC_ASSETS_URL/models/sc_jwst/webb_stowed.gltf",
                  );
                },
                exit: (t) => {
                  t.getComponentByClass(o.ModelComponent).setUrl(
                    "$STATIC_ASSETS_URL/models/sc_jwst/webb_deployed.gltf",
                  );
                },
              },
            ],
          },
          sc_landsat_5: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "Landsat 5",
            parents: [
              [352800006.1854904, "earth"],
              [473889066.18410677, ""],
            ],
            trail: { length: 5933.33 },
            controllers: [{ type: "dynamo", url: "sc_landsat_5" }],
          },
          sc_landsat_7: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.004,
            extentsRadius: 0.012,
            label: "Landsat 7",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_landsat_7/LandSat7.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_landsat_7" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_landsat_7",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_landsat_8: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.004,
            extentsRadius: 0.0095,
            label: "Landsat 8",
            parents: [[413877787.185, "earth"]],
            trail: { length: 5933.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_landsat_8/LandSat8.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_landsat_8" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_landsat_8",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_landsat_9: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.004,
            extentsRadius: 0.015,
            label: "Landsat 9",
            parents: [[686043940.723348, "earth"]],
            trail: { length: 5933.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_landsat_9/Landsat9.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_landsat_9" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_landsat_9",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_list: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "LIST",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5933.33 },
            controllers: [{ type: "dynamo", url: "sc_list" }],
          },
          sc_m_cubed: {
            groups: ["earth", "spacecraft"],
            radius: 1e-4,
            label: "M-Cubed",
            parents: [[373032066.182, "earth"]],
            trail: { length: 5768.333333333333 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_m_cubed/mCubed.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_m_cubed" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_m_cubed",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_mcubed_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 1e-4,
            extentsRadius: 2e-4,
            label: "MCubed-2",
            parents: [[439560067.183, "earth"]],
            trail: { length: 5861 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mcubed_2/M-Cubed2.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mcubed_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_mcubed_2",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_mms_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0017,
            extentsRadius: 0.013,
            label: "MMS 1",
            parents: [[479519767.1855569, "earth"]],
            trail: { length: 85994 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mms/MMS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mms_1" },
              {
                type: "spin",
                axis: o.Vector3.YAxisNeg,
                periodInHours: 0.00556,
              },
            ],
          },
          sc_mms_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0017,
            extentsRadius: 0.013,
            label: "MMS 2",
            parents: [[479519767.1855569, "earth"]],
            trail: { length: 85962 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mms/MMS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mms_2" },
              {
                type: "spin",
                axis: o.Vector3.YAxisNeg,
                periodInHours: 0.00556,
              },
            ],
          },
          sc_mms_3: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0017,
            extentsRadius: 0.013,
            label: "MMS 3",
            parents: [[479519767.1855569, "earth"]],
            trail: { length: 86347 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mms/MMS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mms_3" },
              {
                type: "spin",
                axis: o.Vector3.YAxisNeg,
                periodInHours: 0.00556,
              },
            ],
          },
          sc_mms_4: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0017,
            extentsRadius: 0.013,
            label: "MMS 4",
            parents: [[479519767.1855569, "earth"]],
            trail: { length: 86024 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mms/MMS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mms_4" },
              {
                type: "spin",
                axis: o.Vector3.YAxisNeg,
                periodInHours: 0.00556,
              },
            ],
          },
          sc_nisar: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.006,
            extentsRadius: 0.017,
            label: "NISAR",
            parents: [[757339269, "earth"]],
            trail: { length: 5573 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_nisar/Nisar.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              {
                type: "orbitalElements",
                eccentricity: 0,
                semiMajorAxis: 7118,
                meanAngularMotion: 0.0011382582,
                meanAnomalyAtEpoch: 0,
                inclination: (Math.PI / 180) * 98.5,
                longitudeOfAscendingNode: 0,
                argumentOfPeriapsis: 0,
                coverage: [757339269, Number.POSITIVE_INFINITY],
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_nisar",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_noaa_14: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 14",
            parents: [
              [344589947.18311954, "earth"],
              [661006268.1833516, ""],
            ],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_14" }],
          },
          sc_noaa_15: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 15",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_15" }],
          },
          sc_noaa_16: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 16",
            parents: [
              [344589947.18311954, "earth"],
              [661006268.1833516, ""],
            ],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_16" }],
          },
          sc_noaa_17: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 17",
            parents: [
              [344589947.18311954, "earth"],
              [661006268.1833516, ""],
            ],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_17" }],
          },
          sc_noaa_18: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 18",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_18" }],
          },
          sc_noaa_19: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "NOAA 19",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_noaa_19" }],
          },
          sc_nustar: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.006,
            extentsRadius: 0.006,
            label: "NuSTAR",
            parents: [[392875303.185, "earth"]],
            trail: { length: 5798.66 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_nustar/nustar.gltf",
              shadowEntities: ["earth"],
            },
            controllers: [
              { type: "dynamo", url: "sc_nustar" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.XAxis,
                  target: "sun",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_oco_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0021,
            extentsRadius: 0.004,
            label: "OCO-2",
            parents: [[457567050.184, "earth"]],
            trail: { length: 5933.333333333333 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_oco_2/oco2.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_oco_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_path: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "PATH",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_path" }],
          },
          sc_polar: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0012,
            extentsRadius: 0.005,
            label: "Polar",
            parents: [
              [-121608237.81469652, "earth"],
              [262612565.1855274, ""],
            ],
            trail: { length: 66571 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_polar/polar.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_polar", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_polar",
                  axis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_quikscat: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0016,
            extentsRadius: 0.0018,
            label: "QuikSCAT",
            parents: [
              [344589947.18311954, "earth"],
              [591710469.182, ""],
            ],
            trail: { length: 6061.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_quikscat/QuikSCAT.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_quikscat" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_quikscat",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_race: {
            groups: ["earth", "spacecraft"],
            radius: 15e-5,
            label: "RACE",
            parents: [
              [467726467.182, "earth"],
              [467812867.182, ""],
            ],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_race" }],
          },
          sc_raincube: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 35e-5,
            extentsRadius: 5e-4,
            label: "RainCube",
            parents: [
              [608189026.1856545, "earth"],
              [662040069.184, ""],
            ],
            trail: { length: 5743 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_raincube/Raincube.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_raincube" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_raincube",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_rax_2: {
            groups: ["earth", "spacecraft"],
            radius: 2e-4,
            label: "RAX-2",
            parents: [
              [373067348.182, "earth"],
              [418824067.186, ""],
            ],
            trail: { length: 5743 },
            controllers: [{ type: "dynamo", url: "sc_rax_2" }],
          },
          sc_rbsp_a: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "Van Allen Probe A",
            parents: [
              [399585967.183, "earth"],
              [624628869.182, ""],
            ],
            trail: { length: 32214 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_rbsp/rbsp.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_rbsp_a" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_rbsp_a",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_rbsp_b: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "Van Allen Probe B",
            parents: [
              [399585967.183, "earth"],
              [616766469.184, ""],
            ],
            trail: { length: 32574 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_rbsp/rbsp.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_rbsp_b" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_rbsp_b",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_sac_d: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.0045,
            label: "Aquarius",
            parents: [
              [360987666.185, "earth"],
              [486907267.185, ""],
            ],
            trail: { length: 5884.25 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_sac_d/aquarius.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_sac_d" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.XAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_sac_d",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_sclp: {
            groups: ["earth", "spacecraft"],
            radius: 0.004,
            label: "SCLP",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_sclp" }],
          },
          sc_sdo: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0022,
            extentsRadius: 0.00315,
            label: "SDO",
            parents: [[505918808.18474686, "earth"]],
            trail: { length: 86137.66 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_sdo/sdo.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_sdo" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_sdo",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_sentinel_6: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0026,
            extentsRadius: 0.0031,
            label: "Sentinel-6 Michael Freilich",
            parents: [[659322339.7879795, "earth"]],
            trail: { length: 5933.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_sentinel_6/Sentinel6.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_sentinel_6" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_sentinel_6",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_smap: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.009,
            label: "SMAP",
            parents: [[476542806.1849232, "earth"]],
            trail: { length: 5906.8 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_smap/SMAP.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_smap" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_smap",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(o.SpinController);
              e.setJoint("arm_etc"),
                e.setRate(o.MathUtils.degToRad(87.6)),
                e.setAxis(o.Vector3.YAxis, !0),
                e.setClampedToRealTime(!0);
            },
          },
          sc_soho: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00215,
            extentsRadius: 0.00425,
            label: "SOHO",
            parents: [[265550465.18489534, "earth"]],
            trail: { length: 31536e3 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_soho/soho.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_soho", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_soho",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_sorce: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.001,
            extentsRadius: 0.0022,
            label: "SORCE",
            parents: [
              [344589947.18311954, "earth"],
              [635860869.185, ""],
            ],
            trail: { length: 5812.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_sorce/sorce.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_sorce" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_sorce",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_starling_1: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 23e-5,
            extentsRadius: 76e-5,
            label: "Starling-1",
            parents: [[Number.NEGATIVE_INFINITY, "earth"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_starling/starling.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_starling_1" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_starling_1",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_starling_2: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 23e-5,
            extentsRadius: 76e-5,
            label: "Starling-2",
            parents: [[Number.NEGATIVE_INFINITY, "earth"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_starling/starling.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_starling_2" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_starling_2",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_starling_3: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 23e-5,
            extentsRadius: 76e-5,
            label: "Starling-3",
            parents: [[Number.NEGATIVE_INFINITY, "earth"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_starling/starling.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_starling_3" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_starling_3",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_starling_4: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 23e-5,
            extentsRadius: 76e-5,
            label: "Starling-4",
            parents: [[Number.NEGATIVE_INFINITY, "earth"]],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_starling/starling.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_starling_4" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_starling_4",
                  axis: o.Vector3.XAxis,
                },
              },
            ],
          },
          sc_suomi_npp: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0022,
            extentsRadius: 0.008,
            label: "Suomi NPP",
            parents: [[373067348.01, "earth"]],
            trail: { length: 5798.66 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_npp/NPP.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_suomi_npp" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_suomi_npp",
                  axis: o.Vector3.YAxis,
                },
              },
            ],
          },
          sc_swift: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0028,
            extentsRadius: 0.0028,
            label: "Swift",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_swift" }],
          },
          sc_swot: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.005,
            extentsRadius: 0.009,
            label: "SWOT",
            parents: [[347025366.1839032, "earth"]],
            trail: { length: 5933 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_swot_v2/swot.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_swot" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_swot",
                  axis: o.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_tdrs_3: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 3",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86137.33 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_3" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_5: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 5",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86137.66 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_5" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_6: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 6",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86137.66 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_6" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_7: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 7",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86151 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_7" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_8: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 8",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86151.2 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_8" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_9: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 9",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86151 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_9" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_10: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 10",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 86151.2 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_10" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_11: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 11",
            parents: [[412868947.185, "earth"]],
            trail: { length: 86151 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_11" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_12: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 12",
            parents: [[443808067.185, "earth"]],
            trail: { length: 86151 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_12" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_tdrs_13: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.0085,
            label: "TDRS 13",
            parents: [[556338669.183, "earth"]],
            trail: { length: 86151 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_tdrs/tdrs.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_tdrs_13" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.ZAxis,
                  target: "earth",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_terra: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0034,
            extentsRadius: 0.012,
            label: "Terra",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933.33 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_terra/Terra.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_terra" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_terra",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_tess: {
            groups: ["earth", "spacecraft", "telescope"],
            occlusionRadius: 0.002,
            extentsRadius: 0.003,
            label: "TESS",
            parents: [[577366932.3626, "earth"]],
            trail: { length: 591840 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_tess/TESS.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_tess/earth/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
            ],
          },
          sc_themis_a: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 4e-4,
            extentsRadius: 0.0017,
            label: "THEMIS A",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 98428 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_themis/themis.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_themis_a" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxis, periodInHours: 8333e-7 },
            ],
          },
          sc_themis_d: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 4e-4,
            extentsRadius: 0.0017,
            label: "THEMIS D",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 114807 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_themis/themis.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_themis_d" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxis, periodInHours: 8333e-7 },
            ],
          },
          sc_themis_e: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 4e-4,
            extentsRadius: 0.0017,
            label: "THEMIS E",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 105907.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_themis/themis.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_themis_e" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "spin", axis: o.Vector3.YAxis, periodInHours: 8333e-7 },
            ],
          },
          sc_timed: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.005,
            label: "TIMED",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5933 },
            controllers: [{ type: "dynamo", url: "sc_timed" }],
          },
          sc_trmm: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00255,
            extentsRadius: 0.0073,
            label: "TRMM",
            parents: [
              [-66052736.817, "earth"],
              [482328067.186, ""],
            ],
            trail: { length: 5545.6 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_trmm/TRMM.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              {
                type: "orbitalElements",
                eccentricity: 0.00111201719,
                semiMajorAxis: 6744.5,
                meanAngularMotion: 0.0011382582,
                meanAnomalyAtEpoch: 0,
                inclination: (Math.PI / 180) * 30,
                longitudeOfAscendingNode: 0,
                argumentOfPeriapsis: 0,
                coverage: [-66052736.817, 482328067.186],
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_trmm",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_uars: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00535,
            extentsRadius: 0.00535,
            label: "UARS",
            parents: [
              [352800006.1854904, "earth"],
              [370106644.184, ""],
            ],
            trail: { length: 5490 },
            controllers: [
              { type: "animdata", url: "sc_uars", dataType: "pos" },
            ],
          },
          sc_wind: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.0012,
            extentsRadius: 0.0075,
            label: "WIND",
            parents: [[543931270, "earth"]],
            trail: { length: 16485927 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_wind/wind.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_wind/earth/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_wind",
                  axis: o.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_wise: {
            groups: ["earth", "spacecraft"],
            occlusionRadius: 0.00142,
            extentsRadius: 0.00142,
            label: "WISE",
            parents: [[344589947.18311954, "earth"]],
            trail: { length: 5715.4 },
            controllers: [{ type: "dynamo", url: "sc_wise" }],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          sc_apollo_15: {
            groups: ["moon", "spacecraft"],
            radius: 0.004,
            label: "Apollo 15",
            parents: [
              [-897044358.3260887, "moon"],
              [-896822958.3195117, ""],
            ],
            trail: { length: 6855 },
            controllers: [
              { type: "animdata", url: "sc_apollo_15", dataType: "pos" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_artemis_1: {
            groups: ["moon", "spacecraft"],
            radius: 0.005,
            label: "Artemis I",
            parents: [
              [721860361, "earth"],
              [724052473, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_artemis_1/artemis_cmsm.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_artemis_1/earth/pos" },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_artemis_1",
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_capstone: {
            groups: ["moon", "spacecraft"],
            radius: 5e-4,
            label: "CAPSTONE",
            parents: [
              [710192447.9999855, "earth"],
              [721583059, "moon"],
            ],
            trail: {
              length: void 0,
              lengthCoverages: [
                [4e6, Number.NEGATIVE_INFINITY, 721583059],
                [1210909, 721583059, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_capstone/capstone.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_capstone/earth/orb" },
              { type: "dynamo", url: "sc_capstone/moon/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "moon",
                  axis: n.Vector3.XAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_clementine: {
            groups: ["moon", "spacecraft"],
            radius: 0.002,
            label: "Clementine",
            parents: [
              [-187185539.81536362, "moon"],
              [-178496939.81459716, ""],
            ],
            trail: { length: 5408.5 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_clementine/clementine.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_clementine/moon/all",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_grail_a: {
            groups: ["moon", "spacecraft"],
            radius: 0.001,
            label: "Ebb",
            parents: [
              [368763e3, "moon"],
              [414201667.18513304, ""],
            ],
            trail: { length: 41115.75 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grail/grail_b.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_grail_a/moon/all", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_grail_a",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_grail_b: {
            groups: ["moon", "spacecraft"],
            radius: 0.001,
            label: "Flow",
            parents: [
              [368763e3, "moon"],
              [414201667.18513304, ""],
            ],
            trail: { length: 41239.8 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_grail/grail_b.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_grail_b/moon/all", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_grail_b",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_ladee: {
            groups: ["moon", "spacecraft"],
            radius: 0.0012,
            label: "LADEE",
            parents: [
              [431798467.18253195, "moon"],
              [451355187.44558257, ""],
            ],
            trail: { length: 7889.57 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ladee/ladee.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              { type: "animdata", url: "sc_ladee/moon/all", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_ladee",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_lcross: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 0.0013,
            extentsRadius: 0.0022,
            label: "LCROSS",
            parents: [
              [298635466.0304444, "moon"],
              [308360200.75, ""],
            ],
            trail: { length: 3598022 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lcross/lcross.gltf",
              rotate: [{ z: -90 }],
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_lcross/moon/all",
                dataType: "pos",
                coverage: [Number.NEGATIVE_INFINITY, 308360200.75],
              },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_lcross",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_lcross_impact_site: {
            groups: ["moon", "sc_lcross", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "LCROSS Impact Site",
            parents: [[298635466.0304444, "moon"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  -1.4782008103461848,
                  -0.8648271467797672,
                  0,
                ),
                coverage: [298635466.0304444, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_lunar_flashlight: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 25e-5,
            extentsRadius: 5e-4,
            label: "Lunar Flashlight",
            parents: [
              [724019554, "earth"],
              [737164869, ""],
            ],
            trail: { length: 1e7 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lunar_flashlight/lunar_flashlight.gltf",
              shadowEntities: ["earth"],
            },
            controllers: [
              { type: "dynamo", url: "sc_lunar_flashlight/earth_v3" },
              {
                type: "align",
                primary: {
                  type: "align",
                  target: "moon",
                  axis: n.Vector3.ZAxisNeg,
                  targetAxis: n.Vector3.ZAxis,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
              },
            ],
          },
          sc_lunar_icecube: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 2e-4,
            extentsRadius: 0.0012,
            label: "Lunar IceCube",
            parents: [
              [721864426, "earth"],
              [734111601, "moon"],
            ],
            trail: {
              length: void 0,
              lengthCoverages: [
                [3e6, Number.NEGATIVE_INFINITY, 734111601],
                [441920, 734111601, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lunar_icecube/lunar_icecube.gltf",
              shadowEntities: ["earth", "moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_lunar_icecube/earth/pos" },
              { type: "dynamo", url: "sc_lunar_icecube/moon/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_lunar_prospector: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 653e-6,
            extentsRadius: 0.0022,
            label: "Lunar Prospector",
            parents: [
              [-62206800, "moon"],
              [-13402020, ""],
            ],
            trail: { length: 7260 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lunar_prospector/lunar_prospector.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_lunar_prospector/moon/all",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "align",
                  target: "moon",
                  axis: n.Vector3.YAxisNeg,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
              {
                type: "spin",
                axis: n.Vector3.YAxisNeg,
                periodInHours: 0.008333,
              },
            ],
          },
          sc_lunar_reconnaissance_orbiter: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 0.00272,
            extentsRadius: 0.0038,
            label: "Lunar Reconnaissance Orbiter",
            parents: [
              [298635426.1844444, "earth"],
              [298929666, "moon"],
            ],
            trail: {
              length: 7106.66,
              lengthCoverages: [
                [1e6, Number.NEGATIVE_INFINITY, 299040641],
                [7106.66, 299040641, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lunar_reconnaissance_orbiter/LRO.gltf",
              rotate: [{ z: -90 }],
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "dynamo",
                url: "sc_lunar_reconnaissance_orbiter/earth/orb",
              },
              {
                type: "dynamo",
                url: "sc_lunar_reconnaissance_orbiter/moon/orb",
              },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_lunar_reconnaissance_orbiter",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "moon",
                  axis: n.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_lunar_reconnaissance_orbiter/ori" },
            ],
          },
          sc_smart_1: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.00653,
            label: "SMART-1",
            parents: [
              [117977163.35299999, "moon"],
              [210585600, ""],
            ],
            trail: { length: 273091 },
            controllers: [
              { type: "fixed", orientation: n.Quaternion.Identity },
              { type: "animdata", url: "sc_smart_1/moon/all", dataType: "pos" },
            ],
          },
          sc_themis_b: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 4e-4,
            extentsRadius: 0.0017,
            label: "ARTEMIS P1",
            parents: [
              [366638466.1829504, "moon"],
              [694267209.1839211, ""],
            ],
            trail: { length: 94838 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_themis/themis.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_themis_b/moon/all",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
              },
              { type: "spin", axis: n.Vector3.YAxis, periodInHours: 8333e-7 },
            ],
          },
          sc_themis_c: {
            groups: ["moon", "spacecraft"],
            occlusionRadius: 4e-4,
            extentsRadius: 0.0017,
            label: "ARTEMIS P2",
            parents: [
              [366638466.1829504, "moon"],
              [694267209.1839211, ""],
            ],
            trail: { length: 204186 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_themis/themis.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_themis_c/moon/all",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
              },
              { type: "spin", axis: n.Vector3.YAxis, periodInHours: 8333e-7 },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          sc_mars_2020: {
            groups: ["mars", "spacecraft", "landers"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.003,
            label: "Mars 2020",
            parents: [
              [649385564, "earth"],
              [649595376, "sun"],
              [666932224, "mars"],
              [666952859, "sc_mars_2020_landing_site"],
            ],
            trail: {
              length: 1e7,
              lengthCoverages: [
                [1e7, 649385564, 666932224],
                [3e3, 666932224, 666953098.003],
                [9676800, 676629898.003, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_2020/cruise_whole/msl_cruise_stage.gltf",
              rotate: [{ x: -90 }],
              shadowEntities: ["mars"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_2020/earth/orb" },
              { type: "dynamo", url: "sc_mars_2020/sun/orb" },
              { type: "dynamo", url: "sc_mars_2020/mars/pos" },
              { type: "dynamo", url: "sc_mars_2020/surface/lin" },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.TranslateController);
                  return (
                    e.setTranslation(
                      new n.Vector3(-0.125148, 0.026867, -0.023641),
                    ),
                    e
                  );
                },
                coverage: [666952859, 666953098.003],
              },
              { type: "dynamo", url: "sc_mars_2020/quat" },
              { type: "dynamo", url: "sc_mars_2020/surface/quat_v2" },
              {
                type: "spin",
                axis: n.Vector3.ZAxis,
                periodInHours: 0.00833333333,
                relativeToTime: 649385564,
                coverage: [649385564, 666952859],
              },
              {
                type: "rotateByEntityOrientation",
                entityForOrientation: "mars",
                coverage: [666952859, Number.POSITIVE_INFINITY],
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.GroundClampController);
                  return (
                    e.setDistanceFromGround(0.001),
                    e.setGroundComponentRef("mars", "cmts"),
                    e.setUp(n.Vector3.ZAxisNeg),
                    e.setCoverage(
                      new n.Interval(666953086.614, Number.POSITIVE_INFINITY),
                    ),
                    e
                  );
                },
              },
              {
                type: "coverage",
                coverage: [666953086.614, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  t.getComponentByClass(n.DivComponent)
                    .getDiv()
                    .innerHTML.replace("Mars 2020", "Perseverance");
                },
                exit: (t) => {
                  t.getComponentByClass(n.DivComponent)
                    .getDiv()
                    .innerHTML.replace("Perseverance", "Mars 2020");
                },
              },
              {
                type: "coverage",
                coverage: [666953098.003, 676629898.003],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e &&
                    (e.setStartTime(666953098.003), e.setRelativeStartTime(!1));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeStartTime(!0);
                },
              },
              {
                type: "coverage",
                coverage: [666932224, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "coverage",
                coverage: [666953086.614, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  e.setUrl(
                    "$STATIC_ASSETS_URL/models/sc_mars_2020/rover/perseverance.gltf",
                  ),
                    e.setRotation(new n.Quaternion(0.5, -0.5, 0.5, -0.5)),
                    e.setTranslation(new n.Vector3(0, 0, 0.001));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  e.setUrl(
                    "$STATIC_ASSETS_URL/models/sc_mars_2020/cruise_whole/msl_cruise_stage.gltf",
                  ),
                    e.setRotation(
                      new n.Quaternion(
                        0.7071067811865478,
                        -0.7071067811865472,
                        0,
                        0,
                      ),
                    ),
                    e.setTranslation(new n.Vector3(0, 0, 0));
                },
              },
              {
                type: "coverage",
                coverage: [666953098.003, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setIgnoreDistance(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setIgnoreDistance(!1);
                },
              },
              {
                type: "coverage",
                coverage: [666952458, 666953086.614],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setHiddenObject("solar_panels", !0),
                      e.setHiddenObject("frame_etc", !0));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setHiddenObject("solar_panels", !1),
                      e.setHiddenObject("frame_etc", !1));
                },
              },
              {
                type: "coverage",
                coverage: [666953086.614, Number.POSITIVE_INFINITY],
                update: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.resetPoints();
                },
                updateInterval: 10,
              },
            ],
          },
          sc_mars_2020_landing_site: {
            groups: ["mars", "sc_mars_2020", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Mars 2020 Landing Site",
            parents: [[649385563.6433017, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  0.32191947313922714,
                  1.351772964399859,
                  -2.2364351843552868,
                ),
                coverage: [649385563.6433017, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_mars_science_laboratory: {
            groups: ["mars", "spacecraft", "landers"],
            occlusionRadius: 0.001515,
            extentsRadius: 0.004,
            label: "Mars Science Laboratory",
            parents: [
              [375594733, "earth"],
              [376039259, "sun"],
              [397477501, "mars"],
              [397502386.832, "sc_mars_science_laboratory_landing_site"],
            ],
            trail: {
              length: 1e7,
              lengthCoverages: [
                [1e7, 375594733, 397501373],
                [3e3, 397501373, 407179186.832],
                [9676800, 407179186.832, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_science_laboratory/cruise/msl_cruisestage.gltf",
              rotate: [{ x: -90 }],
              shadowEntities: ["mars"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_science_laboratory/earth/orb" },
              { type: "dynamo", url: "sc_mars_science_laboratory/sun/orb" },
              { type: "dynamo", url: "sc_mars_science_laboratory/mars/orb" },
              { type: "dynamo", url: "sc_mars_science_laboratory/edl/pos" },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.TranslateController);
                  return (
                    e.setTranslation(
                      new n.Vector3(0.002583, 0.002995, 0.001937),
                    ),
                    e
                  );
                },
                coverage: [397501373, 397502386.832],
              },
              {
                type: "dynamo",
                url: "sc_mars_science_laboratory/surface/lin_v2",
              },
              { type: "dynamo", url: "sc_mars_science_laboratory/quat" },
              {
                type: "dynamo",
                url: "sc_mars_science_laboratory/surface/quat_v2",
              },
              {
                type: "spin",
                axis: n.Vector3.ZAxis,
                periodInHours: 0.00833333333,
                relativeToTime: 375594733,
                coverage: [375594733, 397501866],
              },
              {
                type: "rotateByEntityOrientation",
                entityForOrientation: "mars",
                rotatingOrientation: !1,
                coverage: [397501373, Number.POSITIVE_INFINITY],
              },
              {
                type: "rotateByEntityOrientation",
                entityForOrientation: "mars",
                rotatingPosition: !1,
                coverage: [397502386.832, Number.POSITIVE_INFINITY],
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.GroundClampController);
                  return (
                    e.setDistanceFromGround(98e-5),
                    e.setGroundComponentRef("mars", "cmts"),
                    e.setUp(n.Vector3.ZAxisNeg),
                    e.setCoverage(
                      new n.Interval(397502386.832, Number.POSITIVE_INFINITY),
                    ),
                    e
                  );
                },
              },
              {
                type: "coverage",
                coverage: [397502386.832, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  t.getComponentByClass(n.DivComponent)
                    .getDiv()
                    .innerHTML.replace("Mars Science Laboratory", "Curiosity");
                },
                exit: (t) => {
                  t.getComponentByClass(n.DivComponent)
                    .getDiv()
                    .innerHTML.replace("Curiosity", "Mars Science Laboratory");
                },
              },
              {
                type: "coverage",
                coverage: [397501373, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "coverage",
                coverage: [397502324, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_science_laboratory/rover/curiosity_static.gltf",
                    ),
                      e.setRotation(new n.Quaternion(0.5, -0.5, 0.5, -0.5)),
                      e.setTranslation(new n.Vector3(0, 0, 0.001)));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_science_laboratory/cruise/msl_cruisestage.gltf",
                    ),
                      e.setRotation(
                        new n.Quaternion(
                          0.7071067811865478,
                          -0.7071067811865472,
                          0,
                          0,
                        ),
                      ),
                      e.setTranslation(new n.Vector3(0, 0, 0)));
                },
              },
              {
                type: "coverage",
                coverage: [397502386.832, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setIgnoreDistance(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setIgnoreDistance(!1);
                },
              },
              {
                type: "coverage",
                coverage: [397501758, 397502386.832],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setHiddenObject("solar_panels", !0),
                      e.setHiddenObject("frame_etc", !0));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setHiddenObject("solar_panels", !1),
                      e.setHiddenObject("frame_etc", !1));
                },
              },
              {
                type: "coverage",
                coverage: [397502386.832, Number.POSITIVE_INFINITY],
                update: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.resetPoints();
                },
                updateInterval: 10,
              },
            ],
          },
          sc_mars_science_laboratory_landing_site: {
            groups: ["mars", "sc_mars_science_laboratory", "sites"],
            occlusionRadius: 0.001515,
            extentsRadius: 0.004,
            systemRadius: 200,
            label: "Curiosity Landing Site",
            parents: [[375594732.3829685, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  (-4.589466996319 / 180) * Math.PI,
                  0.7635646277605056 * Math.PI,
                  -4.927711819685555,
                ),
                coverage: [375594732.3829685, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_mars_exploration_rover_1: {
            groups: ["mars", "spacecraft", "landers"],
            occlusionRadius: 0.0013,
            extentsRadius: 0.0026,
            label: "Opportunity",
            parents: [
              [110911022.184, "earth"],
              [111234172, "sun"],
              [128262836, "mars"],
              [128278419, "sc_mars_exploration_rover_1_landing_site"],
              [581920316.8566707, ""],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 128262836],
                [6720, 128262836, 128278419],
                [0, 128278523.336, 581920316.856],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/cruise/mpf_mera_merb_cruise.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_exploration_rover_1/earth/orb" },
              { type: "dynamo", url: "sc_mars_exploration_rover_1/sun/orb" },
              { type: "dynamo", url: "sc_mars_exploration_rover_1/mars/pos" },
              { type: "dynamo", url: "sc_mars_exploration_rover_1/edl/pos" },
              {
                type: "dynamo",
                url: "sc_mars_exploration_rover_1/surface/pos",
              },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_mars_exploration_rover_1",
                  axis: n.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "mars",
                  axis: n.Vector3.YAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
                coverage: [Number.NEGATIVE_INFINITY, 128278523.336],
              },
              {
                type: "fixed",
                orientation: n.Quaternion.Identity,
                coverage: [128278523.336, 581920316.856],
              },
              {
                type: "coverage",
                coverage: [128278419, 581920316.856],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "coverage",
                coverage: [128278523.336, 581920316.856],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/rover/mer_static.gltf",
                    );
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/cruise/mpf_mera_merb_cruise.gltf",
                    );
                },
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, 128262836],
                enter: (t) => {
                  const e = t.getControllerByClass(n.AlignController);
                  null !== e &&
                    (e.setPrimaryAlignType("point"),
                      e.setPrimaryAxis(n.Vector3.ZAxis),
                      e.setPrimaryTargetEntity("sun"));
                },
                exit: (t) => {
                  const e = t.getControllerByClass(n.AlignController);
                  null !== e &&
                    (e.setPrimaryAlignType("velocity"),
                      e.setPrimaryAxis(n.Vector3.ZAxisNeg),
                      e.setPrimaryTargetEntity("sc_mars_exploration_rover_1"));
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(n.RotateController),
                s = new n.Quaternion();
              s.setFromAxes(n.Vector3.YAxis, n.Vector3.XAxisNeg, void 0),
                e.setRotation(s),
                e.setRotatingOrientation(!1),
                e.setCoverage(new n.Interval(128278419, 581920316.856));
              t.addControllerByClass(
                n.RotateByEntityOrientationController,
                "landingRotateByEntity",
                t.getControllerByClass(n.AlignController),
              ).setCoverage(new n.Interval(128278419, 581920316.856));
            },
          },
          sc_mars_exploration_rover_1_landing_site: {
            groups: ["mars", "sc_mars_exploration_rover_1", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Opportunity Landing Site",
            parents: [[110911022.184, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  -0.034003934569818886,
                  -0.09644392740547784,
                  -2.018490164449304,
                ),
                coverage: [110911022.184, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_mars_exploration_rover_2: {
            groups: ["mars", "spacecraft", "landers"],
            occlusionRadius: 0.0013,
            extentsRadius: 0.0026,
            label: "Spirit",
            parents: [
              [108541883.184, "earth"],
              [108887371, "sun"],
              [126444477, "mars"],
              [126462105, "sc_mars_exploration_rover_2_landing_site"],
              [322567479.3896215, ""],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 126444477],
                [6720, 126444477, 126462105],
                [0, 126462396.1058, 322567479.38962],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/cruise/mpf_mera_merb_cruise.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_exploration_rover_2/earth/orb" },
              { type: "dynamo", url: "sc_mars_exploration_rover_2/sun/orb" },
              { type: "dynamo", url: "sc_mars_exploration_rover_2/mars/pos" },
              { type: "dynamo", url: "sc_mars_exploration_rover_2/edl/pos" },
              {
                type: "dynamo",
                url: "sc_mars_exploration_rover_2/surface/pos",
              },
              {
                type: "rotateByEntityOrientation",
                coverage: [126462105, 322567479.38962],
              },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_mars_exploration_rover_2",
                  axis: n.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "mars",
                  axis: n.Vector3.YAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
                coverage: [Number.NEGATIVE_INFINITY, 126462105],
              },
              {
                type: "fixed",
                orientation: n.Quaternion.Identity,
                coverage: [126462105, 322567479.38962],
              },
              {
                type: "coverage",
                coverage: [126462105, 322567479.38962],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "coverage",
                coverage: [126462396.1058, 322567479.38962],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/rover/mer_static.gltf",
                    );
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_mars_exploration_rover/cruise/mpf_mera_merb_cruise.gltf",
                    );
                },
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, 126444477],
                enter: (t) => {
                  const e = t.getControllerByClass(n.AlignController);
                  null !== e &&
                    (e.setPrimaryAlignType("point"),
                      e.setPrimaryAxis(n.Vector3.ZAxis),
                      e.setPrimaryTargetEntity("sun"));
                },
                exit: (t) => {
                  const e = t.getControllerByClass(n.AlignController);
                  null !== e &&
                    (e.setPrimaryAlignType("velocity"),
                      e.setPrimaryAxis(n.Vector3.ZAxisNeg),
                      e.setPrimaryTargetEntity("sc_mars_exploration_rover_2"));
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(n.RotateController),
                s = new n.Quaternion();
              s.setFromAxes(n.Vector3.YAxis, n.Vector3.XAxisNeg, void 0),
                e.setRotation(s),
                e.setRotatingOrientation(!1),
                e.setCoverage(new n.Interval(126462105, 322567479.38962));
            },
          },
          sc_mars_exploration_rover_2_landing_site: {
            groups: ["mars", "sc_mars_exploration_rover_2", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Spirit Landing Site",
            parents: [[108541883.184, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  -0.25432749290990797,
                  3.062677242395019,
                  -2.614394925059969,
                ),
                coverage: [108541883.184, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_insight: {
            groups: ["mars", "spacecraft", "landers"],
            radius: 0.00306,
            label: "InSight",
            parents: [
              [578795968.9654216, "earth"],
              [579182469.185, "sun"],
              [596376069.183, "mars"],
            ],
            trail: {
              length: 32137022.16,
              lengthCoverages: [
                [32137022.16, Number.NEGATIVE_INFINITY, 596376069.183],
                [14400, 596376069.183, 596529871.284],
                [3600, 596529871.284, 596533602],
                [0, 596533602, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_insight/lander/insight.gltf",
              rotate: [{ y: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_insight/earth/pos" },
              { type: "dynamo", url: "sc_insight/sun/orb" },
              { type: "dynamo", url: "sc_insight/mars/orb" },
              { type: "dynamo", url: "sc_insight_edl/mars/pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: n.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "mars",
                  axis: n.Vector3.YAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
                coverage: [578795968.9654216, 596533602],
              },
              { type: "dynamo", url: "sc_insight/ori" },
              { type: "dynamo", url: "sc_insight_edl/ori" },
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  0.07881611091588075,
                  2.3734709256393973,
                  -2.996371903616364,
                ),
                llaOnSpheroidEntity: "mars",
                coverage: [596533602, Number.POSITIVE_INFINITY],
              },
              {
                type: "coverage",
                coverage: [596529871.284, 596533602],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "coverage",
                coverage: [578795968.9654216, 596533602],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_insight/cruise/model.gltf",
                    ),
                      e.setRotation(
                        new n.Quaternion(Math.sqrt(0.5), 0, Math.sqrt(0.5), 0),
                      ),
                      e.setTranslation(n.Vector3.Zero));
                },
              },
              {
                type: "coverage",
                coverage: [596533602, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e &&
                    (e.setUrl(
                      "$STATIC_ASSETS_URL/models/sc_insight/lander/insight.gltf",
                    ),
                      e.setRotation(
                        new n.Quaternion(Math.sqrt(0.5), Math.sqrt(0.5), 0, 0),
                      ),
                      e.setTranslation(new n.Vector3(0, 0, 85e-5)));
                },
              },
            ],
          },
          sc_insight_landing_site: {
            groups: ["mars", "sc_insight", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "InSight Landing Site",
            parents: [
              [578795968.9654216, "mars"],
              [596533602, ""],
            ],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  0.07881611091588075,
                  2.3734709256393973,
                  -2.996371903616364,
                ),
                coverage: [578795968.9654216, 596533602],
              },
            ],
          },
          sc_marco_a: {
            groups: ["mars", "spacecraft"],
            radius: 44375e-8,
            label: "MarCO A",
            parents: [
              [578796051, "earth"],
              [579182469.185, "sun"],
              [596376069.183, "mars"],
              [596552080, "sun"],
              [631152e3, ""],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 579182469.185],
                [6720, 579182469.185, 596552080],
                [1e7, 596552080, Number.POSITIVE_INFINITY],
              ],
            },
            model: { url: "$STATIC_ASSETS_URL/models/sc_marco/model.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_marco_a/earth/orb" },
              { type: "dynamo", url: "sc_marco_a/sun/1/orb" },
              { type: "dynamo", url: "sc_marco_a/mars/orb" },
              { type: "dynamo", url: "sc_marco_a/sun/2/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
              },
            ],
          },
          sc_marco_b: {
            groups: ["mars", "spacecraft"],
            radius: 44375e-8,
            label: "MarCO B",
            parents: [
              [578796051, "earth"],
              [579182469.185, "sun"],
              [596376069.183, "mars"],
              [596552080, "sun"],
              [631152e3, ""],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 579182469.185],
                [6720, 579182469.185, 596552080],
                [1e7, 596552080, Number.POSITIVE_INFINITY],
              ],
            },
            model: { url: "$STATIC_ASSETS_URL/models/sc_marco/model.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_marco_b/earth/orb" },
              { type: "dynamo", url: "sc_marco_b/sun/1/orb" },
              { type: "dynamo", url: "sc_marco_b/mars/orb" },
              { type: "dynamo", url: "sc_marco_b/sun/2/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
              },
            ],
          },
          sc_mars_odyssey: {
            groups: ["mars", "spacecraft"],
            occlusionRadius: 0.0013,
            extentsRadius: 0.004,
            label: "Mars Odyssey",
            parents: [
              [39932700, "earth"],
              [40233664, "sun"],
              [57128464, "mars"],
            ],
            trail: {
              length: 6727,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 57128464],
                [6727, 57128464, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_odyssey/mars_odyssey.gltf",
              environmentMap: {
                cubemap: "$STATIC_ASSETS_URL/env_maps/park_gray/$FACE.jpg",
              },
              shadowEntities: ["mars", "deimos", "phobos"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_odyssey/earth/orb" },
              { type: "dynamo", url: "sc_mars_odyssey/sun/orb" },
              { type: "dynamo", url: "sc_mars_odyssey/mars/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: new n.Vector3(-0.95630475596, 0.29237170472, 0),
                },
                secondary: {
                  type: "velocity",
                  target: "sc_mars_odyssey",
                  axis: new n.Vector3(0.29237170472, 0.95630475596, 0),
                },
              },
              { type: "dynamo", url: "sc_mars_odyssey/ori" },
            ],
          },
          sc_mars_reconnaissance_orbiter: {
            groups: ["mars", "spacecraft"],
            radius: 0.0068,
            label: "Mars Reconnaissance Orbiter",
            parents: [
              [177122516, "earth"],
              [177429664, "sun"],
              [195285665, "mars"],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 195285665],
                [6720, 195285665, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_reconnaissance_orbiter/MRO.gltf",
              environmentMap: {
                cubemap: "$STATIC_ASSETS_URL/env_maps/park_gray/$FACE.jpg",
              },
              shadowEntities: ["mars", "deimos", "phobos"],
            },
            controllers: [
              {
                type: "dynamo",
                url: "sc_mars_reconnaissance_orbiter/earth/orb",
              },
              { type: "dynamo", url: "sc_mars_reconnaissance_orbiter/sun/orb" },
              {
                type: "dynamo",
                url: "sc_mars_reconnaissance_orbiter/mars/orb",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: n.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_mars_reconnaissance_orbiter",
                  axis: n.Vector3.XAxis,
                },
              },
              { type: "dynamo", url: "sc_mars_reconnaissance_orbiter/ori" },
            ],
          },
          sc_maven: {
            groups: ["mars", "spacecraft"],
            radius: 0.0057,
            label: "MAVEN",
            parents: [
              [438074509.3428109, "earth"],
              [438296467, "sun"],
              [464590867, "mars"],
            ],
            trail: { length: 16139 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_maven/Maven.gltf",
              rotate: [{ x: 90 }, { z: 90 }],
              environmentMap: {
                cubemap: "$STATIC_ASSETS_URL/env_maps/park_gray/$FACE.jpg",
              },
              shadowEntities: ["mars", "deimos", "phobos"],
            },
            controllers: [
              { type: "dynamo", url: "sc_maven/earth/orb" },
              { type: "dynamo", url: "sc_maven/sun/orb" },
              { type: "dynamo", url: "sc_maven/mars/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_maven/ori" },
            ],
          },
          sc_mars_express: {
            groups: ["mars", "spacecraft"],
            radius: 0.006,
            label: "Mars Express",
            parents: [
              [107853140.59600002, "earth"],
              [108232264, "sun"],
              [125539264, "mars"],
            ],
            trail: {
              length: 25e3,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 126749131],
                [12720, 126749131, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_express/mars_express.gltf",
              rotate: [{ x: 90 }, { z: -180 }],
              environmentMap: {
                cubemap: "$STATIC_ASSETS_URL/env_maps/park_gray/$FACE.jpg",
              },
              shadowEntities: ["mars", "deimos", "phobos"],
            },
            controllers: [
              { type: "dynamo", url: "sc_mars_express/earth/orb" },
              { type: "dynamo", url: "sc_mars_express/sun/orb" },
              { type: "dynamo", url: "sc_mars_express/mars/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: n.Vector3.XAxisNeg,
                },
              },
              { type: "dynamo", url: "sc_mars_express/ori" },
            ],
          },
          sc_phoenix: {
            groups: ["mars", "spacecraft"],
            radius: 0.0027,
            label: "Phoenix",
            parents: [
              [239496427, "earth"],
              [239618121, "sun"],
              [265008306, "mars"],
              [265030318, "sc_phoenix_landing_site"],
              [278942465, ""],
            ],
            trail: {
              length: 45411186,
              lengthCoverages: [
                [45411186, Number.NEGATIVE_INFINITY, 265008306],
                [5e4, 265008306, 265030318],
                [500, 265030318, 265030769],
                [0, 265030769, 278942465],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_phoenix/cruise/phoenix_cruise.gltf",
              rotate: [{ z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_phoenix/earth/orb" },
              { type: "dynamo", url: "sc_phoenix/sun/orb" },
              { type: "dynamo", url: "sc_phoenix/mars/orb" },
              { type: "dynamo", url: "sc_phoenix/phx_topo/pos" },
              { type: "dynamo", url: "sc_phoenix/ori" },
              {
                type: "fixed",
                position: new n.Vector3(
                  0.027059368126568832,
                  0.013878235928918032,
                  -0.04367634407940447,
                ),
                coverage: [265030769, 278942465],
              },
              {
                type: "rotateByEntityOrientation",
                rotatingOrientation: !1,
                coverage: [265030769, 278942465],
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxisNeg,
                },
              },
              {
                type: "coverage",
                coverage: [265029904, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  t.getComponentByClass(n.ModelComponent).setUrl(
                    "$STATIC_ASSETS_URL/models/sc_phoenix/edl/phoenix_edl.gltf",
                  );
                },
                exit: (t) => {
                  t.getComponentByClass(n.ModelComponent).setUrl(
                    "$STATIC_ASSETS_URL/models/sc_phoenix/cruise/phoenix_cruise.gltf",
                  );
                },
              },
            ],
            postCreateFunction: (t) => {
              t.addParentChangedCallback((t, e, s) => {
                if (null !== s) {
                  const e = s.getName(),
                    i = t.getComponentByClass(n.TrailComponent);
                  "sc_phoenix_landing_site" === e
                    ? (i.setRelativeToEntity("mars"),
                      i.setRelativeToEntityOrientation(!0))
                    : (i.setRelativeToEntity(""),
                      i.setRelativeToEntityOrientation(!1));
                }
              });
            },
          },
          sc_phoenix_landing_site: {
            groups: ["mars", "sc_phoenix", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Phoenix Landing Site",
            parents: [[239496427, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  1.1906355815662266,
                  -2.1947740491302206,
                  -2.5912352775421823,
                ),
                coverage: [239496427, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_trace_gas_orbiter: {
            groups: ["mars", "spacecraft"],
            radius: 0.00875915,
            label: "Trace Gas Orbiter",
            parents: [
              [511257268, "earth"],
              [511941668, "sun"],
              [530107268, "mars"],
            ],
            trail: {
              length: 6720,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 530160041],
                [6720, 530160041, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_trace_gas_orbiter/TGO.gltf",
              rotate: [{ x: -90 }, { y: -90 }],
              environmentMap: {
                cubemap: "$STATIC_ASSETS_URL/env_maps/park_gray/$FACE.jpg",
              },
              shadowEntities: ["mars", "deimos", "phobos"],
            },
            controllers: [
              { type: "dynamo", url: "sc_trace_gas_orbiter/earth/orb" },
              { type: "dynamo", url: "sc_trace_gas_orbiter/sun/orb" },
              { type: "dynamo", url: "sc_trace_gas_orbiter/mars/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: n.Vector3.YAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.XAxisNeg,
                },
              },
              { type: "dynamo", url: "sc_trace_gas_orbiter/ori" },
            ],
            postCreateFunction: (t) => {
              let e = t.addControllerByClass(n.AlignController);
              e.setJoint("right_array_1"),
                e.setPrimaryAxis(n.Vector3.XAxis),
                e.setSecondaryAxis(n.Vector3.YAxis),
                e.setSecondaryAlignType("point"),
                e.setSecondaryTargetEntity("sun"),
                (e = t.addControllerByClass(n.AlignController)),
                e.setJoint("left_array_1"),
                e.setPrimaryAxis(n.Vector3.XAxis),
                e.setSecondaryAxis(n.Vector3.YAxis),
                e.setSecondaryAlignType("point"),
                e.setSecondaryTargetEntity("sun");
            },
          },
          sc_mars_orbiter_mission: {
            groups: ["mars", "spacecraft"],
            radius: 0.00275,
            label: "Mars Orbiter Mission",
            parents: [[623211069.1823474, "mars"]],
            trail: { length: 234146 },
            controllers: [
              {
                type: "animdata",
                url: "sc_mars_orbiter_mission/mars",
                dataType: "pos",
              },
            ],
          },
          sc_mars_global_surveyor: {
            groups: ["mars", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.005,
            label: "Mars Global Surveyor",
            parents: [
              [-72699545, "mars"],
              [215697664.184, ""],
            ],
            trail: { length: 7068.67 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_mars_global_surveyor/mars_global_surveyor.gltf",
              shadowEntities: ["mars"],
            },
            controllers: [
              {
                type: "animdata",
                url: "sc_mars_global_surveyor_mission",
                dataType: "pos",
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mars",
                  axis: n.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_mars_climate_orbiter: {
            groups: ["mars", "spacecraft"],
            radius: 0.0011,
            label: "Mars Climate Orbiter",
            parents: [
              [-33318e3, "sun"],
              [-8650375.816, ""],
            ],
            trail: { length: 73762215 },
            controllers: [
              {
                type: "animdata",
                url: "sc_mars_climate_orbiter",
                dataType: "pos",
              },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_mars_pathfinder: {
            groups: ["mars", "spacecraft"],
            radius: 33e-5,
            label: "Mars Pathfinder",
            parents: [
              [-91704541, "sun"],
              [-78692880, ""],
            ],
            trail: { length: 51497488 },
            controllers: [
              { type: "animdata", url: "sc_mars_pathfinder", dataType: "pos" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_mars_pathfinder_landing_site: {
            groups: ["mars", "sc_mars_pathfinder", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Mars Pathfinder Landing Site",
            parents: [[-97045250.817, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  (19.13 * Math.PI) / 180,
                  (-33.22 * Math.PI) / 180,
                  0,
                ),
                coverage: [-97045250.817, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_mars_polar_lander: {
            groups: ["mars", "spacecraft"],
            radius: 0.0018,
            label: "Mars Polar Lander",
            parents: [
              [-31298400, "sun"],
              [-2476735.816, ""],
            ],
            trail: { length: 41109006 },
            controllers: [
              {
                type: "animdata",
                url: "sc_mars_polar_lander",
                dataType: "pos",
              },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_viking_1_orbiter: {
            groups: ["mars", "spacecraft"],
            radius: 0.0047,
            label: "Viking 1 Orbiter",
            parents: [
              [-742490410, "mars"],
              [-663249600, ""],
            ],
            trail: { length: 88649 },
            controllers: [
              { type: "animdata", url: "sc_viking_1_orbiter", dataType: "pos" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_viking_1_lander_landing_site: {
            groups: ["mars", "sc_viking_1_lander", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Viking 1 Lander Landing Site",
            parents: [[-768926233.817, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  (22.27 * Math.PI) / 180,
                  (312.05 * Math.PI) / 180,
                  0,
                ),
                coverage: [-768926233.817, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_viking_2_orbiter: {
            groups: ["mars", "spacecraft"],
            radius: 0.0047,
            label: "Viking 2 Orbiter",
            parents: [
              [-738460186, "mars"],
              [-676517400, ""],
            ],
            trail: { length: 98694 },
            controllers: [
              { type: "animdata", url: "sc_viking_2_orbiter", dataType: "pos" },
              { type: "fixed", orientation: n.Quaternion.Identity },
            ],
          },
          sc_viking_2_lander_landing_site: {
            groups: ["mars", "sc_viking_2_lander", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Viking 2 Lander Landing Site",
            parents: [[-767208013.818, "mars"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  (47.64 * Math.PI) / 180,
                  (-225.71 * Math.PI) / 180,
                  0,
                ),
                coverage: [-767208013.818, Number.POSITIVE_INFINITY],
              },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          sc_messenger: {
            groups: ["mercury", "spacecraft"],
            occlusionRadius: 0.00133,
            extentsRadius: 0.0035,
            label: "MESSENGER",
            parents: [
              [144789279.39320505, "earth"],
              [145066469, "sun"],
              [175801890, "earth"],
              [176659095, "sun"],
              [214828942, "venus"],
              [215033751, "sun"],
              [234289415, "venus"],
              [234436749, "sun"],
              [253547108, "mercury"],
              [253671753, "sun"],
              [276485360, "mercury"],
              [276627276, "sun"],
              [307423681, "mercury"],
              [307651285, "sun"],
              [353474040, "mercury"],
              [483694028.351, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_messenger/Messenger.gltf",
              rotate: [{ z: -90 }, { y: 90 }],
              shadowEntities: ["mercury"],
            },
            controllers: [
              { type: "dynamo", url: "sc_messenger/earth/launch/orb" },
              { type: "dynamo", url: "sc_messenger/sun/1/orb" },
              { type: "dynamo", url: "sc_messenger/earth/flyby/orb" },
              { type: "dynamo", url: "sc_messenger/sun/2/orb" },
              { type: "dynamo", url: "sc_messenger/venus/flyby1/orb" },
              { type: "dynamo", url: "sc_messenger/sun/3/orb" },
              { type: "dynamo", url: "sc_messenger/venus/flyby2/orb" },
              { type: "dynamo", url: "sc_messenger/sun/4/orb" },
              { type: "dynamo", url: "sc_messenger/mercury/flyby1/orb" },
              { type: "dynamo", url: "sc_messenger/sun/5/orb" },
              { type: "dynamo", url: "sc_messenger/mercury/flyby2/orb" },
              { type: "dynamo", url: "sc_messenger/sun/6/orb" },
              { type: "dynamo", url: "sc_messenger/mercury/flyby3/orb" },
              { type: "dynamo", url: "sc_messenger/sun/7/orb" },
              { type: "dynamo", url: "sc_messenger/mercury/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mercury",
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_messenger",
                  axis: n.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_messenger/ori" },
            ],
          },
          sc_messenger_impact_site: {
            groups: ["mercury", "sc_messenger", "sites"],
            radius: 0.001,
            label: "MESSENGER Impact Site",
            parents: [[Number.NEGATIVE_INFINITY, "mercury"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  0.9501527254431932,
                  -2.615904550043192,
                  -0.910251923861324,
                ),
                coverage: [483694028.351, Number.POSITIVE_INFINITY],
              },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5),
          o = s(639),
          r = s(640);
        i.Entity.register({
          sc_juno: {
            groups: ["jupiter", "spacecraft"],
            occlusionRadius: 0.001732,
            extentsRadius: 0.01,
            label: "Juno",
            parents: [
              [365836752.1832, "earth"],
              [366088266.183, "sun"],
              [434433667.182, "earth"],
              [434793667.182, "sun"],
              [519652868.184, "jupiter"],
              [676339597, "ganymede"],
              [676381521, "jupiter"],
              [717700360, "europa"],
              [717727733, "jupiter"],
              [757191924, "io"],
              [757203571, "jupiter"],
              [760247560, "io"],
              [760262808, "jupiter"],
            ],
            trail: {
              length: void 0,
              lengthCoverages: [
                [63072e3, Number.NEGATIVE_INFINITY, 519652868.184],
                [5184e3, 519652868.184, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_juno/Juno.gltf",
              rotate: [{ x: 90 }],
              shadowEntities: [
                "jupiter",
                "europa",
                "ganymede",
                "callisto",
                "io",
              ],
            },
            controllers: [
              { type: "dynamo", url: "sc_juno/earth/launch/orb" },
              { type: "dynamo", url: "sc_juno/sun/preflyby/orb" },
              { type: "dynamo", url: "sc_juno/earth/flyby/orb" },
              { type: "dynamo", url: "sc_juno/sun/postflyby/orb" },
              { type: "dynamo", url: "sc_juno/jupiter/orb" },
              { type: "dynamo", url: "sc_juno/ganymede/orb" },
              { type: "dynamo", url: "sc_juno/europa/orb" },
              { type: "dynamo", url: "sc_juno/io/1/orb" },
              { type: "dynamo", url: "sc_juno/io/2/orb" },
              {
                type: "fixed",
                orientation: n.Quaternion.Identity,
                coverage: [365836752.1832, Number.POSITIVE_INFINITY],
              },
              { type: "dynamo", url: "sc_juno/ori" },
              {
                type: "coverage",
                coverage: [393471366, 529749008],
                update: (t) => {
                  const e = t
                    .getComponentByClass(n.ModelComponent)
                    .getThreeJsObjectByName("engine_cover");
                  if (null !== e) {
                    const s = t.getScene().getEngine().getTime(),
                      i = n.Sort.getIndex(s, l, (t, e) => t[1] < e),
                      o = l[i][0],
                      r = l[i][1],
                      a = n.MathUtils.clamp01(
                        ((r - o) / 2 - Math.abs(s - (r + o) / 2)) / 600,
                      );
                    e.rotation.x = n.MathUtils.lerp(Math.PI, Math.PI / 8, a);
                  }
                },
                exit: (t) => {
                  const e = t
                    .getComponentByClass(n.ModelComponent)
                    .getThreeJsObjectByName("engine_cover");
                  null !== e && (e.rotation.x = Math.PI);
                },
              },
              {
                type: "coverage",
                coverage: [399637867.183, 520959604.184],
                update: (t) => {
                  const e = t.getComponentByClass(n.ParticleSprayComponent),
                    s = t.getScene().getEngine().getTime(),
                    i = n.Sort.getIndex(s, c, (t, e) => t[1] < e),
                    o = c[i][0],
                    r = c[i][1],
                    a = o <= s && s < r;
                  e.setEnabled(a);
                },
                exit: (t) => {
                  t.getComponentByClass(n.ParticleSprayComponent).setEnabled(
                    !1,
                  );
                },
              },
              {
                type: "coverage",
                coverage: [519652868.184, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  e && e.setRelativeToEntity("jupiter");
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  e && e.setRelativeToEntity("");
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(o.KeyframePointingController);
              e.setKeyframes(h),
                e.setDirection(n.Vector3.ZAxis),
                e.setCoverage(new n.Interval(365836752.1832, 521025625));
              const s = t.addControllerByClass(r.KeyframeSpinController);
              s.setKeyframes(u),
                s.setAxis(n.Vector3.ZAxis),
                s.setCoverage(new n.Interval(365836752.1832, 521025625)),
                s.setStartingAngle(-0.96);
              const i = t.addComponentByClass(n.ParticleSprayComponent);
              i.setNumberOfParticles(100),
                i.setSizeOfParticles(3e-4),
                i.setSpeedOfParticles(0.01),
                i.setColorOfParticles(new n.Color(1, 0.75, 0, 0.25)),
                i.setSpread(-3),
                i.setParticleSpacingRandom(!1),
                i.setLength(0.003),
                i.setOriginOffset(new n.Vector3(0, 0, -0.0017)),
                i.setDirection(n.Vector3.ZAxisNeg),
                i.setEnabled(!1);
            },
          },
          sc_cassini: {
            groups: ["saturn", "spacecraft"],
            occlusionRadius: 0.0034,
            extentsRadius: 0.0055,
            label: "Cassini",
            parents: [
              [-69820368.42763124, "earth"],
              [-69537536.818, "sun"],
              [-53179136.814, "venus"],
              [-53092736.814, "sun"],
              [-16495135.816, "venus"],
              [-16451935.816, "sun"],
              [-11951935.817, "earth"],
              [-11660335.817, "sun"],
              [139219264.185, "saturn"],
              [558743640, ""],
            ],
            dependents: ["sc_huygens"],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_cassini/Cassini.gltf",
              rotate: [{ x: -90 }, { z: 180 }],
              shadowEntities: [
                "saturn",
                "titan",
                "enceladus",
                "mimas",
                "tethys",
              ],
            },
            controllers: [
              { type: "dynamo", url: "sc_cassini/earth/launch/orb" },
              { type: "dynamo", url: "sc_cassini/sun/1/orb" },
              { type: "dynamo", url: "sc_cassini/venus/flyby1/orb" },
              { type: "dynamo", url: "sc_cassini/sun/2/orb" },
              { type: "dynamo", url: "sc_cassini/venus/flyby2/orb" },
              { type: "dynamo", url: "sc_cassini/sun/3/orb" },
              { type: "dynamo", url: "sc_cassini/earth/flyby/orb" },
              { type: "dynamo", url: "sc_cassini/sun/4/orb" },
              { type: "dynamo", url: "sc_cassini/saturn/orb" },
              { type: "dynamo", url: "sc_cassini/quat" },
              {
                type: "coverage",
                coverage: [-13098535.817, 534124760.143],
                update: (t) => {
                  const e = t.getComponentByClass(n.ParticleSprayComponent),
                    s = t.getScene().getEngine().getTime(),
                    i = n.Sort.getIndex(s, a, (t, e) => t[1] < e),
                    o = a[i][0],
                    r = a[i][1],
                    l = o <= s && s < r;
                  e.setEnabled(l);
                },
                exit: (t) => {
                  t.getComponentByClass(n.ParticleSprayComponent).setEnabled(
                    !1,
                  );
                },
              },
              {
                type: "coverage",
                coverage: [157212064.184, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e && e.setHiddenObject("huygens_probe", !0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.ModelComponent);
                  null !== e && e.setHiddenObject("huygens_probe", !1);
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.addComponentByClass(n.ParticleSprayComponent);
              e.setNumberOfParticles(50),
                e.setSizeOfParticles(3e-4),
                e.setSpeedOfParticles(0.01),
                e.setColorOfParticles(new n.Color(1, 0.75, 0, 0.25)),
                e.setSpread(-3),
                e.setParticleSpacingRandom(!1),
                e.setLength(0.002),
                e.setOriginOffset(new n.Vector3(0, 29e-5, 0.0033)),
                e.setDirection(n.Vector3.ZAxis),
                e.setEnabled(!1);
            },
          },
          sc_europa_clipper: {
            groups: ["jupiter", "europa", "ganymede", "callisto", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.011,
            label: "Europa Clipper",
            parents: [
              [781796651, "sun"],
              [849443647, "earth"],
              [849694384, "sun"],
              [954569001, "jupiter"],
              [1096736672, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_europa_clipper/europa_clipper.gltf",
              shadowEntities: ["jupiter", "earth", "mars", "europa"],
            },
            controllers: [
              { type: "dynamo", url: "sc_europa_clipper/sun/orb" },
              { type: "dynamo", url: "sc_europa_clipper/earth/flyby/orb" },
              { type: "dynamo", url: "sc_europa_clipper/jupiter/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_galileo: {
            groups: ["jupiter", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.0055,
            label: "Galileo",
            parents: [
              [-321964226.73959994, "earth"],
              [-321559829, "sun"],
              [-312199026, "venus"],
              [-311946958, "sun"],
              [-286252262, "earth"],
              [-285827020, "sun"],
              [-223105356, "earth"],
              [-222610262, "sun"],
              [-129268796, "jupiter"],
              [117442702, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_galileo/galileo.gltf",
              shadowEntities: ["jupiter", "earth", "venus"],
              rotate: [{ x: -90 }, { z: 180 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_galileo/earth/launch/orb" },
              { type: "dynamo", url: "sc_galileo/sun/orb" },
              { type: "dynamo", url: "sc_galileo/venus/flyby/orb" },
              { type: "dynamo", url: "sc_galileo/earth/flyby1/orb" },
              { type: "dynamo", url: "sc_galileo/earth/flyby2/orb" },
              { type: "dynamo", url: "sc_galileo/jupiter/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "mercury",
                  axis: n.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "align",
                  axis: n.Vector3.YAxis,
                  target: "earth",
                  targetAxis: n.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_galileo/quat" },
            ],
            postCreateFunction: (t) => {
              const e = t.addControllerByClass(n.SpinController);
              e.setJoint("spinning_section"),
                e.setRate((6 * Math.PI) / 60),
                e.setAxis(n.Vector3.YAxisNeg, !0);
            },
          },
          sc_galileo_probe: {
            groups: ["jupiter", "spacecraft"],
            radius: 72e-5,
            label: "Galileo Probe",
            parents: [
              [-321964226.73959994, "sc_galileo"],
              [-129268796, "jupiter"],
              [-128353980, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_galileo_probe/galileo_probe.gltf",
              rotate: [{ x: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_galileo_probe/galileo/orb" },
              { type: "dynamo", url: "sc_galileo_probe/jupiter/orb" },
              {
                type: "fixed",
                position: n.Vector3.Zero,
                orientation: n.Quaternion.Identity,
                coverage: [-321964226.73959994, -141114537.48322043],
              },
              {
                type: "coverage",
                coverage: [Number.NEGATIVE_INFINITY, -141114537.48322043],
                enter: (t) => {
                  const e = t.getComponentByClass(n.DivComponent);
                  null !== e && e.setEnabled(!1);
                  const s = t.getComponentByClass(n.TrailComponent);
                  null !== s && s.setEnabled(!1);
                  t.getControllerByClass(n.TranslateController).setTranslation(
                    new n.Vector3(0, 0, 0.001),
                  );
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.DivComponent);
                  null !== e && e.setEnabled(!0);
                  const s = t.getComponentByClass(n.TrailComponent);
                  null !== s && s.setEnabled(!0);
                  t.getControllerByClass(n.TranslateController).setTranslation(
                    new n.Vector3(-16e-6, 24e-6, 7e-4),
                  );
                },
              },
            ],
            postCreateFunction: (t) => {
              t.getComponentByClass(n.ModelComponent).setTranslation(
                new n.Vector3(0, 0, -0.001),
              );
              const e = t.addControllerByClass(n.TranslateController);
              e.setTranslation(new n.Vector3(-16e-6, 24e-6, 7e-4)),
                e.setRelativeToOrientation(!0),
                e.setCoverage(new n.Interval(-321964226.73959994, -128353980));
              t.addControllerByClass(
                n.RotateByEntityOrientationController,
              ).setCoverage(
                new n.Interval(-321964226.73959994, -141114537.48322043),
              );
              const s = t.addControllerByClass(n.FixedController);
              s.setOrientation(
                new n.Quaternion(
                  0.40004226980201746,
                  0.3894033591393042,
                  -0.7928008139628516,
                  0.24453645053961984,
                ),
              ),
                s.setCoverage(
                  new n.Interval(-141114537.48322043, Number.POSITIVE_INFINITY),
                );
            },
          },
          sc_huygens: {
            groups: ["saturn", "spacecraft", "titan"],
            occlusionRadius: 0.0013,
            extentsRadius: 0.0013,
            label: "Huygens",
            parents: [
              [157212064.184, "saturn"],
              [158945582, "titan"],
              [158974766.184, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_huygens/Huygens.gltf",
              rotate: [{ x: -90 }, { z: 180 }],
              shadowEntities: [
                "saturn",
                "titan",
                "enceladus",
                "mimas",
                "tethys",
              ],
            },
            controllers: [
              { type: "dynamo", url: "sc_huygens/saturn/orb" },
              { type: "dynamo", url: "sc_huygens/titan/orb" },
              {
                type: "fixed",
                orientation: new n.Quaternion(
                  0.8295521744501194,
                  0.09912464029342342,
                  -0.04158756948048668,
                  -0.5479853735424731,
                ),
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      158965616.707,
                      new n.Vector3(
                        -74.84608000701567,
                        -3832.0774028380238,
                        -305.9513410781612,
                      ),
                    ),
                    e.addPositionKeyframe(
                      158965667.7750001,
                      new n.Vector3(
                        -168.19015737501377,
                        -3541.733393771429,
                        -291.12326824195395,
                      ),
                    ),
                    e.addPositionKeyframe(
                      158965894.184,
                      new n.Vector3(
                        -376.8992769951708,
                        -2686.9622048526126,
                        -273.33138256355716,
                      ),
                    ),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      158965894.184,
                      new n.Vector3(
                        -376.8992769951708,
                        -2686.9622048526126,
                        -273.33138256355716,
                      ),
                    ),
                    e.addPositionKeyframe(
                      158974766.184,
                      new n.Vector3(
                        -251.2479743710496,
                        -2548.813556954952,
                        -266.5500089234507,
                      ),
                    ),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.TranslateController);
                  return (
                    e.setTranslation(new n.Vector3(-0.0013, 0, 0.0011)),
                    e.setRelativeToOrientation(!0),
                    e.setCoverage(new n.Interval(157212064.184, 158974766.184)),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(r.KeyframeSpinController);
                  return (
                    e.setKeyframes(d),
                    e.setAxis(n.Vector3.XAxisNeg),
                    e.setCoverage(
                      new n.Interval(157212064.184, Number.POSITIVE_INFINITY),
                    ),
                    e
                  );
                },
              },
              {
                type: "coverage",
                coverage: [158965616.707, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(n.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
            ],
            postCreateFunction: (t) => {
              t.getComponentByClass(n.ModelComponent).setTranslation(
                new n.Vector3(0.0013, 0, -0.0011),
              );
            },
          },
          sc_huygens_landing_site: {
            groups: ["titan", "sc_huygens", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "Huygens Landing Site",
            parents: [[157212064.184, "titan"]],
            controllers: [
              {
                type: "fixed",
                llaOnSpheroid: new n.LatLonAlt(
                  -0.18453331247520502,
                  2.9263055188728955,
                  0,
                ),
                coverage: [157212064.184, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_juice: {
            groups: ["jupiter", "ganymede", "spacecraft"],
            occlusionRadius: 0.007,
            extentsRadius: 0.0135,
            label: "JUICE",
            parents: [
              [734748207, "earth"],
              [735606318, "sun"],
              [777026548, "earth"],
              [778061110, "sun"],
              [809697014, "venus"],
              [810162491, "sun"],
              [843697642, "earth"],
              [844049179, "sun"],
              [916393497, "earth"],
              [916903199, "sun"],
              [994471790, "jupiter"],
              [1103217877, "ganymede"],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_juice/juice.gltf",
              shadowEntities: ["ganymede", "jupiter", "earth"],
            },
            controllers: [
              { type: "dynamo", url: "sc_juice/earth/launch" },
              { type: "dynamo", url: "sc_juice/sun" },
              { type: "dynamo", url: "sc_juice/earth/flyby1" },
              { type: "dynamo", url: "sc_juice/venus/flyby" },
              { type: "dynamo", url: "sc_juice/earth/flyby2" },
              { type: "dynamo", url: "sc_juice/earth/flyby3" },
              { type: "dynamo", url: "sc_juice/jupiter" },
              { type: "dynamo", url: "sc_juice/ganymede" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.XAxisNeg,
                },
                secondary: {
                  type: "align",
                  target: "sun",
                  axis: n.Vector3.YAxisNeg,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_juice/quat" },
            ],
          },
          sc_pioneer_10: {
            groups: ["sun", "jupiter", "spacecraft"],
            occlusionRadius: 0.002118055,
            extentsRadius: 0.003,
            label: "Pioneer 10",
            parents: [
              [-878291717.8145751, "earth"],
              [-878146409, "sun"],
              [-824046472, "jupiter"],
              [-822011429, "sun"],
            ],
            trail: { length: 31536e4 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_pioneer/pioneer.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_pioneer_10/earth/orb" },
              { type: "dynamo", url: "sc_pioneer_10/sun/1/orb" },
              { type: "dynamo", url: "sc_pioneer_10/jupiter/orb" },
              { type: "dynamo", url: "sc_pioneer_10/sun/2/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.YAxis,
                },
              },
            ],
          },
          sc_pioneer_11: {
            groups: ["sun", "jupiter", "saturn", "spacecraft"],
            occlusionRadius: 0.002118055,
            extentsRadius: 0.003,
            label: "Pioneer 11",
            parents: [
              [-843816855.8143449, "earth"],
              [-843644357, "sun"],
              [-792658454, "jupiter"],
              [-790152245, "sun"],
              [-643302619, "saturn"],
              [-640194311, "sun"],
            ],
            trail: { length: 31536e4 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_pioneer/pioneer.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_pioneer_11/earth/orb" },
              { type: "dynamo", url: "sc_pioneer_11/sun/1/orb" },
              { type: "dynamo", url: "sc_pioneer_11/jupiter/orb" },
              { type: "dynamo", url: "sc_pioneer_11/sun/2/orb" },
              { type: "dynamo", url: "sc_pioneer_11/saturn/orb" },
              { type: "dynamo", url: "sc_pioneer_11/sun/3/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.YAxis,
                },
              },
            ],
          },
          sc_voyager_1: {
            groups: ["jupiter", "saturn", "sun", "spacecraft"],
            occlusionRadius: 0.00183,
            extentsRadius: 0.0043,
            label: "Voyager 1",
            parents: [
              [-704412035.617, "earth"],
              [-703530245, "sun"],
              [-660264745, "jupiter"],
              [-655057463, "sun"],
              [-606239665, "saturn"],
              [-600733702, "sun"],
            ],
            trail: {
              length: 94608e4,
              lengthCoverages: [
                [15768e4, Number.NEGATIVE_INFINITY, 377123932.454],
                [94608e4, 377123932.454, Number.POSITIVE_INFINITY],
                [5184e3, -660264745, -655057463],
                [5184e3, -606239665, -600733702],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_voyager/Voyager.gltf",
              rotate: [{ x: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_voyager_1/earth/orb" },
              { type: "dynamo", url: "sc_voyager_1/sun/1/orb" },
              { type: "dynamo", url: "sc_voyager_1/jupiter/orb" },
              { type: "dynamo", url: "sc_voyager_1/sun/2/orb" },
              { type: "dynamo", url: "sc_voyager_1/saturn/orb" },
              { type: "dynamo", url: "sc_voyager_1/sun/3/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.ZAxisNeg,
                },
              },
              { type: "dynamo", url: "sc_voyager_1/ori" },
            ],
          },
          sc_voyager_2: {
            groups: [
              "jupiter",
              "saturn",
              "uranus",
              "neptune",
              "sun",
              "spacecraft",
            ],
            occlusionRadius: 0.00183,
            extentsRadius: 0.0043,
            label: "Voyager 2",
            parents: [
              [-705788847.817, "earth"],
              [-704774613, "sun"],
              [-650828783, "jupiter"],
              [-642276063, "sun"],
              [-582886481, "saturn"],
              [-574538624, "sun"],
              [-440395228, "uranus"],
              [-439259319, "sun"],
              [-327233138, "neptune"],
              [-326252606, "sun"],
            ],
            trail: {
              length: 94608e4,
              lengthCoverages: [
                [15768e4, Number.NEGATIVE_INFINITY, 651751314.724],
                [94608e4, 651751314.724, Number.POSITIVE_INFINITY],
                [5184e3, -650828783, -642276063],
                [5184e3, -582886481, -574538624],
                [5184e3, -440395228, -439259319],
                [5184e3, -327233138, -326252606],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_voyager/Voyager.gltf",
              rotate: [{ x: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_voyager_2/earth/orb" },
              { type: "dynamo", url: "sc_voyager_2/sun/1/orb" },
              { type: "dynamo", url: "sc_voyager_2/jupiter/orb" },
              { type: "dynamo", url: "sc_voyager_2/sun/2/orb" },
              { type: "dynamo", url: "sc_voyager_2/saturn/orb" },
              { type: "dynamo", url: "sc_voyager_2/sun/3/orb" },
              { type: "dynamo", url: "sc_voyager_2/uranus/orb" },
              { type: "dynamo", url: "sc_voyager_2/sun/4/orb" },
              { type: "dynamo", url: "sc_voyager_2/neptune/orb" },
              { type: "dynamo", url: "sc_voyager_2/sun/5/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.ZAxisNeg,
                },
              },
              { type: "dynamo", url: "sc_voyager_2/ori" },
            ],
          },
        });
        const a = [
          [-13098535.817, -13098146.797],
          [-12342535.817, -12342421.197],
          [-10612735.817, -10612663.357],
          [14274064.185, 14274070.255],
          [36653454.185, 36653459.605],
          [71128864.186, 71128875.066],
          [105091264.185, 105091282.755],
          [118339264.182, 118339287.092],
          [138968824.185, 138969181.735],
          [140692084.184, 140692123.174],
          [141916392.184, 141922237.024],
          [146548444.183, 146551498.073],
          [147846664.183, 147846668.693],
          [152302564.182, 152302569.842],
          [154285264.183, 154285267.193],
          [156518584.184, 156518669.274],
          [157466284.184, 157466438.074],
          [159139264.184, 159139404.074],
          [160168144.185, 160168264.795],
          [161978464.185, 161978469.745],
          [163011064.185, 163011104.295],
          [163869664.186, 163869667.996],
          [164528404.186, 164528414.466],
          [165853384.186, 165853391.046],
          [166370464.186, 166370502.696],
          [168008344.186, 168008476.766],
          [174127084.184, 174127086.454],
          [176341864.183, 176341881.793],
          [176952124.183, 176952139.533],
          [178261744.183, 178261753.433],
          [178699444.183, 178699535.673],
          [180420064.182, 180420240.372],
          [182368684.182, 182368777.962],
          [184039204.183, 184039282.793],
          [185162584.183, 185162597.343],
          [196273205.186, 196273208.936],
          [197566385.186, 197566387.476],
          [199978145.185, 199978148.205],
          [202994705.185, 202994717.245],
          [207734765.183, 207734800.073],
          [211183265.182, 211183306.302],
          [211500485.182, 211500537.082],
          [212965745.182, 212965786.692],
          [214371665.182, 214371670.582],
          [216354545.183, 216354568.983],
          [219456245.183, 219456251.063],
          [219887345.184, 219887389.034],
          [220835165.184, 220835169.094],
          [221266265.184, 221266275.434],
          [222644225.185, 222644240.975],
          [224109485.185, 224109487.885],
          [226090325.185, 226090329.355],
          [227038025.186, 227038032.946],
          [227469065.186, 227469075.266],
          [228387005.186, 228387008.496],
          [228846905.186, 228846923.006],
          [230225585.186, 230225608.176],
          [231577265.185, 231577300.725],
          [232982885.185, 232982919.625],
          [233930525.185, 233930529.665],
          [234334565.185, 234334641.855],
          [235309205.185, 235309210.915],
          [235740245.184, 235740294.424],
          [239704565.183, 239704568.933],
          [242004965.183, 242004968.253],
          [242979665.182, 242979748.272],
          [244876985.182, 244876993.442],
          [247203665.183, 247203671.283],
          [248986685.183, 248986692.503],
          [249417845.183, 249417942.863],
          [250365665.183, 250365669.503],
          [250801865.183, 250801924.453],
          [252201785.184, 252201798.884],
          [253728965.184, 253728983.974],
          [255535625.185, 255535853.415],
          [256682225.185, 256682228.065],
          [257684225.185, 257684269.165],
          [258146525.185, 258146533.105],
          [258722525.186, 258722543.076],
          [261147905.186, 261147925.516],
          [262453685.186, 262453688.326],
          [264259265.185, 264259272.395],
          [267474305.184, 267474379.954],
          [271073765.183, 271073780.663],
          [272731805.183, 272731887.753],
          [275208605.182, 275208611.692],
          [276214805.182, 276214829.892],
          [277127525.182, 277127545.362],
          [277506665.182, 277506708.062],
          [279455045.183, 279455100.823],
          [279799805.183, 279799837.073],
          [280747565.183, 280747571.013],
          [282126485.183, 282126503.483],
          [282471245.183, 282471256.053],
          [286040946.185, 286040974.915],
          [287532306.185, 287532308.475],
          [289858866.186, 289858897.046],
          [291603966.186, 291603971.806],
          [292809906.186, 292809948.366],
          [294188586.186, 294188602.066],
          [295567266.185, 295567279.505],
          [296945946.185, 296945956.015],
          [297893586.185, 297893599.995],
          [299272206.184, 299272220.614],
          [300687786.184, 300687808.034],
          [302066526.183, 302066563.313],
          [303703506.183, 303703583.793],
          [304824006.183, 304824009.283],
          [305390946.183, 305390972.583],
          [308925306.182, 308925311.352],
          [309355506.182, 309355530.682],
          [310684866.183, 310684869.093],
          [312200586.183, 312200601.223],
          [534124756.143, 534124760.143],
        ],
          l = [
            [393471366, 393501486],
            [399019747, 399883447],
            [400569547, 400988887],
            [420541747, 420794647],
            [454490527, 454650187],
            [487136707, 487309687],
            [519804068, 521041748],
            [528958868, 529749008],
          ],
          c = [
            [399637867.183, 399639659.183],
            [400933867.182, 400935660.182],
            [420714067.185, 420714072.185],
            [454572067.185, 454572072.185],
            [487231267.185, 487231272.185],
            [520957868.184, 520959604.184],
          ],
          h = [
            [365835906, "velocity"],
            [365836206, "sun"],
            [371908866, "sun"],
            [371909466, "earth"],
            [399631646, "earth"],
            [399632628, "sun"],
            [399635271, "sun"],
            [399636306, "-velocity"],
            [399640481, "-velocity"],
            [399641686, "sun"],
            [399700717, "sun"],
            [399641887, "earth"],
            [400927646, "earth"],
            [400928454, "sun"],
            [400931272, "sun"],
            [400932282, "-velocity"],
            [400936477, "-velocity"],
            [400937632, "sun"],
            [401003197, "sun"],
            [401009197, "earth"],
            [423014467, "earth"],
            [423014767, "sun"],
            [436924867, "sun"],
            [436925167, "earth"],
            [520954868, "earth"],
            [520955888, "-velocity"],
            [520960808, "-velocity"],
            [520962008, "sun"],
            [521018048, "sun"],
            [521025625, "earth"],
          ],
          u = [
            [394545667, (1 * Math.PI) / 30],
            [394545967, (2 * Math.PI) / 30],
            [399636967, (2 * Math.PI) / 30],
            [399637264, (5 * Math.PI) / 30],
            [399637866, (5 * Math.PI) / 30],
            [399639659, (5.5 * Math.PI) / 30],
            [399639788, (5.5 * Math.PI) / 30],
            [399640072, (2 * Math.PI) / 30],
            [400932921, (2 * Math.PI) / 30],
            [400933214, (5 * Math.PI) / 30],
            [400933866, (5 * Math.PI) / 30],
            [400935660, (5.5 * Math.PI) / 30],
            [400935790, (5.5 * Math.PI) / 30],
            [400936068, (2 * Math.PI) / 30],
            [520956548, (2 * Math.PI) / 30],
            [520956848, (5 * Math.PI) / 30],
            [520960088, (5 * Math.PI) / 30],
            [520960388, (2 * Math.PI) / 30],
            [521025625, (2 * Math.PI) / 30],
          ],
          d = [
            [157212064.184, (7.5 * Math.PI) / 30],
            [158965863.184, (7.5 * Math.PI) / 30],
            [158966163.184, (2.6 * Math.PI) / 30],
            [158966434.184, 0],
            [158966883.184, (-5.6 * Math.PI) / 30],
            [158967123.184, (-9.7 * Math.PI) / 30],
            [158967363.184, (-7.3 * Math.PI) / 30],
            [158968263.184, (-2.8 * Math.PI) / 30],
            [158973723.184, (-1 * Math.PI) / 30],
          ];
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(662),
          o = s(5);
        i.Entity.register({
          sc_dart: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "65803_didymos",
              "dimorphos",
              "spacecraft",
            ],
            occlusionRadius: 0.0012,
            extentsRadius: 0.00625,
            label: "DART",
            parents: [
              [691007069, "earth"],
              [691418893, "sun"],
              [717454117, "65803_didymos"],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_dart/dart.gltf",
              shadowEntities: ["earth"],
            },
            controllers: [
              { type: "dynamo", url: "sc_dart/earth/orb" },
              { type: "dynamo", url: "sc_dart/sun/orb" },
              { type: "dynamo", url: "sc_dart/65803_didymos/pos" },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      717503237,
                      new o.Vector3(
                        -10320.163052194115,
                        13421.106828492655,
                        5349.381737812169,
                      ),
                    ),
                    e.addPositionKeyframe(
                      717506127.238318,
                      new o.Vector3(
                        -0.9047084058613565,
                        -0.7147384471771195,
                        -0.30125475602973617,
                      ),
                    ),
                    e
                  );
                },
              },
              {
                type: "align",
                primary: {
                  type: "velocity",
                  target: "sc_dart",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                coverage: [Number.NEGATIVE_INFINITY, 717454117],
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "dimorphos",
                  axis: o.Vector3.ZAxisNeg,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: o.Vector3.YAxis,
                },
                coverage: [717454117, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_dawn: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "dwarf planet spacecraft",
              "4_vesta",
              "1_ceres",
              "spacecraft",
            ],
            occlusionRadius: 885e-6,
            extentsRadius: 0.00985,
            label: "Dawn",
            parents: [
              [244168849.8323595, "earth"],
              [244461608, "sun"],
              [288169447, "mars"],
              [288210177, "sun"],
              [363182466, "4_vesta"],
              [400075267, "sun"],
              [476712067, "1_ceres"],
              [594302469.184, ""],
            ],
            trail: { length: 659889.75 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_dawn/model.gltf",
              rotate: [{ z: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_dawn/earth/orb" },
              { type: "dynamo", url: "sc_dawn/sun/1/orb" },
              { type: "dynamo", url: "sc_dawn/mars/orb" },
              { type: "dynamo", url: "sc_dawn/sun/2/orb" },
              { type: "dynamo", url: "sc_dawn/vesta/orb" },
              { type: "dynamo", url: "sc_dawn/sun/3/orb" },
              { type: "dynamo", url: "sc_dawn/ceres/orb" },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.9999478154504517,
                  0.008904517167862874,
                  0.004868284692665544,
                  -0.0011729254143642916,
                ),
                coverage: [244168849.8323595, 244171353.18400002],
              },
              { type: "dynamo", url: "sc_dawn/ori" },
            ],
          },
          sc_deep_impact: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "9p_tempel_1",
              "103p_hartley_2",
              "spacecraft",
            ],
            occlusionRadius: 0.00165,
            extentsRadius: 0.003,
            label: "Deep Impact",
            parents: [
              [158829812.068274, "earth"],
              [159287744, "sun"],
              [173560752, "9p_tempel_1"],
              [173923158, "sun"],
              [251798121, "earth"],
              [253531474, "sun"],
              [282984399, "earth"],
              [285405903, "sun"],
              [330384030, "earth"],
              [331534813, "sun"],
              [342017751, "103p_hartley_2"],
              [342368983, "sun"],
              [429192067, ""],
            ],
            trail: {
              length: 47421459,
              lengthCoverages: [
                [362406, 173560752, 173923158],
                [1733353, 251798121, 253531474],
                [2421504, 282984399, 285405903],
                [1150783, 330384030, 331534813],
                [351232, 342017751, 342368983],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_deep_impact/deep_impact_wo_impactor.gltf",
              rotate: [{ y: -90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_deep_impact/earth/launch/orb" },
              { type: "dynamo", url: "sc_deep_impact/sun/orb" },
              { type: "dynamo", url: "sc_deep_impact/9p_tempel_1/pos" },
              { type: "dynamo", url: "sc_deep_impact/earth/flyby1/orb" },
              { type: "dynamo", url: "sc_deep_impact/earth/flyby2/orb" },
              { type: "dynamo", url: "sc_deep_impact/earth/flyby3/orb" },
              { type: "dynamo", url: "sc_deep_impact/103p_hartley_2/pos" },
              { type: "fixed", orientation: o.Quaternion.Identity },
              { type: "dynamo", url: "sc_deep_impact/quat" },
            ],
          },
          sc_deep_impact_impactor: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "9p_tempel_1",
              "sc_deep_impact",
              "spacecraft",
            ],
            occlusionRadius: 0.001,
            extentsRadius: 0.001,
            label: "Deep Impact Impactor",
            parents: [
              [158829812.068274, "sc_deep_impact"],
              [173642464.18400002, "9p_tempel_1"],
              [173727938.18158135, ""],
            ],
            trail: { length: 27830 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_deep_impact_impactor/deep_impact_impactor.gltf",
              rotate: [{ y: -90 }],
            },
            controllers: [
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      173642464.18400002,
                      new o.Vector3(-713e-6, -55e-6, 0),
                      "sc_deep_impact",
                      void 0,
                      "sc_deep_impact",
                    ),
                    e.addPositionKeyframe(
                      173656621.40411958,
                      new o.Vector3(
                        -123095.24746842826,
                        -48294.70341251187,
                        61743.99881253781,
                      ),
                      "sc_deep_impact",
                      173642464.18400002,
                    ),
                    e.addPositionKeyframe(
                      173727938.18158135,
                      new o.Vector3(
                        1.580046751199936,
                        3.178179950746365,
                        -0.628457454223176,
                      ),
                    ),
                    e
                  );
                },
              },
              {
                type: "fixed",
                position: new o.Vector3(-713e-6, -55e-6, 0),
                orientation: o.Quaternion.Identity,
                relativeToEntity: "sc_deep_impact",
                coverage: [158829812.068274, 173642464.18400002],
              },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.9060465048532422,
                  0.3173702681972099,
                  0.2649483984949708,
                  0.09032269948692226,
                ),
                coverage: [173642464.18400002, Number.POSITIVE_INFINITY],
              },
              {
                type: "dynamo",
                url: "sc_deep_impact_impactor/quat",
                coverage: [173642464.18400002, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_deep_impact_impactor_impact_site: {
            groups: [
              "small body sites",
              "comet sites",
              "9p_tempel_1",
              "sc_deep_impact",
              "sc_deep_impact_impactor",
              "sites",
            ],
            radius: 0.001,
            label: "Deep Impact Impactor Impact Site",
            parents: [[173727938.18158135, "9p_tempel_1"]],
            controllers: [
              {
                type: "fixed",
                position: new o.Vector3(
                  3.1153282512332603,
                  -1.2860729555237982,
                  -1.277920399403075,
                ),
                orientation: o.Quaternion.Identity,
                relativeToEntity: "9p_tempel_1",
                coverage: [173727938.18158135, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_deep_space_1: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "9969_braille",
              "spacecraft",
            ],
            occlusionRadius: 0.00125,
            extentsRadius: 0.005,
            label: "Deep Space 1",
            parents: [
              [-37470248, "earth"],
              [-36628312, "sun"],
              [-13523799, "9969_braille"],
              [-13496699, "sun"],
              [54458637, "19p_borrelly"],
              [54476825, "sun"],
              [61977664.184, ""],
            ],
            trail: {
              length: 40845609,
              lengthCoverages: [
                [27100, -13523799, -13496699],
                [18188, 54458637, 54476825],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_deep_space_1/deep_space_1.gltf",
              rotate: [{ x: 90 }, { z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_deep_space_1/earth/orb" },
              { type: "dynamo", url: "sc_deep_space_1/sun/orb" },
              { type: "dynamo", url: "sc_deep_space_1/9969_braille/pos" },
              { type: "dynamo", url: "sc_deep_space_1/19p_borrelly/pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: o.Vector3.XAxis,
                  target: "earth",
                },
                secondary: {
                  type: "point",
                  axis: o.Vector3.ZAxisNeg,
                  target: "sun",
                },
              },
              { type: "dynamo", url: "sc_deep_space_1/quat" },
            ],
          },
          sc_near_shoemaker: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "253_mathilde",
              "433_eros",
              "spacecraft",
            ],
            occlusionRadius: 0.002,
            extentsRadius: 0.0034,
            label: "NEAR",
            parents: [
              [-122129937, "sun"],
              [-61397606, "earth"],
              [-60793811, "sun"],
              [-79403925, "253_mathilde"],
              [-79210250, "sun"],
              [-8425610, "433_eros"],
              [36675809.3654, ""],
            ],
            trail: {
              length: 63919069,
              lengthCoverages: [
                [4e5, -8425610, 35279032.137],
                [0, 35279032.137, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_near_shoemaker/near.gltf",
              rotate: [{ x: 90 }, { z: 135 }],
            },
            controllers: [
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.OrbitalElementsController),
                    s = new o.OrbitalElements();
                  return (
                    (s.eccentricity = 0.3722732412046076),
                    (s.epoch = -122129937),
                    (s.semiMajorAxis = 235420679.8644008),
                    s.orbitOrientation.set(
                      0.25408339907533106,
                      0.05463135384055627,
                      -0.18986948069810847,
                      0.9467875272685549,
                    ),
                    (s.meanAngularMotion = 1.0085301888805118e-7),
                    (s.meanAnomalyAtEpoch = -0.005941352116228519),
                    e.addOrbitalElements(-122129937, s),
                    e.addOrbitalElements(-113227200, s),
                    e.setCoverage(new o.Interval(-122129937, -113227200)),
                    e
                  );
                },
              },
              { type: "dynamo", url: "sc_near_shoemaker/sun/orb" },
              { type: "dynamo", url: "sc_near_shoemaker/earth/flyby/orb" },
              { type: "dynamo", url: "sc_near_shoemaker/253_mathilde/pos" },
              { type: "dynamo", url: "sc_near_shoemaker/433_eros/orb" },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.5052018803124495,
                  -0.11842169431143575,
                  0.7652511949887616,
                  -0.3809697770341459,
                ),
                coverage: [-122129937, -121953528.049046],
              },
              { type: "dynamo", url: "sc_near_shoemaker/quat" },
              {
                type: "fixed",
                position: new o.Vector3(
                  0.930389249841349,
                  4.935129554115763,
                  -4.002004469114965,
                ),
                orientation: new o.Quaternion(
                  0.11222410400554989,
                  0.7066112547219852,
                  -0.6897721372150081,
                  0.11099857612696495,
                ),
                coverage: [35279032.137, 36675809.3654],
              },
              {
                type: "rotateByEntityOrientation",
                coverage: [35279032.137, 36675809.3654],
              },
            ],
          },
          sc_near_shoemaker_landing_site: {
            groups: ["433_eros", "sc_near_shoemaker", "sites"],
            radius: 0.001,
            systemRadius: 200,
            label: "NEAR Shoemaker Landing Site",
            parents: [[36675809.3654, "433_eros"]],
            controllers: [
              {
                type: "fixed",
                position: new o.Vector3(
                  0.930389249841349,
                  4.935129554115763,
                  -4.002004469114965,
                ),
                orientation: new o.Quaternion(
                  0.11222410400554989,
                  0.7066112547219852,
                  -0.6897721372150081,
                  0.11099857612696495,
                ),
                relativeToEntity: "433_eros",
                coverage: [36675809.3654, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_lucy: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "52246_donaldjohanson",
              "3548_eurybates",
              "15094_polymele",
              "11351_leucus",
              "21900_orus",
              "617_patroclus",
              "menoetius",
              "spacecraft",
            ],
            occlusionRadius: 0.002,
            extentsRadius: 0.007125,
            label: "Lucy",
            parents: [
              [687656642.763, "earth"],
              [687915086, "sun"],
              [718960993, "earth"],
              [719531941, "sun"],
              [787134972, "earth"],
              [787532222, "sun"],
              [798252820, "52246_donaldjohanson"],
              [798584539, "sun"],
              [870652086, "3548_eurybates"],
              [872642047, "sun"],
              [872642047, "15094_polymele"],
              [875308504, "sun"],
              [891166024, "11351_leucus"],
              [894761809, "sun"],
              [909384911, "21900_orus"],
              [912190135, "sun"],
              [977590306, "earth"],
              [978108682, "sun"],
              [1046169596, "617_patroclus_barycenter"],
              [1047892376, "sun"],
            ],
            dependents: ["152830_dinkinesh"],
            trail: {
              length: 63919069,
              lengthCoverages: [
                [570948, 718960993, 719531941],
                [397250, 787134972, 787532222],
                [331719, 798252820, 798584539],
                [1989961, 870652086, 872642047],
                [2666457, 872642047, 875308504],
                [3595785, 891166024, 894761809],
                [2805224, 909384911, 912190135],
                [518376, 977590306, 978108682],
                [1722780, 1046169596, 1047892376],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_lucy/lucy.gltf",
              rotate: [{ x: 90 }, { z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_lucy/earth/launch/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
              { type: "dynamo", url: "sc_lucy/sun/orb" },
              { type: "dynamo", url: "sc_lucy/earth/flyby1/orb" },
              { type: "dynamo", url: "sc_lucy/earth/flyby2/orb" },
              { type: "dynamo", url: "sc_lucy/52246_donaldjohanson/pos" },
              { type: "dynamo", url: "sc_lucy/3548_eurybates/pos" },
              { type: "dynamo", url: "sc_lucy/15094_polymele/pos" },
              { type: "dynamo", url: "sc_lucy/11351_leucus/pos" },
              { type: "dynamo", url: "sc_lucy/21900_orus/pos" },
              { type: "dynamo", url: "sc_lucy/earth/flyby3/orb" },
              { type: "dynamo", url: "sc_lucy/617_patroclus/pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  axis: o.Vector3.XAxis,
                  target: "earth",
                },
                secondary: {
                  type: "align",
                  axis: o.Vector3.YAxis,
                  target: "sun",
                  targetAxis: o.Vector3.ZAxis,
                },
              },
              { type: "dynamo", url: "sc_lucy/quat" },
            ],
          },
          sc_new_horizons: {
            groups: [
              "small body spacecraft",
              "dwarf planet spacecraft",
              "TNO spacecraft",
              "134340_pluto",
              "486958_arrokoth",
              "spacecraft",
            ],
            occlusionRadius: 0.00135,
            extentsRadius: 0.0026,
            label: "New Horizons",
            parents: [
              [190972278.33046317, "earth"],
              [191055829, "sun"],
              [225619606, "jupiter"],
              [226100665, "sun"],
              [490130161, "134340_pluto"],
              [490167848, "sun"],
              [598753684, "486958_arrokoth"],
              [600203601, "sun"],
            ],
            trail: { length: 94608e3 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_new_horizons/new_horizons.gltf",
              rotate: [{ y: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_new_horizons/earth/orb" },
              { type: "dynamo", url: "sc_new_horizons/sun/1/orb" },
              { type: "dynamo", url: "sc_new_horizons/jupiter/orb" },
              { type: "dynamo", url: "sc_new_horizons/sun/2/orb" },
              { type: "dynamo", url: "sc_new_horizons/pluto/orb" },
              { type: "dynamo", url: "sc_new_horizons/sun/3/pos" },
              { type: "dynamo", url: "sc_new_horizons/mu69/pos" },
              { type: "dynamo", url: "sc_new_horizons/sun/4/pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.YAxis,
                },
              },
              { type: "dynamo", url: "sc_new_horizons/ori/1" },
              { type: "dynamo", url: "sc_new_horizons/ori/2" },
            ],
          },
          sc_rosetta: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "67p_churyumov_gerasimenko",
              "spacecraft",
            ],
            occlusionRadius: 0.0014,
            extentsRadius: 0.016,
            label: "Rosetta",
            parents: [
              [131491581.583, "earth"],
              [131901500, "sun"],
              [162704887, "earth"],
              [163831232, "sun"],
              [225623375, "mars"],
              [225657862, "sun"],
              [248111015, "earth"],
              [248475560, "sun"],
              [311055929, "earth"],
              [311664877, "sun"],
              [452394238, "67p_churyumov_gerasimenko"],
              [528503957.968, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_rosetta/rosettaPhilae.gltf",
              rotate: [{ x: 180 }, { z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_rosetta/earth/launch/orb" },
              { type: "fixed", orientation: o.Quaternion.Identity },
              { type: "dynamo", url: "sc_rosetta/sun/1/orb" },
              { type: "dynamo", url: "sc_rosetta/earth/flyby1/orb" },
              { type: "dynamo", url: "sc_rosetta/sun/2/orb" },
              { type: "dynamo", url: "sc_rosetta/mars/flyby/orb" },
              { type: "dynamo", url: "sc_rosetta/sun/3/orb" },
              { type: "dynamo", url: "sc_rosetta/earth/flyby2/orb" },
              { type: "dynamo", url: "sc_rosetta/sun/4/orb" },
              { type: "dynamo", url: "sc_rosetta/earth/flyby3/orb" },
              { type: "dynamo", url: "sc_rosetta/sun/5/orb" },
              {
                type: "dynamo",
                url: "sc_rosetta/67p_churyumov_gerasimenko/pos",
              },
              { type: "dynamo", url: "sc_rosetta/ori" },
              {
                type: "coverage",
                coverage: [469053367.183, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  null !== e && e.setHiddenObject("Philae", !0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  null !== e && e.setHiddenObject("Philae", !1);
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.AlignController);
                  return (
                    e.setJoint("panels_01"),
                    e.setSecondaryAlignType("point"),
                    e.setSecondaryAxis(o.Vector3.ZAxis),
                    e.setSecondaryTargetEntity("sun"),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.AlignController);
                  return (
                    e.setJoint("panels_02"),
                    e.setSecondaryAlignType("point"),
                    e.setSecondaryAxis(o.Vector3.ZAxis),
                    e.setSecondaryTargetEntity("sun"),
                    e
                  );
                },
              },
            ],
          },
          sc_rosetta_impact_site: {
            groups: [
              "small body sites",
              "comet sites",
              "67p_churyumov_gerasimenko",
              "sc_rosetta",
              "sites",
            ],
            radius: 0.001,
            label: "Rosetta Impact Site",
            parents: [[528503957.968, "67p_churyumov_gerasimenko"]],
            controllers: [
              {
                type: "fixed",
                position: new o.Vector3(
                  1.7309310500292525,
                  0.3509303067271947,
                  1.1641920075039298,
                ),
                orientation: o.Quaternion.Identity,
                relativeToEntity: "67p_churyumov_gerasimenko",
                coverage: [528503957.968, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_osiris_rex: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "101955_bennu",
              "spacecraft",
            ],
            occlusionRadius: 0.0016,
            extentsRadius: 0.005,
            label: "OSIRIS-REx",
            parents: [
              [526676400, "earth"],
              [527025408, "sun"],
              [558938468, "earth"],
              [559919190, "sun"],
              [591770603, "101955_bennu"],
              [674049669, "sun"],
              [748358886, "earth"],
              [749140122, "sun"],
            ],
            dependents: ["sc_osiris_rex_src", "99942_apophis"],
            trail: {
              length: 102742.5,
              lengthCoverages: [
                [1e7, Number.NEGATIVE_INFINITY, 599748661],
                [672e3, 599748661, 668095733],
                [1e7, 668095733, Number.POSITIVE_INFINITY],
              ],
            },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_osiris_rex_v2/osiris_rex_articulated_panels.gltf",
              rotate: [{ x: 90 }],
              shadowEntities: ["bennu"],
            },
            controllers: [
              { type: "dynamo", url: "sc_osiris_rex/earth/launch/orb" },
              { type: "dynamo", url: "sc_osiris_rex/sun/1/orb" },
              { type: "dynamo", url: "sc_osiris_rex/earth/flyby/orb" },
              { type: "dynamo", url: "sc_osiris_rex/sun/2/orb" },
              { type: "dynamo", url: "sc_osiris_rex/bennu/pos" },
              { type: "dynamo", url: "sc_osiris_rex/sun/3/orb" },
              { type: "dynamo", url: "sc_osiris_rex/earth/sample_return/orb" },
              { type: "dynamo", url: "sc_osiris_rex/sun/4/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: new o.Vector3(
                    0.175109477645991,
                    0.45028151394683397,
                    0.8755473882299549,
                  ),
                },
                secondary: {
                  type: "align",
                  target: "sun",
                  axis: o.Vector3.XAxis,
                  targetAxis: o.Vector3.ZAxis,
                },
                coverage: [658200668.0606446, Number.POSITIVE_INFINITY],
              },
              { type: "dynamo", url: "sc_osiris_rex/ori" },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeSubobjectVisibleAnimation(
                    e,
                    "Tagsam_housing_cover",
                    !0,
                    [[593036911, !1]],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Tagsam_rod_bottom",
                    "z",
                    [
                      [595442726, 0],
                      [595442906, -2.51758508612],
                      [595443086, -2.51758508612],
                      [595443266, 0],
                      [656489486, 0],
                      [656489846, -3.71758508612],
                      [656502896, -3.71758508612],
                      [656503076, 0],
                      [657366686, 0],
                      [657367046, -2.73771997401],
                      [657367406, 0],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Tagsam_rod_top",
                    "z",
                    [
                      [593728111, 0],
                      [593728113, 0.15],
                      [595442726, 0.15],
                      [595442906, 2.73247002363],
                      [595443086, 2.73247002363],
                      [595443266, 0.15],
                      [656489486, 0.15],
                      [656489846, 3.73247002363],
                      [656502896, 3.73247002363],
                      [656503076, 0.15],
                      [657366686, 0.15],
                      [657366866, 1.16136826422],
                      [657367046, 0.509601235],
                      [657367226, 1.16136826422],
                      [657367406, 0.15],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "tagsam_head",
                    "z",
                    [
                      [595442906, 0],
                      [595442996, 1.57079632679],
                      [595443086, 1.57079632679],
                      [656489486, 0],
                      [656489576, 1.57079632679],
                      [656502806, 1.57079632679],
                      [656502896, 0],
                      [657366686, 0],
                      [657367046, 1.01463145268],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeSubobjectVisibleAnimation(
                    e,
                    "tagsam_head",
                    !0,
                    [[657367046, !1]],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Gimbal_Base_Right",
                    "z",
                    [
                      [656501483, (-70 * Math.PI) / 180],
                      [656501603, 0],
                      [656503242, 0],
                      [656503602, (-70 * Math.PI) / 180],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Gimbal_Base_Left",
                    "z",
                    [
                      [656501483, (-70 * Math.PI) / 180],
                      [656501603, 0],
                      [656503242, 0],
                      [656503602, (-70 * Math.PI) / 180],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Gimbal_Pivot_Right",
                    "x",
                    [
                      [656501603, 0],
                      [656501723, (38 * Math.PI) / 180],
                      [656503242, (38 * Math.PI) / 180],
                      [656503362, 0],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeJointRotationAnimation(
                    e,
                    "Gimbal_Pivot_Left",
                    "x",
                    [
                      [656501603, 0],
                      [656501723, (-38 * Math.PI) / 180],
                      [656503242, (-38 * Math.PI) / 180],
                      [656503362, 0],
                    ],
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  return n.Animation.makeSubobjectVisibleAnimation(
                    e,
                    "heatshield",
                    !0,
                    [[748824183.985732, !1]],
                  );
                },
              },
            ],
          },
          sc_osiris_rex_src: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "101955_bennu",
              "sample return capsule",
            ],
            occlusionRadius: 8e-4,
            extentsRadius: 5e-4,
            label: "OSIRIS-REx SRC",
            parents: [
              [748824183.985732, "sc_osiris_rex"],
              [748832190, "earth"],
              [748839215, ""],
            ],
            dependents: ["sc_osiris_rex"],
            trail: { length: 360 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_osiris_rex_v2/src/osiris_rex_heatshield.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_osiris_rex_src/sc_osiris_rex" },
              { type: "dynamo", url: "sc_osiris_rex_src/earth" },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  -0.7795827954678449,
                  -0.23701239922750972,
                  0.5441503490850964,
                  -0.19994045416955505,
                ),
              },
              {
                type: "coverage",
                coverage: [748838642, 748839373],
                enter: (t) => {
                  const e = t.getComponentByClass(o.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(o.TrailComponent);
                  null !== e && e.setRelativeToEntityOrientation(!1);
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.TranslateController);
                  return (
                    e.setTranslation(new o.Vector3(0, 0, 0.0012)),
                    e.setRelativeToOrientation(!0),
                    e
                  );
                },
                coverage: [748824183.985732, 748839215],
              },
            ],
            postCreateFunction: (t) => {
              t.getComponentByClass(o.ModelComponent).setTranslation(
                new o.Vector3(0, 0, -0.0012),
              );
            },
          },
          sc_philae: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "67p_churyumov_gerasimenko",
              "spacecraft",
              "landers",
            ],
            occlusionRadius: 6e-4,
            extentsRadius: 0.001,
            label: "Philae",
            parents: [
              [469053367.183, "67p_churyumov_gerasimenko"],
              [469078512.324, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_philae/philae.gltf",
              rotate: [{ x: 180 }, { z: 90 }],
            },
            controllers: [
              {
                type: "dynamo",
                url: "sc_philae/67p_churyumov_gerasimenko/pos",
              },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.05763938670269045,
                  0.04093459828351704,
                  0.6750586755218195,
                  0.7343690110337115,
                ),
              },
              {
                type: "custom",
                func: (t) => {
                  const e = new o.Vector3(
                    0.0021658104318583687,
                    0.0011575046500869896,
                    0.00011875498849156656,
                  ),
                    s = new o.Vector3(0.00147, 0, 0),
                    i = t.addControllerByClass(o.TranslateController);
                  i.setTranslation(e);
                  return (
                    t.getComponentByClass(o.ModelComponent).setTranslation(s), i
                  );
                },
                coverage: [469053367.183, 469078512.324],
              },
            ],
          },
          sc_philae_landing_site: {
            groups: [
              "small body sites",
              "comet sites",
              "67p_churyumov_gerasimenko",
              "sc_philae",
              "sites",
            ],
            radius: 0.001,
            systemRadius: 200,
            label: "Philae Landing Site",
            parents: [[469078512.324, "67p_churyumov_gerasimenko"]],
            controllers: [
              {
                type: "fixed",
                position: new o.Vector3(
                  2.4452763955965984,
                  -0.12110982508097201,
                  -0.36032099522959377,
                ),
                orientation: o.Quaternion.Identity,
                relativeToEntity: "67p_churyumov_gerasimenko",
                coverage: [469078512.324, Number.POSITIVE_INFINITY],
              },
            ],
          },
          sc_psyche: {
            groups: [
              "small body spacecraft",
              "asteroid spacecraft",
              "16_psyche",
              "spacecraft",
            ],
            occlusionRadius: 0.0031,
            extentsRadius: 0.025,
            label: "Psyche",
            parents: [
              [750482453, "earth"],
              [750686758, "sun"],
              [831828698, "mars"],
              [832302380, "sun"],
              [931665741, "16_psyche"],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_psyche/psyche.gltf",
              rotate: [{ y: -90 }, { x: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_psyche/earth/orb" },
              { type: "dynamo", url: "sc_psyche/sun/orb" },
              { type: "dynamo", url: "sc_psyche/mars/orb" },
              { type: "dynamo", url: "sc_psyche/16_psyche/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: o.Vector3.XAxisNeg,
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.AlignController);
                  return (
                    e.setJoint("ArrayGimbleLeft"),
                    e.setSecondaryAlignType("point"),
                    e.setSecondaryAxis(o.Vector3.YAxis),
                    e.setSecondaryTargetEntity("sun"),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.AlignController);
                  return (
                    e.setJoint("ArrayGimbleRight"),
                    e.setSecondaryAlignType("point"),
                    e.setSecondaryAxis(o.Vector3.YAxis),
                    e.setSecondaryTargetEntity("sun"),
                    e
                  );
                },
              },
            ],
          },
          sc_stardust: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "81p_wild_2",
              "9p_tempel_1",
              "spacecraft",
            ],
            occlusionRadius: 65e-5,
            extentsRadius: 0.003,
            label: "Stardust",
            parents: [
              [-28304869.3, "earth"],
              [-28038699, "sun"],
              [32627842, "earth"],
              [33120541, "sun"],
              [89379733, "5535_annefrank"],
              [89550209, "sun"],
              [126009572, "81p_wild_2"],
              [126678668, "sun"],
              [190336290, "earth"],
              [190866114, "sun"],
              [284944970, "earth"],
              [285742028, "sun"],
              [350896766, "9p_tempel_1"],
              [351068113, "sun"],
              [354279666, ""],
            ],
            trail: { length: 62659492 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_stardust/stardust_articulated.gltf",
              shadowEntities: ["earth"],
              rotate: [{ x: 90 }, { z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_stardust/earth/launch/orb" },
              { type: "dynamo", url: "sc_stardust/sun/orb" },
              { type: "dynamo", url: "sc_stardust/earth/flyby1/orb" },
              { type: "dynamo", url: "sc_stardust/5535_annefrank/pos" },
              { type: "dynamo", url: "sc_stardust/81p_wild_2/pos" },
              { type: "dynamo", url: "sc_stardust/earth/flyby2/orb" },
              { type: "dynamo", url: "sc_stardust/earth/flyby3/orb" },
              { type: "dynamo", url: "sc_stardust/9p_tempel_1/pos" },
              { type: "dynamo", url: "sc_stardust/quat" },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.382740492391079,
                  -0.1080542417135509,
                  -0.5511677923678098,
                  -0.7335175941913997,
                ),
                coverage: [351017063, 354279666],
              },
              {
                type: "coverage",
                coverage: [190576690.7833838, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  for (const t of [
                    "Stardust_capsule",
                    "Stardust_tex_01_c",
                    "Stardust_tex_02_c",
                    "Stardust_tex_03_c",
                    "Stardust_tex_02_c2",
                    "Stardust_Sample_Collection1",
                  ])
                    e.setHiddenObject(t, !0);
                },
                exit: (t) => {
                  const e = t.getComponentByClass(o.ModelComponent);
                  for (const t of [
                    "Stardust_capsule",
                    "Stardust_tex_01_c",
                    "Stardust_tex_02_c",
                    "Stardust_tex_03_c",
                    "Stardust_tex_02_c2",
                    "Stardust_Sample_Collection1",
                  ])
                    e.setHiddenObject(t, !1);
                },
              },
            ],
            postCreateFunction: (t) => {
              const e = t.getComponentByClass(o.ModelComponent),
                s = (t, e, s) => [
                  [4449664 + e, t],
                  [4449664 + e + s, 0],
                  [10411264 - e - s, 0],
                  [10411264 - e, t],
                  [81864064 + e, t],
                  [81864064 + e + s, 0],
                  [92664064 - e - s, 0],
                  [92664064 - e, t],
                  [125496064 + e, t],
                  [125496064 + e + s, 0],
                  [126363664 - e - s, 0],
                  [126363664 - e, t],
                ];
              n.Animation.makeJointRotationAnimation(
                e,
                "Stardust_capsule",
                "x",
                s(1.481785, 0, 600),
              ),
                n.Animation.makeJointRotationAnimation(
                  e,
                  "Stardust_Sample_Collection1",
                  "x",
                  s(-Math.PI, 610, 300),
                ),
                n.Animation.makeJointRotationAnimation(
                  e,
                  "Stardust_Sample_Collection2",
                  "x",
                  s(-Math.PI, 920, 300),
                );
            },
          },
          sc_stardust_src: {
            groups: [
              "small body spacecraft",
              "comet spacecraft",
              "81p_wild_2",
              "earth",
              "spacecraft",
            ],
            occlusionRadius: 4e-4,
            extentsRadius: 8e-4,
            label: "Stardust SRC",
            parents: [
              [190576690.7833838, "sc_stardust"],
              [190576755.185, "earth"],
              [190591985.184, ""],
            ],
            trail: { length: 14547 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_stardust_src/stardust_capsule.gltf",
              shadowEntities: ["earth"],
              rotate: [{ x: 90 }, { z: 90 }],
            },
            controllers: [
              { type: "dynamo", url: "sc_stardust_src/earth/pos" },
              {
                type: "fixed",
                orientation: new o.Quaternion(
                  0.5761056269233067,
                  0.6860897901682099,
                  0.2627910947477326,
                  0.3582233199772653,
                ),
              },
              {
                type: "coverage",
                coverage: [190591100, Number.POSITIVE_INFINITY],
                enter: (t) => {
                  const e = t.getComponentByClass(o.TrailComponent);
                  null !== e &&
                    (e.setRelativeToEntityOrientation(!0),
                      e.setStartTime(1600));
                },
                exit: (t) => {
                  const e = t.getComponentByClass(o.TrailComponent);
                  null !== e &&
                    (e.setRelativeToEntityOrientation(!1),
                      e.setStartTime(18e3));
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      190576690.7833838,
                      new o.Vector3(-0.0010057, 0, 1569e-7),
                      "sc_stardust",
                      void 0,
                      "sc_stardust",
                      void 0,
                    ),
                    e.addPositionKeyframe(
                      190576755.185,
                      new o.Vector3(
                        -0.016734488308429718,
                        -0.019199222326278687,
                        -0.00404781848192215,
                      ),
                      "sc_stardust",
                    ),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(o.KeyframeController);
                  return (
                    e.addPositionKeyframe(
                      190591163,
                      new o.Vector3(
                        -1979.4577357598625,
                        -4478.591383446022,
                        4136.322858267745,
                      ),
                      "earth",
                    ),
                    e.addPositionKeyframe(
                      190591445.184,
                      new o.Vector3(
                        -1947.8360605285134,
                        -4491.082890234251,
                        4123.1018367103425,
                      ),
                      "earth",
                    ),
                    e.addPositionKeyframe(
                      190591985.184,
                      new o.Vector3(
                        -1918.7633689113482,
                        -4478.864184129612,
                        4103.897124245734,
                      ),
                      "earth",
                    ),
                    e
                  );
                },
              },
              {
                type: "rotateByEntityOrientation",
                coverage: [190591163, 190591985.184],
              },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Animation: function () {
              return Animation;
            },
          });
        var i = s(5);
        class Animation {
          static makeSubobjectVisibleAnimation(t, e, s, n) {
            n.sort((t, e) => t[0] - e[0]);
            const o = t.getEntity().addControllerByClass(i.CoverageController);
            return (
              o.setCoverage(
                new i.Interval(
                  Number.NEGATIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                ),
              ),
              o.setUpdateFunction((o) => {
                const r = o.getScene().getEngine().getTime(),
                  a = i.Sort.getIndex(r, n, (t, e) => t[0] < e);
                0 === a
                  ? t.setHiddenObject(e, !s)
                  : t.setHiddenObject(e, !n[a - 1][1]);
              }),
              o
            );
          }
          static makeJointRotationAnimation(t, e, s, n) {
            n.sort((t, e) => t[0] - e[0]);
            const o = t.getEntity().addControllerByClass(i.CoverageController);
            return (
              o.setCoverage(
                new i.Interval(
                  Number.NEGATIVE_INFINITY,
                  Number.POSITIVE_INFINITY,
                ),
              ),
              o.setUpdateFunction((o) => {
                const r = t.getThreeJsObjectByName(e);
                if (null !== r) {
                  const t = o.getScene().getEngine().getTime(),
                    e = i.Sort.getIndex(t, n, (t, e) => t[0] < e);
                  if (0 === e) r.rotation[s] = n[0][1];
                  else if (e === n.length) r.rotation[s] = n[n.length - 1][1];
                  else {
                    const o = n[e - 1],
                      a = n[e],
                      l = (t - o[0]) / (a[0] - o[0]);
                    r.rotation[s] = i.MathUtils.lerp(o[1], a[1], l);
                  }
                }
              }),
              o
            );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          sc_biosentinel: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 2e-4,
            extentsRadius: 5e-4,
            label: "BioSentinel",
            parents: [
              [721866289, "earth"],
              [722273637, "moon"],
              [722923565, "sun"],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_biosentinel/biosentinel.gltf",
              shadowEntities: ["moon"],
            },
            controllers: [
              { type: "dynamo", url: "sc_biosentinel/earth/orb" },
              { type: "dynamo", url: "sc_biosentinel/moon/orb" },
              { type: "dynamo", url: "sc_biosentinel/sun/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                  targetAxis: n.Vector3.ZAxis,
                },
              },
            ],
          },
          sc_kepler_space_telescope: {
            groups: ["sun", "spacecraft", "telescope"],
            occlusionRadius: 0.00235,
            extentsRadius: 0.004,
            label: "Kepler",
            parents: [
              [289679042.1855, "earth"],
              [290348743, "sun"],
              [595512069.183, ""],
            ],
            trail: { length: 32190048 },
            model: { url: "$STATIC_ASSETS_URL/models/sc_kepler/Kepler.gltf" },
            controllers: [
              { type: "dynamo", url: "sc_kepler/earth/orb" },
              { type: "dynamo", url: "sc_kepler/sun/orb" },
              {
                type: "align",
                primary: {
                  type: "align",
                  target: "sun",
                  targetAxis: new n.Vector3(
                    0.25176480336,
                    -0.66735243742,
                    0.7009092643,
                  ),
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.XAxisNeg,
                },
              },
            ],
          },
          sc_mariner_2: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.002,
            extentsRadius: 0.0025,
            label: "Mariner 2",
            parents: [
              [-1178599240.703784, "sun"],
              [409233667.18358755, ""],
            ],
            trail: { length: 29411352 },
            controllers: [
              { type: "animdata", url: "sc_mariner_2", dataType: "pos" },
            ],
          },
          sc_parker_solar_probe: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.0015,
            extentsRadius: 0.003,
            label: "Parker Solar Probe",
            parents: [
              [587333783.3431, "earth"],
              [587454078, "sun"],
            ],
            trail: { length: 12942631 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_parker_solar_probe/PSP.gltf",
            },
            controllers: [
              { type: "dynamo", url: "sc_parker_solar_probe/earth/orb" },
              { type: "dynamo", url: "sc_parker_solar_probe/sun/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_spitzer: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.0085,
            extentsRadius: 0.004,
            label: "Spitzer",
            parents: [
              [115064804, "earth"],
              [115493678, "sun"],
              [633614469, ""],
            ],
            trail: { length: 32167331 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_spitzer/SPITZER.gltf",
              rotate: [{ z: -90 }, { x: -90 }],
              shadowEntities: ["venus", "mercury"],
            },
            controllers: [
              { type: "dynamo", url: "sc_spitzer/earth/orb" },
              { type: "dynamo", url: "sc_spitzer/sun/orb" },
              {
                type: "fixed",
                orientation: new n.Quaternion(
                  0.5258297992951877,
                  0.8139480432783324,
                  -0.1400557906856776,
                  -0.20341086625833524,
                ),
                coverage: [115064804, 174548493],
              },
              { type: "dynamo", url: "sc_spitzer/quat" },
            ],
          },
          sc_stereo_ahead: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.003,
            label: "STEREO Ahead",
            parents: [
              [215097110, "earth"],
              [221418192, "sun"],
            ],
            trail: { length: 29809031 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_stereo_ahead/stereo_a.gltf",
              rotate: [{ x: 90 }],
              shadowEntities: ["venus", "mercury"],
            },
            controllers: [
              { type: "dynamo", url: "sc_stereo_ahead/earth/orb" },
              { type: "dynamo", url: "sc_stereo_ahead/sun/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_stereo_ahead",
                  axis: n.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_stereo_behind: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.003,
            extentsRadius: 0.003,
            label: "STEREO Behind",
            parents: [
              [215097110, "earth"],
              [224468337, "sun"],
              [527860868.182, ""],
            ],
            trail: { length: 33473699 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_stereo_behind/stereo_b.gltf",
              rotate: [{ x: 90 }],
              shadowEntities: ["venus", "mercury"],
            },
            controllers: [
              { type: "dynamo", url: "sc_stereo_behind/earth/orb" },
              { type: "dynamo", url: "sc_stereo_behind/sun/orb" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_stereo_behind",
                  axis: n.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_ulysses: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.002,
            extentsRadius: 0.002,
            label: "Ulysses",
            parents: [
              [-291488100, "sun"],
              [268142464.18410408, ""],
            ],
            trail: { length: 140294739 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_ulysses/ulysses.gltf",
              shadowEntities: ["venus", "mercury"],
            },
            controllers: [
              { type: "animdata", url: "sc_ulysses", dataType: "pos" },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "sun",
                  axis: n.Vector3.ZAxis,
                },
                secondary: {
                  type: "velocity",
                  target: "sc_ulysses",
                  axis: n.Vector3.YAxisNeg,
                },
              },
            ],
          },
          sc_wmap: {
            groups: ["sun", "spacecraft"],
            occlusionRadius: 0.0026,
            extentsRadius: 0.0026,
            label: "WMAP",
            parents: [
              [339422466.184, "sun"],
              [360158466.184, ""],
            ],
            trail: { length: 31536e3 },
            controllers: [
              { type: "animdata", url: "sc_wmap", dataType: "pos" },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          sc_magellan: {
            groups: ["venus", "spacecraft"],
            occlusionRadius: 0.0032,
            extentsRadius: 0.006,
            label: "Magellan",
            parents: [
              [-336388283.36, "sun"],
              [-296448521.457, "venus"],
              [-164631538.81763855, ""],
            ],
            trail: { length: void 0 },
            model: {
              url: "$STATIC_ASSETS_URL/models/sc_magellan/magellan.gltf",
              shadowEntities: ["venus"],
            },
            controllers: [
              { type: "dynamo", url: "sc_magellan/venus/orb" },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.OrbitalElementsController),
                    s = new n.OrbitalElements();
                  return (
                    (s.epoch = -336394683.816),
                    (s.eccentricity = 0.1791852824104108),
                    (s.semiMajorAxis = 128280596.63956015),
                    (s.meanAngularMotion = 2.5073465306679634e-7),
                    (s.meanAnomalyAtEpoch = 2.9229288382327625),
                    s.orbitOrientation.set(
                      0.8728453580255966,
                      0.1876084386162498,
                      -0.08948587100888229,
                      0.4415159494547423,
                    ),
                    e.addOrbitalElements(-336388283.36, s),
                    e.addOrbitalElements(-296448521.457, s),
                    e
                  );
                },
              },
              {
                type: "custom",
                func: (t) => {
                  const e = t.addControllerByClass(n.OrbitalElementsController),
                    s = new n.OrbitalElements();
                  (s.epoch = -296448521.457),
                    (s.eccentricity = 1.272922970547487),
                    (s.semiMajorAxis = 23358.593430196037),
                    (s.meanAngularMotion = 0.00015965302516479147),
                    (s.meanAnomalyAtEpoch = -6.138103356108873),
                    s.orbitOrientation.set(
                      -0.49933963770188916,
                      0.11817755769547109,
                      0.7262027627540558,
                      -0.45751889408554064,
                    ),
                    e.addOrbitalElements(-296448521.457, s),
                    e.addOrbitalElements(-296410230.351, s);
                  const i = new n.OrbitalElements();
                  return (
                    (i.epoch = -295884037.7511),
                    (i.eccentricity = 0.39186818222106645),
                    (i.semiMajorAxis = 10434.012201911135),
                    (i.meanAngularMotion = 0.000534773863104956),
                    (i.meanAnomalyAtEpoch = -1.5165416917234864),
                    i.orbitOrientation.set(
                      -0.4665778554219434,
                      0.18802595119032475,
                      0.7217932088991018,
                      -0.47535871728198204,
                    ),
                    e.addOrbitalElements(-296410230.351, i),
                    e.addOrbitalElements(-295884037.7511, i),
                    e
                  );
                },
              },
              {
                type: "align",
                primary: {
                  type: "point",
                  target: "earth",
                  axis: n.Vector3.YAxis,
                },
                secondary: {
                  type: "align",
                  axis: new n.Vector3(-Math.sqrt(0.5), Math.sqrt(0.5), 0),
                  target: "venus",
                  targetAxis: n.Vector3.ZAxisNeg,
                },
              },
            ],
          },
          sc_venus_express: {
            groups: ["venus", "spacecraft"],
            occlusionRadius: 9e-4,
            extentsRadius: 0.004,
            label: "Venus Express",
            parents: [
              [184784702, "earth"],
              [185369766, "sun"],
              [197902579, "venus"],
              [473341201, ""],
            ],
            trail: { length: 779592.165087551 },
            controllers: [
              { type: "dynamo", url: "sc_venus_express/earth" },
              { type: "dynamo", url: "sc_venus_express/sun" },
              { type: "dynamo", url: "sc_venus_express/venus" },
              { type: "fixed", orientation: n.Quaternion.Identity },
              { type: "dynamo", url: "sc_venus_express/quat" },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(532),
          n = s(5);
        i.Entity.register({
          rose_bowl: {
            groups: ["comparison"],
            radius: 0.15,
            label: "Rose Bowl",
            parents: [],
            model: {
              url: "$STATIC_ASSETS_URL/models/comparison/rose_bowl/rose_bowl.gltf",
              rotate: [{ x: 90 }, { z: -90 }],
            },
            controllers: [
              {
                type: "fixed",
                position: n.Vector3.Zero,
                orientation: n.Quaternion.Identity,
              },
            ],
          },
          school_bus: {
            groups: ["comparison"],
            radius: 0.0065,
            label: "School bus",
            parents: [],
            model: {
              url: "$STATIC_ASSETS_URL/models/comparison/school_bus/school_bus.gltf",
              rotate: [{ x: 90 }, { z: -90 }],
            },
            controllers: [
              {
                type: "fixed",
                position: n.Vector3.Zero,
                orientation: n.Quaternion.Identity,
              },
            ],
          },
          scientist: {
            groups: ["comparison"],
            radius: 835e-6,
            label: "Scientist",
            parents: [],
            model: {
              url: "$STATIC_ASSETS_URL/models/comparison/scientist/scientist.gltf",
              rotate: [{ x: 90 }],
            },
            controllers: [
              {
                type: "fixed",
                position: n.Vector3.Zero,
                orientation: n.Quaternion.Identity,
              },
            ],
          },
        });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LayerManager: function () {
              return LayerManager;
            },
          });
        var i = s(529),
          n = (s(5), s(2));
        class LayerManager extends n.BaseManager {
          constructor(t) {
            super(t),
              (this._sceneManager = t.getManager("scene")),
              (this._contentManager = t.getManager("content")),
              (this._layers = {}),
              (this._contextualLayersList = [
                "majorMoons",
                "minorMoons",
                "landers",
                "orbiters",
                "heliosphere",
              ]),
              (this._targetId = ""),
              (this._previousTarget = []),
              (this._dependencies = new Set()),
              (this._previousDependencies = new Set()),
              this.bindFunctions([
                "resetContextualVisibility",
                "toggleLayer",
                "changeSpheroidMap",
                "resetContextualLayers",
              ]),
              this._eventNames.push("toggleLayer"),
              this._initCallbacks();
          }
          addLayer(
            t,
            {
              name: e = "",
              group: s = "",
              categories: i = [],
              defaultVisibility: n = !0,
              toggleCallback: o = [],
              sublayers: r = [],
            },
          ) {
            void 0 === this._layers[t] && (this._layers[t] = {}),
              (this._layers[t].name = e),
              (this._layers[t].group = s),
              (this._layers[t].defaultVisibility = n),
              (this._layers[t].visible = n),
              Array.isArray(i) || (i = [i]),
              (this._layers[t].categories = i),
              Array.isArray(r) || (r = [r]),
              (this._layers[t].sublayers = r);
            for (let e = 0; e < r.length; e++) {
              const s = r[e];
              void 0 === this._layers[s] && (this._layers[s] = {}),
                (this._layers[s].parent = t);
            }
            Array.isArray(o) || (o = [o]), (this._layers[t].toggleCallback = o);
          }
          addCallback(t, e) {
            const s = this.getLayer(t);
            null !== s && s.toggleCallback.push(e);
          }
          removeCallback(t, e) {
            const s = this.getLayer(t);
            if (null === s) return;
            const i = s.toggleCallback.indexOf(e);
            s.toggleCallback.splice(i, 1);
          }
          getLayer(t) {
            return void 0 === this._layers[t] ? null : this._layers[t];
          }
          async changeSpheroidMap(t, e) {
            if ("cmts" === e.type)
              return void console.error(
                "This function does not yet handle CMTS texture",
              );
            const s = this.app.getManager("scene"),
              i = s.get("main").getEntity(t).getComponentByType("spheroidLOD"),
              n = s.get("main").getEntity(t).getComponentByType("atmosphere"),
              o = s.get("main").getEntity(t).getComponentByType("wmts");
            "texture" === e.type
              ? (i.setEnabled(!0),
                s.addLoading(t, "spheroidLOD"),
                Object.keys(e.textures).forEach((t) => {
                  const s = "$STATIC_ASSETS_URL/maps/" + e.textures[t].url;
                  i.setTexture(t, s, e.textures[t].sizes);
                }),
                await s.pioneer.waitUntilNextFrame(),
                await i.getLoadedPromise(),
                null !== o && o.setEnabled(!1),
                s.removeLoading(t, "spheroidLOD"))
              : "wmts" === e.type &&
              (null === o
                ? await s.addWMTSComponent(t, e)
                : !1 === o.isEnabled() &&
                (await s.enableWMTSComponent(t, o))),
              null != n && n.setEnabled(e.features.includes("atmosphere")),
              this.app.getComponent("contentPanel")?.updateHDButton();
          }
          toggleLayer(t, e, s) {
            if (void 0 === this._layers[t]) return;
            if (
              (void 0 === e && (e = {}),
                (e.layerId = t),
                void 0 !== s && this._layers[t].visible === s)
            )
              return;
            this._layers[t].visible = !this._layers[t].visible;
            for (let s = 0; s < this._layers[t].toggleCallback.length; s++) {
              (0, this._layers[t].toggleCallback[s])(
                this._layers[t].visible,
                e,
              );
            }
            for (let s = 0; s < this._layers[t].sublayers.length; s++) {
              (this.getLayer(this._layers[t].sublayers[s]).visible =
                this._layers[t].visible),
                this.triggerCallbacks("toggleLayer", [
                  this._layers[t].sublayers[s],
                  this._layers[t].visible,
                  e,
                ]);
            }
            this.triggerCallbacks("toggleLayer", [
              t,
              this._layers[t].visible,
              e,
            ]);
            const i = this.app.getManager("scene");
            null !== e.parentId && void 0 !== e.parentId
              ? i.updateEntityLayerVisibilityForChildren(e.parentId)
              : i.updateEntityLayerVisibility();
          }
          setTarget(t) {
            if (
              (this._previousTarget.push(this._targetId),
                (this._previousDependencies = new Set([
                  ...this._previousDependencies,
                  ...this._dependencies,
                ])),
                (this._targetId = t),
                this._dependencies.clear(),
                "" !== this._targetId)
            ) {
              const t = this._sceneManager.getDependencies(this._targetId);
              this._dependencies = new Set(t);
            }
          }
          resetTarget() {
            for (let t = 0; t < this._previousTarget.length; t++) {
              const e = this._previousTarget[t],
                s = this.app.getManager("camera").cameraEntity;
              if (null === s || null === s.getParent()) return;
              if (s.getParent().getName() === e) return;
            }
            for (let t = 0; t < this._previousTarget.length; t++) {
              const e = this._previousTarget[t];
              this.resetContextualVisibility(e);
            }
            (this._previousTarget = []), this._previousDependencies.clear();
          }
          resetContextualVisibility(t) {
            const e = this._sceneManager.main.getEngine().getTime();
            let s = this.getContextualLayers(t);
            for (; "" !== t && 0 === s.length;)
              (t = i.Parenting.getParentOfEntity(t, e)),
                (s = this.getContextualLayers(t));
            let n = this._targetId;
            for (s = this.getContextualLayers(n); "" !== n && 0 === s.length;)
              (n = i.Parenting.getParentOfEntity(n, e)),
                (s = this.getContextualLayers(n));
            if (n !== t) {
              this._contextId = t;
              for (let e = 0; e < s.length; e++) {
                const i = s[e],
                  n = this.getLayer(i);
                if (void 0 !== n.parent) {
                  this.getLayer(n.parent).visible !== n.visible &&
                    this.toggleLayer(i, { parentId: t, group: n.group });
                } else
                  n.visible !== n.defaultVisibility &&
                    this.toggleLayer(i, { parentId: t, group: n.group });
              }
            }
          }
          getTarget() {
            return this._targetId;
          }
          getEntityLayer(t) {
            const e = this._contentManager.getEntityInfo(t);
            if (null === e) return null;
            const s = e.category,
              i = e.subcategory;
            return this.getLayerFromCategory(i) || this.getLayerFromCategory(s);
          }
          getLayerFromCategory(t) {
            if (!t) return null;
            for (const [e, s] of Object.entries(this._layers))
              if (s.categories.includes(t)) return this._layers[e];
            return null;
          }
          getContextualLayers(t) {
            const e = [];
            if ("" === t) return e;
            const s = this.app.getManager("content"),
              n = s.getEntityInfo(t)?.hasMoons
                ? i.Entity.getEntityNamesInGroup(t + ", moons")
                : new Set(),
              o = i.Entity.getEntityNamesInGroup(t + ", spacecraft");
            "sun" === t &&
              !1 === e.includes("heliosphere") &&
              e.push("heliosphere"),
              n.forEach((t) => {
                const i = s.getEntityInfo(t);
                if (null !== i) {
                  switch (i.subcategory || i.category) {
                    case "Major Moon":
                      !1 === e.includes("majorMoons") && e.push("majorMoons");
                      break;
                    case "Minor Moon":
                      !1 === e.includes("minorMoons") && e.push("minorMoons");
                  }
                }
              });
            const r = this._app.pioneer.getTime();
            return (
              o.forEach((n) => {
                const o = s.getEntityInfo(n);
                if (null !== o) {
                  switch (o.subcategory || o.category) {
                    case "Orbiter":
                      !1 === e.includes("orbiters") &&
                        i.Parenting.getParentOfEntity(n, r) === t &&
                        e.push("orbiters");
                      break;
                    case "Landing Site":
                    case "Lander":
                    case "Rover":
                      !1 === e.includes("landers") &&
                        i.Parenting.getParentOfEntity(n, r) === t &&
                        e.push("landers");
                  }
                }
              }),
              e.sort((t, e) => {
                const s = Object.keys(this._layers);
                return s.indexOf(t) - s.indexOf(e);
              }),
              e
            );
          }
          resetContextualLayers(t, e) {
            const s = this.getContextualLayers(t);
            this._contextualLayersList.forEach((t) => {
              !1 === s.includes(t) &&
                ("heliosphere" === t
                  ? this.toggleLayer(t, { parentId: void 0 }, !1)
                  : this.toggleLayer(
                    t,
                    { parentId: e },
                    this.getLayer(t).defaultVisibility || !1,
                  ));
            });
          }
          isEntityVisibleWithCurrentLayers(t) {
            const e = this._contentManager.getEntityInfo(t);
            if (null !== e) {
              const t = this.getLayerFromCategory(e.category),
                s = this.getLayerFromCategory(e.subcategory);
              return null !== s
                ? s.visible
                : null !== t
                  ? t.visible
                  : null === t && null === s;
            }
            return !0;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TrailManager: function () {
              return TrailManager;
            },
          });
        var i = s(5),
          n = s(529),
          o = s(2);
        class TrailManager extends o.BaseManager {
          constructor(t, e) {
            super(t),
              (this._scene = e),
              (this._ids = []),
              (this._hiddenIds = []),
              (this._opacity = { primary: 0.75, secondary: 0.35, hover: 1 }),
              (this._width = { default: [0, 2], hover: [2, 4] }),
              (this._orbitLinesOpts = {
                lineWidth: { default: 1.2, hover: 2 },
                glowWidth: { default: 0, hover: 0 },
                alphaFade: [22, 8],
              }),
              (this._orbitLineEntityNames =
                n.Entity.getEntityNamesInGroup("planets").add("moon")),
              (this._colors = {
                default: new i.Color(1, 1, 1, this._opacity.secondary),
                mercury: new i.Color(
                  151 / 255,
                  104 / 255,
                  172 / 255,
                  this._opacity.primary,
                ),
                venus: new i.Color(
                  176 / 255,
                  121 / 255,
                  25 / 255,
                  this._opacity.primary,
                ),
                earth: new i.Color(0, 0.6, 0.8, this._opacity.primary),
                mars: new i.Color(
                  154 / 255,
                  78 / 255,
                  25 / 255,
                  this._opacity.primary,
                ),
                jupiter: new i.Color(
                  218 / 255,
                  139 / 255,
                  114 / 255,
                  this._opacity.primary,
                ),
                saturn: new i.Color(
                  213 / 255,
                  193 / 255,
                  135 / 255,
                  this._opacity.primary,
                ),
                uranus: new i.Color(
                  104 / 255,
                  0.8,
                  218 / 255,
                  this._opacity.primary,
                ),
                neptune: new i.Color(
                  112 / 255,
                  140 / 255,
                  227 / 255,
                  this._opacity.primary,
                ),
              }),
              this.bindFunctions([
                "onHoverChange",
                "setUpTrail",
                "toggleTrails",
                "toggleOrbits",
              ]);
          }
          setScene(t) {
            this._scene = t;
          }
          create(t) {
            if (this._scene.get(t, "trail"))
              return void console.warn("Trail already exists for", t);
            const e = this._scene.get(t).addComponent("trail");
            return this._ids.push(t), e;
          }
          setStartTime(t, e) {
            Array.isArray(t) || (t = [t]);
            for (let s = 0; s < t.length; s++) {
              const i = this._scene.get(t[s], "trail");
              i && i.setStartTime(e);
            }
          }
          setEndTime(t, e) {
            Array.isArray(t) || (t = [t]);
            for (let s = 0; s < t.length; s++) {
              const i = this._scene.get(t[s], "trail");
              i && i.setEndTime(e);
            }
          }
          onHoverChange(t, e, s = !1) {
            const n = this._scene.get(t),
              o = this._scene.get(t, "trail"),
              r = n?.get("orbitLine");
            if (!n || (!o && !r)) return;
            const a = new i.Color(),
              l = o ?? r,
              c = e ? "hover" : "default";
            if (r) {
              const { lineWidth: t, glowWidth: e } = this._orbitLinesOpts;
              r.setLineWidth(t[c]), r.setGlowWidth(e[c]);
            } else if (o) {
              const t = n.trailHover?.width?.[c] ?? this._width[c];
              o.setWidths(...t);
            }
            const { primary: h, secondary: u, hover: d } = this._opacity,
              p = e ? d : this._colors[t] ? h : u;
            a.copy(l.getColor()),
              (a.a = p),
              l.setColor(a),
              s && o.setAlphaFade(a.a);
          }
          setFade(t, e) {
            Array.isArray(t) || (t = [t]);
            for (let s = 0; s < t.length; s++) {
              const i = this._scene.get(t[s], "trail");
              i && i.setAlphaFade(e);
            }
          }
          setWidths(t, e, s) {
            Array.isArray(t) || (t = [t]);
            for (let i = 0; i < t.length; i++) {
              const n = this._scene.get(t[i], "trail");
              n && n.setWidths(e, s);
            }
          }
          setMultipleWidths(t, e, s) {
            for (const i of t) {
              const t = this._scene.get(i, "trail");
              t && t.setWidths(e, s);
            }
          }
          getColor(t) {
            const e = this._scene.get(t, "trail");
            return e ? e.getColor() : null;
          }
          setColor(t, e = null) {
            Array.isArray(t) || (t = [t]);
            for (let s = 0; s < t.length; s++) {
              const n = t[s],
                o = this._scene.get(n, "trail");
              if (o) {
                const t =
                  e instanceof i.Color
                    ? e
                    : this._colors[n] || this._colors.default;
                o.setColor(t);
              }
            }
          }
          setUpTrail(t) {
            const e = this._app.getManager("layer"),
              s = this._app.getManager("scene"),
              i = t.getName(),
              n = e.getLayer("trails");
            this._orbitLineEntityNames.has(i) && this.createOrbitLine(t),
              null === n || n.visible || s.setVisibility(!1, i);
          }
          show(t = null) {
            null === t
              ? (t = this._hiddenIds.length > 0 ? this._hiddenIds : this._ids)
              : Array.isArray(t) || (t = [t]);
            for (let e = 0; e < t.length; e++) {
              const s = t[e],
                i = this._scene.get(s, "trail");
              if (i) {
                const t = this._hiddenIds.indexOf(s);
                -1 !== t && this._hiddenIds.splice(t, 1), i.setEnabled(!0);
              } else
                console.warn("TrailManager.show: Trail does not exist - ", s);
            }
          }
          hide(t = null) {
            null === t ? (t = this._ids) : Array.isArray(t) || (t = [t]),
              (this._hiddenIds = t);
            for (let e = 0; e < t.length; e++) {
              const s = this._scene.get(t[e], "trail");
              s && s.setEnabled(!1);
            }
          }
          toggleTrails(t, { scene: e } = {}) {
            void 0 === e && (e = this._scene);
            for (let s = 0; s < e.getNumEntities(); s++) {
              const i = e.getEntity(s),
                n = i.get("trail");
              if (null !== n) {
                const e = this._app
                  .getManager("content")
                  .getEntityInfo(i.getName());
                if (e) {
                  const s = e.category,
                    o = e.subcategory,
                    r =
                      this._app.getManager("layer").getLayerFromCategory(o) ||
                      this._app.getManager("layer").getLayerFromCategory(s),
                    { forceVisible: a = !1 } =
                      this.app
                        .getManager("scene")
                        .getEntityStatus(i.getName()) || {};
                  null === r || r.visible || a
                    ? n.setEnabled(t)
                    : n.setEnabled(!1);
                } else n.setEnabled(t);
              }
            }
          }
          createOrbitLine(t) {
            const e = t.get("trail");
            e && t.removeComponent(e);
            const s = t.addComponent("orbitLine"),
              {
                lineWidth: i,
                glowWidth: n,
                alphaFade: o,
              } = this._orbitLinesOpts,
              r = this._colors[t.getName()] ?? this._colors.default;
            s.setColor(r),
              s.setPixelSpaceRadiiAlphaFade(...o),
              s.setLineWidth(i.default),
              s.setGlowWidth(n.default);
            const a = this._app.getManager("layer").getLayer("orbits").visible;
            s.setEnabled(a);
          }
          toggleOrbits(t) {
            this._orbitLineEntityNames.forEach((e) => {
              this._scene.get(e, "orbitLine")?.setEnabled(t);
            });
          }
          get ids() {
            return this._ids;
          }
          set ids(t) {
            Array.isArray(t) || (t = [t]);
            for (let e = 0; e < t.length; e++) {
              const s = t[e];
              if (this._ids.includes(s)) continue;
              this._scene.get(s, "trail") && this._ids.push(s);
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CameraManager: function () {
              return CameraManager;
            },
          });
        var i = s(5),
          n = s(529),
          o = s(2);
        class CameraManager extends o.BaseManager {
          constructor(t, e) {
            super(t),
              (this._viewport = null),
              (this._defaultScene = e),
              (this._cameraEntity = null),
              (this._id = null),
              (this._previousId = null),
              (this._context = { id: "" }),
              (this._isTransitioning = !1),
              (this._defaultMaxDistance = 2e18),
              (this._selectionCallback = null),
              (this._dynEnvMap = null),
              (this._isFreeFly = !1),
              (this._zoomSensitivity = { click: 0.3, hold: 0.1 }),
              (this._fullLightColor = new i.Color(1, 1, 1, 1)),
              (this._shadowLightColor = new i.Color(0.15, 0.15, 0.15, 1)),
              this.bindFunctions([
                "zoomIn",
                "zoomOut",
                "addDynamicEnvMap",
                "getShadowLightColor",
                "getFullLightColor",
              ]);
          }
          createViewportAndCamera(t) {
            t && (this._defaultScene = t),
              null === this.pioneer.getViewport("main-viewport") &&
              ((this._viewport = this.pioneer.addViewport("main-viewport")),
                (this._viewport.getDiv().style.width = "100%"),
                (this._viewport.getDiv().style.height = "100%"),
                (this._viewport.getDiv().style.left = "0"),
                (this._viewport.getDiv().style.top = "0")),
              null === this._defaultScene.get("camera") &&
              (this._cameraEntity = this._defaultScene.addEntity("camera")),
              this._cameraEntity.setOrientation(i.Quaternion.Identity);
            let e = this._cameraEntity.getComponentByType("camera");
            null === e && (e = this._cameraEntity.addComponent("camera")),
              this._viewport.setCamera(e),
              (this._cameraLight = this._cameraEntity.get("lightSource")),
              null === this._cameraLight &&
              ((this._cameraLight =
                this._cameraEntity.addComponent("lightSource")),
                this._cameraLight.setEnabled(!1),
                this.toggleCameraLight(!0, this._shadowLightColor)),
              null === this._dynEnvMap &&
              (this._dynEnvMap =
                this._cameraEntity.addComponent("dynEnvMap"));
          }
          getContext() {
            return this._context;
          }
          setContext(t) {
            (this._context = t),
              (this._previousId = this._id),
              (this._id = this._context.id);
            const e = new CustomEvent("cameraupdate", {
              detail: { target: this._id, context: this._context },
            });
            window.dispatchEvent(e);
          }
          getCurrentId() {
            return this._id;
          }
          getShadowLightColor() {
            return this._shadowLightColor;
          }
          getFullLightColor() {
            return this._fullLightColor;
          }
          get defaultScene() {
            return this._defaultScene;
          }
          get cameraEntity() {
            return this._cameraEntity;
          }
          get cameraLight() {
            return this._cameraLight;
          }
          get dynamicEnvMap() {
            return this._dynEnvMap;
          }
          toggleCameraLight(t, e) {
            null !== this._cameraLight &&
              (this._cameraLight.setEnabled(t),
                void 0 !== e && this._cameraLight.setColor(e));
          }
          getSelectionCallback() {
            return this._selectionCallback;
          }
          setSelectionCallback(t) {
            "function" == typeof t && (this._selectionCallback = t);
          }
          enterFreeFly() {
            (this._isFreeFly = !0),
              this._cameraEntity.clearControllers(),
              this._cameraEntity.addController("freeFly"),
              this._cameraEntity.addController("look"),
              this._cameraEntity.addController("roll");
          }
          toggleFreeFly() {
            this._isFreeFly ? this.exitFreeFly() : this.enterFreeFly();
          }
          async goToEntity(
            t,
            {
              camera: e,
              scene: s,
              destination: o,
              distance: r,
              cinematic: a = !1,
              minRadius: l = 0.001,
              maxRadius: c = this._defaultMaxDistance,
              duration: h = 0.75,
              destinationUp: u,
              zoom: d = !0,
              select: p = !0,
              slowWhenCloseToParent: m = !0,
              useSpheroidRadiusForDistance: _ = !1,
              roll: g = !1,
              keyframes: y,
              transitionFunction: f,
            } = {},
          ) {
            const b = e || this._cameraEntity,
              T = s || this._defaultScene;
            if (
              (await n.SceneHelpers.waitTillEntitiesInPlace(T, [t]),
                (this._isTransitioning = !0),
                void 0 !== o)
            ) {
              const e = new i.Vector3();
              e.sub(b.getPosition(), o);
              const s = b.getParent();
              if (null !== s) {
                const n = s.getName();
                if (!isNaN(e.magnitude())) {
                  const t = i.MathUtils.clamp01(
                    e.magnitude() / b.getPosition().magnitude(),
                  );
                  h = Math.max(h / 5, h * t);
                }
                if (!isNaN(e.magnitude()) && e.magnitude() <= 0.001 && t === n)
                  return void (this._isTransitioning = !1);
              }
            }
            try {
              if (void 0 !== y) {
                b.clearControllers();
                const t = b.addController("orbitKeyframe");
                if (y.position)
                  for (let e = 0; e < y.position.length; e++) {
                    const s = y.position[e];
                    t.setPositionKeyframe(s.frame, s.position, s.relativeTo);
                  }
                if (y.up)
                  for (let e = 0; e < y.up.length; e++) {
                    const s = y.up[e];
                    t.setUpKeyframe(s.frame, s.up);
                  }
                if (y.focus)
                  for (let e = 0; e < y.focus.length; e++) {
                    const s = y.focus[e];
                    t.setFocusKeyframe(s.frame, s.name);
                  }
                await t.getEndPromise(), b.clearControllers();
              }
              if (
                (await n.Cameras.goToEntity(b, T.getEntity(t), {
                  destination: o,
                  distance: r,
                  up: !1,
                  duration: h,
                  destinationUp: u,
                  zoom: d,
                  transitionFunction: f,
                }),
                  p)
              ) {
                const t = b.addController("select");
                null !== this._selectionCallback &&
                  t.setCallback(this._selectionCallback);
              }
              const e = b.get("orbit");
              e instanceof i.OrbitController && e.slowWhenCloseToParent(m);
              const s = b.get("zoom");
              if (
                (s &&
                  s instanceof i.ZoomController &&
                  (s.setDistanceClamp(new i.Interval(l, c)),
                    s.setUseSpheroidRadiusForDistance(_)),
                  g)
              ) {
                b.get("roll") instanceof i.RollController ||
                  b.addController("roll");
              }
              if (a) {
                const t = b.getControllerByType("align"),
                  e = b.addController("spin", void 0, t);
                e instanceof i.SpinController &&
                  (e.setAxis(i.Vector3.ZAxis, !0),
                    e.setRate(0.01),
                    e.setUsingRealTime(!0),
                    e.setRotatingPosition(!0));
                const s = b.addController("tap");
                s instanceof i.TapController &&
                  s.setTapCallback(() => {
                    b.removeController(e), b.removeController(s);
                  });
              }
            } catch (t) {
              t && console.error(t);
            } finally {
              this._isTransitioning = !1;
            }
          }
          async goToBetweenPos(
            t,
            {
              duration: e,
              destination: s,
              destinationUp: o,
              transitionFunction: r,
              zoomInterval: a,
            },
          ) {
            const l = this._cameraEntity;
            l.clearControllers();
            const c = l.addController("fixed");
            c.setPosition(s);
            const h = new i.Vector3(),
              u = new i.Vector3();
            h.neg(s), h.normalize(h), u.setNormalTo(h, o);
            const d = new i.Quaternion();
            d.setFromAxes(void 0, h, u),
              c.setOrientation(d),
              n.Cameras.focusOnEntity(l, t, { up: !1, orbiter: !1 });
            const p = l.addController("transition");
            p.setTransitionTime(e),
              p.setParent(t.getName()),
              r && p.setTransitionFunction(r),
              await p.getEndPromise(),
              l.clearControllers();
            const m = l.addController("select");
            null !== this._selectionCallback &&
              m.setCallback(this._selectionCallback),
              l.addController("orbit"),
              l.addController("roll");
            const _ = l.addController("zoom");
            a && _.setDistanceClamp(a),
              n.Cameras.focusOnEntity(l, t, { up: !1, orbiter: !1 });
          }
          zoom(t, e = this._cameraEntity) {
            let s = e.getPosition().magnitude();
            Number.isNaN(s) && (s = 1), (s *= t);
            const n = i.Vector3.pool.get();
            n.normalize(e.getPosition()),
              n.mult(n, s),
              e.setPosition(n),
              i.Vector3.pool.release(n);
          }
          zoomIn(t = !1) {
            let e = 1;
            const s = t
              ? this._zoomSensitivity.hold
              : this._zoomSensitivity.click;
            (e /= Math.pow(2, s)), this.zoom(e);
          }
          zoomOut(t = !1) {
            let e = 1;
            const s = t
              ? this._zoomSensitivity.hold
              : this._zoomSensitivity.click;
            (e *= Math.pow(2, s)), this.zoom(e);
          }
          get defaultMaxDistance() {
            return this._defaultMaxDistance;
          }
          set defaultMaxDistance(t) {
            this._defaultMaxDistance = t;
          }
          addDynamicEnvMap(t) {
            if (!this.dynamicEnvMap) return;
            const e = t.get("model");
            null !== e &&
              e.setDynamicEnvironmentMapComponent(this.dynamicEnvMap);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            CameraScripts: function () {
              return CameraScripts;
            },
          });
        var i = s(5),
          n = s(529),
          o = s(2);
        class CameraScripts extends o.BaseManager {
          constructor(t) {
            super(t),
              (this._cameraManager = null),
              (this._customSystemDistances = {
                mercury: 425648,
                venus: 862136,
                earth: 1040264,
                mars: 8e4,
                jupiter: 7157638,
                saturn: 4869142,
                uranus: 1886367,
                neptune: 2407045,
                "134340_pluto": 122231,
                "136199_eris": 180309,
                "1_ceres": 87225,
                "136108_haumea": 126609,
                "136472_makemake": 118584,
              }),
              (this._onCameraTransition = null),
              (this._easeInOutExpoTransition =
                this._easeInOutExpoTransition.bind(this)),
              (this._easeOutExpoTransition =
                this._easeOutExpoTransition.bind(this));
          }
          setCameraManager(t) {
            this._cameraManager = t;
          }
          get scene() {
            return this._scene;
          }
          set scene(t) {
            this._scene = t;
          }
          get cameraEntity() {
            return this._cameraEntity;
          }
          set cameraEntity(t) {
            this._cameraEntity = t;
          }
          getNormalToEcliptic(t, e) {
            const s = new i.Quaternion();
            this._cameraManager.pioneer
              .get("main", e, "dynamo")
              .getOrbitOrientation(s, this._cameraManager.pioneer.getTime()),
              s.getAxis(t, 2);
          }
          isBarycenter(t) {
            return !!t.includes("_barycenter");
          }
          removeBarycenter(t) {
            return this.isBarycenter(t) ? t.replace("_barycenter", "") : t;
          }
          async goToCelestialObject(
            t,
            {
              scene: e,
              starId: s = "sun",
              cinematic: o = !0,
              duration: r = 1.5,
              distance: a = 1.3,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.CELESTIAL_OBJECT,
            }),
              void 0 === e && (e = this._scene);
            const l = e.getEntity(t),
              c = e.getEntity(s);
            let h = new i.Vector3();
            l.getPositionRelativeToEntity(h, i.Vector3.Zero, c),
              0 === h.magnitude() && (h = new i.Vector3(0, 1, 0));
            const u = new i.Vector3();
            l.getOrientation().getAxis(u, 2), h.neg(h), h.normalize(h);
            let d = l.getOcclusionRadius();
            null !== l.getComponentByType("spheroid") &&
              (d = l.getComponentByType("spheroid").getEquatorialRadius());
            const p = 1.2 * d,
              m = new i.Quaternion();
            m.setFromAxes(void 0, h, u);
            let _ = n.Cameras.getDistanceToFitEntities(
              this._cameraEntity,
              m,
              l,
              [l],
            );
            (_ *= a),
              h.mult(h, _),
              await this._cameraManager.goToEntity(t, {
                distance: _,
                duration: r / 2,
              }),
              await this._cameraManager.goToEntity(t, {
                destination: h,
                cinematic: o,
                minRadius: p,
                destinationUp: u,
                duration: r / 2,
              });
          }
          _easeOutExpoTransition(t, e, s, n, o, r) {
            const a = i.Vector3.pool.get(),
              l = i.Quaternion.pool.get(),
              c = 1 - Math.pow(1 - r, 4);
            a.lerp(e, s, c),
              l.slerp(n, o, c),
              this._onCameraTransition?.(c),
              t.setPosition(a),
              t.setOrientation(l),
              i.Vector3.pool.release(a),
              i.Quaternion.pool.release(l);
          }
          _easeInOutExpoTransition(t, e, s, n, o, r) {
            const a = i.Vector3.pool.get(),
              l = i.Quaternion.pool.get(),
              c = ((r *= 2) <= 1 ? Math.pow(r, 4) : 2 - Math.pow(2 - r, 4)) / 2;
            a.lerp(e, s, c),
              l.slerp(n, o, c),
              this._onCameraTransition?.(c),
              t.setPosition(a),
              t.setOrientation(l),
              i.Vector3.pool.release(a),
              i.Quaternion.pool.release(l);
          }
          async goToSpacecraft(
            t,
            {
              scene: e,
              starId: s = "sun",
              planeId: o = "earth",
              distance: r,
              cinematic: a = !0,
              duration: l = 1.5,
              verticalOffset: c = 0,
              horizontalOffset: h = 0,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.SPACECRAFT,
            }),
              void 0 === e && (e = this._scene);
            const u =
              this._app.getManager("content").getEntityInfo(t)
                ?.customDistance || r;
            await n.SceneHelpers.waitTillEntitiesInPlace(e, [t]);
            const d = e.getEntity(t),
              p = 1.2 * d.getOcclusionRadius(),
              m = new i.Vector3();
            m.normalize(d.getPosition());
            const _ = new i.Vector3(),
              g = d.getParent();
            g &&
              (g.getName() === s && null !== e.get(o)
                ? (this.getNormalToEcliptic(_, o),
                  _.isNaN() && _.copy(new i.Vector3(0, 0, 1)))
                : g.getOrientation().getAxis(_, 2)),
              _.normalize(_),
              m.magnitude() < 1e-4 &&
              (d.getOrientation().getAxis(m, 0), m.normalize(m));
            const y = new i.Vector3();
            y.cross(m, _), y.normalize(y);
            const f = new i.Quaternion();
            f.setFromAxisAngle(y, i.MathUtils.degToRad(c)),
              m.rotate(f, m),
              f.setFromAxisAngle(_, i.MathUtils.degToRad(h)),
              m.rotate(f, m);
            let b = 0;
            if (void 0 !== u) b = u;
            else {
              const t = new i.Quaternion();
              t.setFromAxes(void 0, m, _);
              b =
                1.3 *
                n.Cameras.getDistanceToFitEntities(this._cameraEntity, t, d, [
                  d,
                ]);
            }
            m.mult(m, b),
              await this._cameraManager.goToEntity(t, { distance: b }),
              await this._cameraManager.goToEntity(t, {
                destination: m,
                cinematic: a,
                minRadius: p,
                destinationUp: _,
                duration: l,
              });
          }
          async goToInstrument(
            t,
            {
              scene: e,
              distance: s,
              duration: o = 1.5,
              upVector: r = "z-axis",
              forwardVector: a = "y-axis",
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.INSTRUMENT,
            }),
              void 0 === e && (e = this._scene);
            const l =
              this._app.getManager("content").getEntityInfo(t)
                ?.customDistance || s,
              c = e.getEntity(t),
              h = c.getParent();
            await n.SceneHelpers.waitTillEntitiesInPlace(e, [h.getName(), t]);
            const u = c.getOcclusionRadius(),
              d = h.getOcclusionRadius(),
              p = 1.2 * u,
              m = new i.Vector3();
            c.getPositionRelativeToEntity(m, i.Vector3.Zero, h);
            const _ = new i.Vector3(),
              g = a.endsWith("y-axis") ? 1 : a.endsWith("z-axis") ? 2 : 0;
            h.getOrientation().getAxis(_, g),
              a.startsWith("-") && _.mult(_, -1),
              m.mult(_, -1);
            const y = new i.Vector3();
            let f = a.endsWith("y-axis") ? 2 : 1;
            r.endsWith("x-axis") ? (f = 0) : r.endsWith("z-axis") && (f = 2),
              h.getOrientation().getAxis(y, f),
              r.startsWith("-") && y.mult(y, -1);
            let b = 4 * p;
            void 0 !== l && (b = l),
              m.mult(m, b),
              await this._cameraManager.goToEntity(h.getName(), {
                destinationUp: y,
                distance: 1.2 * d,
              }),
              await this._cameraManager.goToEntity(t, {
                destination: m,
                minRadius: p,
                destinationUp: y,
                duration: o,
              });
          }
          async compareObjects(
            t,
            e,
            {
              cameraLeft: s,
              cameraRight: i,
              cameraLeftPosition: n,
              cameraRightPosition: o,
              cameraUp: r,
              scene: a,
              minRadius: l,
              maxRadius: c,
              duration: h = 0.75,
            },
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.COMPARE,
              to: e,
            });
            const u = new CustomEvent("cameracompare", {
              detail: { left: t, right: e },
            });
            window.dispatchEvent(u);
            const d = this._cameraManager.goToEntity(t, {
              minRadius: l,
              maxRadius: c,
              camera: s,
              destination: n,
              destinationUp: r,
              scene: a,
              select: !1,
              duration: h,
              zoom: !0,
              cinematic: !0,
            }),
              p = this._cameraManager.goToEntity(e, {
                minRadius: l,
                maxRadius: c,
                camera: i,
                destination: o,
                destinationUp: r,
                scene: a,
                select: !1,
                duration: h,
                zoom: !0,
                cinematic: !0,
              });
            await Promise.all([d, p]);
          }
          async showLocation(
            t,
            e,
            s,
            o = "northPole",
            {
              duration: r = 2,
              otherEntityNames: a = [],
              distance: l,
              rotateByScreenRatio: c = !0,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: "",
              targetEntityName: t,
              context: CameraScripts.CONTEXT.LOCATION,
              options: { otherEntityNames: a },
            });
            const h = this._scene.getEntity(t),
              u = this._scene.getEntity(e),
              d = this._scene.getEntity(s);
            if (null === h || null === u || null === d) return;
            const p = [];
            p.push(h), p.push(u), p.push(d);
            for (let t = 0, e = a.length; t < e; t++) {
              const e = this._scene.getEntity(a[t]);
              null !== e && p.push(e);
            }
            const m = new i.Vector3();
            "northPole" === o
              ? u.getOrientation().getAxis(m, 2)
              : "planeNormal" === o &&
              (m.cross(u.getPosition(), u.getVelocity()), m.normalize(m));
            const _ = new i.Vector3();
            _.neg(m);
            const g = new i.Vector3();
            h.getPositionRelativeToEntity(g, i.Vector3.Zero, d),
              g.normalize(g),
              g.setNormalTo(_, g),
              g.neg(g);
            const y = this._cameraEntity.getComponentByType("camera");
            c &&
              y.getHorizontalFieldOfView() > y.getVerticalFieldOfView() &&
              g.cross(g, _);
            const f = new i.Quaternion();
            f.setFromAxes(void 0, _, g);
            let b =
              l ||
              n.Cameras.getDistanceToFitEntities(this._cameraEntity, f, h, p);
            y.getHorizontalFieldOfView() < y.getVerticalFieldOfView() &&
              (b *= 1.3 * y.getVerticalFieldOfView()),
              (b *= 2),
              m.setMagnitude(m, b),
              null === this._cameraEntity.getParent() &&
              (await this._cameraManager.goToEntity(t, { distance: b }));
            const T = {
              up: [{ frame: r, up: g }],
              position: [{ frame: r, position: m, relativeTo: h.getName() }],
              focus: [{ frame: r, name: t }],
            };
            await this._cameraManager.goToEntity(t, {
              keyframes: T,
              destination: m,
              destinationUp: g,
              cinematic: !1,
              duration: 0.2,
            });
          }
          async alignObjects(
            t,
            e,
            {
              verticalOffset: s = 0,
              horizontalOffset: o = 0,
              duration: r = 1.5,
              transitionDuration: a,
              alignDuration: l,
              distance: c = 1,
              cinematic: h = !1,
              useEase: u = !0,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: "",
              targetEntityName: t,
              context: CameraScripts.CONTEXT.ALIGN_OBJECTS,
              focus: e,
            });
            const d = this._scene.getEntity(t),
              p = this._scene.getEntity(e);
            await n.SceneHelpers.waitTillEntitiesInPlace(this._scene, [t, e]);
            const m = d.getOcclusionRadius(),
              _ = new i.Vector3(),
              g = this._cameraManager.pioneer.getTime();
            d.getPositionRelativeToEntity(_, i.Vector3.Zero, p, g),
              _.isNaN() ? _.copy(new i.Vector3(0, -1, 0)) : _.normalize(_),
              _.mult(_, c);
            const y = new i.Vector3();
            p.getOrientation().getAxis(y, 2);
            const f = new i.Vector3();
            f.cross(_, y), f.normalize(f);
            const b = new i.Quaternion();
            b.setFromAxisAngle(f, i.MathUtils.degToRad(s)),
              _.rotate(b, _),
              b.setFromAxisAngle(y, i.MathUtils.degToRad(o)),
              _.rotate(b, _),
              await this._cameraManager.goToEntity(t, {
                distance: c,
                destinationUp: y,
                duration: a || 0.5 * r,
                transitionFunction: u ? this._easeOutExpoTransition : void 0,
              }),
              await this._cameraManager.goToEntity(t, {
                destination: _,
                cinematic: h,
                minRadius: m,
                destinationUp: y,
                duration: l || 0.5 * r,
                transitionFunction: u ? this._easeOutExpoTransition : void 0,
              });
          }
          async alignSpacecraftPlanet(
            t,
            {
              duration: e = 1.5,
              minRadius: s = 50,
              distanceMultiplier: n = 3,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.ALIGN_SPACECRAFT,
            });
            const o = this._scene.getEntity(t);
            let r = o.getParent();
            for (
              ;
              null !== r &&
              null === r.getComponentByType("spheroid") &&
              null === r.getComponentByType("model");

            )
              r = r.getParent();
            let a = r.getOcclusionRadius();
            null !== r.getComponentByType("spheroid") &&
              (a = r.getComponentByType("spheroid").getEquatorialRadius());
            const l = new i.Vector3();
            o.getPositionRelativeToEntity(l, i.Vector3.Zero, r),
              l.normalize(l),
              l.magnitude() < 1e-4 &&
              (o.getOrientation().getAxis(l, 0), l.normalize(l)),
              l.mult(l, Math.max(s, n * a));
            const c = new i.Vector3();
            r.getOrientation().getAxis(c, 2),
              await this._cameraManager.goToEntity(r.getName()),
              await this._cameraManager.goToEntity(t, {
                destination: l,
                cinematic: !1,
                minRadius: Math.min(a, s),
                destinationUp: c,
                duration: e,
              });
          }
          async viewFromSide(
            t,
            {
              planeId: e = "earth",
              distance: s,
              cinematic: o = !1,
              duration: r = 0.75,
              verticalOffset: a = 0,
              horizontalOffset: l = 0,
              forwardVector: c = "x-axis",
              upVector: h = "",
            } = {},
          ) {
            const u = this._scene.get(t),
              d = this._scene.get(e) || u.getParent();
            await n.SceneHelpers.waitTillEntitiesInPlace(this._scene, [t, e]);
            const p = u.getOcclusionRadius(),
              m = 1.2 * p,
              _ = new i.Vector3(),
              g = new i.Vector3();
            let y = 0;
            "z-axis" === c ? (y = 2) : "y-axis" === c && (y = 1),
              u.getOrientation().getAxis(g, y),
              g.normalize(g);
            const f = new i.Vector3();
            u.getPositionRelativeToEntity(f, i.Vector3.Zero, d),
              f.normalize(f),
              _.cross(g, f),
              _.normalize(_),
              _.mult(_, -1);
            const b = new i.Vector3();
            if (h) {
              let t = 1;
              h.includes("x-axis") ? (t = 0) : h.includes("z-axis") && (t = 2),
                u.getOrientation().getAxis(b, t),
                h.startsWith("-") && b.mult(b, -1);
            } else u.getPositionRelativeToEntity(b, u, d), b.normalize(b);
            const T = new i.Vector3();
            if ((T.cross(_, b), T.normalize(T), b.cross(T, _), 0 !== a)) {
              const t = new i.Quaternion(),
                e = i.MathUtils.degToRad(a);
              t.setFromAxisAngle(T, e), _.rotate(t, _);
            }
            if ((b.cross(T, _), 0 !== l)) {
              const t = new i.Quaternion(),
                e = i.MathUtils.degToRad(l);
              t.setFromAxisAngle(b, e), _.rotate(t, _);
            }
            T.cross(_, b),
              T.normalize(T),
              void 0 === s ? _.mult(_, 10 * p) : _.mult(_, s),
              await this._cameraManager.goToEntity(t, {
                destination: _,
                cinematic: o,
                minRadius: m,
                destinationUp: b,
                duration: r,
              });
          }
          async spacecraftLookAtTarget(t, e) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.LOOK_AT,
              target: e,
            });
          }
          async spacecraftLockedOnTarget(t, e) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.LOCKED_ON,
              target: e,
            });
          }
          async goToSystemSideway(
            t,
            {
              distance: e,
              minDistance: s = 0,
              duration: o = 1,
              otherEntityNames: r = [],
              includeChildren: a = !0,
              angleInDegree: l = 0,
              cinematic: c = !1,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.SYSTEM,
            });
            const h = this._scene.getEntity(t),
              u = this.isBarycenter(t) ? this.removeBarycenter(t) : t,
              d =
                u in this._customSystemDistances
                  ? this._customSystemDistances[u]
                  : 0,
              p = [h];
            for (let t = 0; t < r.length; t++)
              p.push(this._scene.getEntity(r[t]));
            if (a)
              for (let t = 0; t < h.getNumChildren(); t++) {
                const e = h.getChild(t);
                null === e.getComponentByType("camera") &&
                  (e.getName().startsWith("sc") ||
                    e.getPosition().isNaN() ||
                    p.push(e));
              }
            const m = new i.Vector3();
            m.normalize(h.getVelocity());
            const _ = new i.Vector3();
            _.normalize(h.getPosition()), _.setNormalTo(m, _);
            const g = new i.Vector3();
            g.cross(_, m);
            const y = new i.Vector3();
            y.mult(m, -1), y.addMult(y, g, Math.tan(i.MathUtils.degToRad(l)));
            let f = h.getOcclusionRadius();
            const b = h.getComponentByType("spheroid");
            if (null !== b) f = b.getEquatorialRadius();
            else if (this.isBarycenter(t)) {
              const e = this.removeBarycenter(t),
                s = this._scene.getEntity(e).getComponentByType("spheroid");
              null !== b && (f = s.getEquatorialRadius());
            }
            const T = 1.2 * f;
            let S = e;
            if (void 0 === S) {
              const t = new i.Quaternion();
              t.setFromAxes(_, y, void 0),
                (S = n.Cameras.getDistanceToFitEntities(
                  this._cameraEntity,
                  t,
                  h,
                  p,
                )),
                (S *= 1.3);
            }
            S = Math.max(d, S);
            const E = this._cameraEntity.getComponentByType("camera");
            E.getHorizontalFieldOfView() < E.getVerticalFieldOfView() &&
              (S *= 1.3 * E.getVerticalFieldOfView()),
              y.setMagnitude(y, S),
              await this._cameraManager.goToEntity(t, {
                destination: y,
                cinematic: c,
                minRadius: T,
                destinationUp: g,
                duration: o,
              });
          }
          async goToSystem(t, e = {}) {
            if ("inner_solar_system" === t)
              Object.assign(e, { distance: 7e8, angle: 25, planeId: "earth" }),
                await this._goToSystem("sun", e);
            else if ("outer_solar_system" === t)
              Object.assign(e, { distance: 1e10, angle: 25, planeId: "earth" }),
                await this._goToSystem("sun", e);
            else {
              const s = this.isBarycenter(t) ? this.removeBarycenter(t) : t,
                i =
                  s in this._customSystemDistances
                    ? this._customSystemDistances[s]
                    : 0,
                n = this._app.getManager("content").getEntityInfo(t),
                o = "planeId" in e ? e.planeId : n?.planeEntity || "";
              Object.assign(e, { minDistance: i, planeId: o }),
                await this._goToSystem(t, e);
            }
          }
          async _goToSystem(
            t,
            {
              distance: e,
              angle: s = 25,
              minDistance: o = 0,
              duration: r = 1,
              planeId: a = "",
              otherEntityNames: l = [],
              includeChildren: c = !0,
              isRelativeToPreviousCamera: h = !0,
            } = {},
          ) {
            this._cameraManager.setContext({
              id: t,
              context: CameraScripts.CONTEXT.SYSTEM,
            });
            const u = this._scene.getEntity(t),
              d = [u];
            for (let t = 0; t < l.length; t++)
              d.push(this._scene.getEntity(l[t]));
            if (c)
              for (let t = 0; t < u.getNumChildren(); t++) {
                const e = u.getChild(t);
                null === e.getComponentByType("camera") &&
                  (e.getName().startsWith("sc") ||
                    e.getPosition().isNaN() ||
                    d.push(e));
              }
            const p = new i.Vector3(),
              m = new i.Vector3();
            h
              ? (this._cameraEntity.getPositionRelativeToEntity(
                m,
                i.Vector3.Zero,
                u,
              ),
                m.isNaN()
                  ? (p.copy(new i.Vector3(0, -1, 0)), p.mult(p, 1e10))
                  : p.copy(m))
              : (p.normalize(u.getPosition()), p.mult(p, -1));
            const _ = new i.Vector3();
            "" !== a && null !== this._scene.get(a)
              ? (this.getNormalToEcliptic(_, a),
                _.isNaN() && _.copy(new i.Vector3(0, 0, 1)))
              : u.getOrientation().getAxis(_, 2);
            const g = new i.Vector3();
            g.cross(p, _), g.normalize(g), p.setNormalTo(_, p), p.normalize(p);
            const y = new i.Quaternion();
            y.setFromAxisAngle(g, i.MathUtils.degToRad(s)), p.rotate(y, p);
            let f = u.getOcclusionRadius();
            const b = u.getComponentByType("spheroid");
            if (null !== b) f = b.getEquatorialRadius();
            else if (this.isBarycenter(t)) {
              const e = this.removeBarycenter(t),
                s = this._scene.getEntity(e).getComponentByType("spheroid");
              null !== b && (f = s.getEquatorialRadius());
            }
            const T = 1.2 * f;
            let S = e;
            if (void 0 === S) {
              const t = new i.Quaternion();
              t.setFromAxes(g, p, void 0),
                (S = n.Cameras.getDistanceToFitEntities(
                  this._cameraEntity,
                  t,
                  u,
                  d,
                )),
                (S *= 1.3);
            }
            S = Math.max(o, S);
            const E = this._cameraEntity.getComponentByType("camera");
            if (
              (E.getHorizontalFieldOfView() < E.getVerticalFieldOfView() &&
                (S *= 1.3 * E.getVerticalFieldOfView()),
                h)
            ) {
              const e = new i.Vector3();
              this._cameraEntity.getPositionRelativeToEntity(
                m,
                i.Vector3.Zero,
                u,
              ),
                m.isNaN()
                  ? (e.copy(new i.Vector3(0, -1, 0)),
                    e.setNormalTo(_, e),
                    e.mult(e, 1e10),
                    e.rotate(y, e))
                  : e.copy(m),
                await this._cameraManager.goToEntity(t, {
                  destination: e,
                  destinationUp: _,
                  duration: r,
                });
            } else
              await this._cameraManager.goToEntity(t, {
                distance: e,
                duration: r / 2,
              });
            p.mult(p, S),
              await this._cameraManager.goToEntity(t, {
                destination: p,
                cinematic: !1,
                minRadius: T,
                destinationUp: _,
                duration: r,
              });
          }
          async goToCenter(t, e, s, n = {}) {
            this._cameraManager.setContext({
              id: "centerSystem",
              context: CameraScripts.CONTEXT.CENTER_SYSTEM,
            });
            const o = new i.Vector3(),
              r = this._scene.getEntity(e),
              a = new i.Vector3(),
              l = [];
            for (let e = 0; e < t.length; e++) {
              const n = this._scene.getEntity(t[e]);
              l.push(n),
                n.getPositionRelativeToEntity(a, i.Vector3.Zero, r, s),
                o.addMult(o, a, 1 / t.length);
            }
            let c = this._scene.getEntity("center");
            null === c &&
              ((c = this._scene.addEntity("center")),
                c.setOrientation(i.Quaternion.Identity)),
              c.setParent(r),
              c.setPosition(o),
              await this._scene.getLoadedPromise(),
              await this._cameraManager.pioneer.waitUntilNextFrame(),
              (n.otherEntityNames = t),
              await this._goToSystem(c.getName(), n);
          }
          async showLocationCenter(t, e, s, n, o, r, a = {}) {
            this._cameraManager.setContext({
              id: "centerLocation",
              context: CameraScripts.CONTEXT.CENTER_LOCATION,
            });
            const l = new i.Vector3(),
              c = this._scene.getEntity(e),
              h = new i.Vector3(),
              u = [];
            for (let e = 0; e < t.length; e++) {
              const n = this._scene.getEntity(t[e]);
              u.push(n),
                n.getPositionRelativeToEntity(h, i.Vector3.Zero, c, s),
                l.addMult(l, h, 1 / t.length);
            }
            let d = this._scene.getEntity("center");
            null === d &&
              ((d = this._scene.addEntity("center")),
                d.setOrientation(i.Quaternion.Identity)),
              d.setParent(c),
              d.setPosition(l),
              await this._scene.getLoadedPromise(),
              await this._cameraManager.pioneer.waitUntilNextFrame(),
              (a.otherEntityNames = t),
              await this.showLocation(d.getName(), n, o, r, a);
          }
          async showLocationInParentSystem(t, e = {}) {
            const s = this._app.getManager("scene").getParent(t);
            await this.showLocation(t, s, s, "northPole", e);
          }
          async showLocationInSolarSystem(t, e = {}) {
            let s = this._scene.getEntity(t).getParent();
            if ("sun" !== s.getName())
              for (; "sun" !== s.getParent().getName();) s = s.getParent();
            else s = this._scene.getEntity("earth");
            await this.showLocation(t, s.getName(), "sun", "planeNormal", e);
          }
        }
        CameraScripts.CONTEXT = {
          CELESTIAL_OBJECT: 0,
          SPACECRAFT: 1,
          ALIGN_SPACECRAFT: 2,
          LOCATION: 3,
          SYSTEM: 4,
          COMPARE: 5,
          LOOK_AT: 6,
          LOCKED_ON: 7,
          INSTRUMENT: 8,
          ALIGN_OBJECTS: 9,
          CENTER_SYSTEM: 10,
          CENTER_LOCATION: 11,
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ERTManager: function () {
              return ERTManager;
            },
          });
        var i = s(2);
        class ERTManager extends i.BaseManager {
          constructor(
            t,
            { isERT: e = !1, ertTarget: s = "", sceneMgr: i = null } = {},
          ) {
            super(t),
              (this._isERT = e),
              (this._ertTarget = s),
              (this._sceneMgr = i),
              (this.getNow = this.getNow.bind(this));
          }
          isERT() {
            return this._isERT;
          }
          setERT(t) {
            this._isERT = t;
          }
          getERTTarget() {
            return this._ertTarget;
          }
          setERTTarget(t) {
            this._ertTarget = t;
          }
          getERTScene() {
            return this._sceneMgr;
          }
          setERTScene(t) {
            this._sceneMgr = t;
          }
          getERTOffset() {
            if (null !== this._sceneMgr) {
              return (
                this._sceneMgr.getDistance(this._ertTarget, "earth", {
                  subtractRadius: !0,
                }) / i.AppUtils.constants.speedOfLight
              );
            }
            return console.warn("Clock: could not get scene manager."), 0;
          }
          getERTFromTime(t) {
            const e = this.getERTOffset();
            return t.add(e, "s"), t;
          }
          getTimeFromERT(t) {
            const e = this.getERTOffset();
            return t.subtract(e, "s"), t;
          }
          getNow(t) {
            return this._isERT ? this.getTimeFromERT(t) : t;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TimeManager: function () {
              return TimeManager;
            },
          });
        var i = s(5),
          n = s(218),
          o = s.n(n),
          r = s(2);
        class TimeManager extends r.BaseManager {
          constructor(t) {
            super(t),
              (this._dateFormats = {
                utc: {
                  full: "YYYY-MM-D HH[:]mm[:]ss",
                  datetime: "YYYY-MM-D HH[:]mm",
                  date: "YYYY MMMM D",
                  time: "HH[:]mm[:]ss",
                  url: "YYYY-MM-DDTHH:mm:ss.SSSZ",
                },
                local: {
                  full: "M/D/YY hh[:]mm[:]ss",
                  datetime: "M/D/YY hh[:]mm",
                  date: "MMMM D, YYYY",
                  time: "hh[:]mm[:]ss",
                  meridiem: "a",
                },
              }),
              (this._timeLimits = { min: null, max: null }),
              (this._defaultLimits = { min: null, max: null }),
              (this._startTime = null),
              (this._forcedPause = !1),
              (this._isUTC = !0),
              (this._ertMgr = null),
              (this._rate = 0),
              (this._defaultRate = 1),
              (this._utcTimezone = "Etc/UTC"),
              (this._localTimezone = o().tz.guess()),
              (this._previousTimeRate = this.pioneer.getTimeRate()),
              (this._timezone = this._utcTimezone),
              this._eventNames.push(
                "update",
                "change",
                "timezone",
                "ratechange",
                "forcedpause",
                "forcedpauseresume",
                "getnow",
              ),
              this._initCallbacks(),
              this.setToNow(),
              this.pioneer.addCallback(() => {
                const t = this.pioneer.getTime(),
                  e = this.pioneer.getTimeRate();
                this._time = o().tz(
                  1e3 * i.TimeUtils.etToUnix(t),
                  this._timezone,
                );
                let s = o().tz(
                  1e3 * i.TimeUtils.etToUnix(t + e / this.pioneer.getFPS()),
                  this._timezone,
                );
                isNaN(s) && (s = this._time),
                  this._timeLimits.max &&
                    s.valueOf() > this._timeLimits.max.valueOf()
                    ? (console.warn(
                      "[Time Manager]: Clock has reached maximum limit.",
                    ),
                      this._onLimitReach("max"))
                    : this._timeLimits.min &&
                      s.valueOf() < this._timeLimits.min.valueOf()
                      ? (console.warn(
                        "[Time Manager]: Clock has reached minimum limit.",
                      ),
                        this._onLimitReach("min"))
                      : this._timeLimits.max &&
                      s.valueOf() < this._timeLimits.max.valueOf() &&
                      this._timeLimits.min &&
                      s.valueOf() > this._timeLimits.min.valueOf() &&
                      this._forcedPause &&
                      ((this._forcedPause = !1),
                        0 === this.getTimeRate() &&
                        (this.play(),
                          this.triggerCallbacks("forcedpauseresume", [
                            this._time,
                          ]))),
                  this.triggerCallbacks("update", [this._time]);
              }, !0);
          }
          _onLimitReach(t) {
            0 !== this.getTimeRate() &&
              ((this._forcedPause = !0),
                this.pause(),
                (this._previousTimeRate = 0),
                this.triggerCallbacks("forcedpause", [this._time, t])),
              this.setTime(this._timeLimits[t]);
          }
          setERTManager(t) {
            this._ertMgr = t;
          }
          isNow() {
            return (
              1 === this._rate &&
              Math.abs(this._time.valueOf() - this.getNow().valueOf()) < 1e3
            );
          }
          getNow() {
            let t = o()().tz(this._timezone);
            for (let e = this._callbacks.getnow.length - 1; e >= 0; e--) {
              t = (0, this._callbacks.getnow[e])(t);
            }
            return t;
          }
          setToNow() {
            this.setTime(this.getNow());
          }
          setStartTime(t) {
            this._startTime = t;
          }
          setToStart() {
            null !== this._startTime && this.setTime(this._startTime);
          }
          getTime() {
            return this._time;
          }
          setTime(t) {
            t = this.parseTime(t);
            const e = this.momentToET(t);
            this.pioneer.setTime(e),
              (this._time = o().tz(
                1e3 * i.TimeUtils.etToUnix(this.pioneer.getTime()),
                this._timezone,
              )),
              this.triggerCallbacks("change", [this._time]);
          }
          parseTime(t, e = "url") {
            let s = this._isUTC,
              i = o().ISO_8601;
            if ("string" == typeof t && "" !== t) {
              const n =
                /^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d(?:|:[0-5]\d)(?:\.\d{1,6})?(?:|Z|[+-][01]\d:[0-5]\d)$/;
              s = null !== t.match(n);
              const o = s ? "utc" : "local",
                r = this.getDateFormat(e, o);
              r && (i = r);
            } else "number" == typeof t && (s = !0);
            return s ? o().utc(t) : o().tz(t, i, !0, this._localTimezone);
          }
          etToMoment(t) {
            return o().tz(1e3 * i.TimeUtils.etToUnix(t), "Etc/UTC");
          }
          momentToET(t) {
            const e = t.valueOf() / 1e3,
              s = i.TimeUtils.unixToEt(e);
            return Math.round(1e3 * s) / 1e3;
          }
          getTimezone() {
            return this._timezone;
          }
          getUTCTimezone() {
            return this._utcTimezone;
          }
          getLocalTimezone() {
            return this._localTimezone;
          }
          isUTC() {
            return this._isUTC;
          }
          setDisplayUTC(t) {
            (this._isUTC = t),
              (this._timezone = this._isUTC
                ? this._utcTimezone
                : this._localTimezone),
              this.triggerCallbacks("timezone", [t]);
          }
          getDateFormats() {
            return this._dateFormats;
          }
          setDateFormats(t) {
            for (const [e, s] of Object.entries(t))
              void 0 !== this._dateFormats[e]
                ? Object.assign(this._dateFormats[e], s)
                : (this._dateFormats[e] = s);
          }
          getDateFormat(t, e) {
            return (
              e || (e = this._isUTC ? "utc" : "local"), this._dateFormats[e][t]
            );
          }
          setDateFormat(t, e) {
            this._dateFormats[t] = e;
          }
          getLimits() {
            return this._timeLimits;
          }
          setLimits(t) {
            (this._timeLimits.min = t.min.clone()),
              (this._timeLimits.max = t.max.clone());
          }
          getDefaultLimits() {
            return this._defaultLimits;
          }
          setDefaultLimits(t) {
            (this._defaultLimits.min = t.min.clone()),
              (this._defaultLimits.max = t.max.clone());
          }
          resetLimits() {
            (this._timeLimits.min = this._defaultLimits.min.clone()),
              (this._timeLimits.max = this._defaultLimits.max.clone());
          }
          setMin(t) {
            this._timeLimits.min = o().tz(t, this._timezone);
          }
          resetMin() {
            this._timeLimits.min = this._defaultLimits.min.clone();
          }
          setMax(t) {
            this._timeLimits.max = o().tz(t, this._timezone);
          }
          resetMax() {
            this._timeLimits.max = this._defaultLimits.max.clone();
          }
          getTimeUrl(t) {
            let e;
            return (
              (e = t
                ? o().utc(o().tz(t, this._timezone))
                : o().utc(this._time)),
              e.utc().format(this._dateFormats.utc.url)
            );
          }
          getDefaultTimeRate() {
            return this._defaultRate;
          }
          setDefaultTimeRate(t) {
            this._defaultRate = t;
          }
          resetTimeRate() {
            this.setTimeRate(this._defaultRate);
          }
          getTimeRate() {
            return this.pioneer.getTimeRate();
          }
          setTimeRate(t) {
            (this._rate = t),
              this.pioneer.setTimeRate(t),
              this.triggerCallbacks("ratechange", [this._rate]);
          }
          play() {
            const t =
              0 === this._previousTimeRate
                ? this._defaultRate
                : this._previousTimeRate;
            this.setTimeRate(t);
          }
          pause() {
            (this._previousTimeRate = this.getTimeRate()), this.setTimeRate(0);
          }
          getMidTime(t, e) {
            const s = (t.unix() + e.unix()) / 2;
            return o()(s, "X");
          }
          getEventNames() {
            return this._eventNames;
          }
          isWithinLimits(t) {
            return this._timeLimits.min && t.isBefore(this._timeLimits.min)
              ? -1
              : this._timeLimits.max && t.isAfter(this._timeLimits.max)
                ? 1
                : 0;
          }
          get timeLimits() {
            return this._timeLimits;
          }
          get forcedPause() {
            return this._forcedPause;
          }
          get previousTimeRate() {
            return this._previousTimeRate;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            ComparisonManager: function () {
              return ComparisonManager;
            },
          });
        var i = s(2),
          n = s(5),
          o = s(529);
        class ComparisonManager extends i.BaseManager {
          constructor(t) {
            super(t),
              (this._viewportLeft = null),
              (this._viewportRight = null),
              (this._sceneLeft = null),
              (this._sceneRight = null),
              (this._anchorEntityLeft = null),
              (this._anchorEntityRight = null),
              (this._entityLeft = null),
              (this._entityRight = null),
              (this._sunLeft = null),
              (this._sunRight = null),
              (this._activeViewports = []),
              (this._customRotations = {
                rose_bowl: [
                  ["x", 45],
                  ["z", 180],
                ],
                sc_juno: [
                  ["x", 45],
                  ["z", 180],
                ],
                saturn: [["x", 25]],
                sc_lucy: [
                  ["z", -90],
                  ["y", -25],
                ],
                sc_ixpe: [
                  ["z", -90],
                  ["y", 180],
                ],
                sc_hubble_space_telescope: [
                  ["x", 90],
                  ["z", 90],
                ],
                sc_jwst: [
                  ["x", 180],
                  ["y", 180],
                ],
                sc_psyche: [
                  ["x", 90],
                  ["z", 90],
                ],
                sc_stardust: [["x", 90]],
                sc_osiris_rex_src: [["x", 90]],
                sc_stardust_src: [["z", 90]],
              }),
              (this._zoomSensitivity = { click: 0.3, hold: 0.1 }),
              this.bindFunctions([
                "_adjustZoomFromViewport",
                "zoomIn",
                "zoomOut",
              ]),
              (this._sceneLeft = this.pioneer.addScene("comparisonLeft")),
              this._sceneLeft.setAmbientLightColor(
                new n.Color(0.005, 0.005, 0.005),
              ),
              (this._sceneRight = this.pioneer.addScene("comparisonRight")),
              this._sceneRight.setAmbientLightColor(
                new n.Color(0.005, 0.005, 0.005),
              ),
              o.Entity.create("observable_universe", this._sceneLeft),
              o.Entity.create("milky_way", this._sceneLeft),
              o.Entity.create("observable_universe", this._sceneRight),
              o.Entity.create("milky_way", this._sceneRight),
              (this._sunLeft = o.Entity.create("sun", this._sceneLeft, {
                nameSuffix: "_compare",
              })),
              (this._sunRight = o.Entity.create("sun", this._sceneRight, {
                nameSuffix: "_compare",
              })),
              (this._anchorEntityLeft =
                this._sceneLeft.addEntity("anchorLeft")),
              this._anchorEntityLeft.setParent(
                this._sceneLeft.getEntity("sun_compare"),
              ),
              this._anchorEntityLeft.setPosition(new n.Vector3(1e8, 0, 0)),
              this._anchorEntityLeft.setOrientation(n.Quaternion.Identity),
              (this._anchorEntityRight =
                this._sceneRight.addEntity("anchorRight")),
              this._anchorEntityRight.setParent(
                this._sceneRight.getEntity("sun_compare"),
              ),
              this._anchorEntityRight.setPosition(new n.Vector3(1e8, 0, 0)),
              this._anchorEntityRight.setOrientation(n.Quaternion.Identity),
              (this._cameraEntityLeft =
                this._sceneLeft.addEntity("cameraLeft")),
              this._cameraEntityLeft.setParent(this._anchorEntityLeft),
              (this._cameraLeft =
                this._cameraEntityLeft.addComponent("camera")),
              (this._cameraLightLeft =
                this._cameraEntityLeft.addComponent("lightSource")),
              this._cameraLightLeft.setEnabled(!1),
              (this._cameraEntityRight =
                this._sceneRight.addEntity("cameraRight")),
              this._cameraEntityRight.setParent(this._anchorEntityRight),
              (this._cameraRight =
                this._cameraEntityRight.addComponent("camera")),
              (this._cameraLightRight =
                this._cameraEntityRight.addComponent("lightSource")),
              this._cameraLightRight.setEnabled(!1),
              (this._viewportLeft = this.pioneer.addViewport("left-viewport")),
              (this._viewportLeft.getDiv().className =
                "compare-viewport left-desktop"),
              this._viewportLeft.setEnabled(!1),
              this._viewportLeft.setCamera(this._cameraLeft),
              (this._viewportRight =
                this.pioneer.addViewport("right-viewport")),
              (this._viewportRight.getDiv().className =
                "compare-viewport right-desktop"),
              this._viewportRight.setEnabled(!1),
              this._viewportRight.setCamera(this._cameraRight),
              this.pioneer.addCallback(
                this._adjustZoomFromViewport.bind(this),
                !0,
              );
          }
          get entityLeft() {
            return this._entityLeft;
          }
          get entityRight() {
            return this._entityRight;
          }
          zoomIn(t = !1) {
            let e = 1;
            const s = t
              ? this._zoomSensitivity.hold
              : this._zoomSensitivity.click;
            e /= Math.pow(2, s);
            const i = this.app.getManager("camera");
            i.zoom(e, this._cameraEntityLeft),
              i.zoom(e, this._cameraEntityRight);
          }
          zoomOut(t = !1) {
            let e = 1;
            const s = t
              ? this._zoomSensitivity.hold
              : this._zoomSensitivity.click;
            e *= Math.pow(2, s);
            const i = this.app.getManager("camera");
            i.zoom(e, this._cameraEntityLeft),
              i.zoom(e, this._cameraEntityRight);
          }
          async compare(t, e) {
            this._entityLeft &&
              this._entityLeft.getName() !== t &&
              (this._sceneLeft.removeEntity(this._entityLeft),
                (this._entityLeft = null)),
              this._entityRight &&
              this._entityRight.getName() !== e &&
              (this._sceneRight.removeEntity(this._entityRight),
                (this._entityRight = null));
            const s = this.app.getManager("content"),
              i = this.app.getManager("label");
            if (!this._entityLeft) {
              (this._entityLeft = o.Entity.create(t, this._sceneLeft)),
                this._entityLeft.clearParentingTableEntries(),
                this._entityLeft.clearControllers(),
                this._entityLeft.setParent(this._anchorEntityLeft),
                this._entityLeft.setPosition(n.Vector3.Zero);
              const e = new n.Quaternion();
              this._getCustomRotation(e, t, "left"),
                this._entityLeft.setOrientation(e),
                this._entityLeft
                  .getComponentByClass(n.DivComponent)
                  .setFadeWhenCloseToEntity("sun"),
                i.setLabelProps(
                  {
                    getLabelClass: (t) =>
                      `no-select ${s.getClassName(t, "") ?? ""}`,
                    handleTouch: null,
                    handleClick: null,
                  },
                  [t],
                  this._sceneLeft,
                  this._cameraEntityLeft,
                );
            }
            if (!this._entityRight) {
              (this._entityRight = o.Entity.create(e, this._sceneRight)),
                this._entityRight.clearParentingTableEntries(),
                this._entityRight.clearControllers(),
                this._entityRight.setParent(this._anchorEntityRight),
                this._entityRight.setPosition(n.Vector3.Zero);
              const t = new n.Quaternion();
              this._getCustomRotation(t, e, "right"),
                this._entityRight.setOrientation(t),
                this._entityRight
                  .getComponentByClass(n.DivComponent)
                  .setFadeWhenCloseToEntity("sun"),
                i.setLabelProps(
                  {
                    getLabelClass: (t) =>
                      `no-select ${s.getClassName(t, "") ?? ""}`,
                    handleTouch: null,
                    handleClick: null,
                  },
                  [e],
                  this._sceneRight,
                  this._cameraEntityRight,
                );
            }
            if ((this._updateSuns(), !this._viewportLeft.isEnabled())) {
              for (let t = 0, e = this.pioneer.getNumViewports(); t < e; t++) {
                const e = this.pioneer.getViewport(t);
                e.isEnabled() &&
                  (this._activeViewports.push(t), e.setEnabled(!1));
              }
              this._viewportLeft.setEnabled(!0),
                this._viewportRight.setEnabled(!0),
                this.setCameraLight(!0);
              const t = new CustomEvent("comparisonenter", { detail: {} });
              window.dispatchEvent(t);
            }
            const r = o.Cameras.getDistanceToFitEntities(
              this._cameraEntityLeft,
              n.Quaternion.Identity,
              this._entityLeft,
              [this._entityLeft],
            ),
              a = o.Cameras.getDistanceToFitEntities(
                this._cameraEntityRight,
                n.Quaternion.Identity,
                this._entityRight,
                [this._entityRight],
              );
            let l = Math.max(a, r);
            l *= 1.6;
            const c = new n.Vector3();
            c.setMagnitude(n.Vector3.YAxisNeg, l);
            const h = new n.Vector3();
            h.setMagnitude(n.Vector3.YAxisNeg, l),
              this._cameraEntityLeft.clearControllers(),
              this._cameraEntityRight.clearControllers();
            const u = new CustomEvent("cameracompare", {
              detail: { left: t, right: e },
            });
            window.dispatchEvent(u);
            const d = this.app.getManager("camera"),
              p = d.goToEntity("anchorLeft", {
                minRadius: 0.5 * l,
                maxRadius: 10 * l,
                camera: this._cameraEntityLeft,
                destination: c,
                destinationUp: n.Vector3.ZAxis,
                scene: this._sceneLeft,
                select: !1,
                zoom: !0,
                cinematic: !0,
              }),
              m = d.goToEntity("anchorRight", {
                minRadius: 0.5 * l,
                maxRadius: 10 * l,
                camera: this._cameraEntityRight,
                destination: h,
                destinationUp: n.Vector3.ZAxis,
                scene: this._sceneRight,
                select: !1,
                zoom: !0,
                cinematic: !0,
              });
            await Promise.all([p, m]);
            const _ = this.app.getManager("scene");
            _.addLoading(this._entityLeft.getName(), "compare"),
              _.addLoading(this._entityRight.getName(), "compare"),
              await Promise.all([
                this._entityLeft.getLoadedPromise(),
                this._entityRight.getLoadedPromise(),
              ]),
              _.removeLoading(this._entityLeft.getName(), "compare"),
              _.removeLoading(this._entityRight.getName(), "compare");
          }
          setCameraLight(t, e) {
            this._cameraLightLeft.setEnabled(t),
              this._cameraLightRight.setEnabled(t),
              void 0 !== e &&
              (this._cameraLightLeft.setColor(e),
                this._cameraLightRight.setColor(e)),
              this._updateSuns();
          }
          exit() {
            this._entityLeft &&
              (this._sceneLeft.removeEntity(this._entityLeft),
                (this._entityLeft = null)),
              this._entityRight &&
              (this._sceneRight.removeEntity(this._entityRight),
                (this._entityRight = null)),
              this._viewportLeft.setEnabled(!1),
              this._viewportRight.setEnabled(!1);
            for (let t = 0; t < this._activeViewports.length; t++) {
              const e = this._activeViewports[t];
              this.pioneer.getViewport(e).setEnabled(!0);
            }
            this._activeViewports = [];
            const t = new CustomEvent("comparisonexit", { detail: {} });
            window.dispatchEvent(t);
          }
          _updateSuns() {
            const t =
              "sun" !== this._entityLeft?.getName() &&
              (!this._cameraLightLeft.isEnabled() ||
                this._cameraLightLeft.getColor().min() < 1),
              e =
                "sun" !== this._entityRight?.getName() &&
                (!this._cameraLightRight.isEnabled() ||
                  this._cameraLightRight.getColor().min() < 1);
            this._sunLeft.getComponentByType("spheroidLOD").setEnabled(t),
              this._sunLeft.getComponentByType("atmosphere").setEnabled(t),
              this._sunLeft.getComponentByType("sprite").setEnabled(t),
              this._sunLeft.getComponentByType("lightSource").setEnabled(t),
              this._sunRight.getComponentByType("spheroidLOD").setEnabled(e),
              this._sunRight.getComponentByType("atmosphere").setEnabled(e),
              this._sunRight.getComponentByType("sprite").setEnabled(e),
              this._sunRight.getComponentByType("lightSource").setEnabled(e);
          }
          _adjustZoomFromViewport() {
            if (!this._viewportLeft.isEnabled()) return;
            if (!this._viewportRight.isEnabled()) return;
            let t = this._cameraEntityLeft.getPosition().magnitude();
            Number.isNaN(t) && (t = 1);
            const e = this.app.pioneer.getInput().getActiveViewport();
            e &&
              "right-viewport" === e.getName() &&
              ((t = this._cameraEntityRight.getPosition().magnitude()),
                Number.isNaN(t) && (t = 1));
            const s = n.Vector3.pool.get();
            s.setMagnitude(this._cameraEntityLeft.getPosition(), t);
            const i = n.Vector3.pool.get();
            i.setMagnitude(this._cameraEntityRight.getPosition(), t),
              this._cameraEntityLeft.setPosition(s),
              this._cameraEntityRight.setPosition(i),
              n.Vector3.pool.release(s),
              n.Vector3.pool.release(i);
          }
          _getCustomRotation(t, e, s) {
            if ((t.set(1, 0, 0, 0), void 0 !== this._customRotations[e])) {
              const s = this._customRotations[e];
              for (let e = 0, i = s.length; e < i; e++) {
                let i;
                if ("x" === s[e][0]) i = n.Vector3.XAxis;
                else if ("y" === s[e][0]) i = n.Vector3.YAxis;
                else {
                  if ("z" !== s[e][0])
                    throw new Error(`Invalid model rotate axis "${s[e][0]}".`);
                  i = n.Vector3.ZAxis;
                }
                let o = s[e][1];
                o = n.MathUtils.degToRad(o);
                const r = new n.Quaternion();
                r.setFromAxisAngle(i, o), t.mult(t, r);
              }
            }
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SearchManager: function () {
              return SearchManager;
            },
          });
        var i = s(674),
          n = s(2);
        class SearchManager extends n.BaseManager {
          constructor(t, e = {}) {
            super(t),
              (this._maxEntries = 10),
              (this._fuse = null),
              (this._database = null),
              (this._options = {
                threshold: 0.4,
                keys: [
                  { name: "id", weight: 0.99 },
                  { name: "name", weight: 0.98 },
                ],
                includeScore: !0,
                includeMatches: !0,
                ignoreLocation: !0,
                ...e,
              });
          }
          setOptions(t) {
            Object.assign(this._options, t),
              (this._fuse = new i.default(this._database, this._options));
          }
          setDatabase(t, e = {}) {
            t
              ? (Object.assign(this._options, e),
                (this._database = Object.keys(t)
                  .filter((e) => !1 !== t[e].searchable)
                  .map((e) => {
                    const s = t[e].keywords || [];
                    return (
                      s.map((t) => ({ value: t })), (t[e].keywords = s), t[e]
                    );
                  })),
                Array.isArray(this._database)
                  ? (this._fuse = new i.default(this._database, this._options))
                  : console.error(
                    "[SearchManager.setDatabase] Database is not an array.",
                  ))
              : console.error("[SearchManager.setDatabase] Missing database.");
          }
          getEntry(t) {
            return this._database.find((e) => e.id === t);
          }
          find(t, e = this._maxEntries) {
            if ("" === t || null == t || !this._fuse) return null;
            let s = this._fuse.search(t);
            return (s = s.slice(0, e)), s;
          }
        }
      },
      ,
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TitleManager: function () {
              return TitleManager;
            },
          });
        var i = s(2);
        class TitleManager extends i.BaseManager {
          constructor(t, e) {
            super(t),
              (this._options = e),
              (this._parseFn = this._options.parseFn ?? null);
          }
          updateTitle(t) {
            const { prefix: e, suffix: s } = this._options || {},
              i = `${e} - ${this._parseRoute(t)} - ${s}`;
            document.title = i;
          }
          _parseRoute(t) {
            return this._parseFn ? this._parseFn(t) : "Home";
          }
          setParseFunction(t) {
            "function" == typeof t && (this._parseFn = t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseView: function () {
              return BaseView;
            },
          });
        var i = s(218),
          n = s.n(i),
          o = s(529),
          r = s(2);
        class BaseView extends r.BaseComponent {
          constructor(t, e, s = []) {
            super(t, e),
              (this._components = [...s]),
              (this._validQueries = []),
              (this._rules = {}),
              (this._target = null),
              (this._enabled = !1),
              this.bindFunctions([
                "resize",
                "updateVisibility",
                "toggleViewUI",
              ]);
          }
          get app() {
            return super.app;
          }
          _showControls() { }
          _hideControls() { }
          _shouldHideControls() {
            return !1;
          }
          updateVisibility() {
            this._app.getManager("layer").getLayer("ui").visible &&
              (this._shouldHideControls()
                ? this._hideControls()
                : this._showControls());
          }
          resize() {
            this.updateVisibility();
          }
          toggleViewUI() { }
          _shouldResetStatus() {
            return this._app.getManager("layer").getLayer("ui").visible;
          }
          _resetStatus(t = []) {
            if (this._shouldResetStatus()) {
              const e = Object.keys(this._app.getComponents());
              for (let s = e.length - 1; s >= 0; s--) {
                const i = e[s];
                t.includes(i) ||
                  this._app
                    .getComponent(i)
                    .setEnabled(this._components.includes(i));
              }
            }
          }
          registerCallbacks() {
            this._app.getManager("layer").addCallback("ui", this.toggleViewUI);
          }
          removeCallbacks() {
            this._app
              .getManager("layer")
              .removeCallback("ui", this.toggleViewUI);
          }
          async onEnter(t, e = []) {
            if (t.cancelToken.isCanceled) return;
            this._resetStatus(e),
              window.addEventListener("resize", this.resize),
              this.registerCallbacks();
            const s = this._app.getManager("router").currentView + "-view";
            document.body.classList.add(s),
              this._app.getManager("router").configs.locked &&
              (document.body.classList.add("locked"),
                this._app.getManager("label").setClickable(!1),
                this._app.getManager("selection").setClickable(!1));
          }
          async onRouteChange(t) {
            if (
              (await this.before(t),
                !t.cancelToken.isCanceled &&
                (this._reset(t),
                  await this._updateResources(t),
                  !t.cancelToken.isCanceled &&
                  ((t.setTimeLimits = !0),
                    await this.processQuery(t),
                    await this._updateComponentsVisibility(t),
                    !t.cancelToken.isCanceled)))
            ) {
              await this._checkReady(t);
              try {
                await this._updateCamera(t), this._updateLoading(t);
              } finally {
                await this.after(t);
              }
            }
          }
          async onQueryChange(t) {
            t.cancelToken.isCanceled || (await this.processQuery(t));
          }
          validateQuery(t) {
            const e = { ...t },
              s = Object.keys(e),
              i = {},
              n = {},
              o = this._app.getManager("router");
            for (let t = s.length - 1; t >= 0; t--) {
              const r = s[t];
              if (!(r in this._rules)) {
                delete e[r];
                continue;
              }
              const a = this._rules[r];
              if (
                !("function" == typeof a.value
                  ? a.value(e[r])
                  : a.value === e[r])
              ) {
                if (((n[r] = e[r]), "function" == typeof this._rules.redirect))
                  return this._rules.redirect(e[r]), !1;
                if ("route" in a) return o.navigate(a.route), !1;
                "default" in a && (i[r] = a.default);
              }
            }
            return r.AppUtils.isEmptyObject(i)
              ? !!r.AppUtils.isEmptyObject(n) ||
              (this._handleError(
                `validateQuery: Invalid input - ${JSON.stringify(n)}`,
              ),
                !1)
              : (o.navigate({ ...e, ...i }), !1);
          }
          async processQuery(t) {
            await this._updateTime(t), this._updateTimeRate(t);
            const e = this._app.getManager("router"),
              s = e.parseQuery(e.previousRoute?.query);
            for (const i of Object.keys(e._queryCallbacks)) {
              const n = t[i],
                o = s[i];
              (n || o) && e._queryCallbacks[i].forEach((t) => t(n, o));
            }
            const i = this._app.getManager("layer"),
              n = this._app.getComponent("layerPanel"),
              o = {
                layerUI: "ui",
                layerTrails: "trails",
                layerOrbits: "orbits",
                layerLabels: "labels",
                layerIcons: "icons",
                layerPlanets: "planets",
                layerAsteroids: "asteroids",
                layerComets: "comets",
                layerDwarfPlanets: "dwarfPlanets",
                layerConstellations: "constellations",
                layerSpacecraft: "spacecraft",
              };
            for (const e in o)
              if (e in t) {
                const s = o[e];
                "disable" === t[e]
                  ? n?.setCategoryEnabled(s, !1)
                  : n?.isCategoryEnabled(s) &&
                  ("show" === t[e]
                    ? i.getLayer(s).visible || n.toggleLayer(s)
                    : "hide" === t[e] &&
                    i.getLayer(s).visible &&
                    n.toggleLayer(s));
              }
            this.app.getManager("title")?.updateTitle(e.currentRoute);
          }
          _handleError(t = "") {
            const e = new Error(t);
            console.error(e);
            if (null !== this._app.getManager("router")) {
              let t = this._app.getManager("router").previousRoute.url;
              t || (t = this._app.getManager("router").homeRoute),
                this._app.getManager("router").navigate(t);
            }
          }
          onLeave(t) {
            window.removeEventListener("resize", this.resize),
              this.removeCallbacks();
            const e = this._app.getManager("router").previousView + "-view";
            document.body.classList.remove(e),
              this._app.getManager("selection").unselect(),
              this._app.getManager("scene").clearForceLoad(),
              this._validQueries.length &&
              this._app
                .getManager("router")
                .navigate({ __remove: this._validQueries });
          }
          _reset(t) {
            this._app.getManager("scene").clearForceLoad();
          }
          async _updateResources(t) { }
          _updateTimeRate(t) {
            const e = this._app.getManager("time");
            "rate" in t ? e.setTimeRate(parseInt(t.rate)) : e.resetTimeRate();
          }
          async _updateTime(t) {
            const e = this._app.getManager("time"),
              s = this._app
                .getManager("router")
                .currentRoute.url.includes("story");
            let i = 0;
            if (s && this._storyId) {
              i = this._app.getManager("content").getStory(this._storyId)
                .slides.length;
            }
            if (
              (((!this._target && i > 1) ||
                (s && !this._target && !this._storyId)) &&
                (e.resetMin(), e.resetMax()),
                this._target)
            )
              await this._updateTimeForTarget(t);
            else if (t.time) {
              this._app.getManager("time").parseTime(t.time).isValid()
                ? this._app.getManager("time").setTime(t.time)
                : this._app
                  .getManager("router")
                  .navigate({ __remove: ["time"] });
            } else this._app.getManager("time").setToNow();
          }
          async _updateTimeForTarget(t, e = !0) {
            const s = this._app.getManager("time");
            let i = s.timeLimits.min.clone(),
              o = s.timeLimits.max.clone();
            if (t.setTimeLimits) {
              const t = s.getDefaultLimits();
              (i = t.min.clone()),
                (o = t.max.clone()),
                e &&
                (await this._app
                  .getManager("scene")
                  .get("main")
                  .getEntity(this._target)
                  .getLoadedPromise());
              const r = this._app.getManager("scene").getCoverage(this._target);
              if (
                (null !== r.min && (i = n().max(i, r.min)),
                  null !== r.max && (o = n().min(o, r.max)),
                  this._entityDesc?.dates?.start)
              ) {
                const t = s.parseTime(this._entityDesc.dates.start);
                i = n().max(t, i);
              }
              if (this._entityDesc?.dates?.end) {
                const t = s.parseTime(this._entityDesc.dates.end);
                o = n().min(t, o);
              }
              if (i.isAfter(o)) {
                console.error("Start date provided is after end date.");
                const t = this._app.getManager("router");
                return (
                  this._app
                    .getComponent("clock")
                    ?.setLimitMessage(1, "time limit error"),
                  void setTimeout(() => t.navigate("/"), 1e3)
                );
              }
              s.setMax(o), s.setMin(i);
            }
            if (!t.time && this._eventInfo?.start) {
              const t = s.parseTime(this._eventInfo.start);
              s.setTime(n().max(t, i));
            } else if (t.time) {
              const e = s.parseTime(t.time);
              e.isAfter(o)
                ? (s.setTime(o),
                  s.setTimeRate(0),
                  this._app.getComponent("clock")?.setLimitMessage(1))
                : e.isBefore(i)
                  ? (s.setTime(i),
                    this._app.getComponent("clock")?.setLimitMessage(-1))
                  : s.setTime(e);
            } else {
              const t = this._app.getManager("time").getNow();
              t.isAfter(o) || t.isBefore(i) ? s.setTime(i) : s.setToNow();
            }
          }
          async _updateComponentsVisibility(t) {
            await this._updateComponents(t),
              t.cancelToken.isCanceled || this.updateVisibility();
          }
          async _updateComponents(t) { }
          async _updateCamera(t) { }
          _updateLoading(t) {
            if (null !== this._target) {
              const t = [],
                e = ["model", "wmts", "spheroidLOD"],
                s = this._app.getManager("scene"),
                i = this._app
                  .getManager("content")
                  .getEntityInfo(this._target)?.category;
              i &&
                "Instrument" === i &&
                s.addLoading(
                  s._scene.getEntity(this._target).getParent().getName(),
                  "view",
                ),
                s.addLoading(this._target, "view");
              for (let i = 0; i < e.length; i++) {
                const n = s.get("main").get(this._target, e[i]);
                null !== n && (s.forceLoad(n), t.push(s.componentIsReady(n)));
              }
              Promise.all(t).then(() => {
                i &&
                  "Instrument" === i &&
                  s.removeLoading(
                    s._scene.getEntity(this._target).getParent().getName(),
                    "view",
                  ),
                  s.removeLoading(this._target, "view");
              });
            }
          }
          async _checkReady(t) {
            if (null === this._target) return;
            const e = [];
            let s = this._target;
            for (; "sun" !== s;) {
              e.push(s);
              const t = this._app
                .getManager("scene")
                .get("main")
                .get(s)
                ?.getParent();
              if (!t) break;
              s = t.getName();
            }
            await o.SceneHelpers.waitTillEntitiesInPlace(
              this._app.getManager("scene").get("main"),
              e,
            ),
              await this._app.pioneer.waitUntilNextFrame();
          }
          async before(t) { }
          after(t) {
            this._app.getManager("layer").resetTarget(),
              this._app.getManager("scene").clearTempEntities();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            BaseApp: function () {
              return BaseApp;
            },
          });
        var i = s(218),
          n = s.n(i),
          o = s(5),
          r = s(529),
          a = (s(678), s(691)),
          l = s(692),
          c = s(693),
          h = s(2);
        class BaseApp {
          static setAppClass() {
            BaseApp._appClass = this;
          }
          constructor(t) {
            (window.app = this),
              (this._pioneer = null),
              (this._scene = null),
              (this._router = null),
              (this._element = null),
              (this._dynamicElement = null),
              (this._timeInfo = {}),
              (this._sceneInfo = void 0),
              (this._cameraScripts = new h.CameraScripts(this)),
              (this._componentInfo = []),
              (this._componentTypes = t),
              (this._managers = {}),
              (this._components = {}),
              (this._views = {}),
              (this._viewInfo = []),
              (this._viewClasses = {}),
              (this._updates = []),
              (this.isTouch = null),
              (this.canHover = null),
              (this._touchStartPos = { x: 0, y: 0 }),
              (this._dragging = !1),
              this.bindFunctions([
                "resize",
                "onTouchStart",
                "onTouchMove",
                "onTouchEnd",
                "update",
              ]),
              (this._touchCount = 0),
              (this._scrollable = !1),
              (this._touchMax = !1),
              window.addEventListener("touchstart", this.onTouchStart, !1),
              window.addEventListener("touchmove", this.onTouchMove, {
                passive: !1,
              }),
              window.addEventListener("touchend", this.onTouchEnd);
            const e = window.innerHeight;
            document.documentElement.style.setProperty("--vh", `${e}px`),
              window.addEventListener("resize", this.resize, !1),
              this.resize();
          }
          async init() {
            (this._element = document.getElementById("ui")),
              (this._dynamicElement = document.getElementById("dynamic-ui"));
            const t = document.getElementById("pioneer");
            (t.style.position = "absolute"),
              (this._pioneer = new o.Engine(t)),
              "string" == typeof window.config.staticAssetsUrl &&
              this._pioneer
                .getDownloader()
                .setReplacement(
                  "STATIC_ASSETS_URL",
                  window.config.staticAssetsUrl,
                ),
              "string" == typeof window.config.dynamicAssetsUrl &&
              this._pioneer
                .getDownloader()
                .setReplacement(
                  "DYNAMIC_ASSETS_URL",
                  window.config.dynamicAssetsUrl,
                ),
              "string" == typeof window.config.animdataUrl &&
              this._pioneer
                .getDownloader()
                .setReplacement("ANIMDATA_URL", window.config.animdataUrl),
              this._pioneer.getConfig().setValue("fontFamily", "Raleway"),
              this._pioneer.getConfig().setValue("fontSize", 16),
              this._pioneer.getConfig().setValue("pbr", !0),
              this._pioneer.registerComponentType(
                "distanceLine",
                h.DistanceLineComponent,
              ),
              this._pioneer.registerComponentType(
                "orbiterLineOfSight",
                h.OrbiterLineOfSightComponent,
              ),
              this._pioneer.registerComponentType("wmts", r.WMTSComponent),
              this._pioneer.registerComponentType(
                "discGrid",
                r.DiscGridComponent,
              ),
              this._pioneer.registerComponentType("torus", r.TorusComponent),
              this._pioneer.registerComponentType(
                "constellations",
                r.ConstellationsComponent,
              ),
              this._pioneer.registerControllerType(
                "positionSum",
                r.PositionSumController,
              ),
              this._pioneer.registerControllerType(
                "zoomFit",
                r.ZoomFitController,
              ),
              this._pioneer.registerComponentType(
                "orbitLine",
                r.OrbitLineComponent,
              ),
              this._pioneer.setTime(o.TimeUtils.now()),
              this._pioneer.setTimeRate(1),
              await this.createManagers(),
              await this.createComponents(),
              this.setUpRoutes(),
              this.setUpUpdates(),
              this.getManager("router").start();
          }
          get pioneer() {
            return this._pioneer;
          }
          get scene() {
            return this._scene;
          }
          set scene(t) {
            this._scene = t;
          }
          get cameraScripts() {
            return this._cameraScripts;
          }
          get dynamicElement() {
            return this._dynamicElement;
          }
          get sceneInfo() {
            return this._sceneInfo;
          }
          get element() {
            return this._element;
          }
          set element(t) {
            this._element = t;
          }
          addManager(t, e, ...s) {
            return (
              void 0 === this._managers[t] &&
              (this._managers[t] = new e(this, ...s)),
              this._managers[t]
            );
          }
          removeManager(t) {
            void 0 !== this._managers[t] &&
              (this._managers[t].destroy(), delete this._managers[t]);
          }
          getManager(t) {
            return void 0 !== this._managers[t] ? this._managers[t] : null;
          }
          async createManagers() {
            const t = h.Types.get("TimeManager"),
              e = this.addManager("time", t),
              s = n().tz("1949-12-31", "Etc/UTC"),
              i = n().tz("2049-12-31", "Etc/UTC");
            e.setDefaultLimits({ min: s, max: i }),
              e.setLimits({ min: s, max: i });
            const o = this.addManager("content", h.ContentManager);
            o.setEntityList(a),
              o.setSpheroidLayers(l.default),
              o.setSpheroidFeatures(c.default),
              o.setFolders({
                description: "descriptions/",
                event: "events/",
                stories: "stories/",
              });
            const r = this.addManager("scene", h.SceneManager);
            this._scene = r.main;
            const u = this.addManager("layer", h.LayerManager);
            u.addLayer("ui", { name: "User Interface" }),
              u.addLayer("trails", { name: "Trails" }),
              u.addLayer("orbits", { name: "Orbits" }),
              u.addLayer("labels", { name: "Labels" }),
              u.addLayer("icons", { name: "Icons" }),
              u.addLayer("planets", { name: "Planets", categories: "Planet" }),
              u.addLayer("asteroids", {
                name: "Asteroids",
                categories: "Asteroid",
                defaultVisibility: !1,
              }),
              u.addLayer("comets", {
                name: "Comets",
                categories: "Comet",
                defaultVisibility: !1,
              }),
              u.addLayer("dwarfPlanets", {
                name: "Dwarf Planets",
                categories: "Dwarf Planet",
                defaultVisibility: !1,
              }),
              u.addLayer("spacecraft", {
                name: "Spacecraft",
                categories: "Spacecraft",
                sublayers: ["orbiters", "landers"],
              }),
              u.addLayer("majorMoons", {
                name: "Major Moons",
                categories: "Major Moon",
                group: "moons",
              }),
              u.addLayer("minorMoons", {
                name: "Minor Moons",
                categories: "Minor Moon",
                defaultVisibility: !1,
                group: "moons",
              }),
              u.addLayer("orbiters", {
                name: "Orbiters",
                categories: "Orbiter",
                group: "spacecraft",
              }),
              u.addLayer("landers", {
                name: "Landers",
                categories: ["Lander", "Rover", "Landing site"],
                group: "spacecraft",
              }),
              u.addLayer("starfield", {
                name: "Star Field",
                defaultVisibility: !1,
              }),
              u.addLayer("heliosphere", {
                name: "Heliosphere",
                defaultVisibility: !1,
              }),
              u.addLayer("constellations", {
                name: "Constellations",
                categories: "Constellations",
                defaultVisibility: !1,
              });
            const d = this.addManager("camera", h.CameraManager, this._scene);
            this._cameraScripts.setCameraManager(d),
              d.createViewportAndCamera(this._scene),
              this.addManager("search", h.SearchManager, {
                keys: [
                  { name: "iauName", weight: 0.99 },
                  { name: "displayName", weight: 0.98 },
                  { name: "altName", weight: 0.98 },
                  { name: "keywords", weight: 0.3 },
                  { name: "category", weight: 0.3 },
                ],
              }),
              this.addManager("comparison", h.ComparisonManager);
            const p = h.Types.get("LabelManager"),
              m = this.addManager("label", p, this._scene);
            m.setWeights(o.getEntityList()), m.setAlgorithm(p.Quadtree);
            const _ = h.Types.get("SelectionManager"),
              g = this.addManager("selection", _, this._scene);
            g.init3Dcallback(d),
              m.registerCallback("labelclicked", g.setSuppress);
            const y = this.addManager("router", h.RouteManager);
            y.setValidQueries(["time", "rate"]),
              y.init(),
              y.addConfigs({
                embed: void 0,
                kiosk: void 0,
                logo: void 0,
                content: void 0,
                featured: void 0,
                menu: void 0,
                locked: void 0,
                surfaceMapTiling: void 0,
                hd: void 0,
                lighting: void 0,
                hideExternalLinks: void 0,
                hideFullScreenToggle: void 0,
                noKeyboard: void 0,
              });
            const f = h.Types.get("TrailManager"),
              b = this.addManager("trail", f, this._scene);
            m.registerCallback("hoverchange", b.onHoverChange),
              u.addCallback("trails", b.toggleTrails),
              u.addCallback("orbits", b.toggleOrbits),
              u.addCallback("labels", m.toggleLabels),
              u.addCallback("icons", m.toggleIcons),
              u.addCallback("starfield", r.toggleStarfield),
              u.addCallback("heliosphere", r.toggleHeliosphere),
              u.addCallback("constellations", r.toggleConstellations),
              this.addViews(),
              this.setUpViewportAndCamera(),
              await this.setUpScene(),
              this.setUpManagers(),
              await this.setUpComponents(),
              this._pioneer.addCallback(this.update, !0);
          }
          setUpManagers() {
            const t = this.scene,
              e = this.getManager("trail"),
              s = this.getManager("time");
            let { limits: i } = this._timeInfo;
            i
              ? ((i.min =
                "min" in i && "-Infinity" !== i.min
                  ? this.getManager("time").parseTime(i.min)
                  : n()(h.AppUtils.constants.minDate)),
                (i.max =
                  "max" in i && "Infinity" !== i.max
                    ? this.getManager("time").parseTime(i.max)
                    : n()(h.AppUtils.constants.maxDate)))
              : (i = {
                min: n()(h.AppUtils.constants.minDate),
                max: n()(h.AppUtils.constants.maxDate),
              }),
              s.setDefaultLimits(i),
              s.setLimits(i),
              this.getManager("label").setScene(t),
              this.getManager("selection").setScene(t),
              e.setScene(t),
              (e.ids = Array.from(this.getManager("scene").getEntitiesNames())),
              e.setColor(e.ids);
          }
          async addComponent(t, e, ...s) {
            if (void 0 !== this._components[t])
              throw new Error(`Component ${t} was already added.`);
            const i = new e(this, ...s);
            return (this._components[t] = i), await i.init(), i;
          }
          async addComponentWithPlaceholder(t, e = document, s = null) {
            if ((t.args || (t.args = []), t.options || (t.options = {}), !s)) {
              const i = Array.from(e.getElementsByTagName(t.type.name));
              if (
                (!(s = i.find(
                  (e) => e instanceof HTMLElement && e.id === t.name,
                )) &&
                  i[0] instanceof HTMLElement &&
                  (s = i[0]),
                  !s)
              )
                return Promise.reject(
                  new Error(
                    `addComponentWithPlaceholder: There is no placeholder element for ${t.type}`,
                  ),
                );
            }
            Object.assign(
              t.options,
              h.AppUtils.convertObjType({ ...s.dataset }),
            );
            const i = await this.addComponent(
              t.name,
              t.type,
              ...t.args,
              t.options,
            );
            return i.setParent(s.parentElement, s), i;
          }
          removeComponent(t) {
            return (
              void 0 !== this._components[t] &&
              (this._components[t].destroy(), delete this._components[t], !0)
            );
          }
          removeComponents() {
            for (let t = 0; t < this._componentInfo.length; t++)
              this.removeComponent(this._componentInfo[t].name);
          }
          getComponent(t) {
            return void 0 !== this._components[t] ? this._components[t] : null;
          }
          getComponents() {
            return this._components;
          }
          async createComponents() {
            const t = [
              { name: "loadIcon", type: "LoadIcon" },
              {
                name: "overlay",
                type: "Overlay",
                options: { isOpenButtonVisible: !1 },
              },
            ];
            for (let e = 0; e < t.length; e++) {
              const {
                name: s,
                type: i,
                hasPlaceholder: n,
                args: o,
                options: r,
                postCreationFunction: a,
              } = t[e],
                l = h.Types.get(i),
                c = await l.create(this, s, l, n, o, r);
              a && a(this, c);
            }
          }
          async setUpComponents() {
            this.dynamicElement.innerHTML = this.constructor.html;
            for (let t = 0; t < this._componentInfo.length; t++) {
              const {
                name: e,
                type: s,
                hasPlaceholder: i,
                args: n,
                options: o,
                postCreationFunction: r,
              } = this._componentInfo[t],
                a = h.Types.get(s),
                l = await a.create(this, e, a, i, n, o);
              r && r(this, l);
            }
          }
          getViews() {
            return this._views;
          }
          addViews() {
            for (let t = 0; t < this._viewInfo.length; t++) {
              const e = this._viewInfo[t];
              this.addView(
                e.name,
                this._viewClasses[e.class],
                this._element,
                e.components,
              );
            }
          }
          removeViews() {
            for (const t in this._views) this.removeView(t);
          }
          getView(t) {
            return void 0 !== this._views[t] ? this._views[t] : null;
          }
          addView(t, e, ...s) {
            return (
              void 0 === this._views[t] && (this._views[t] = new e(this, ...s)),
              this._views[t]
            );
          }
          removeView(t) {
            void 0 !== this._views[t] && delete this._views[t];
          }
          async setUpScene() {
            if (void 0 === this._sceneInfo)
              return void console.error("App._sceneInfo needs to be set.");
            this.getManager("camera").defaultMaxDistance =
              this._sceneInfo.zoomMax || 2e18;
            const t = this.getManager("scene");
            t.addEntitiesFromSceneInfo(this._sceneInfo);
            const e = this.getManager("label"),
              s = this.getManager("trail"),
              i = this.getManager("camera");
            t.addEntityLoadedCallback(e.setUpLabel),
              t.addEntityLoadedCallback(s.setUpTrail),
              t.addEntityLoadedCallback(e.setUpIcon),
              t.addEntityLoadedCallback(i.addDynamicEnvMap),
              t.addEntityLoadedCallback((t) => {
                ("sc_mars_science_laboratory" === t.getName() ||
                  "sc_mars_2020" === t.getName()) &&
                  t.get("div").setFadeWhenCloseToEntity("mars");
              }),
              t.addEntityWillBeUnloadedCallback(e.removeLabel),
              t.update(),
              (this.scene = this.getManager("scene").main),
              this.scene.get("sun", "model")?.setEnabled(!1);
          }
          setUpViewportAndCamera() {
            const t = this.getManager("scene").main,
              e = this.getManager("camera");
            e.createViewportAndCamera(t),
              (this.cameraScripts.scene = t),
              (this.cameraScripts.cameraEntity = e.cameraEntity);
          }
          setUpUpdates() {
            this.addUpdate(this.getManager("scene").update),
              this.addUpdate(this.getManager("label").update),
              this.addUpdate(this.getManager("camera").update);
          }
          addUpdate(t) {
            "function" == typeof t && this._updates.push(t);
          }
          removeUpdate(t) {
            const e = this._updates.indexOf(t);
            e < 0 || this._updates.splice(e, 1);
          }
          update() {
            for (let t = 0; t < this._updates.length; t++) {
              (0, this._updates[t])();
            }
          }
          bindFunctions(t = []) {
            const e = this;
            for (let s = 0; s < t.length; s++) {
              const i = t[s];
              e[i] = e[i].bind(this);
            }
          }
          endLoadingScreen() {
            const t = document.getElementById("loading-screen");
            if (t) {
              const e = 400;
              (t.style.transition = `opacity ${e / 1e3}s ease-out`),
                (t.style.opacity = "0"),
                setTimeout(() => {
                  t.remove();
                }, e);
            }
          }
          setUpRoutes() { }
          isDragging() {
            return this._dragging;
          }
          isTouchMax() {
            return this._touchMax;
          }
          resize() {
            const t = window.innerHeight;
            document.documentElement.style.setProperty("--vh", `${t}px`),
              (document.body.style.height = t + "px");
            const e = h.AppUtils.isTouch(),
              s = h.AppUtils.canHover();
            this.isTouch !== e &&
              (document.body.classList.toggle("touch", e), (this.isTouch = e)),
              this.canHover !== s &&
              (document.body.classList.toggle("hover", s),
                (this.canHover = s)),
              setTimeout(() => {
                if (t !== window.innerHeight) {
                  const t = window.innerHeight;
                  document.documentElement.style.setProperty("--vh", `${t}px`),
                    (document.body.style.height = t + "px");
                }
              }, 1e3);
          }
          onTouchStart(t) {
            this._touchCount++, (this._touchMax = this._touchCount > 1);
            const e = t.changedTouches[0];
            (this._touchStartPos.x = e.pageX),
              (this._touchStartPos.y = e.pageY),
              (this._dragging = !1),
              (this._scrollable = !1);
            let s = t.target;
            for (; null !== s.parentElement;) {
              if (s.classList.contains("scrollable")) {
                this._scrollable = !0;
                break;
              }
              s = s.parentElement;
            }
          }
          onTouchMove(t) {
            const e = t.changedTouches[0];
            Math.max(
              Math.abs(e.pageX - this._touchStartPos.x),
              Math.abs(e.pageY - this._touchStartPos.y),
            ) > 5 && (this._dragging = !0),
              this._scrollable || t.preventDefault();
          }
          onTouchEnd(t) {
            this._touchCount--,
              0 === t.touches.length && (this._touchMax = !1),
              (this._dragging = !1),
              (this._scrollable = !1);
          }
          getVersion() {
            return h.Version;
          }
        }
        window.addEventListener("load", async () => {
          try {
            const t = new BaseApp._appClass();
            await t.init();
          } catch (t) {
            throw ((document.body.innerHTML = ""), t);
          }
        }),
          (BaseApp._appClass = BaseApp),
          (window.Pioneer = o),
          (window.PioneerScripts = r);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        s(679),
          s(680),
          s(681),
          s(682),
          s(683),
          s(684),
          s(685),
          s(686),
          s(687),
          s(688),
          s(689),
          s(690);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"observable_universe":{"id":"observable_universe","displayName":"Observable universe","category":"Universe","searchable":false},"milky_way":{"id":"milky_way","displayName":"Milky way","category":"Galaxy","searchable":false},"sun":{"id":"sun","iauName":"Sun","category":"Star","subcategory":"Yellow Dwarf Star","planeEntity":"earth","keywords":["star","solar system"]},"mercury":{"id":"mercury","iauName":"Mercury","category":"Planet","subcategory":"Terrestrial","keywords":["terrestrial planet","solar system","planets"]},"venus":{"id":"venus","iauName":"Venus","category":"Planet","subcategory":"Terrestrial","keywords":["terrestrial planet","solar system","planets"]},"earth":{"id":"earth","iauName":"Earth","category":"Planet","subcategory":"Terrestrial","hasMoons":true,"planeEntity":"moon","keywords":["terrestrial planet","solar system","planets"]},"mars":{"id":"mars","iauName":"Mars","category":"Planet","subcategory":"Terrestrial","hasMoons":true,"keywords":["terrestrial planet","solar system","planets"]},"jupiter":{"id":"jupiter","iauName":"Jupiter","category":"Planet","subcategory":"Gas Giant","hasMoons":true,"keywords":["gas giant","solar system","planets"]},"saturn":{"id":"saturn","iauName":"Saturn","category":"Planet","subcategory":"Gas Giant","hasMoons":true,"keywords":["gas giant","solar system","planets"]},"neptune":{"id":"neptune","iauName":"Neptune","category":"Planet","subcategory":"Ice Giant","hasMoons":true,"keywords":["ice giant","solar system","planets"]},"uranus":{"id":"uranus","iauName":"Uranus","category":"Planet","subcategory":"Ice Giant","hasMoons":true,"keywords":["gas giant","solar system","planets","1781"]},"134340_pluto":{"id":"134340_pluto","iauName":"134340 Pluto","displayName":"Pluto","category":"Dwarf Planet","keywords":["dwarf planet","solar system","dwarf planet","trans-neptunian object","plutoid","kuiper belt object","plutino","synchronous","1930"]},"134340_pluto_barycenter":{"id":"134340_pluto_barycenter","displayName":"Pluto system","hasMoons":true,"comparisonFeature":false,"category":"Dwarf Planet","subcategory":"Barycenter","planeEntity":"134340_pluto","forceVisibleEntities":["134340_pluto"],"keywords":["barycenter"]},"617_patroclus_barycenter":{"id":"617_patroclus_barycenter","displayName":"Patroclus barycenter","category":"Asteroid","subcategory":"Barycenter","comparisonFeature":false,"forceVisibleEntities":["617_patroclus","menoetius"]},"21_lutetia":{"id":"21_lutetia","iauName":"21 Lutetia","displayName":"Lutetia","category":"Asteroid","keywords":["asteroid","asteroids","Rosetta"]},"253_mathilde":{"id":"253_mathilde","iauName":"253 Mathilde","displayName":"Mathilde","category":"Asteroid","keywords":["asteroid","asteroids"]},"11351_leucus":{"id":"11351_leucus","iauName":"11351 Leucus","displayName":"Leucus","category":"Asteroid","keywords":["asteroid","asteroids"]},"15094_polymele":{"id":"15094_polymele","iauName":"15094 Polymele","displayName":"Polymele","category":"Asteroid","keywords":["asteroid","asteroids"]},"21900_orus":{"id":"21900_orus","iauName":"21900 Orus","displayName":"Orus","category":"Asteroid","keywords":["asteroid","asteroids"]},"3548_eurybates":{"id":"3548_eurybates","iauName":"3548 Eurybates","displayName":"Eurybates","category":"Asteroid","keywords":["asteroid","asteroids"]},"5535_annefrank":{"id":"5535_annefrank","iauName":"5535 Annefrank","displayName":"Annefrank","category":"Asteroid","keywords":["asteroid","asteroids"]},"52246_donaldjohanson":{"id":"52246_donaldjohanson","iauName":"52246 Donaldjohanson","displayName":"Donaldjohanson","category":"Asteroid","keywords":["asteroid","asteroids"]},"617_patroclus":{"id":"617_patroclus","iauName":"617 Patroclus","displayName":"Patroclus","category":"Asteroid","keywords":["asteroid","asteroids"]},"951_gaspra":{"id":"951_gaspra","iauName":"951 Gaspra","displayName":"Gaspra","category":"Asteroid","keywords":["asteroid","asteroids"]},"2867_steins":{"id":"2867_steins","iauName":"2867 Steins","displayName":"Steins","category":"Asteroid","keywords":["asteroid","asteroids"]},"ariel":{"id":"ariel","iauName":"Ariel","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","uranus","moons","prograde","synchronous","1851"]},"90377_sedna":{"id":"90377_sedna","iauName":"90377 Sedna","displayName":"Sedna","category":"Dwarf Planet","keywords":["dwarf planet","asteroids"]},"99942_apophis":{"id":"99942_apophis","iauName":"99942 Apophis","displayName":"Apophis","category":"Asteroid","keywords":["asteroid","asteroids"]},"486958_arrokoth":{"id":"486958_arrokoth","iauName":"486958 Arrokoth","displayName":"Arrokoth","category":"Asteroid","subcategory":"Kuiper Belt Object","keywords":["mu69","asteroid","asteroids","tno","cubewano","distant minor planet","pt1","1110113y","ultima thule","2014","kuiper belt object"]},"101955_bennu":{"id":"101955_bennu","iauName":"101955 Bennu","displayName":"Bennu","category":"Asteroid","subcategory":"B-Type Asteroid","keywords":["asteroid","asteroids","apollo","neo","pha","1999 rq36","1999","b-type"]},"152830_dinkinesh":{"id":"152830_dinkinesh","iauName":"152830 Dinkinesh","displayName":"Dinkinesh","category":"Asteroid","keywords":["asteroid","asteroids"]},"16_psyche":{"id":"16_psyche","iauName":"16 Psyche","displayName":"16 Psyche","category":"Asteroid","subcategory":"M-Type Asteroid","keywords":["asteroid","asteroids","m-type"]},"1_ceres":{"id":"1_ceres","iauName":"1 Ceres","displayName":"Ceres","category":"Dwarf Planet","keywords":["dwarf planet","asteroids","asteroid belt","a899 of","1943 xb","1801"]},"2_pallas":{"id":"2_pallas","iauName":"2 Pallas","displayName":"Pallas","category":"Asteroid","keywords":["asteroid","asteroids"]},"3_juno":{"id":"3_juno","iauName":"3 Juno","displayName":"Juno","category":"Asteroid","keywords":["asteroid","asteroids"]},"216_kleopatra":{"id":"216_kleopatra","iauName":"216 Kleopatra","displayName":"Kleopatra","category":"Asteroid","keywords":["asteroid","asteroids"]},"243_ida":{"id":"243_ida","iauName":"243 Ida","displayName":"Ida","category":"Asteroid","keywords":["asteroid","asteroids"],"hasMoons":true},"1566_icarus":{"id":"1566_icarus","iauName":"1566 Icarus","displayName":"Icarus","category":"Asteroid","keywords":["asteroid","asteroids"]},"1620_geographos":{"id":"1620_geographos","iauName":"1620 Geographos","displayName":"Geographos","category":"Asteroid","keywords":["asteroid","asteroids"]},"1862_apollo":{"id":"1862_apollo","iauName":"1862 Apollo","displayName":"Apollo","category":"Asteroid","keywords":["asteroid","asteroids"]},"1981_midas":{"id":"1981_midas","iauName":"1981 Midas","displayName":"Midas","category":"Asteroid","keywords":["asteroid","asteroids"]},"2063_bacchus":{"id":"2063_bacchus","iauName":"2063 Bacchus","displayName":"Bacchus","category":"Asteroid","keywords":["asteroid","asteroids"]},"2101_adonis":{"id":"2101_adonis","iauName":"2101 Adonis","displayName":"Adonis","category":"Asteroid","keywords":["asteroid","asteroids"]},"2102_tantalus":{"id":"2102_tantalus","iauName":"2102 Tantalus","displayName":"Tantalus","category":"Asteroid","keywords":["asteroid","asteroids"]},"2135_aristaeus":{"id":"2135_aristaeus","iauName":"2135 Aristaeus","displayName":"Aristaeus","category":"Asteroid","keywords":["asteroid","asteroids"]},"2340_hathor":{"id":"2340_hathor","iauName":"2340 Hathor","displayName":"Hathor","category":"Asteroid","keywords":["asteroid","asteroids"]},"3122_florence":{"id":"3122_florence","iauName":"3122 Florence","displayName":"Florence","category":"Asteroid","keywords":["asteroid","asteroids"]},"3200_phaethon":{"id":"3200_phaethon","iauName":"3200 Phaethon","displayName":"Phaethon","category":"Asteroid","keywords":["asteroid","asteroids"]},"3362_khufu":{"id":"3362_khufu","iauName":"3362 Khufu","displayName":"Khufu","category":"Asteroid","keywords":["asteroid","asteroids"]},"4015_wilson-harrington":{"id":"4015_wilson-harrington","iauName":"4015 Wilson-Harrington","displayName":"Wilson-Harrington","category":"Asteroid","keywords":["asteroid","asteroids"]},"4179_toutatis":{"id":"4179_toutatis","iauName":"4179 Toutatis","displayName":"Toutatis","category":"Asteroid","keywords":["asteroid","asteroids"]},"4183_cuno":{"id":"4183_cuno","iauName":"4183 Cuno","displayName":"Cuno","category":"Asteroid","keywords":["asteroid","asteroids"]},"4450_pan":{"id":"4450_pan","iauName":"4450 Pan","displayName":"Pan","category":"Asteroid","keywords":["asteroid","asteroids","minor moon","saturn"]},"4486_mithra":{"id":"4486_mithra","iauName":"4486 Mithra","displayName":"Mithra","category":"Asteroid","keywords":["asteroid","asteroids"]},"4769_castalia":{"id":"4769_castalia","iauName":"4769 Castalia","displayName":"Castalia","category":"Asteroid","keywords":["asteroid","asteroids"]},"5011_ptah":{"id":"5011_ptah","iauName":"5011 Ptah","displayName":"Ptah","category":"Asteroid","keywords":["asteroid","asteroids"]},"6239_minos":{"id":"6239_minos","iauName":"6239 Minos","displayName":"Minos","category":"Asteroid","keywords":["asteroid","asteroids"]},"6489_golevka":{"id":"6489_golevka","iauName":"6489 Golevka","displayName":"Golevka","category":"Asteroid","keywords":["asteroid","asteroids"]},"9969_braille":{"id":"9969_braille","iauName":"9969 Braille","displayName":"Braille","category":"Asteroid","keywords":["asteroid","asteroids"]},"12923_zephyr":{"id":"12923_zephyr","iauName":"12923 Zephyr","displayName":"Zephyr","category":"Asteroid","keywords":["asteroid","asteroids"]},"14827_hypnos":{"id":"14827_hypnos","iauName":"14827 Hypnos","displayName":"Hypnos","category":"Asteroid","keywords":["asteroid","asteroids"]},"25143_itokawa":{"id":"25143_itokawa","iauName":"25143 Itokawa","displayName":"Itokawa","category":"Asteroid","keywords":["asteroid","asteroids"]},"37655_illapa":{"id":"37655_illapa","iauName":"37655 Illapa","displayName":"Illapa","category":"Asteroid","keywords":["asteroid","asteroids"]},"65803_didymos":{"id":"65803_didymos","iauName":"65803 Didymos","displayName":"Didymos","category":"Asteroid","keywords":["asteroid","asteroids"],"hasMoons":true},"69230_hermes":{"id":"69230_hermes","iauName":"69230 Hermes","displayName":"Hermes","category":"Asteroid","keywords":["asteroid","asteroids"]},"136199_eris":{"id":"136199_eris","iauName":"136199 Eris","displayName":"Eris","category":"Dwarf Planet","keywords":["asteroid","asteroids","dwarf planet","tno","plutoid","sdo","binary","dysnomia","2005"]},"136108_haumea":{"id":"136108_haumea","iauName":"136108 Haumea","displayName":"Haumea","category":"Dwarf Planet","keywords":["asteroid","asteroids","dwarf planet","plutoid","tno","cubewano","trinary","2003 el61","2004"],"hasMoons":true},"136472_makemake":{"id":"136472_makemake","iauName":"136472 Makemake","displayName":"Makemake","category":"Dwarf Planet","keywords":["asteroid","asteroids","dwarf planet","cubewano","scattered-near","kuiper belt","2005 fy9","2005"]},"162173_ryugu":{"id":"162173_ryugu","iauName":"162173 Ryugu","displayName":"Ryugu","category":"Asteroid","keywords":["asteroid","asteroids","neo","pha","b-type","c-type"]},"4_vesta":{"id":"4_vesta","iauName":"4 Vesta","displayName":"Vesta","category":"Asteroid","subcategory":"Protoplanet","keywords":["asteroid","asteroids","main belt","vesta family","1807","protoplanet"]},"433_eros":{"id":"433_eros","iauName":"433 Eros","displayName":"Eros","category":"Asteroid","subcategory":"S-Type Asteroid","keywords":["asteroid","asteroids","neo","1898","prograde"]},"callisto":{"id":"callisto","iauName":"Callisto","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","jupiter","moons","main group","galilean moons","prograde","synchronous","1610"]},"sc_chandra":{"id":"sc_chandra","iauName":"Chandra X-ray Observatory","category":"Spacecraft","subcategory":"Orbiter","keywords":["telescope","orbiter","earth","Columbia","X-ray","astrophysics"]},"charon":{"id":"charon","iauName":"Charon","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","pluto","moons","prograde","synchronous","1978"]},"67p_churyumov_gerasimenko":{"id":"67p_churyumov_gerasimenko","iauName":"67P/Churyumov-Gerasimenko","displayName":"67P/Churyumov-Gerasimenko","category":"Comet","subcategory":"Short-Period Comet","keywords":["comet","comets","jupiter-family","1969 r1","1969 iv","1969h","1975 p1","1976 vii","1975i","1982 viii","1982f","1989 vi","1988i","1969","chury","short-period"]},"1p_halley":{"id":"1p_halley","iauName":"1P/Halley","displayName":"Halley","category":"Comet","subcategory":"Short-Period Comet","keywords":["comet","comets","short-period","1p/halley"]},"103p_hartley_2":{"id":"103p_hartley_2","iauName":"103P/Hartley","displayName":"Hartley 2","category":"Comet","keywords":["comet"]},"1i_oumuamua":{"id":"1i_oumuamua","iauName":"1I/\'Oumuamua","displayName":"Oumuamua","category":"Comet","keywords":["comet","comets","1i/oumuamua"]},"9p_tempel_1":{"id":"9p_tempel_1","iauName":"9P/Tempel 1","displayName":"Tempel 1","category":"Comet","subcategory":"Jupiter-Family Comet","keywords":["comet","comets","periodic","jupiter-family","9p/tempel","1867"]},"19p_borrelly":{"id":"19p_borrelly","iauName":"19P/Borrelly","displayName":"Borrelly","category":"Comet","subcategory":"Jupiter-Family Comet","keywords":["comet","comets","periodic","jupiter-family","19p/borrelly","Deep Space 1"]},"81p_wild_2":{"id":"81p_wild_2","iauName":"81P/Wild 2","displayName":"Wild 2","category":"Comet","subcategory":"Short-Period Comet","keywords":["comet","comets","81p/wild","1978 xi","1984 xiv","1990 xxviii","1978"]},"adrastea":{"id":"adrastea","iauName":"Adrastea","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"aegaeon":{"id":"aegaeon","iauName":"Aegaeon","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"aegir":{"id":"aegir","iauName":"Aegir","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"aitne":{"id":"aitne","iauName":"Aitne","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"albiorix":{"id":"albiorix","iauName":"Albiorix","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"amalthea":{"id":"amalthea","iauName":"Amalthea","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"ananke":{"id":"ananke","iauName":"Ananke","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"anthe":{"id":"anthe","iauName":"Anthe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"aoede":{"id":"aoede","iauName":"Aoede","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"arche":{"id":"arche","iauName":"Arche","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"atlas":{"id":"atlas","iauName":"Atlas","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"autonoe":{"id":"autonoe","iauName":"Autonoe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"bebhionn":{"id":"bebhionn","iauName":"Bebhionn","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"belinda":{"id":"belinda","iauName":"Belinda","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"bergelmir":{"id":"bergelmir","iauName":"Bergelmir","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"bestla":{"id":"bestla","iauName":"Bestla","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"bianca":{"id":"bianca","iauName":"Bianca","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"c_2010_x1":{"id":"c_2010_x1","iauName":"C/2010 X1","displayName":"Elenin","category":"Comet","keywords":["comet"]},"c_2012_s1":{"id":"c_2012_s1","iauName":"C/2012 S1","displayName":"ISON","category":"Comet","keywords":["comet"]},"caliban":{"id":"caliban","iauName":"Caliban","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"callirrhoe":{"id":"callirrhoe","iauName":"Callirrhoe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"calypso":{"id":"calypso","iauName":"Calypso","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"carme":{"id":"carme","iauName":"Carme","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"carpo":{"id":"carpo","iauName":"Carpo","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"chaldene":{"id":"chaldene","iauName":"Chaldene","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"cordelia":{"id":"cordelia","iauName":"Cordelia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"cressida":{"id":"cressida","iauName":"Cressida","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"cupid":{"id":"cupid","iauName":"Cupid","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"cyllene":{"id":"cyllene","iauName":"Cyllene","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"dactyl":{"id":"dactyl","iauName":"243 Ida I Dactyl","displayName":"Dactyl","category":"Moon","subcategory":"Major Moon","keywords":["asteroid","minor moon","ida"]},"daphnis":{"id":"daphnis","iauName":"Daphnis","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"deimos":{"id":"deimos","iauName":"Deimos","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","mars","moons","synchronous","1877"]},"desdemona":{"id":"desdemona","iauName":"Desdemona","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"despina":{"id":"despina","iauName":"Despina","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"dia":{"id":"dia","iauName":"Dia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"dimorphos":{"id":"dimorphos","iauName":"Dimorphos","category":"Moon","subcategory":"Major Moon","keywords":["minor moon","solar system","65803 Didymos","asteroid"]},"dione":{"id":"dione","iauName":"Dione","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","inner moons","prograde","synchronous","1684"]},"sc_dscovr":{"id":"sc_dscovr","iauName":"DSCOVR","category":"Spacecraft","subcategory":"Orbiter","keywords":["earth","orbiter","Deep Space Climate Observatory"]},"eirene":{"id":"eirene","iauName":"Eirene","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"elara":{"id":"elara","iauName":"Elara","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"enceladus":{"id":"enceladus","iauName":"Enceladus","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","inner moons","prograde","synchronous","1789"]},"epimetheus":{"id":"epimetheus","iauName":"Epimetheus","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"erinome":{"id":"erinome","iauName":"Erinome","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"erriapus":{"id":"erriapus","iauName":"Erriapus","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"ersa":{"id":"ersa","iauName":"Ersa","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"euanthe":{"id":"euanthe","iauName":"Euanthe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"eukelade":{"id":"eukelade","iauName":"Eukelade","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"eupheme":{"id":"eupheme","iauName":"Eupheme","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"euporie":{"id":"euporie","iauName":"Euporie","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"europa":{"id":"europa","iauName":"Europa","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","jupiter","moons","main group","galilean moons","prograde","synchronous","1610"]},"eurydome":{"id":"eurydome","iauName":"Eurydome","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"farbauti":{"id":"farbauti","iauName":"Farbauti","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"fenrir":{"id":"fenrir","iauName":"Fenrir","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"galatea":{"id":"galatea","iauName":"Galatea","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"ganymede":{"id":"ganymede","iauName":"Ganymede","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","jupiter","moons","main group","galilean moons","prograde","synchronous","1610"]},"greip":{"id":"greip","iauName":"Greip","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"c_1995_o1":{"id":"c_1995_o1","iauName":"C/1995 O1","displayName":"Hale-Bopp","category":"Comet","subcategory":"Long-Period Comet","keywords":["comet","solar system","The Great Comet of 1997","C/1995 O1","1995"]},"ferdinand":{"id":"ferdinand","iauName":"Ferdinand","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"fornjot":{"id":"fornjot","iauName":"Fornjot","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"francisco":{"id":"francisco","iauName":"Francisco","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"halimede":{"id":"halimede","iauName":"Halimede","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"harpalyke":{"id":"harpalyke","iauName":"Harpalyke","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"hati":{"id":"hati","iauName":"Hati","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"hegemone":{"id":"hegemone","iauName":"Hegemone","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"helene":{"id":"helene","iauName":"Helene","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"helike":{"id":"helike","iauName":"Helike","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"hermippe":{"id":"hermippe","iauName":"Hermippe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"herse":{"id":"herse","iauName":"Herse","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"hiiaka":{"id":"hiiaka","iauName":"Hi\'iaka","displayName":"Hi\'iaka","category":"Moon","subcategory":"Major Moon","keywords":["asteroid","minor moon","haumea"]},"himalia":{"id":"himalia","iauName":"Himalia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"hippocamp":{"id":"hippocamp","iauName":"Hippocamp","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"hydra":{"id":"hydra","iauName":"Hydra","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","pluto","moons","outer moons"]},"hyperion":{"id":"hyperion","iauName":"Hyperion","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","outer moons","prograde","1848"]},"hyrrokkin":{"id":"hyrrokkin","iauName":"Hyrrokkin","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"iapetus":{"id":"iapetus","iauName":"Iapetus","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","outer moons","prograde","synchronous","1671"]},"io":{"id":"io","iauName":"Io","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","jupiter","moons","main group","galilean moons","prograde","synchronous","1610"]},"ijiraq":{"id":"ijiraq","iauName":"Ijiraq","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"iocaste":{"id":"iocaste","iauName":"Iocaste","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"isonoe":{"id":"isonoe","iauName":"Isonoe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"janus":{"id":"janus","iauName":"Janus","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"jarnsaxa":{"id":"jarnsaxa","iauName":"Jarnsaxa","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"juliet":{"id":"juliet","iauName":"Juliet","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"jupiter_li":{"id":"jupiter_li","iauName":"Jupiter LI","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lii":{"id":"jupiter_lii","iauName":"Jupiter LII","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_liv":{"id":"jupiter_liv","iauName":"Jupiter LIV","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lix":{"id":"jupiter_lix","iauName":"Jupiter LIX","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lv":{"id":"jupiter_lv","iauName":"Jupiter LV","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lvi":{"id":"jupiter_lvi","iauName":"Jupiter LVI","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxi":{"id":"jupiter_lxi","iauName":"Jupiter LXI","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxiii":{"id":"jupiter_lxiii","iauName":"Jupiter LXIII","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxiv":{"id":"jupiter_lxiv","iauName":"Jupiter LXIV","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxix":{"id":"jupiter_lxix","iauName":"Jupiter LXIX","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxvi":{"id":"jupiter_lxvi","iauName":"Jupiter LXVI","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxvii":{"id":"jupiter_lxvii","iauName":"Jupiter LXVI","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxviii":{"id":"jupiter_lxviii","iauName":"Jupiter LXVIII","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxx":{"id":"jupiter_lxx","iauName":"Jupiter LXX","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"jupiter_lxxii":{"id":"jupiter_lxxii","iauName":"Jupiter LXXII","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"kale":{"id":"kale","iauName":"Kale","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"kallichore":{"id":"kallichore","iauName":"Kallichore","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"kalyke":{"id":"kalyke","iauName":"Kalyke","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"kari":{"id":"kari","iauName":"Kari","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"kerberos":{"id":"kerberos","iauName":"Kerberos","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","pluto","moons"]},"kiviuq":{"id":"kiviuq","iauName":"Kiviuq","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"kore":{"id":"kore","iauName":"Kore","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"laomedeia":{"id":"laomedeia","iauName":"Laomedeia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"larissa":{"id":"larissa","iauName":"Larissa","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"leda":{"id":"leda","iauName":"Leda","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"loge":{"id":"loge","iauName":"Loge","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"lysithea":{"id":"lysithea","iauName":"Lysithea","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"mab":{"id":"mab","iauName":"Mab","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"margaret":{"id":"margaret","iauName":"Margaret","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"megaclite":{"id":"megaclite","iauName":"Megaclite","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons","jupiter xix","S/2000 J 8"]},"menoetius":{"id":"menoetius","iauName":"Menoetius","displayName":"Menoetius","category":"Asteroid","keywords":["asteroid","asteroids","solar system","617 Patroclus"]},"methone":{"id":"methone","iauName":"Methone","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"metis":{"id":"metis","iauName":"Metis","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"mimas":{"id":"mimas","iauName":"Mimas","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","inner moons","prograde","synchronous","1789","death star"]},"miranda":{"id":"miranda","iauName":"Miranda","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","uranus","moons","prograde","synchronous","1948"]},"mneme":{"id":"mneme","iauName":"Mneme","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"moon":{"id":"moon","iauName":"Moon","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","earth","moons","synchronous"]},"mundilfari":{"id":"mundilfari","iauName":"Mundilfari","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"naiad":{"id":"naiad","iauName":"Naiad","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"namaka":{"id":"namaka","iauName":"Namaka","displayName":"Namaka","category":"Moon","subcategory":"Major Moon","keywords":["asteroid","minor moon","haumea"]},"narvi":{"id":"narvi","iauName":"Narvi","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"nix":{"id":"nix","iauName":"Nix","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","pluto","moons"]},"nereid":{"id":"nereid","iauName":"Nereid","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons","irregular moons","prograde","1949"]},"neso":{"id":"neso","iauName":"Neso","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"oberon":{"id":"oberon","iauName":"Oberon","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","uranus","moons","prograde","synchronous","1787"]},"ophelia":{"id":"ophelia","iauName":"Ophelia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"orthosie":{"id":"orthosie","iauName":"Orthosie","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"paaliaq":{"id":"paaliaq","iauName":"Paaliaq","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"pallene":{"id":"pallene","iauName":"Pallene","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"pan":{"id":"pan","iauName":"Pan","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"pandia":{"id":"pandia","iauName":"Pandia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"pandora":{"id":"pandora","iauName":"Pandora","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"pasiphae":{"id":"pasiphae","iauName":"Pasiphae","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"pasithee":{"id":"pasithee","iauName":"Pasithee","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"perdita":{"id":"perdita","iauName":"Perdita","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"philophrosyne":{"id":"philophrosyne","iauName":"Philophrosyne","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"phobos":{"id":"phobos","iauName":"Phobos","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","mars","moons","synchronous","1877"]},"phoebe":{"id":"phoebe","iauName":"Phoebe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","norse group","retrograde","1899"]},"polydeuces":{"id":"polydeuces","iauName":"Polydeuces","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"portia":{"id":"portia","iauName":"Portia","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"praxidike":{"id":"praxidike","iauName":"Praxidike","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"prometheus":{"id":"prometheus","iauName":"Prometheus","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"prospero":{"id":"prospero","iauName":"Prospero","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"proteus":{"id":"proteus","iauName":"Proteus","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons","regular moons","prograde","synchronous","1989"]},"psamathe":{"id":"psamathe","iauName":"Psamathe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"puck":{"id":"puck","iauName":"Puck","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"rhea":{"id":"rhea","iauName":"Rhea","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","outer moons","prograde","synchronous","1672"]},"rosalind":{"id":"rosalind","iauName":"Rosalind","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"s_2003_j_10":{"id":"s_2003_j_10","iauName":"S/2003 J 10","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_12":{"id":"s_2003_j_12","iauName":"S/2003 J 12","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_16":{"id":"s_2003_j_16","iauName":"S/2003 J 16","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_2":{"id":"s_2003_j_2","iauName":"S/2003 J 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_23":{"id":"s_2003_j_23","iauName":"S/2003 J 23","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_24":{"id":"s_2003_j_24","iauName":"S/2003 J 24","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_4":{"id":"s_2003_j_4","iauName":"S/2003 J 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2003_j_9":{"id":"s_2003_j_9","iauName":"S/2003 J 9","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2004_s_7":{"id":"s_2004_s_7","iauName":"S/2004 S 7","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_12":{"id":"s_2004_s_12","iauName":"S/2004 S 12","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_13":{"id":"s_2004_s_13","iauName":"S/2004 S 13","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_17":{"id":"s_2004_s_17","iauName":"S/2004 S 17","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_21":{"id":"s_2004_s_21","iauName":"S/2004 S 21","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_24":{"id":"s_2004_s_24","iauName":"S/2004 S 24","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_28":{"id":"s_2004_s_28","iauName":"S/2004 S 28","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_31":{"id":"s_2004_s_31","iauName":"S/2004 S 31","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_36":{"id":"s_2004_s_36","iauName":"S/2004 S 36","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_37":{"id":"s_2004_s_37","iauName":"S/2004 S 37","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_39":{"id":"s_2004_s_39","iauName":"S/2004 S 39","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_40":{"id":"s_2004_s_40","iauName":"S/2004 S 40","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_41":{"id":"s_2004_s_41","iauName":"S/2004 S 41","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_42":{"id":"s_2004_s_42","iauName":"S/2004 S 42","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_43":{"id":"s_2004_s_43","iauName":"S/2004 S 43","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_44":{"id":"s_2004_s_44","iauName":"S/2004 S 44","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_45":{"id":"s_2004_s_45","iauName":"S/2004 S 45","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_46":{"id":"s_2004_s_46","iauName":"S/2004 S 46","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_47":{"id":"s_2004_s_47","iauName":"S/2004 S 47","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_48":{"id":"s_2004_s_48","iauName":"S/2004 S 48","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_49":{"id":"s_2004_s_49","iauName":"S/2004 S 49","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_50":{"id":"s_2004_s_50","iauName":"S/2004 S 50","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_51":{"id":"s_2004_s_51","iauName":"S/2004 S 51","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_52":{"id":"s_2004_s_52","iauName":"S/2004 S 52","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2004_s_53":{"id":"s_2004_s_53","iauName":"S/2004 S 53","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2005_s_4":{"id":"s_2005_s_4","iauName":"S/2005 S 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2005_s_5":{"id":"s_2005_s_5","iauName":"S/2005 S 5","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_1":{"id":"s_2006_s_1","iauName":"S/2006 S 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_10":{"id":"s_2006_s_10","iauName":"S/2006 S 10","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_11":{"id":"s_2006_s_11","iauName":"S/2006 S 11","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_12":{"id":"s_2006_s_12","iauName":"S/2006 S 12","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_13":{"id":"s_2006_s_13","iauName":"S/2006 S 13","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_14":{"id":"s_2006_s_14","iauName":"S/2006 S 14","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_15":{"id":"s_2006_s_15","iauName":"S/2006 S 15","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_16":{"id":"s_2006_s_16","iauName":"S/2006 S 16","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_17":{"id":"s_2006_s_17","iauName":"S/2006 S 17","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_18":{"id":"s_2006_s_18","iauName":"S/2006 S 18","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_19":{"id":"s_2006_s_19","iauName":"S/2006 S 19","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_20":{"id":"s_2006_s_20","iauName":"S/2006 S 20","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_3":{"id":"s_2006_s_3","iauName":"S/2006 S 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2006_s_9":{"id":"s_2006_s_9","iauName":"S/2006 S 9","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_2":{"id":"s_2007_s_2","iauName":"S/2007 S 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_3":{"id":"s_2007_s_3","iauName":"S/2007 S 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_5":{"id":"s_2007_s_5","iauName":"S/2007 S 5","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_6":{"id":"s_2007_s_6","iauName":"S/2007 S 6","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_7":{"id":"s_2007_s_7","iauName":"S/2007 S 7","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_8":{"id":"s_2007_s_8","iauName":"S/2007 S 8","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2007_s_9":{"id":"s_2007_s_9","iauName":"S/2007 S 9","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2009_s_1":{"id":"s_2009_s_1","iauName":"S/2009 S 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2011_j_3":{"id":"s_2011_j_3","iauName":"S/2011 J 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2016_j_3":{"id":"s_2016_j_3","iauName":"S/2016 J 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2016_j_4":{"id":"s_2016_j_4","iauName":"S/2016 J 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2018_j_2":{"id":"s_2018_j_2","iauName":"S/2018 J 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2018_j_3":{"id":"s_2018_j_3","iauName":"S/2018 J 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2018_j_4":{"id":"s_2018_j_4","iauName":"S/2018 J 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2019_s_1":{"id":"s_2019_s_1","iauName":"S/2019 S 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_10":{"id":"s_2019_s_10","iauName":"S/2019 S 10","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_11":{"id":"s_2019_s_11","iauName":"S/2019 S 11","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_12":{"id":"s_2019_s_12","iauName":"S/2019 S 12","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_13":{"id":"s_2019_s_13","iauName":"S/2019 S 13","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_14":{"id":"s_2019_s_14","iauName":"S/2019 S 14","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_15":{"id":"s_2019_s_15","iauName":"S/2019 S 15","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_16":{"id":"s_2019_s_16","iauName":"S/2019 S 16","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_17":{"id":"s_2019_s_17","iauName":"S/2019 S 17","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_18":{"id":"s_2019_s_18","iauName":"S/2019 S 18","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_19":{"id":"s_2019_s_19","iauName":"S/2019 S 19","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_2":{"id":"s_2019_s_2","iauName":"S/2019 S 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_20":{"id":"s_2019_s_20","iauName":"S/2019 S 20","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_21":{"id":"s_2019_s_21","iauName":"S/2019 S 21","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_3":{"id":"s_2019_s_3","iauName":"S/2019 S 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_4":{"id":"s_2019_s_4","iauName":"S/2019 S 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_5":{"id":"s_2019_s_5","iauName":"S/2019 S 5","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_6":{"id":"s_2019_s_6","iauName":"S/2019 S 6","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_7":{"id":"s_2019_s_7","iauName":"S/2019 S 7","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_8":{"id":"s_2019_s_8","iauName":"S/2019 S 8","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2019_s_9":{"id":"s_2019_s_9","iauName":"S/2019 S 9","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_1":{"id":"s_2020_s_1","iauName":"S/2020 S 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_10":{"id":"s_2020_s_10","iauName":"S/2020 S 10","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_2":{"id":"s_2020_s_2","iauName":"S/2020 S 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_3":{"id":"s_2020_s_3","iauName":"S/2020 S 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_4":{"id":"s_2020_s_4","iauName":"S/2020 S 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_5":{"id":"s_2020_s_5","iauName":"S/2020 S 5","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_6":{"id":"s_2020_s_6","iauName":"S/2020 S 6","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_7":{"id":"s_2020_s_7","iauName":"S/2020 S 7","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_8":{"id":"s_2020_s_8","iauName":"S/2020 S 8","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2020_s_9":{"id":"s_2020_s_9","iauName":"S/2020 S 9","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"s_2021_j_1":{"id":"s_2021_j_1","iauName":"S/2021 J 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2021_j_2":{"id":"s_2021_j_2","iauName":"S/2021 J 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2021_j_3":{"id":"s_2021_j_3","iauName":"S/2021 J 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2021_j_4":{"id":"s_2021_j_4","iauName":"S/2021 J 4","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2021_j_5":{"id":"s_2021_j_5","iauName":"S/2021 J 5","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2021_j_6":{"id":"s_2021_j_6","iauName":"S/2021 J 6","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2022_j_1":{"id":"s_2022_j_1","iauName":"S/2022 J 1","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2022_j_2":{"id":"s_2022_j_2","iauName":"S/2022 J 2","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"s_2022_j_3":{"id":"s_2022_j_3","iauName":"S/2022 J 3","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"sao":{"id":"sao","iauName":"Sao","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"gridr":{"id":"gridr","iauName":"Gridr","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S20","saturn liv"]},"angrboda":{"id":"angrboda","iauName":"Angrboda","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S22","saturn lv"]},"skrymir":{"id":"skrymir","iauName":"Skrymir","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S23","saturn lvi"]},"gerd":{"id":"gerd","iauName":"Gerd","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S25","saturn lvii"]},"saturn_lviii":{"id":"saturn_lviii","iauName":"Saturn LVIII","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"eggther":{"id":"eggther","iauName":"Eggther","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S27","saturn lix"]},"saturn_lx":{"id":"saturn_lx","iauName":"Saturn LX","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"beli":{"id":"beli","iauName":"Beli","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S30","saturn lxi"]},"gunnlod":{"id":"gunnlod","iauName":"Gunnlod","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S32","saturn lxii"]},"thiazzi":{"id":"thiazzi","iauName":"Thiazzi","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S33","saturn lxiii"]},"saturn_lxiv":{"id":"saturn_lxiv","iauName":"Saturn LXIV","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"alvaldi":{"id":"alvaldi","iauName":"Alvaldi","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S35","saturn lxv"]},"geirrod":{"id":"geirrod","iauName":"Geirrod","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons","S/2004 S38","saturn lxvi"]},"setebos":{"id":"setebos","iauName":"Setebos","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"siarnaq":{"id":"siarnaq","iauName":"Siarnaq","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"sinope":{"id":"sinope","iauName":"Sinope","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"skathi":{"id":"skathi","iauName":"Skathi","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"skoll":{"id":"skoll","iauName":"Skoll","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"sponde":{"id":"sponde","iauName":"Sponde","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"stephano":{"id":"stephano","iauName":"Stephano","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"styx":{"id":"styx","iauName":"Styx","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","pluto","moons"]},"surtur":{"id":"surtur","iauName":"Surtur","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"suttungr":{"id":"suttungr","iauName":"Suttungr","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"sycorax":{"id":"sycorax","iauName":"Sycorax","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"tarqeq":{"id":"tarqeq","iauName":"Tarqeq","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"tarvos":{"id":"tarvos","iauName":"Tarvos","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"taygete":{"id":"taygete","iauName":"Taygete","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"telesto":{"id":"telesto","iauName":"Telesto","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"tethys":{"id":"tethys","iauName":"Tethys","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","inner moons","prograde","synchronous","1684"]},"thalassa":{"id":"thalassa","iauName":"Thalassa","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","neptune","moons"]},"thebe":{"id":"thebe","iauName":"Thebe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"thelxinoe":{"id":"thelxinoe","iauName":"Thelxinoe","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"themisto":{"id":"themisto","iauName":"Themisto","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"thrymr":{"id":"thrymr","iauName":"Thrymr","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"thyone":{"id":"thyone","iauName":"Thyone","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"titan":{"id":"titan","iauName":"Titan","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","saturn","moons","outer moons","prograde","synchronous","1655"]},"titania":{"id":"titania","iauName":"Titania","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","uranus","moons","prograde","synchronous","1787"]},"trinculo":{"id":"trinculo","iauName":"Trinculo","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","uranus","moons"]},"triton":{"id":"triton","iauName":"Triton","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","neptune","moons","irregular moons","retrograde","synchronous","1846"]},"umbriel":{"id":"umbriel","iauName":"Umbriel","category":"Moon","subcategory":"Major Moon","keywords":["major moon","solar system","uranus","moons","prograde","synchronous","1851"]},"ymir":{"id":"ymir","iauName":"Ymir","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","saturn","moons"]},"sc_ace":{"id":"sc_ace","iauName":"ACE","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_acrimsat":{"id":"sc_acrimsat","iauName":"ACRIMSAT","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_aqua":{"id":"sc_aqua","iauName":"Aqua","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_artemis_1":{"id":"sc_artemis_1","iauName":"Artemis I","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_aura":{"id":"sc_aura","iauName":"Aura","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_biosentinel":{"id":"sc_biosentinel","iauName":"BioSentinel","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_calipso":{"id":"sc_calipso","iauName":"CALIPSO","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_capstone":{"id":"sc_capstone","iauName":"CAPSTONE","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_cassini":{"id":"sc_cassini","iauName":"Cassini","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","saturn"],"hasEvents":true},"sc_clementine":{"id":"sc_clementine","iauName":"Clementine","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_cloudsat":{"id":"sc_cloudsat","iauName":"CloudSat","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cluster_ii_fm5":{"id":"sc_cluster_ii_fm5","iauName":"Rumba","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cluster_ii_fm6":{"id":"sc_cluster_ii_fm6","iauName":"Salsa","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cluster_ii_fm7":{"id":"sc_cluster_ii_fm7","iauName":"Samba","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cluster_ii_fm8":{"id":"sc_cluster_ii_fm8","iauName":"Tango","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_1":{"id":"sc_cygnss_1","iauName":"CYGNSS 1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_2":{"id":"sc_cygnss_2","iauName":"CYGNSS 2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_3":{"id":"sc_cygnss_3","iauName":"CYGNSS 3","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_4":{"id":"sc_cygnss_4","iauName":"CYGNSS 4","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_5":{"id":"sc_cygnss_5","iauName":"CYGNSS 5","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_6":{"id":"sc_cygnss_6","iauName":"CYGNSS 6","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_7":{"id":"sc_cygnss_7","iauName":"CYGNSS 7","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_cygnss_8":{"id":"sc_cygnss_8","iauName":"CYGNSS 8","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_dart":{"id":"sc_dart","iauName":"DART","category":"Spacecraft","subcategory":"Impactor","altName":"boom","keywords":["spacecraft","65803_didymos","dimorphos","asteroid"],"hasEvents":true},"sc_dawn":{"id":"sc_dawn","iauName":"Dawn","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","vesta","ceres","small body mission"],"related":{"asteroid":["4_vesta","1_ceres"]},"hasEvents":true},"sc_deep_impact":{"id":"sc_deep_impact","iauName":"Deep Impact","category":"Spacecraft","subcategory":"Flyby","altName":"DI","keywords":["spacecraft","tempel 1","small body mission"],"related":{"comet":["9p_temp_1"]},"hasEvents":true},"sc_deep_impact_impactor":{"id":"sc_deep_impact_impactor","iauName":"Deep Impact Impactor","category":"Spacecraft","subcategory":"Impactor","altName":"DII","keywords":["spacecraft","tempel 1","small body mission"],"related":{"comet":["9p_temp_1"]},"hasEvents":true},"sc_deep_impact_impactor_impact_site":{"id":"sc_deep_impact_impactor_impact_site","displayName":"Deep Impact Impactor Impact Site","category":"Landing site","comparisonFeature":false},"sc_deep_space_1":{"id":"sc_deep_space_1","iauName":"Deep Space 1","category":"Spacecraft","subcategory":"Flyby","altName":"DS1","keywords":["spacecraft","9660 Braille","19p/Borrelly","small body mission"],"related":{"asteroid":["9969_braille"],"comet":["19p_borrelly"]},"hasEvents":true},"sc_eo_1":{"id":"sc_eo_1","iauName":"EO-1","category":"Spacecraft","subcategory":"Orbiter","altName":"Earth Observing-1","keywords":["spacecraft","earth","orbiter"]},"sc_euclid":{"id":"sc_euclid","iauName":"Euclid","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","telescope"],"disabled":true},"sc_europa_clipper":{"id":"sc_europa_clipper","iauName":"Europa Clipper","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","europa"]},"sc_explorer_1":{"id":"sc_explorer_1","iauName":"Explorer 1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_galileo":{"id":"sc_galileo","iauName":"Galileo","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","outer planet mission","orbiter","jupiter"],"hasEvents":true},"sc_galileo_probe":{"id":"sc_galileo_probe","iauName":"Galileo Probe","category":"Spacecraft","subcategory":"Lander","keywords":["spacecraft","outer planet mission","orbiter","jupiter"],"hasEvents":true},"sc_geotail":{"id":"sc_geotail","iauName":"Geotail","category":"Spacecraft","subcategory":"Lander","keywords":["spacecraft","earth","orbiter"]},"sc_gpm":{"id":"sc_gpm","iauName":"GPM","category":"Spacecraft","subcategory":"Orbiter","altName":"Global Precipitation Measurement","keywords":["spacecraft","earth","orbiter"]},"sc_grace_1":{"id":"sc_grace_1","iauName":"GRACE-1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_grace_2":{"id":"sc_grace_2","iauName":"GRACE-2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_grace_fo1":{"id":"sc_grace_fo1","iauName":"GRACE-FO1","category":"Spacecraft","subcategory":"Orbiter","altName":"GRACE Follow-On","keywords":["spacecraft","earth","orbiter"]},"sc_grace_fo2":{"id":"sc_grace_fo2","iauName":"GRACE-FO2","category":"Spacecraft","subcategory":"Orbiter","altName":"GRACE Follow-On","keywords":["spacecraft","earth","orbiter"]},"sc_grail_a":{"id":"sc_grail_a","iauName":"GRAIL A","category":"Spacecraft","subcategory":"Orbiter","altName":"Ebb","keywords":["spacecraft","moon","orbiter","ebb"]},"sc_grail_b":{"id":"sc_grail_b","iauName":"GRAIL B","category":"Spacecraft","subcategory":"Orbiter","altName":"Flow","keywords":["spacecraft","moon","orbiter","flow"]},"sc_grifex":{"id":"sc_grifex","iauName":"GRIFEX","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_hubble_space_telescope":{"id":"sc_hubble_space_telescope","iauName":"Hubble Space Telescope","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","telescope","1990"]},"sc_huygens":{"id":"sc_huygens","iauName":"Huygens","category":"Spacecraft","subcategory":"Lander","keywords":["spacecraft","titan","cassini","lander"],"hasEvents":true},"sc_ibex":{"id":"sc_ibex","iauName":"IBEX","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_icesat_2":{"id":"sc_icesat_2","iauName":"ICESat-2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_image":{"id":"sc_image","iauName":"IMAGE","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_insight":{"id":"sc_insight","iauName":"InSight","category":"Spacecraft","subcategory":"Lander","keywords":["spacecraft","mars","lander","seismic","2018"],"landingDate":"2018-11-26T19:45:00"},"sc_ipex":{"id":"sc_ipex","iauName":"IPEX","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_isas":{"id":"sc_isas","iauName":"ISAS","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_iss":{"id":"sc_iss","iauName":"International Space Station","category":"Spacecraft","subcategory":"Orbiter","altName":"ISS","keywords":["iss","international","international space","station","earth","orbiter","1998","emit","ecostress","oco-3"],"customDistance":0.1},"sc_iss_ecostress":{"id":"sc_iss_ecostress","iauName":"ECOSTRESS","category":"Instrument","cameraOptions":{"forwardVector":"-y-axis"},"comparisonFeature":false,"keywords":["spacecraft","earth","iss","orbiter"]},"sc_iss_emit":{"id":"sc_iss_emit","iauName":"EMIT","category":"Instrument","cameraOptions":{"forwardVector":"y-axis","distance":0.006},"comparisonFeature":false,"altName":"Earth Surface Mineral Dust Source Investigation","keywords":["spacecraft","earth","iss","orbiter"]},"sc_iss_oco_3":{"id":"sc_iss_oco_3","iauName":"OCO-3","category":"Instrument","cameraOptions":{"forwardVector":"-y-axis"},"comparisonFeature":false,"altName":"Orbiting Carbon Observatory 3","keywords":["spacecraft","earth","iss","orbiter"]},"sc_iss_rapidscat":{"id":"sc_iss_rapidscat","iauName":"RapidScat","category":"Instrument","cameraOptions":{"upVector":"-y-axis","forwardVector":"x-axis","distance":0.007},"comparisonFeature":false,"keywords":["spacecraft","earth","iss","orbiter"]},"sc_ixpe":{"id":"sc_ixpe","iauName":"IXPE","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","telescope","2021","x-ray","imaging x-ray polarimetry explorer","cosmic x-rays"]},"sc_jason_1":{"id":"sc_jason_1","iauName":"Jason-1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_jason_2":{"id":"sc_jason_2","iauName":"Jason-2/OSTM","category":"Spacecraft","subcategory":"Orbiter","altName":"OSTM","keywords":["spacecraft","earth","orbiter","jason-2"]},"sc_jason_3":{"id":"sc_jason_3","iauName":"Jason-3","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_juice":{"id":"sc_juice","iauName":"Juice","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","jupiter","orbiter"]},"sc_juno":{"id":"sc_juno","iauName":"Juno","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","jupiter","orbiter","gravity","magnetic field","atmosphere","junocam","bruh","2011"],"customDistance":0.04,"hasEvents":true},"sc_jwst":{"id":"sc_jwst","iauName":"James Webb Space Telescope","category":"Spacecraft","subcategory":"Orbiter","altName":"James Webb Space Telescope","keywords":["spacecraft","earth","orbiter","telescope","jwst"],"hasEvents":true},"sc_kepler_space_telescope":{"id":"sc_kepler_space_telescope","iauName":"Kepler","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","telescope"]},"sc_ladee":{"id":"sc_ladee","iauName":"LADEE","category":"Spacecraft","subcategory":"Orbiter","altName":"Lunar Atmosphere and Dust Environment Explorer","keywords":["spacecraft","moon","orbiter"]},"sc_landsat_7":{"id":"sc_landsat_7","iauName":"Landsat 7","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_landsat_8":{"id":"sc_landsat_8","iauName":"Landsat 8","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_landsat_9":{"id":"sc_landsat_9","iauName":"Landsat 9","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_lcross":{"id":"sc_lcross","iauName":"LCROSS","category":"Spacecraft","subcategory":"Orbiter","altName":"Lunar Crater Observation and Sensing Satellite","keywords":["spacecraft","moon","orbiter"],"hasEvents":true},"sc_lucy":{"id":"sc_lucy","iauName":"Lucy","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"],"hasEvents":true},"sc_lunar_flashlight":{"id":"sc_lunar_flashlight","iauName":"Lunar Flashlight","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_lunar_icecube":{"id":"sc_lunar_icecube","iauName":"Lunar IceCube","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_lunar_prospector":{"id":"sc_lunar_prospector","iauName":"Lunar Prospector","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_lunar_reconnaissance_orbiter":{"id":"sc_lunar_reconnaissance_orbiter","iauName":"Lunar Reconnaissance Orbiter","category":"Spacecraft","subcategory":"Orbiter","altName":"LRO","keywords":["spacecraft","moon","orbiter","lro","temperature","imaging","albedo","polar","2009"]},"sc_lunir":{"id":"sc_lunir","iauName":"Lunar Reconnaissance Orbiter","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter","artemis"],"disabled":true},"sc_magellan":{"id":"sc_magellan","iauName":"Magellan","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","inner planet mission","venus"]},"sc_marco_a":{"id":"sc_marco_a","iauName":"MarCO A","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","insight","cubesat"]},"sc_marco_b":{"id":"sc_marco_b","iauName":"MarCO B","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","insight","cubesat"]},"sc_mars_2020":{"id":"sc_mars_2020","iauName":"Mars 2020 (Perseverance)","category":"Spacecraft","subcategory":"Rover","altName":"Percy","keywords":["spacecraft","mars","lander","rover","perseverance","mars 2020","mars2020","m2020"],"landingDate":"2021-02-18T20:55:00"},"sc_mars_2020_landing_site":{"id":"sc_mars_2020_landing_site","displayName":"Perseverance Rover landing site","category":"Landing site","comparisonFeature":false},"sc_mars_exploration_rover_1_landing_site":{"id":"sc_mars_exploration_rover_1_landing_site","displayName":"Opportunity Rover landing site","category":"Landing site","comparisonFeature":false},"sc_mars_exploration_rover_1":{"id":"sc_mars_exploration_rover_1","iauName":"Mars Exploration Rover B (Opportunity)","displayName":"Opportunity","category":"Spacecraft","subcategory":"Rover","keywords":["spacecraft","mars","lander","rover","opportunity","meridiani planum","2003","MER-B","MER-1","mer b"],"landingDate":"2004-01-25T04:54:00"},"sc_mars_exploration_rover_2_landing_site":{"id":"sc_mars_exploration_rover_2_landing_site","displayName":"Spirit Rover landing site","category":"Landing site","comparisonFeature":false},"sc_mars_exploration_rover_2":{"id":"sc_mars_exploration_rover_2","iauName":"Mars Exploration Rover A (Spirit)","displayName":"Spirit","category":"Spacecraft","subcategory":"Rover","keywords":["spacecraft","mars","lander","rover","spirit","MER-A","MER-2","mer a"],"landingDate":"2004-01-25T04:54:00"},"sc_mars_express":{"id":"sc_mars_express","iauName":"Mars Express","category":"Spacecraft","subcategory":"Orbiter","altName":"MEX","keywords":["spacecraft","mars","orbiter","water","geology","atmosphere","surface","relay","2003"]},"sc_mars_global_surveyor":{"id":"sc_mars_global_surveyor","iauName":"Mars Global Surveyor","category":"Spacecraft","subcategory":"Orbiter","altName":"MGS","keywords":["spacecraft","mars","MGS"]},"sc_mars_odyssey":{"id":"sc_mars_odyssey","iauName":"Mars Odyssey","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","mars","orbiter","elements","minerals","hydrogen","water","polar","radiation","relay","2001"]},"sc_mars_reconnaissance_orbiter":{"id":"sc_mars_reconnaissance_orbiter","iauName":"Mars Reconnaissance Orbiter","category":"Spacecraft","subcategory":"Orbiter","altName":"MRO","keywords":["spacecraft","mars","orbiter","mro","water","dust","atmosphere","relay","2005"]},"sc_mars_science_laboratory_landing_site":{"id":"sc_mars_science_laboratory_landing_site","displayName":"Curiosity Rover landing site","category":"Landing site","comparisonFeature":false},"sc_mars_science_laboratory":{"id":"sc_mars_science_laboratory","iauName":"Mars Science Laboratory (Curiosity)","displayName":"Mars Science Laboratory (Curiosity)","category":"Spacecraft","subcategory":"Rover","altName":"MSL","keywords":["spacecraft","mars","lander","rover","msl","curiosity","microbes","habitability","2011"],"landingDate":"2012-08-06T05:32:00"},"sc_maven":{"id":"sc_maven","iauName":"MAVEN","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","mars","orbiter","atmosphere","ionosphere","solar wind","relay","2013"]},"sc_messenger":{"id":"sc_messenger","iauName":"MESSENGER","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","mercury","orbiter"]},"sc_messenger_impact_site":{"id":"sc_messenger_impact_site","displayName":"MESSENGER Impact Site","category":"Landing site","comparisonFeature":false},"sc_mcubed_2":{"id":"sc_mcubed_2","iauName":"M-Cubed 2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_mms_1":{"id":"sc_mms_1","iauName":"MMS 1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_mms_2":{"id":"sc_mms_2","iauName":"MMS 2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_mms_3":{"id":"sc_mms_3","iauName":"MMS 3","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_mms_4":{"id":"sc_mms_4","iauName":"MMS 4","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_near_shoemaker":{"id":"sc_near_shoemaker","iauName":"NEAR Shoemaker","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","eros","orbiter"],"related":{"asteroid":["433_eros"]},"hasEvents":true},"sc_new_horizons":{"id":"sc_new_horizons","iauName":"New Horizons","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","pluto","flyby","imager","spectrometer","ultraviolet","solar wind","extended mission","2006"],"hasEvents":true},"sc_nustar":{"id":"sc_nustar","iauName":"NuSTAR","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","telescope","X-ray","astrophysics"]},"sc_oco_2":{"id":"sc_oco_2","iauName":"OCO-2","category":"Spacecraft","subcategory":"Orbiter","altName":"Orbiting Carbon Observatory 2","keywords":["spacecraft","earth","orbiter"]},"sc_osiris_rex":{"id":"sc_osiris_rex","iauName":"OSIRIS-REx","category":"Spacecraft","subcategory":"Orbiter","altName":"ORX","keywords":["spacecraft","bennu","apex","osiris-apex","lander","sample return","asteroids","chemistry","mineralogy","2016"],"related":{"asteroid":["101955_bennu","99942_apophis"]},"hasEvents":true},"sc_osiris_rex_src":{"id":"sc_osiris_rex_src","iauName":"OSIRIS-REx Sample Return Capsule","category":"Spacecraft","subcategory":"Flyby","altName":"ORX SRC","keywords":["spacecraft","Bennu","orbiter","sc_osiris_rex","SRC","sample return"],"related":{"asteroid":["101955_bennu"]},"hasEvents":true},"sc_parker_solar_probe":{"id":"sc_parker_solar_probe","iauName":"Parker Solar Probe","category":"Spacecraft","subcategory":"Orbiter","altName":"PSP","keywords":["spacecraft","psp"]},"sc_philae":{"id":"sc_philae","iauName":"Philae","category":"Spacecraft","subcategory":"Lander","keywords":["spacecraft","67P/Churyumov-Gerasimenko","lander","Rosetta"],"related":{"comet":["67p_churyumov_gerasimenko"]},"hasEvents":true},"sc_phoenix":{"id":"sc_phoenix","iauName":"Phoenix","category":"Spacecraft","subcategory":"Lander","altName":"PHX","keywords":["spacecraft","mars","lander"],"landingDate":"2008-05-25T23:53:44"},"sc_phoenix_landing_site":{"id":"sc_phoenix_landing_site","displayName":"Phoenix landing site","category":"Landing site","comparisonFeature":false},"sc_pioneer_10":{"id":"sc_pioneer_10","iauName":"Pioneer 10","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","jupiter","callisto","ganymede","europa","io","flyby","outer planets","interstellar","1972"],"hasEvents":true},"sc_pioneer_11":{"id":"sc_pioneer_11","iauName":"Pioneer 11","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","jupiter","callisto","ganymede","io","europa","amalthea","saturn","iapetus","phoebe","hyperion","epimetheus","atlas","dione","mimas","janus","tethys","enceladus","calypso","rhea","titan","flyby","magnetic field","solar wind","outer planets","interstellar","1973"],"hasEvents":true},"sc_polar":{"id":"sc_polar","iauName":"Polar","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_psyche":{"id":"sc_psyche","iauName":"Psyche","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","16 Psyche","orbiter"],"related":{"asteroid":["16_psyche"]},"hasEvents":true},"sc_quikscat":{"id":"sc_quikscat","iauName":"QuikSCAT","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_raincube":{"id":"sc_raincube","iauName":"RainCube","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","cubesat"]},"sc_rbsp_a":{"id":"sc_rbsp_a","iauName":"Van Allen Probe A","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_rbsp_b":{"id":"sc_rbsp_b","iauName":"Van Allen Probe B","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_sac_d":{"id":"sc_sac_d","iauName":"Aquarius","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_rosetta":{"id":"sc_rosetta","iauName":"Rosetta","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","small body mission","67P/Churyumov-Gerasimenko"],"related":{"comet":["67p_churyumov_gerasimenko"]},"hasEvents":true},"sc_sdo":{"id":"sc_sdo","iauName":"Solar Dynamics Observatory","category":"Spacecraft","subcategory":"Orbiter","altName":"SDO","keywords":["spacecraft","earth","orbiter"]},"sc_sentinel_6":{"id":"sc_sentinel_6","iauName":"Sentinel-6 Michael Freilich","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter","2020","sea level","jason","jason-cs","copernicus","topex/poseidon"]},"sc_smap":{"id":"sc_smap","iauName":"SMAP","category":"Spacecraft","subcategory":"Orbiter","altName":"Soil Moisture Active Passive","keywords":["spacecraft","earth","orbiter"]},"sc_soho":{"id":"sc_soho","iauName":"SOHO","category":"Spacecraft","subcategory":"Orbiter","altName":"Solar and Heliospheric Observatory","keywords":["spacecraft","sun","orbiter"]},"sc_sorce":{"id":"sc_sorce","iauName":"SORCE","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_spitzer":{"id":"sc_spitzer","iauName":"Spitzer Space Telescope","category":"Spacecraft","subcategory":"Orbiter","altName":"SIRTF","keywords":["spacecraft","sun","orbiter","sirtf","space infrared telescope facility","spitzer space telescope","2003"]},"sc_stardust":{"id":"sc_stardust","iauName":"Stardust","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","Wild-2","orbiter"],"related":{"comet":["81p_wild_2"]},"hasEvents":true},"sc_stardust_src":{"id":"sc_stardust_src","iauName":"Stardust Sample Return Capsule","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","Wild-2","orbiter"],"related":{"comet":["81p_wild_2"]}},"sc_starling_1":{"id":"sc_starling_1","iauName":"Starling-1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"],"disabled":false},"sc_starling_2":{"id":"sc_starling_2","iauName":"Starling-2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"],"disabled":false},"sc_starling_3":{"id":"sc_starling_3","iauName":"Starling-3","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"],"disabled":false},"sc_starling_4":{"id":"sc_starling_4","iauName":"Starling-4","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"],"disabled":false},"sc_stereo_ahead":{"id":"sc_stereo_ahead","iauName":"STEREO Ahead","category":"Spacecraft","subcategory":"Orbiter","altName":"STA","keywords":["spacecraft","sun","orbiter","solar terrestrial relations observatory","stereoscopic","coronal mass ejections","cme","2006"]},"sc_stereo_behind":{"id":"sc_stereo_behind","iauName":"STEREO Behind","category":"Spacecraft","subcategory":"Orbiter","altName":"STB","keywords":["spacecraft","sun","orbiter","solar terrestrial relations observatory","stereoscopic","coronal mass ejections","cme","2006"]},"sc_tdrs_3":{"id":"sc_tdrs_3","iauName":"TDRS-3","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_5":{"id":"sc_tdrs_5","iauName":"TDRS-5","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_6":{"id":"sc_tdrs_6","iauName":"TDRS-6","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_7":{"id":"sc_tdrs_7","iauName":"TDRS-7","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_8":{"id":"sc_tdrs_8","iauName":"TDRS-8","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_9":{"id":"sc_tdrs_9","iauName":"TDRS-9","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_10":{"id":"sc_tdrs_10","iauName":"TDRS-10","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_11":{"id":"sc_tdrs_11","iauName":"TDRS-11","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_12":{"id":"sc_tdrs_12","iauName":"TDRS-12","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_tdrs_13":{"id":"sc_tdrs_13","iauName":"TDRS-13","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","orbiter"]},"sc_suomi_npp":{"id":"sc_suomi_npp","iauName":"Suomi NPP","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_swot":{"id":"sc_swot","iauName":"SWOT","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_terra":{"id":"sc_terra","iauName":"Terra","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_tess":{"id":"sc_tess","iauName":"TESS","category":"Spacecraft","subcategory":"Orbiter","altName":"Transiting Exoplanet Survey Satellite","keywords":["spacecraft","earth","telescope","transiting exoplanet survey satellite","orbiter","2018","exoplanets"]},"sc_themis_a":{"id":"sc_themis_a","iauName":"THEMIS-A","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_themis_b":{"id":"sc_themis_b","iauName":"ARTEMIS P1","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_themis_c":{"id":"sc_themis_c","iauName":"ARTEMIS P2","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","moon","orbiter"]},"sc_themis_d":{"id":"sc_themis_d","iauName":"THEMIS-D","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_themis_e":{"id":"sc_themis_e","iauName":"THEMIS-E","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_trace_gas_orbiter":{"id":"sc_trace_gas_orbiter","iauName":"Trace Gas Orbiter","category":"Spacecraft","subcategory":"Orbiter","altName":"TGO","keywords":["spacecraft","mars","orbiter","tgo","atmosphere","relay","2016"]},"sc_trmm":{"id":"sc_trmm","iauName":"TRMM","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","earth","orbiter"]},"sc_ulysses":{"id":"sc_ulysses","iauName":"Ulysses","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","sun","orbiter"]},"sc_voyager_1":{"id":"sc_voyager_1","iauName":"Voyager 1","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","jupiter","saturn","flyby","imaging","vger","radio science","infrared","ultraviolet","magnetometer","plasma","1977"],"hasEvents":true},"sc_voyager_2":{"id":"sc_voyager_2","iauName":"Voyager 2","category":"Spacecraft","subcategory":"Flyby","keywords":["spacecraft","jupiter","saturn","uranus","vger","neptune","flyby","imaging","radio science","infrared","ultraviolet","magnetometer","plasma","1977"],"hasEvents":true},"sc_wind":{"id":"sc_wind","iauName":"WIND","category":"Spacecraft","subcategory":"Orbiter","keywords":["spacecraft","solar wind","earth","orbiter"]},"valetudo":{"id":"valetudo","iauName":"Valetudo","category":"Moon","subcategory":"Minor Moon","keywords":["minor moon","solar system","jupiter","moons"]},"scientist":{"id":"scientist","displayName":"Scientist","category":"Human","searchable":false},"school_bus":{"id":"school_bus","displayName":"School Bus","category":"Vehicle","searchable":false},"rose_bowl":{"id":"rose_bowl","displayName":"Stadium","category":"Building","searchable":false}}',
        );
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          (e.default = {
            earth: [
              {
                id: "viirs",
                title: "High-quality global mosaic from yesterday",
                description:
                  "This daily global mosaic is from the Visible Infrared Imaging Radiometer Suite (VIIRS), which is one of the key instruments onboard the Suomi National Polar-Orbiting Partnership (Suomi NPP) spacecraft.",
                type: "wmts",
                features: ["shadowEntities", "atmosphere"],
                endPoint: "assets/wmts_xml",
                layer: "VIIRS_SNPP_CorrectedReflectance_TrueColor",
                tile: "250m",
                time: "yesterday",
              },
            ],
            mars: [
              {
                id: "vikingMosaic",
                title: "Global mosaic from the Viking missions to Mars.",
                description:
                  "The two Mars Viking Orbiters imaged the entire surface of Mars at a resolution of 150 to 300 meters.",
                type: "wmts",
                features: ["shadowEntities", "atmosphere"],
                endPoint:
                  "https://trek.nasa.gov/tiles/Mars/EQ/corrected/Mars_Viking_MDIM21_ClrMosaic_global_232m",
                layer: "Mars_Viking_MDIM21_ClrMosaic_global_232m",
              },
            ],
            moon: [
              {
                id: "lroMosaic",
                title:
                  "Global mosaic from the Lunar Reconnaissance Orbiter mission",
                description:
                  "The wide-angle camera on LRO mapped the entire moon at 100 meters/pixel.",
                type: "wmts",
                features: ["shadowEntities"],
                endPoint:
                  "https://trek.nasa.gov/tiles/Moon/EQ/corrected/LRO_WAC_Mosaic_Global_303ppd_v02",
                layer: "LRO_WAC_Mosaic_Global_303ppd_v02",
              },
            ],
            titan: [
              {
                id: "surface",
                title:
                  "Surface imagery of Titan from Cassini's Imaging Science Subsystem camera",
                description:
                  "This global mosaic is at 4 km/pixel, combining one hundred flybys of Titan by the Cassini mission",
                type: "texture",
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "titan/surface_$SIZE_$FACE.png",
                    sizes: [16, 512, 2048],
                  },
                },
              },
              {
                id: "radar",
                title: "Radar Map of Titan's Surface",
                description:
                  "This 351 meters/pixel map incorporates 104 Titan flybys by the Cassini mission.",
                type: "texture",
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "titan/radar_$SIZE_$FACE.png",
                    sizes: [16, 512, 2048],
                  },
                },
              },
            ],
            venus: [
              {
                id: "surface",
                title: "Radar Map of the Surface of Venus",
                description:
                  "The Magellan mission used radar to see beneath the smog of Venus.",
                type: "texture",
                features: ["shadowEntities"],
                textures: {
                  color: {
                    url: "venus/surface_$SIZE_$FACE.png",
                    sizes: [16, 512, 1024],
                  },
                },
              },
            ],
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          (e.default = {
            jupiter: [
              {
                id: "magnetosphere",
                title: "Jupiter's Magnetic Field",
                description: "DESCRIPTION",
              },
              {
                id: "auroras",
                title: "Jupiter's Auroras",
                description: "DESCRIPTION",
              },
              {
                id: "radiationBelt",
                title: "Jupiter's Radiation Belt",
                description: "DESCRIPTION",
              },
            ],
            saturn: [
              {
                id: "magnetosphere",
                title: "Saturn's Magnetic Field",
                description: "DESCRIPTION",
              },
            ],
          });
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Types: function () {
              return n;
            },
          });
        var i = s(2);
        const n = new Map();
        n.set("TimeManager", i.TimeManager),
          n.set("SelectionManager", i.SelectionManager),
          n.set("LabelManager", i.LabelManager),
          n.set("TitleManager", i.TitleManager),
          n.set("TrailManager", i.TrailManager),
          n.set("LoadIcon", i.LoadIcon),
          n.set("Overlay", i.Overlay),
          n.set("Settings", i.Settings),
          n.set("Breadcrumb", i.Breadcrumb),
          n.set("Clock", i.Clock),
          n.set("ClockShortcut", i.ClockShortcut),
          n.set("Story", i.Story),
          n.set("LayerPanel", i.LayerPanel),
          n.set("Search", i.Search),
          n.set("Carousel", i.Carousel),
          n.set("TutorialOverlay", i.TutorialOverlay),
          n.set("CarouselPanel", i.CarouselPanel),
          n.set("TimeController", i.TimeController);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        s(696),
          s(697),
          s(698),
          s(699),
          s(700),
          s(701),
          s(702),
          s(703),
          s(704),
          s(705);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FiltersManager: function () {
              return i.FiltersManager;
            },
            NEOsManager: function () {
              return n.NEOsManager;
            },
            WatchManager: function () {
              return o.WatchManager;
            },
            LinkManager: function () {
              return r.LinkManager;
            },
            SelectionManager: function () {
              return a.SelectionManager;
            },
            LabelManager: function () {
              return l.LabelManager;
            },
            TrailManager: function () {
              return c.TrailManager;
            },
            AsteroidMenuTop: function () {
              return h.AsteroidMenuTop;
            },
            AsteroidMenuBottom: function () {
              return u.AsteroidMenuBottom;
            },
            AsteroidModals: function () {
              return d.AsteroidModals;
            },
            HomeButton: function () {
              return p.HomeButton;
            },
            WatchPanel: function () {
              return m.WatchPanel;
            },
            AsteroidPanel: function () {
              return _.AsteroidPanel;
            },
            MissionPanel: function () {
              return g.MissionPanel;
            },
            FollowingPanel: function () {
              return y.FollowingPanel;
            },
            Countdown: function () {
              return f.Countdown;
            },
            SplashScreen: function () {
              return b.SplashScreen;
            },
            AsteroidsApp: function () {
              return T.AsteroidsApp;
            },
            NEO: function () {
              return S.NEO;
            },
            NEOUtils: function () {
              return S.NEOUtils;
            },
            DefinitionOverlay: function () {
              return E.DefinitionOverlay;
            },
            TimeSlider: function () {
              return v.TimeSlider;
            },
            Breadcrumb: function () {
              return C.Breadcrumb;
            },
            AsteroidsSettings: function () {
              return x.AsteroidsSettings;
            },
            Search: function () {
              return w.Search;
            },
            Types: function () {
              return I.Types;
            },
          });
        var i = s(707),
          n = s(708),
          o = s(709),
          r = s(711),
          a = s(712),
          l = s(713),
          c = s(714),
          h = s(715),
          u = s(719),
          d = s(720),
          p = s(733),
          m = s(735),
          _ = s(743),
          g = s(745),
          y = s(747),
          f = s(736),
          b = s(749),
          T = s(0),
          S = s(710),
          E = s(752),
          v = s(756),
          C = s(759),
          x = s(761),
          w = s(762),
          I = s(763);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FiltersManager: function () {
              return FiltersManager;
            },
          });
        s(5);
        var i = s(1);
        s(706);
        class FiltersManager extends i.BaseManager {
          constructor(t, e) {
            super(t, e),
              (this.state = {
                isFiltering: !1,
                filters: { asteroids: !1, comets: !1, phos: !1 },
                lastSize: null,
              }),
              (this.previousFilters = { asteroids: !1, comets: !1, phos: !1 }),
              (this._app = t),
              this._eventNames.push("isFilteringChange"),
              this._eventNames.push("lastSizeChange"),
              this._initCallbacks(),
              this.bindFunctions([
                "getFilters",
                "getLastSize",
                "_matchFunction",
              ]);
          }
          _setFiltering(t) {
            this.state.isFiltering !== t &&
              ((this.state.isFiltering = t),
                this.triggerCallbacks("isFilteringChange", [
                  this.state.isFiltering,
                ]));
          }
          _setLastSize(t) {
            this.state.lastSize !== t &&
              ((this.state.lastSize = t),
                this.triggerCallbacks("lastSizeChange", [this.state.lastSize]));
          }
          get isFiltering() {
            return this.state.isFiltering;
          }
          getFilters() {
            return this.state.filters;
          }
          getPreviousFilters() {
            return this.previousFilters;
          }
          getLastSize() {
            return this.state.lastSize;
          }
          setFilter(t, e, s) {
            if (
              ((this.previousFilters = this.state.filters),
                "string" == typeof t)
            )
              null != this.state.filters[t] &&
                this.state.filters[t] !== e &&
                ((this.state.filters[t] = e), this._filter(s));
            else
              for (const e in t)
                if (this.state.filters[e] !== t[e]) {
                  (this.state.filters = { ...this.state.filters, ...t }),
                    this._filter(s);
                  break;
                }
          }
          setFilterToReveal(t, e, s) {
            let i = !1;
            return (
              !0 !== t.pho &&
              !0 === this.state.filters.phos &&
              ((this.state.filters.phos = !1), (i = !0)),
              (!1 === this.state.filters.asteroids &&
                !1 === this.state.filters.comets) ||
              (!0 === t.asteroid &&
                !1 === this.state.filters.asteroids &&
                ((this.state.filters.asteroids = !0), (i = !0)),
                !0 === t.comet &&
                !1 === this.state.filters.comets &&
                ((this.state.filters.comets = !0), (i = !0))),
              i &&
              (!0 === e &&
                (this.state.filters = {
                  asteroids: !1,
                  comets: !1,
                  phos: !1,
                }),
                this._filter(s)),
              i
            );
          }
          _toggleLayer(t, e) {
            const s = this._app.getManager("layer"),
              i = {
                ui: "User Interface",
                planets: "Planet",
                asteroids: "Asteroid",
                comets: "Comet",
                dwarfPlanets: "Dwarf Planet",
                spacecraft: "Spacecraft",
                trails: "Trail",
                labels: "Label",
              };
            (null == e ||
              (!0 === e && !1 === s._layers[t]?.visible) ||
              (!1 === e && !0 === s._layers[t]?.visible)) &&
              s.toggleLayer(t, { category: i[t] });
          }
          _matchFunction(t) {
            return (
              this.app.getManager("selection")?._id === t.pioneerName ||
              (!(
                this.state.filters.asteroids &&
                !this.state.filters.comets &&
                !0 === t.comet
              ) &&
                !(
                  this.state.filters.comets &&
                  !this.state.filters.asteroids &&
                  !1 === t.comet
                ) &&
                (!this.state.filters.phos || !1 !== t.pho))
            );
          }
          _filter(t) {
            const e =
              this.state.filters.asteroids ||
              this.state.filters.comets ||
              this.state.filters.phos;
            this._app.addParticleMatchFunction(
              this._matchFunction,
              "filters_manager",
              !0,
              (s) => {
                this._setLastSize((e ? s.length : this.app.neos.size) || 0),
                  this._setFiltering(e),
                  "function" == typeof t && t(this.state.lastSize);
              },
            ),
              this.state.filters.asteroids || this.state.filters.comets
                ? (this._toggleLayer("asteroids", this.state.filters.asteroids),
                  this._toggleLayer("comets", this.state.filters.comets))
                : (this._toggleLayer("asteroids", !0),
                  this._toggleLayer("comets", !0));
            const { neos: s } = this._app,
              { _itemsByName: i } = this.app.scene?._entities || {},
              n = i ? Array.from(i.keys()) : [],
              o = [];
            for (const t of s.keys())
              n.includes(t) &&
                (o.push(t), i.get(t).setEnabled(this._matchFunction(s.get(t))));
            const r = this._app.getManager("content")?.getEntityList();
            for (const t of n)
              !o.includes(t) &&
                r[t] &&
                ["Asteroid", "Comet", "Dwarf Planet"].includes(r[t].category) &&
                i
                  .get(t)
                  ?.setEnabled(
                    this._matchFunction({
                      comet: "Comet" === r[t].category,
                      pho: !1,
                    }),
                  );
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            NEOsManager: function () {
              return NEOsManager;
            },
          });
        s(5);
        var i = s(1),
          n = s(706);
        class NEOsManager extends i.BaseManager {
          createTempNEO(t, e = this._app.scene, s = !0) {
            const i = n.NEOUtils.createEntity(t, e);
            if (
              (this._app.getManager("label").addEntity(i),
                this._app.getManager("scene").addTempEntity(i),
                s)
            ) {
              const e = this._app.getManager("content"),
                s = this._app.getManager("label"),
                { dwarfPlanet: n, asteroid: o, comet: r } = t,
                a = o || n ? "asteroid" : r ? "comet" : "";
              s.setLabelProps(
                {
                  getLabelClass: (t) =>
                    `no-select asteroid ${e.getClassName(t) ?? ""}`,
                  getIconClass: () => a,
                },
                [i.getName()],
              );
            }
            return i;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            WatchManager: function () {
              return WatchManager;
            },
          });
        var i = s(1),
          n = s(5);
        s(710);
        class WatchManager extends i.BaseManager {
          constructor(t) {
            super(t),
              (this._hasRedirected = null),
              (this._currentTime = n.TimeUtils.now()),
              (this._nextFiveData = null),
              (this._nextFiveEntities = null),
              (this._nextFiveNames = null),
              (this._labelWeights = null),
              (this._focusEntityNames = null),
              (this._backgroundPlanets = [
                "mercury",
                "venus",
                "mars",
                "jupiter",
                "saturn",
                "uranus",
                "neptune",
              ]),
              (this._defaultPlanetTrailWidth = 4),
              (this._slideIndex = null),
              (this._dynamoCoverage = null),
              (this._unitType = "metric"),
              this._eventNames.push("toggleUnit"),
              this._initCallbacks(),
              this.bindFunctions([
                "setData",
                "_calculateNextNEOs",
                "_createEntities",
                "_calculateTimeLimits",
                "getNeoNameByIndex",
                "updateURL",
                "toggleUnit",
              ]);
          }
          setData() {
            if (this._nextFiveData) return;
            const t = this._app.neos;
            if (!t) throw Error("Cannot get NEO data.");
            (this._nextFiveData = this._calculateNextNEOs(t)),
              this._setLabelWeights();
          }
          _setLabelWeights(t) {
            (this._labelWeights = Object.fromEntries(
              this._nextFiveData.map(({ pioneerName: e }) => [
                e,
                { category: e === t ? "Focus" : "Watch" },
              ]),
            )),
              this._app.getManager("label")?.setWeights(this._labelWeights, !1);
          }
          determineSlideIndex(t) {
            return t
              ? this._nextFiveData.findIndex((e) => e.pioneerName === t)
              : null;
          }
          setSlideIndex(t) {
            this._slideIndex = t;
          }
          setAsteroidSelection() {
            const t = this._app.getManager("label"),
              e = this._nextFiveData[this._slideIndex]?.pioneerName ?? !1;
            this._setLabelWeights(e),
              t.removeClassFromLabels("selected", this._nextFiveNames);
            const s = this._nextFiveNames.find((t) => t === e);
            s && t.addClassToLabels("selected", [s]);
            for (const s of this._nextFiveNames)
              t.triggerCallbacks("hoverchange", [s, s === e]);
          }
          _calculateNextNEOs(t, e = 5) {
            const s = [],
              i = [];
            for (const [n, o] of t.entries()) {
              const t = o.nextClosestApproachTime > this._currentTime;
              if (o.nextClosestApproachDistance < 7479893.535 && t) {
                const t = o.nextClosestApproachTime - this._currentTime;
                if (i.length < e) i.push(t), s.push(o);
                else {
                  const e = Math.max(...i);
                  if (t < e) {
                    const n = i.indexOf(e);
                    (i[n] = t), (s[n] = o);
                  }
                }
              }
            }
            return s.sort((t, e) =>
              t.nextClosestApproachTime >= e.nextClosestApproachTime ? 1 : -1,
            );
          }
          _createEntities() {
            if (this._nextFiveEntities) return Promise.resolve();
            const t = this._app.getManager("scene"),
              e = this._app.getManager("neos"),
              s = this._app.getManager("label"),
              i = this._app.getManager("content"),
              o = this._app.getManager("trail");
            (this._nextFiveEntities = this._nextFiveData.map((s) =>
              e.createTempNEO(s, t.main, !1),
            )),
              (this._nextFiveNames = this._nextFiveData.map(
                (t) => t.pioneerName,
              )),
              (this._focusEntityNames = [
                "earth",
                "moon",
                ...this._nextFiveNames,
              ]);
            s.setLabelProps(
              {
                getLabelClass: (t) =>
                  `no-select asteroid-watch-label ${i.getClassName(t) ?? ""}`,
                getIconClass: () => "asteroid-watch-icon",
                getTextClass: () => "asteroid-watch-text",
                handleClick: (t, e) => {
                  this.updateURL(e);
                },
                handleTouch: (t, e) => {
                  this.app.isDragging() ||
                    this.app.isTouchMax() ||
                    this.updateURL(e);
                },
                handleMouseLeave: (t, e) => {
                  (t.target?.classList?.contains("selected") &&
                    t.target?.classList?.contains("asteroid-watch-label")) ||
                    s.triggerCallbacks("hoverchange", [e, !1]);
                },
              },
              this._nextFiveNames,
            );
            const r = this._app._colors?.neos;
            return (
              r && o.setColor(this._nextFiveNames, new n.Color(...r, 0.35)),
              Promise.all(
                this._nextFiveEntities.map((t) => t.getLoadedPromise()),
              )
            );
          }
          _calculateTimeLimits() {
            const t = this.app.getManager("time"),
              e = t.getNow(),
              s = t.momentToET(e),
              { nextClosestApproachTime: i } =
                this._nextFiveData[this._nextFiveData.length - 1],
              o = 8553600 - (i - s),
              r = i - o,
              a = i + o;
            return new n.Interval(r, a);
          }
          restrictEarthCoverage() {
            const t = this._app.scene
              .getEntity("earth")
              ?.getControllerByType("dynamo");
            t
              ? ((this._dynamoCoverage = new n.Interval()),
                this._dynamoCoverage.copy(t.getCoverage()),
                t.setCoverage(this._calculateTimeLimits()))
              : console.warn("Could not find Earth dynamo.");
          }
          restoreEarthCoverage() {
            const t = this._app.scene
              .getEntity("earth")
              ?.getControllerByType("dynamo");
            t
              ? t.setCoverage(this._dynamoCoverage)
              : console.warn("Could not find Earth dynamo.");
          }
          dimBackgroundLabels(t) {
            const e = this._app.getManager("label"),
              s = "watch-dim",
              i = Object.keys(e._labels).filter(
                (t) => !this._focusEntityNames?.includes(t),
              );
            t ? e.addClassToLabels(s, i) : e.removeClassFromLabels(s, i);
          }
          setBgTrailWidthDefault(t = this._defaultPlanetTrailWidth) {
            for (const e of this._backgroundPlanets) {
              const s = this.app.scene.get(e);
              s?.trailHover?.width?.default &&
                (s.trailHover.width.default = [t, t]);
            }
            if (t === this._defaultPlanetTrailWidth) {
              this._app
                .getManager("trail")
                .setMultipleWidths(this._backgroundPlanets, t, t);
            }
          }
          getNeoNameByIndex(t) {
            return this._nextFiveData?.[t]?.pioneerName;
          }
          updateURL(t, e = !1) {
            const s = { ...(e && { __remove: "all", keepTime: !1 }) };
            this._app.getManager("router").navigate({}, `/watch/${t}`, s);
          }
          onWatchClick() {
            const t = this._app.getManager("camera")?._isTransitioning;
            if (t) return;
            const e = "watch" === this._app.getManager("router").currentView;
            if (this._nextFiveData && !e) {
              const t = null === this.slideIndex ? 0 : this.slideIndex,
                e = !0;
              this.setSlideUrlByIndex(t, e);
            } else
              this._app
                .getManager("router")
                .navigate({}, "watch", { __remove: "all", keepTime: !1 });
          }
          setSlideUrlByIndex(t, e = !1) {
            const s = this.getNeoNameByIndex(t);
            return this.updateURL(s, e), s;
          }
          removeReferences() {
            this._app.getManager("label")?.removeWeights(this._labelWeights),
              (this._labelWeights = null),
              this.setSlideIndex(null),
              (this._nextFiveEntities = null);
          }
          setHasRedirected(t) {
            this._hasRedirected = t;
          }
          get hasRedirected() {
            return this._hasRedirected;
          }
          get defaultPlanetTrailWidth() {
            return this._defaultPlanetTrailWidth;
          }
          get backgroundPlanets() {
            return this._backgroundPlanets;
          }
          get slideIndex() {
            return this._slideIndex;
          }
          get nextFiveData() {
            return this._nextFiveData;
          }
          get nextFiveEntities() {
            return this._nextFiveEntities;
          }
          toggleUnit(t) {
            (t = t || "metric" === this._unitType ? "imperial" : "metric"),
              ["metric", "imperial"].includes(t) &&
              this._unitType !== t &&
              ((this._unitType = t),
                this.triggerCallbacks("toggleUnit", [t]));
          }
          get unitType() {
            return this._unitType;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            NEO: function () {
              return NEO;
            },
            NEOUtils: function () {
              return NEOUtils;
            },
          });
        var i = s(5),
          n = s(529);
        class NEO {
          constructor() {
            (this.name = ""),
              (this.pioneerName = ""),
              (this.orbitClass = ""),
              (this.asteroid = !1),
              (this.comet = !1),
              (this.dwarfPlanet = !1),
              (this.neo = !1),
              (this.pho = !1),
              (this.hasSPK = !1),
              (this.absoluteMagnitude = 0),
              (this.diameter = 0),
              (this.diameterEstimated = !1),
              (this.moid = 0),
              (this.spinRate = 0),
              (this.spinRateEstimated = !1),
              (this.spinAxis = new i.Vector3()),
              (this.spinAxisEstimated = !1),
              (this.nextClosestApproachTime = 0),
              (this.nextClosestApproachDistance = 0),
              (this.orbitalElements = new i.OrbitalElements());
          }
        }
        class NEOUtils {
          static async loadNEOs(t) {
            const e = new Map(),
              s = [],
              n = [];
            for (let t = 0; t < 10; t++) n.push(`neos.${t}.v1.dat`);
            n.push("dwarf_planets.v1.dat"), n.push("custom.v1.dat");
            for (const o of n)
              s.push(
                t
                  .getDownloader()
                  .download(`$DYNAMIC_ASSETS_URL/ssd/${o}`, !0)
                  .then(async (t) => {
                    if ("cancelled" === t.status) return Promise.resolve();
                    if ("failed" === t.status)
                      return Promise.reject(
                        new Error(
                          'Failed to load asteroid file "' +
                          t.url +
                          '": ' +
                          t.errorMessage,
                        ),
                      );
                    if (!(t.content instanceof ArrayBuffer))
                      return Promise.reject(
                        new Error(
                          'Failed to load asteroid file "' +
                          t.url +
                          '": Not a binary file.',
                        ),
                      );
                    const s = new i.Reader(t.content);
                    if (1 !== s.readUInt16())
                      throw new Error("Invalid version.");
                    const n = s.readUInt32();
                    for (let t = 0; t < n; t++) {
                      const t = new NEO();
                      (t.name = s.readString()),
                        (t.orbitClass = s.readString(3));
                      const i = s.readUInt8();
                      (t.asteroid = (192 & i) >> 6 == 0),
                        (t.comet = (192 & i) >> 6 == 1),
                        (t.dwarfPlanet = (192 & i) >> 6 == 2),
                        (t.neo = (32 & i) >> 5 == 1),
                        (t.pho = (16 & i) >> 4 == 1),
                        (t.hasSPK = (8 & i) >> 3 == 1),
                        (t.diameterEstimated = (1 & i) >> 0 == 1),
                        (t.absoluteMagnitude = s.readFloat32()),
                        (t.diameter = s.readFloat32()),
                        Number.isNaN(t.diameter) &&
                        (t.diameter = 0.652999997138977),
                        t.neo &&
                        ((t.moid = s.readFloat32()),
                          (t.nextClosestApproachTime = s.readFloat32()),
                          (t.nextClosestApproachDistance = s.readFloat32())),
                        (t.orbitalElements.epoch = s.readFloat32()),
                        (t.orbitalElements.eccentricity = s.readFloat32()),
                        (t.orbitalElements.semiMajorAxis = s.readFloat32()),
                        (t.orbitalElements.meanAngularMotion = s.readFloat32()),
                        (t.orbitalElements.meanAnomalyAtEpoch =
                          s.readFloat32()),
                        t.orbitalElements.orbitOrientation.set(
                          s.readFloat32(),
                          s.readFloat32(),
                          s.readFloat32(),
                          s.readFloat32(),
                        );
                      const n = (2 & i) >> 1;
                      (4 & i) >> 2
                        ? ((t.spinRate = s.readFloat32()),
                          (t.spinRateEstimated = !1))
                        : ((t.spinRate = 0.0075092),
                          (t.spinRateEstimated = !0)),
                        n
                          ? (t.spinAxis.set(
                            s.readFloat32(),
                            s.readFloat32(),
                            s.readFloat32(),
                          ),
                            (t.spinAxisEstimated = !1))
                          : (t.spinAxis.set(0, 0, 1),
                            (t.spinAxisEstimated = !0)),
                        (t.pioneerName = t.name.replace(/[- /]/g, "_")),
                        (t.pioneerName = t.pioneerName.replace(
                          /[^a-zA-Z0-9_]/g,
                          "",
                        )),
                        (t.pioneerName = t.pioneerName.toLowerCase()),
                        e.set(t.pioneerName, t);
                    }
                  }),
              );
            return (
              await Promise.all(s),
              e.set("dimorphos", {
                ...e.get("65803_didymos"),
                name: "Dimorphos",
                pioneerName: "dimorphos",
                diameter: 0.17,
              }),
              e
            );
          }
          static getNextClosestApproaches(t, e) {
            const s = [],
              n = i.TimeUtils.now();
            for (const o of t) {
              const t = o[1];
              if (
                t.nextClosestApproachDistance < 7479893.535 &&
                (0 === s.length ||
                  t.nextClosestApproachTime <
                  s.at(-1).nextClosestApproachTime) &&
                t.nextClosestApproachTime >= n
              ) {
                const n = i.Sort.getIndex(
                  t.nextClosestApproachTime,
                  s,
                  (t, e) => t.nextClosestApproachTime < e,
                );
                s.splice(n, 0, t), s.length > e && s.pop();
              }
            }
            return s.map((t) => t.pioneerName);
          }
          static createEntity(t, e) {
            let s = null;
            if (void 0 !== n.Entity.getEntityOptions(t.pioneerName))
              s = n.Entity.create(t.pioneerName, e);
            else {
              const r = {
                radius: t.diameter / 2,
                label: t.name,
                parents: [[Number.NEGATIVE_INFINITY, "sun"]],
                trail: { length: 15768e3 },
                model: {
                  url:
                    "$STATIC_ASSETS_URL/models/generic/" +
                    o[Math.floor(3 * Math.random())],
                  scale: [t.diameter / 2, t.diameter / 2, t.diameter / 2],
                },
                controllers: [
                  { type: "fixed", orientation: i.Quaternion.Identity },
                  {
                    type: "spin",
                    axis: t.spinAxis,
                    periodInHours: Math.PI / t.spinRate / 3600,
                    relativeToTime: 0,
                  },
                  {
                    type: "custom",
                    func: (e) => {
                      const s = e.addController("orbitalElements");
                      return (
                        s.addOrbitalElements(
                          -3155716758.816,
                          t.orbitalElements,
                        ),
                        0 !== t.nextClosestApproachDistance ||
                          isNaN(t.nextClosestApproachTime)
                          ? s.addOrbitalElements(
                            3155716758.816,
                            t.orbitalElements,
                          )
                          : s.addOrbitalElements(
                            t.nextClosestApproachTime,
                            t.orbitalElements,
                          ),
                        s
                      );
                    },
                  },
                ],
              };
              if (
                (t.hasSPK &&
                  r.controllers.push({
                    type: "dynamo",
                    url: `ssd/${t.pioneerName}/earth/orb/`,
                  }),
                  (s = n.Entity.createFromOptions(t.pioneerName, r, e)),
                  t.hasSPK)
              ) {
                const e = s.getControllerByClass(i.DynamoController);
                e.getLoadedPromise().then(() => {
                  if (
                    (s.addParentingTableEntry(e.getCoverage().min, "earth"),
                      s.addParentingTableEntry(
                        e.getCoverage().max,
                        0 !== t.nextClosestApproachDistance ? "sun" : "",
                      ),
                      0 === t.nextClosestApproachDistance)
                  ) {
                    const n = s.getControllerByClass(
                      i.OrbitalElementsController,
                    );
                    n.removeOrbitalElements(1),
                      n.addOrbitalElements(
                        e.getCoverage().max,
                        t.orbitalElements,
                      );
                  }
                });
              }
            }
            return s;
          }
        }
        const o = [
          "asteroid_1/generic_asteroid_1.gltf",
          "asteroid_2/generic_asteroid_2.gltf",
          "asteroid_3/generic_asteroid_3.gltf",
        ];
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LinkManager: function () {
              return LinkManager;
            },
          });
        var i = s(1);
        class LinkManager extends i.BaseManager {
          getParsedLink(t) {
            const e = t.startsWith("/") ? t.slice(1) : t,
              s = this._app?.getManager("content")?.getEntityInfo(e);
            if (s) {
              if ("sun" === s.id) return `/stars/${e}`;
              if ("moon" === s.id) return `/moons/${e}`;
              if ("Spacecraft" === s.category) return `/missions/${e}`;
              if ("Planet" === s.category) return `/planets/${e}`;
            }
            return `/${e}`;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SelectionManager: function () {
              return SelectionManager;
            },
          });
        var i = s(1);
        class SelectionManager extends i.SelectionManager {
          _getLink(t) {
            const e = super._getLink(t);
            return this._app.getManager("link")?.getParsedLink?.(e) || e;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            LabelManager: function () {
              return LabelManager;
            },
          });
        var i = s(1);
        class LabelManager extends i.LabelManager {
          _getLink(t) {
            const e = super._getLink(t);
            return this._app.getManager("link")?.getParsedLink?.(e) || e;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TrailManager: function () {
              return TrailManager;
            },
          });
        var i = s(1);
        class TrailManager extends i.TrailManager {
          toggleTrails(t) {
            super.toggleTrails(t, { scene: this._scene }), this.toggleOrbits(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidMenuTop: function () {
              return AsteroidMenuTop;
            },
          });
        var i = s(716);
        class AsteroidMenuTop extends i.Navigation {
          init() {
            super.init(),
              this.bindFunctions(["isFilteringChange"]),
              this._callbackRegistry.push({
                emitter: this._app.getManager("filters"),
                event: "isFilteringChange",
                callback: this.isFilteringChange,
              });
            const t = this._app.getManager("router")._currentRoute,
              e = t?.query || "",
              s = {
                position: "top",
                entry: [
                  {
                    title: "Learn学习",
                    svg: "./assets/default/svg/learn.svg",
                    active: e.includes("modal=learn"),
                    onClick: () => {
                      const t = this._app.getManager("router");
                      t.navigate({ modal: "learn" }, t.currentRoute.url);
                    },
                  },
                  {
                    title: "Asteroid Watch小行星观察",
                    svg: "./assets/svg/asteroid.svg",
                    onClick: () => {
                      this._app.getManager("watch").onWatchClick();
                    },
                    active: t.url?.includes("watch"),
                  },
                  {
                    title: "Filters过滤",
                    svg: "./assets/svg/filter_inactive.svg",
                    active: e.includes("modal=filters"),
                    onClick: () => {
                      this._app
                        .getManager("router")
                        .navigate({ modal: "filters" });
                    },
                  },
                ],
              };
            super.setup(s);
          }
          async onQueryChange({ modal: t } = {}) {
            super.toggleActive("Learn", "learn" === t),
              super.toggleActive("Filters", "filters" === t);
          }
          isFilteringChange(t) {
            super.toggleBadge("Filters", t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Navigation: function () {
              return Navigation;
            },
          });
        var i = s(1),
          n = s(717),
          o = s.n(n);
        s(718);
        class Navigation extends i.BaseComponent {
          constructor(t) {
            super(t, null, { position: "top" }),
              (this._entries = {}),
              this.bindFunctions(["toggleBadge"]);
          }
          setup(t) {
            const { position: e = "top", entry: s = [] } = t;
            this.setState({ position: e }),
              (this._children.list.innerHTML = "");
            for (let t = 0; t < s.length; t += 1) {
              const e = document.createElement("div");
              (e.className = "clickable"),
                s[t].active && e.classList.add("active");
              const i = document.createElement("button");
              if (
                ((i.innerHTML = `<div><h2>${s[t].title}</h2><div class="navigation-badge"></div></div>`),
                  s[t].svg)
              ) {
                const i = document.createElement("img");
                (i.src = s[t].svg), (i.alt = s[t].title), e.appendChild(i);
              }
              e.appendChild(i),
                s[t].onClick &&
                (e.addEventListener(
                  "click",
                  (e) => {
                    e.preventDefault(), s[t].onClick(s[t], e);
                  },
                  !1,
                ),
                  e.addEventListener(
                    "touchend",
                    (e) => {
                      e.preventDefault(), s[t].onClick(s[t], e);
                    },
                    !1,
                  )),
                (this._entries[s[t].title] = { entry: s[t], element: e }),
                this._children.list.append(e);
            }
          }
          toggleActive(t, e) {
            if (this._entries[t]) {
              const s = this._entries[t].element;
              s.classList.contains("active") !== e &&
                s.classList.toggle("active");
            }
          }
          toggleBadge(t, e) {
            if (this._entries[t]) {
              const s = this._entries[t].element;
              s.classList.contains("badged") !== e &&
                s.classList.toggle("badged");
            }
          }
        }
        Navigation.html = o();
      },
      function (t) {
        t.exports =
          '<nav key="list" class="navigation menu-div {{position}} {{isVisibleClass}}"></nav>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidMenuBottom: function () {
              return AsteroidMenuBottom;
            },
          });
        var i = s(716);
        class AsteroidMenuBottom extends i.Navigation {
          init() {
            super.init(),
              this.bindFunctions(["isFilteringChange"]),
              this._callbackRegistry.push({
                emitter: this._app.getManager("filters"),
                event: "isFilteringChange",
                callback: this.isFilteringChange,
              });
            const t = {
              position: "bottom",
              entry: [
                {
                  title: "Learn",
                  svg: "./assets/default/svg/learn.svg",
                  onClick: () => {
                    this._app.getManager("router").navigate({ modal: "learn" });
                  },
                },
                {
                  title: "Asteroid Watch",
                  svg: "./assets/svg/asteroid.svg",
                  onClick: () => {
                    this._app.getManager("watch").onWatchClick();
                  },
                },
                {
                  title: "Filters",
                  svg: "./assets/svg/filter_inactive.svg",
                  onClick: () => {
                    this._app
                      .getManager("router")
                      .navigate({ modal: "filters" });
                  },
                },
              ],
            };
            super.setup(t);
          }
          isFilteringChange(t) {
            super.toggleBadge("Filters", t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidModals: function () {
              return AsteroidModals;
            },
          });
        var i = s(1),
          n = s(721),
          o = s(731),
          r = s.n(o);
        s(732);
        class AsteroidModals extends i.BaseComponent {
          constructor(t, e) {
            super(t, null, { title: "", isVisible: !1, ...e }),
              (this._components = ["filtersModal", "learnModal"]),
              this._eventNames.push("overlay"),
              this._initCallbacks(),
              (this._modals = {}),
              (this._activeModal = null),
              this.bindFunctions(["close"]);
          }
          async init() {
            super.init(),
              (this._modals.filters =
                await this._app.addComponentWithPlaceholder(
                  { type: n.FiltersModal, name: "filtersModal" },
                  this._element,
                )),
              (this._modals.learn = await this._app.addComponentWithPlaceholder(
                { type: n.LearnModal, name: "learnModal" },
                this._element,
              )),
              (this._iconEl = document.createElement("img")),
              this._children.header?.prepend(this._iconEl);
          }
          onQueryChange({ cancelToken: t, modal: e } = {}) {
            if (t && t.isCanceled) return;
            const s = this._modals[e] ?? null;
            if (
              this._activeModal !== s &&
              ((this._activeModal = s),
                this._disableAllModals(),
                this._activeModal)
            ) {
              const { _title: t, _svg: e } = this._activeModal;
              this.setState({ title: t }),
                (this._iconEl.src = e ?? ""),
                (this._iconEl.alt = t ?? ""),
                this.setEnabled(!0),
                this.show(),
                this._activeModal.setEnabled(!0),
                this._activeModal.show();
            }
          }
          close() {
            const t = this._app.getManager("router");
            t.navigate({ __remove: ["modal"] }, t.currentRoute.url, {
              keepTime: !0,
            });
          }
          get components() {
            return this._components;
          }
          _disableAllModals() {
            Object.values(this._modals).forEach((t) => {
              t.hide(), t.setEnabled(!1);
            }),
              this.hide(),
              this.setEnabled(!1);
          }
        }
        AsteroidModals.html = r();
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FiltersModal: function () {
              return i.default;
            },
            LearnModal: function () {
              return n.default;
            },
          });
        var i = s(722),
          n = s(726);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(723);
        s(725);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(1),
          n = s(724),
          o = s.n(n);
        s(725);
        class FiltersModal extends i.BaseComponent {
          constructor(t, e) {
            super(t, null, { ...e }),
              (this.state = { asteroids: !1, comets: !1, phos: !1 }),
              (this._app = t),
              (this._title = "Filters"),
              (this._svg = "./assets/svg/filter_inactive.svg"),
              (this._lastSize = null),
              this.bindFunctions(["_filterCallback"]);
          }
          init() {
            super.init(),
              (this.filtersManager = this._app.getManager("filters"));
          }
          onShow() {
            const t = this.filtersManager.getFilters();
            (document.getElementById("filters-asteroids-checkbox").checked =
              t.asteroids),
              (document.getElementById("filters-comets-checkbox").checked =
                t.comets),
              (document.getElementById("filters-phos-toggle").checked = t.phos),
              (this._lastSize =
                null != this._lastSize ? this._lastSize : this._app.neos.size),
              (document.getElementsByClassName(
                "filters-modal-count",
              )[0].innerHTML =
                (null != this._lastSize
                  ? `${this._lastSize.toLocaleString()}`
                  : "All") + " objects");
          }
          show() {
            this.onShow(), super.show();
          }
          handleAsteroidCheck(t) {
            const e = t.target.checked;
            this.filtersManager.setFilter("asteroids", e, this._filterCallback);
          }
          handleCometCheck(t) {
            const e = t.target.checked;
            this.filtersManager.setFilter("comets", e, this._filterCallback);
          }
          handlePHOToggle(t) {
            const e = t.target.checked;
            this.filtersManager.setFilter("phos", e, this._filterCallback);
          }
          _filterCallback(t) {
            (this._lastSize = t),
              (document.getElementsByClassName(
                "filters-modal-count",
              )[0].innerHTML = `${this._lastSize?.toLocaleString()} objects`);
          }
          handleResetFilters() {
            const t = this.filtersManager.getFilters();
            t.asteroids &&
              document.getElementById("filters-asteroids-checkbox").click(),
              t.comets &&
              document.getElementById("filters-comets-checkbox").click(),
              t.phos && document.getElementById("filters-phos-toggle").click(),
              (this._lastSize = this._app.neos.size);
          }
          handleHelp(t) {
            this._app
              .getComponent("definitionOverlay")
              .navigateToDefinition(t.target?.dataset?.def);
          }
        }
        (FiltersModal.html = o()), (e.default = FiltersModal);
      },
      function (t) {
        t.exports =
          '<div key="filtersModal" class="filters-modal {{isVisibleClass}}">\n  <h4 class="filters-modal-description">\n    Apply a variety of filters to visualize the different groups of astronomical\n    objects\n  </h4>\n  <div class="filters-modal-body">\n    <div class="filters-section">\n      <div class="filters-section-h">Composition</div>\n      <div class="filters-section-content">\n        <div class="filters-section-item">\n          <div class="filters-section-h2">\n            <div>\n              <div>Asteroids</div>\n              <div\n                class="filters-help"\n                data-def="asteroid"\n                onclick="handleHelp"\n              >\n                <svg width="18" height="18" viewBox="0 0 14 14" fill="none">\n                  <path\n                    d="M7.8127 8.62501H6.1877C6.1877 7.00001 7.1627 6.51251 7.8127 6.18751C8.05645 6.10626 8.21895 6.02501 8.38144 5.86251C8.4627 5.78126 8.6252 5.61876 8.4627 5.29376C8.3002 4.88751 7.8127 4.48126 7.08145 4.48126C5.94395 4.48126 5.78145 5.45626 5.7002 5.70001L4.0752 5.45626C4.15645 4.56251 4.8877 2.85626 7.0002 2.85626C8.3002 2.85626 9.4377 3.58751 9.9252 4.64376C10.2502 5.53751 10.0877 6.43126 9.4377 7.08126C9.1127 7.40626 8.7877 7.56876 8.4627 7.65001C7.9752 7.97501 7.8127 7.81251 7.8127 8.62501Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M7 1.3125C10.1687 1.3125 12.6875 3.83125 12.6875 7C12.6875 10.1687 10.1687 12.6875 7 12.6875C3.83125 12.6875 1.3125 10.1687 1.3125 7C1.3125 3.83125 3.83125 1.3125 7 1.3125ZM7 0.5C3.425 0.5 0.5 3.425 0.5 7C0.5 10.575 3.425 13.5 7 13.5C10.575 13.5 13.5 10.575 13.5 7C13.5 3.425 10.575 0.5 7 0.5Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M6.10645 9.4375H7.73145V11.0625H6.10645V9.4375Z"\n                    fill="currentColor"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div>Made up of rock, metals and dust</div>\n          </div>\n          <div>\n            <div class="eyes-checkbox">\n              <input\n                type="checkbox"\n                id="filters-asteroids-checkbox"\n                onclick="handleAsteroidCheck"\n              />\n              <label for="filters-asteroids-checkbox"></label>\n            </div>\n          </div>\n        </div>\n\n        <div class="filters-section-item">\n          <div class="filters-section-h2">\n            <div>\n              <div>Comets</div>\n              <div class="filters-help" data-def="comet" onclick="handleHelp">\n                <svg width="18" height="18" viewBox="0 0 14 14" fill="none">\n                  <path\n                    d="M7.8127 8.62501H6.1877C6.1877 7.00001 7.1627 6.51251 7.8127 6.18751C8.05645 6.10626 8.21895 6.02501 8.38144 5.86251C8.4627 5.78126 8.6252 5.61876 8.4627 5.29376C8.3002 4.88751 7.8127 4.48126 7.08145 4.48126C5.94395 4.48126 5.78145 5.45626 5.7002 5.70001L4.0752 5.45626C4.15645 4.56251 4.8877 2.85626 7.0002 2.85626C8.3002 2.85626 9.4377 3.58751 9.9252 4.64376C10.2502 5.53751 10.0877 6.43126 9.4377 7.08126C9.1127 7.40626 8.7877 7.56876 8.4627 7.65001C7.9752 7.97501 7.8127 7.81251 7.8127 8.62501Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M7 1.3125C10.1687 1.3125 12.6875 3.83125 12.6875 7C12.6875 10.1687 10.1687 12.6875 7 12.6875C3.83125 12.6875 1.3125 10.1687 1.3125 7C1.3125 3.83125 3.83125 1.3125 7 1.3125ZM7 0.5C3.425 0.5 0.5 3.425 0.5 7C0.5 10.575 3.425 13.5 7 13.5C10.575 13.5 13.5 10.575 13.5 7C13.5 3.425 10.575 0.5 7 0.5Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M6.10645 9.4375H7.73145V11.0625H6.10645V9.4375Z"\n                    fill="currentColor"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div>Made up of rock, dust and frozen ices</div>\n          </div>\n          <div>\n            <div class="eyes-checkbox">\n              <input\n                type="checkbox"\n                id="filters-comets-checkbox"\n                onclick="handleCometCheck"\n              />\n              <label for="filters-comets-checkbox"></label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class="filters-section">\n      <div class="filters-section-h">Potential Threats</div>\n      <div class="filters-section-content">\n        <div class="filters-section-item">\n          <div class="filters-section-h2">\n            <div>\n              <div>PHOs</div>\n              <div class="filters-help" data-def="pho" onclick="handleHelp">\n                <svg width="18" height="18" viewBox="0 0 14 14" fill="none">\n                  <path\n                    d="M7.8127 8.62501H6.1877C6.1877 7.00001 7.1627 6.51251 7.8127 6.18751C8.05645 6.10626 8.21895 6.02501 8.38144 5.86251C8.4627 5.78126 8.6252 5.61876 8.4627 5.29376C8.3002 4.88751 7.8127 4.48126 7.08145 4.48126C5.94395 4.48126 5.78145 5.45626 5.7002 5.70001L4.0752 5.45626C4.15645 4.56251 4.8877 2.85626 7.0002 2.85626C8.3002 2.85626 9.4377 3.58751 9.9252 4.64376C10.2502 5.53751 10.0877 6.43126 9.4377 7.08126C9.1127 7.40626 8.7877 7.56876 8.4627 7.65001C7.9752 7.97501 7.8127 7.81251 7.8127 8.62501Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M7 1.3125C10.1687 1.3125 12.6875 3.83125 12.6875 7C12.6875 10.1687 10.1687 12.6875 7 12.6875C3.83125 12.6875 1.3125 10.1687 1.3125 7C1.3125 3.83125 3.83125 1.3125 7 1.3125ZM7 0.5C3.425 0.5 0.5 3.425 0.5 7C0.5 10.575 3.425 13.5 7 13.5C10.575 13.5 13.5 10.575 13.5 7C13.5 3.425 10.575 0.5 7 0.5Z"\n                    fill="currentColor"\n                  />\n                  <path\n                    d="M6.10645 9.4375H7.73145V11.0625H6.10645V9.4375Z"\n                    fill="currentColor"\n                  />\n                </svg>\n              </div>\n            </div>\n            <div>Potentially hazardous objects</div>\n          </div>\n          <div>\n            <div class="eyes-toggle">\n              <input\n                type="checkbox"\n                id="filters-phos-toggle"\n                onclick="handlePHOToggle"\n              />\n              <label for="filters-phos-toggle"></label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class="filters-modal-footer">\n    <div class="filters-modal-count"></div>\n    <button class="filters-modal-reset" onclick="handleResetFilters">\n      Clear all filters\n    </button>\n  </div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(727);
        s(729);
        e.default = i.default;
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(1),
          n = s(728),
          o = s.n(n),
          r = (s(729), s(730));
        class LearnModal extends i.BaseComponent {
          constructor(t, e) {
            super(t, null, { ...e }),
              (this._title = "Learn"),
              (this._svg = "./assets/default/svg/learn.svg");
          }
          goToStory(t) {
            const e = this._app.getManager("router");
            document.getElementsByClassName("asteroid-modal-close")[0]?.click(),
              setTimeout(() => {
                e.navigate({ __remove: ["modal"] }, `/story/${t.path}`);
              }, 200);
          }
          onShow() {
            const t = r || [],
              e = this._children.asteroidLearnModalBody;
            e &&
              ((e.textContent = ""),
                t.forEach((t) => {
                  const s = [
                    '<div class="learn-modal-story-card-hover"></div>',
                    `<h3 class="learn-modal-story-card-title">${t.title}</h3>`,
                    t.questions
                      .map(
                        (t) =>
                          `<div class="learn-modal-story-card-question">${t}</div>`,
                      )
                      .join("\n"),
                  ].join("\n"),
                    i = document.createElement("div");
                  (i.className = "learn-modal-story-card"),
                    (i.innerHTML = s),
                    i.addEventListener("click", () => {
                      this.goToStory(t);
                    }),
                    e.append(i);
                }));
          }
          show() {
            this.onShow(), super.show();
          }
        }
        (LearnModal.html = o()), (e.default = LearnModal);
      },
      function (t) {
        t.exports =
          '<div class="learn-modal {{isVisibleClass}}">\n  <h4 class="learn-modal-description">\n    Take a deeper dive into Asteroids with our interactive scrollable stories\n  </h4>\n  <div\n    key="asteroidLearnModalBody"\n    id="asteroid-learn-modal-body"\n    class="learn-modal-body"\n  ></div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '[{"title":"Asteroids 101","path":"asteroids_101","questions":["What are asteroids?","What does this app show me?"]},{"title":"Close Approaches","path":"asteroids_close_approach","questions":["What is a close approach?","Are we in danger of impact?"]},{"title":"Missions","path":"asteroids_missions","questions":["Can we visit an asteroid?","What can missions achieve?"]}]',
        );
      },
      function (t) {
        t.exports =
          '<div id="asteroid-modals" class="{{isVisibleClass}}">\n  <div class="asteroid-modals-backdrop" onclick="close"></div>\n  <div class="asteroid-modal">\n    <div key="header" class="asteroid-modal-header">\n      <h3 class="asteroid-modal-title">{{title}}</h3>\n      <div class="asteroid-modal-close" onclick="close">\n        <span class="icon icon-close clickable"></span>\n      </div>\n      <div class="asteroid-modal-collapse" onclick="close">\n        <svg width="22" height="22" viewBox="0 0 22 22" fill="none">\n          <path\n            d="M14.234 8.4695L11 11.7035L7.766 8.4695L6.275 9.95L11 14.675L15.725 9.95L14.234 8.4695ZM11 0.5C5.204 0.5 0.5 5.204 0.5 11C0.5 16.796 5.204 21.5 11 21.5C16.796 21.5 21.5 16.796 21.5 11C21.5 5.204 16.796 0.5 11 0.5ZM11 19.4C6.359 19.4 2.6 15.641 2.6 11C2.6 6.359 6.359 2.6 11 2.6C15.641 2.6 19.4 6.359 19.4 11C19.4 15.641 15.641 19.4 11 19.4Z"\n            fill="currentColor" />\n        </svg>\n      </div>\n    </div>\n    <div class="asteroid-modal-content scrollable">\n      <FiltersModal></FiltersModal>\n      <LearnModal></LearnModal>\n    </div>\n  </div>\n</div>';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            HomeButton: function () {
              return HomeButton;
            },
          });
        var i = s(1);
        s(734);
        class HomeButton extends i.BaseComponent {
          init() {
            (this._element = document.createElement("h5")),
              (this._element.innerText = "See all asteroids"),
              (this._element.className =
                "home-button clickable {{isVisibleClass}}"),
              this._element.addEventListener("click", () => {
                this._app
                  .getManager("router")
                  .navigate({ __remove: "all" }, "/home");
              }),
              super.init();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            WatchPanel: function () {
              return WatchPanel;
            },
          });
        var i = s(1),
          n = s(736),
          o = s(739);
        s(710), s(742);
        class WatchPanel extends i.CarouselPanel {
          constructor(t, e) {
            super(t, {
              panelTypeClass: "watch-panel",
              carouselClass: "watch-carousel",
              paginationClass: "watch-carousel-fraction",
              prevButtonClass: "watch-carousel-prev",
              nextButtonClass: "watch-carousel-next",
              title: "Asteroid Watch",
              caption: "The next five closest approaches to Earth",
              headerIconClass: "asteroid",
              ...e,
            }),
              (this.shouldBeExpanded = null),
              (this._onSlideChange = ({ realIndex: t }) => {
                const e = this._app.getManager("watch"),
                  s = e.getNeoNameByIndex(t);
                e.updateURL(s);
              });
          }
          populate(t) {
            t.forEach((t) => {
              const e = new o.WatchCard(this._app);
              e.init(), e.setTarget(t), this._components.push(e);
              const s = new n.Countdown(this._app);
              s.init(),
                s.setTimeTarget(t.nextClosestApproachTime),
                this._components.push(s),
                this.addSlide([e.element, s.element]);
            });
          }
          setExpandState() {
            super.setExpandState(this.shouldBeExpanded);
          }
          show() {
            this.setExpandState(), super.show(!1);
          }
          expand() {
            const t = this._app.getManager("watch"),
              e = this._swiper?.realIndex;
            t.setSlideUrlByIndex(e);
          }
          collapse() {
            this._app.getManager("watch").updateURL("");
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Countdown: function () {
              return Countdown;
            },
          });
        var i = s(1),
          n = s(5),
          o = s(737),
          r = s.n(o);
        s(738);
        class Countdown extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, {
              isVisible: !0,
              tText: "T -",
              numDays: "00",
              numHours: "00",
              numMinutes: "00",
              numSeconds: "00",
              ...e,
            }),
              (this._timeTarget = null),
              (this._remainingSeconds = null),
              this.bindFunctions(["update"]);
          }
          init() {
            super.init(),
              this._callbackRegistry.push({
                emitter: this._app.getManager("time"),
                event: "update",
                callback: this.update,
              });
          }
          _parseRemaining(t) {
            const e = 3600;
            let s = parseInt(Math.abs(t), 10);
            const i = Math.floor(s / 86400);
            s -= 86400 * i;
            const n = Math.floor(s / e);
            s -= n * e;
            const o = Math.floor(s / 60);
            return (
              (s -= 60 * o),
              {
                tText: t > 0 ? "T﹣" : "T﹢",
                numDays: String(i).padStart(2, "0"),
                numHours: String(n).padStart(2, "0"),
                numMinutes: String(o).padStart(2, "0"),
                numSeconds: String(s).padStart(2, "0"),
              }
            );
          }
          update(t) {
            if (!this._state.isVisible) return;
            const e =
              this._app?._pioneer?.getTime() ||
              n.TimeUtils.unixToEt(0.001 * t.valueOf()),
              s = Math.round(this._timeTarget - e);
            if (s !== this._remainingSeconds) {
              const {
                tText: t,
                numDays: e,
                numHours: i,
                numMinutes: n,
                numSeconds: o,
              } = this._parseRemaining(s);
              this.setState({
                tText: t,
                numDays: e,
                numHours: i,
                numMinutes: n,
                numSeconds: o,
              }),
                (this._remainingSeconds = s);
            }
          }
          setTimeTarget(t) {
            this._timeTarget = t;
          }
          getTimeTarget() {
            return this._timeTarget;
          }
          hide() {
            console.log("hide"), super.hide();
          }
        }
        Countdown.html = r();
      },
      function (t) {
        t.exports =
          '<div class="countdown {{isVisibleClass}}">\n\t<span class="countdown-title small semi">LIVE COUNTDOWN</span>\n\t<div class="digits-container">\n\t\t<h5 class="digit t-text semi">{{tText}}</h5>\n\t\t<div class="digit-block days">\n\t\t\t<h3 class="digit">{{numDays}}</h3>\n\t\t\t<span class="digit-unit tiny semi">DAYS</span>\n\t\t</div>\n\t\t<h4 class="digit digit-colon semi">:</h4>\n\t\t<div class="digit-block hours">\n\t\t\t<h3 class="digit">{{numHours}}</h3>\n\t\t\t<span class="digit-unit tiny semi">HOURS</span>\n\t\t</div>\n\t\t<h4 class="digit digit-colon semi">:</h4>\n\t\t<div class="digit-block minutes">\n\t\t\t<h3 class="digit">{{numMinutes}}</h3>\n\t\t\t<span class="digit-unit tiny semi">MINUTES</span>\n\t\t</div>\n\t\t<h4 class="digit digit-colon semi">:</h4>\n\t\t<div class="digit-block seconds">\n\t\t\t<h3 class="digit">{{numSeconds}}</h3>\n\t\t\t<span class="digit-unit tiny semi">SECONDS</span>\n\t\t</div>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            WatchCard: function () {
              return WatchCard;
            },
          });
        var i = s(1),
          n = s(5),
          o = (s(710), s(740)),
          r = s.n(o);
        s(741);
        class WatchCard extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, {
              title: "Asteroid Name",
              date: "April 13, 2029",
              time: "10:52am",
              diameterUnit: "km",
              diameter: "0.5",
              diameterEstimatedText: "",
              diameterRaw: 0.5,
              distanceUnit: "km",
              distance: "512,321",
              distanceRaw: 512321,
              unitType: "metric",
              ...e,
            }),
              this.bindFunctions(["toggleUnit"]);
          }
          init() {
            super.init(),
              this._callbackRegistry.push({
                emitter: this._app.getManager("watch"),
                event: "toggleUnit",
                callback: this.toggleUnit,
              });
          }
          handleToggleUnit(t) {
            this._app.getManager("watch")?.toggleUnit();
          }
          toggleUnit(t) {
            const e = "metric" === t,
              s = 1.609344,
              { diameterRaw: i, distanceRaw: n } = this._state,
              o = i || 0;
            let r = o,
              a = e ? "km" : "mi";
            const l = n || 0;
            let c = l,
              h = e ? "km" : "mi";
            e
              ? (r < 1 && ((a = "m"), (r *= 1e3)),
                c < 1 && ((h = "m"), (c *= 1e3)))
              : ((r = o / s),
                (c = l / s),
                r < 1 && ((a = "ft"), (r *= 5280)),
                c < 1 && ((h = "ft"), (c *= 5280))),
              this.setState({
                diameterUnit: a,
                diameter: this._parseDiameter(r),
                distanceUnit: h,
                distance: `${Math.round(c).toLocaleString(void 0)}`,
                unitType: t,
              });
          }
          _parseDiameter(t) {
            return parseFloat(t).toFixed(1).replace(/\.0+$/, "");
          }
          setTarget(t) {
            const {
              name: e,
              nextClosestApproachTime: s,
              nextClosestApproachDistance: i,
              diameter: o,
              diameterEstimated: r,
            } = t,
              a = n.TimeUtils.etToUnix(s),
              l = new Date(1e3 * a);
            this.setState({
              title: e,
              date: l.toLocaleDateString(void 0, {
                year: "numeric",
                month: "short",
                day: "numeric",
              }),
              time: l.toLocaleTimeString(void 0),
              diameter: this._parseDiameter(o),
              diameterRaw: o,
              diameterEstimatedText: r ? "〚estimated〛" : "",
              distance: `${Math.round(i).toLocaleString(void 0)}`,
              distanceRaw: i,
            }),
              this.toggleUnit(this._state.unitType);
          }
        }
        WatchCard.html = r();
      },
      function (t) {
        t.exports =
          '<div class="watch-card">\n\t<div class="text-group">\n\t\t<h3 class="semi">{{title}}</h3>\n\t\t<div class="date-block">\n\t\t\t<span class="date-label small">DATE</span>\n\t\t\t<div class="date-text">\n\t\t\t\t<h5 class="date-day semi">{{date}}</h5>\n\t\t\t\t<span class="date-time small">{{time}}</span>\n\t\t\t</div>\n\n\t\t</div>\n\t\t<div class="distance-block">\n\t\t\t<span class="distance-label small">DISTANCE</span>\n\t\t\t<div class="distance-text">\n\t\t\t\t<h5 class="distance-value semi">{{distance}}</h5>\n\t\t\t\t<h5 class="distance-unit clickable" onclick="handleToggleUnit">{{distanceUnit}}</h5>\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n\t<div class="rock-group">\n\t\t<div class="icon rock"></div>\n\t\t<div class="icon ruler"></div>\n\t\t<div class="diameter-text">\n\t\t\t<span class="diameter-value small semi">{{diameter}}</span>\n\t\t\t<span class="diameter-unit small clickable" onclick="handleToggleUnit">{{diameterUnit}}</span>\n\t\t\t<span class="diameter-estimated">{{diameterEstimatedText}}</span>\n\t\t</div>\n\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidPanel: function () {
              return AsteroidPanel;
            },
          });
        var i = s(1),
          n = s(5);
        s(744);
        class AsteroidPanel extends i.CarouselPanel {
          constructor(t, e) {
            super(t, {
              panelTypeClass: "asteroid-panel",
              carouselClass: "asteroid-carousel",
              prevButtonClass: "asteroid-carousel-prev",
              nextButtonClass: "asteroid-carousel-next",
              title: "Asteroid Panel",
              caption: "",
              headerIconClass: "asteroid",
              ...e,
            }),
              (this._isPopulated = !1),
              (this._expandOnShow = !0);
          }
          populate(t, e) {
            const s = t.comet ? "comet" : "asteroid";
            this.setState({ title: t.name, headerIconClass: s });
            const i = [],
              n = this.getEssentialStats(t, e);
            n.length && i.push({ title: "Essential stats", content: n });
            const o = this.getOrbitalPath(t);
            o.length && i.push({ title: "Orbital path", content: o });
            const r = this.getCloseApproach(t, e);
            r.length && i.push({ title: "Close approach", content: r }),
              this.createTabs(i),
              (this._isPopulated = !0);
          }
          getEssentialStats(t, e) {
            const {
              pioneerName: s,
              diameter: o,
              diameterEstimated: r,
              nextClosestApproachTime: a,
            } = t,
              l = this._app._scene.get(s),
              c = this._app._scene.get("earth"),
              h = [];
            e?.stats?.discovery &&
              h.push({ title: "Discovery", content: e.stats.discovery }),
              o &&
              h.push({
                title: "Size",
                content: `<p>Average ${r ? "estimated" : ""} diameter</p>`,
                value: `${i.AppUtils.formatNumber(1e3 * o, 2)} m`,
              });
            const u = new n.Vector3();
            c.getPositionAtTime(u);
            const d = new n.Vector3();
            l.getPositionAtTime(d);
            const p = new n.Vector3();
            p.sub(u, d);
            const m = p.magnitude() / i.AppUtils.conversionTable.auToKm;
            p.isNaN() ||
              h.push({
                title: "Distance",
                content: "<p>Current distance from Earth</p>",
                value: `${i.AppUtils.formatNumber(
                  m,
                  2,
                )} <span class="clickable underline" data-def="au">AU</span>`,
              });
            const _ = new n.Vector3();
            l.getVelocityAtTime(_, a);
            const g = _.magnitude();
            return (
              g &&
              h.push({
                title: "Velocity",
                content: "<p>Current velocity relative to the Sun</p>",
                value: `${i.AppUtils.formatNumber(g, 2)} km/s`,
              }),
              e?.stats?.rotation &&
              h.push({
                title: "Period of Rotation",
                content: "<p>Time to complete one full rotation</p>",
                value: `${i.AppUtils.formatNumber(
                  e.stats.rotation,
                  2,
                )} hours`,
              }),
              h
            );
          }
          getOrbitalPath(t) {
            const { orbitalElements: e } = t,
              s = [];
            if (e) {
              const t = e.getPeriod(),
                o = Math.round(t / 86400),
                r = o / 365,
                a =
                  r >= 1
                    ? `${i.AppUtils.formatNumber(r, 2)} ${1 === r ? "year" : "years"
                    }`
                    : `${i.AppUtils.formatNumber(o, 1)} ${1 === o ? "day" : "days"
                    }`;
              s.push({
                title: "Orbital Period",
                content: "<p>Time to complete one solar orbit</p>",
                value: a,
              });
              const { eccentricity: l } = e;
              l &&
                s.push({
                  title: "Eccentricity",
                  content: "<p>Deviation from circular orbit</p>",
                  value: i.AppUtils.formatNumber(l, 3),
                });
              const c = new n.Quaternion(
                0.9791532214288992,
                0.2031230389823101,
                0,
                0,
              ),
                h = new n.OrbitalElements();
              h.copy(e), h.orbitOrientation.multInverseL(c, h.orbitOrientation);
              const u = h.getPeriapsis();
              u &&
                s.push({
                  title: "Perihelion",
                  content: "<p>Closest distance to the Sun<p/>",
                  value: `${i.AppUtils.formatNumber(
                    u / i.AppUtils.conversionTable.auToKm,
                    2,
                  )} <span class="clickable underline" data-def="au">AU</span>`,
                });
              const d = h.getApoapsis();
              d &&
                s.push({
                  title: "Aphelion",
                  content: "<p>Farthest distance from the Sun</p>",
                  value: `${i.AppUtils.formatNumber(
                    d / i.AppUtils.conversionTable.auToKm,
                    2,
                  )} <span class="clickable underline" data-def="au">AU</span>`,
                });
              const p = h.getInclination();
              p &&
                s.push({
                  title: "Inclination",
                  content: "<p>Angle relative to the x-y ecliptic plane</p>",
                  value: `${i.AppUtils.formatNumber(
                    n.MathUtils.radToDeg(p),
                    3,
                  )} deg`,
                });
            }
            return s;
          }
          getCloseApproach(t, e) {
            const {
              nextClosestApproachDistance: s,
              nextClosestApproachTime: o,
            } = t,
              r = [];
            if (
              (e?.approach?.fact && r.push({ content: e.approach.fact }), o)
            ) {
              const t = n.TimeUtils.etToUnix(o),
                e = new Date(1e3 * t);
              e &&
                r.push({
                  title: "Date",
                  content:
                    '<p>Closest approach to Earth < 0.05 <span class="clickable underline" data-def="au">AU</span></p>',
                  value: i.AppUtils.formatDate(e),
                });
            }
            return (
              s &&
              r.push({
                title: "Distance",
                content: "<p>Nearest distance to Earth</p>",
                value: `${i.AppUtils.formatNumber(s, 0)} km`,
              }),
              r
            );
          }
          show(t = !0) {
            this._isPopulated && super.show(t);
          }
          _destroy() {
            (this._isPopulated = !1), super._destroy();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MissionPanel: function () {
              return MissionPanel;
            },
          });
        var i = s(1);
        s(746);
        class MissionPanel extends i.CarouselPanel {
          constructor(t, e) {
            super(t, {
              panelTypeClass: "mission-panel",
              carouselClass: "mission-carousel",
              prevButtonClass: "mission-carousel-prev",
              nextButtonClass: "mission-carousel-next",
              title: "Mission Panel",
              caption: "",
              headerIconClass: "spacecraft",
              ...e,
            }),
              (this._isPopulated = !1),
              (this._expandOnShow = !0);
          }
          populate(t, e, s, n = {}) {
            const { hideExternalLinks: o } =
              this._app.getManager("router").configs,
              r =
                !0 === o
                  ? this._app.getManager("content").hideExternalLinksInText(t)
                  : t;
            this.setState({ title: r });
            const a = [],
              l =
                !0 === o
                  ? this._app.getManager("content").hideExternalLinksInText(e)
                  : e;
            l &&
              a.push({
                title: "Overview",
                content: [{ content: `<p class='long'>${l}</p>` }],
              });
            const c = n ? Object.values(n).filter(({ visual: t }) => t) : [];
            if (c.length) {
              const t = this.app.getManager("time"),
                e = this.app.getManager("router"),
                n = c.map(
                  ({
                    title: n,
                    start: o,
                    rate: r,
                    target: a,
                    id: l,
                    distance: c,
                    verticleOffset: h,
                    horizontalOffset: u,
                  }) => {
                    const d = o?.valueOf(),
                      p = d && new Date(d);
                    return {
                      title: n,
                      ...(p && {
                        content: `<p>${i.AppUtils.formatDate(p)}</p>`,
                        value: "Watch",
                      }),
                      onClick: async () => {
                        if (o && e?.currentRoute) {
                          "launch" === l && (o = o.clone().add(1, "s")),
                            t.setTime(o),
                            t.setTimeRate(r || 1);
                          const i = {
                            time: t.getTimeUrl(),
                            rate: t.getTimeRate(),
                          };
                          this.app
                            .getComponent("filtersModal")
                            .handleResetFilters(),
                            await e.navigate(i, e.currentRoute.url),
                            a &&
                            (await this.app
                              .getManager("scene")
                              .isListReady([s, a]),
                              await this.app.scene
                                .getEntity(s)
                                .getLoadedPromise(),
                              await this.app.scene
                                .getEntity(a)
                                .getLoadedPromise(),
                              await this.app.cameraScripts.alignObjects(s, a, {
                                duration: 1,
                                distance: c ?? 0.1,
                                verticleOffset: h ?? 0,
                                horizontalOffset: u ?? 0,
                              }));
                        }
                      },
                    };
                  },
                );
              a.push({ title: "Events", content: n });
            }
            this.createTabs(a), (this._isPopulated = !0);
          }
          show(t = !0) {
            this._isPopulated && super.show(t);
          }
          _destroy() {
            (this._isPopulated = !1), super._destroy();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FollowingPanel: function () {
              return FollowingPanel;
            },
          });
        var i = s(1);
        s(748);
        class FollowingPanel extends i.CarouselPanel {
          constructor(t, e) {
            super(t, {
              panelTypeClass: "following-panel",
              title: "",
              preTitle: "following",
              ...e,
            });
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            SplashScreen: function () {
              return SplashScreen;
            },
          });
        var i = s(1),
          n = s(750),
          o = s.n(n);
        s(751);
        class SplashScreen extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, { ...e }),
              (this._dragging = !1),
              (this._mousedownY = null),
              (this._mousewheelDeltaY = 0),
              (this._animationPercent = 0),
              (this._timeout = null),
              (this._lockEnd = !1);
          }
          _displaySplash() {
            (this._element.style.pointerEvents = "all"),
              this._element.addEventListener(
                "mousedown",
                this._onDown.bind(this),
              ),
              this._element.addEventListener(
                "touchstart",
                this._onDown.bind(this),
              ),
              this._element.addEventListener(
                "mousemove",
                this._onMove.bind(this),
              ),
              this._element.addEventListener(
                "touchmove",
                this._onMove.bind(this),
              ),
              this._element.addEventListener("mouseup", this._onUp.bind(this)),
              this._element.addEventListener("touchend", this._onUp.bind(this)),
              this._element.addEventListener("wheel", this._onWheel.bind(this)),
              (this._timeout = setTimeout(() => {
                this._setAnimationPercent(1, !0);
              }, 5500));
            let t = "";
            for (let e = 0; e < 8; e++)
              t += `${parseInt(Math.random() * window.innerWidth)}px ${parseInt(
                Math.random() * window.innerHeight,
              )}px hsl(0deg, 0%, ${parseInt(80 * Math.random()) + 20}%), `;
            this._children.splashScreenStars1.style.boxShadow = t.slice(0, -2);
            let e = "";
            for (let t = 0; t < 24; t++)
              e += `${parseInt(Math.random() * window.innerWidth)}px ${parseInt(
                Math.random() * window.innerHeight,
              )}px hsl(0deg, 0%, ${parseInt(80 * Math.random()) + 20}%), `;
            this._children.splashScreenStars2.style.boxShadow = e.slice(0, -2);
            const s = document.getElementById("pioneer");
            s &&
              ((s.style.transform = "scale(1.2)"),
                (s.style.filter = "brightness(0) grayscale(0)"),
                (s.style.opacity = "0")),
              this.app.endLoadingScreen();
          }
          _onWheel(t) {
            this._setAnimationPercent(1, !0);
          }
          _onDown(t) {
            t.touches?.length > 0 && (t = t.touches[0]),
              (this._mousedownY = t.clientY);
          }
          _onMove(t) {
            t.touches?.length > 0 && (t = t.touches[0]);
            const e = this._mousedownY - t.clientY;
            null != this._mousedownY && e > 6 && (this._dragging = !0),
              this._dragging && this._setAnimationPercent(1, !0);
          }
          _onUp() {
            this._setAnimationPercent(1, !0),
              (this._dragging = !1),
              (this._mousedownY = null);
          }
          _setAnimationPercent(t, e) {
            const s = this._animationPercent;
            this._animationPercent = t;
            const i = "all 0.8s cubic-bezier(0.645, 0.045, 0.355, 1)";
            (this._children.splashScreen.style.transition = e ? i : "unset"),
              (this._children.splashScreen.style.opacity =
                "" + (1 - Math.pow(t, 2))),
              (this._children.splashScreenAsteroid.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenAsteroid.style.width =
                68 - 30 * t + "vh"),
              (this._children.splashScreenAsteroid.style.height =
                68 - 30 * t + "vh"),
              (this._children.splashScreenEnterBackground.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenEnterBackground.style.top = `calc(${86 - 44 * t
                }% - 54px)`),
              (this._children.splashScreenEnterBackground.style.width =
                100 + 1200 * t + "vw"),
              (this._children.splashScreenEnterBackground.style.height =
                100 + 1200 * t + "vw"),
              (this._children.splashScreenText.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenText.style.top = 55 - 40 * t + "%"),
              (this._children.splashScreenTextEyes.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenTextEyes.style.lineHeight =
                60 - 50 * t + "px"),
              (this._children.splashScreenTextOn.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenTextOn.style.lineHeight =
                40 - 50 * t + "px"),
              (this._children.splashScreenTextAsteroids.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenTextAsteroids.style.lineHeight =
                80 - 50 * t + "px"),
              (this._children.splashScreenEnter.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenEnter.style.top = 81 - 30 * t + "%"),
              (this._children.splashScreenStars1.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenStars1.style.marginTop = 1 * t + "%"),
              (this._children.splashScreenStars2.style.transition = e
                ? i
                : "unset"),
              (this._children.splashScreenStars2.style.marginTop =
                0.5 * t + "%");
            const n = document.getElementById("pioneer");
            n &&
              ((n.style.transition = e
                ? "all 1.1s cubic-bezier(0.645, 0.045, 0.355, 1)"
                : "unset"),
                (n.style.transform = `scale(${1.2 - 0.2 * t})`),
                (n.style.opacity = `${t}`),
                (n.style.filter = `brightness(${t}) grayscale(${1 - t})`)),
              this._animationPercent >= 1
                ? (this._element.style.pointerEvents = "none")
                : (this._element.style.pointerEvents = "all"),
              !this._dragging &&
              this._animationPercent >= 1 &&
              !this._lockEnd &&
              ((this._lockEnd = !0),
                setTimeout(
                  () => {
                    clearTimeout(this._timeout),
                      n &&
                      ((n.style.transform = "unset"),
                        (n.style.transition = "unset"),
                        (n.style.opacity = "unset"),
                        (n.style.filter = "unset")),
                      this.destroy();
                  },
                  1100 * (1 - s),
                ));
          }
          __enable() {
            super.__enable();
            const {
              currentRoute: t,
              previousRoute: e,
              homeRoute: s,
            } = this.app.getManager("router");
            void 0 !== e.url || (void 0 !== t.url && t.url !== s)
              ? this.destroy()
              : this._displaySplash();
          }
        }
        SplashScreen.html = o();
      },
      function (t) {
        t.exports =
          '<div class="splash-screen" key="splashScreen">\n\t<div class="splash-screen-wrapper">\n\t\t<div class="splash-screen-stars1" key="splashScreenStars1"></div>\n\t\t<div class="splash-screen-stars2" key="splashScreenStars2"></div>\n\t\t<div class="splash-screen-asteroid" key="splashScreenAsteroid"></div>\n\t\t<div class="splash-screen-logo" key="splashScreenLogo"></div>\n\t\t<div class="splash-screen-text" key="splashScreenText">\n\t\t\t<div key="splashScreenTextEyes">Eyes</div>\n\t\t\t<div key="splashScreenTextOn">on</div>\n\t\t\t<div key="splashScreenTextAsteroids">Asteroids</div>\n\t\t</div>\n\t\t<div class="splash-screen-enter-background" key="splashScreenEnterBackground"></div>\n\t\t<div class="splash-screen-enter" key="splashScreenEnter">\n\t\t\t<div class="splash-screen-swipe">\n\t\t\t\t<div class="splash-screen-swipe-text"></div>\n\t\t\t\t<div class="splash-screen-swipe-arrow" key="splashScreenSwipeArrow">\n\t\t\t\t\t<svg width="67" height="31" viewBox="0 0 67 31" fill="none">\n\t\t\t\t\t\t<path d="M53.8254 1.02176C54.1822 0.794206 54.6633 0.666626 55.1646 0.666626C55.6659 0.666626 56.147 0.794206 56.5038 1.02176C56.6796 1.13365 56.8192 1.26703 56.9145 1.41413C57.0097 1.56122 57.0588 1.7191 57.0588 1.87857C57.0588 2.03804 57.0097 2.19592 56.9145 2.34302C56.8192 2.49011 56.6796 2.62349 56.5038 2.73539L34.8686 16.5823C34.5118 16.8099 34.0307 16.9375 33.5294 16.9375C33.0281 16.9375 32.547 16.8099 32.1902 16.5823L10.555 2.73539C10.3792 2.62349 10.2396 2.49011 10.1444 2.34302C10.0491 2.19592 10 2.03804 10 1.87857C10 1.7191 10.0491 1.56122 10.1444 1.41413C10.2396 1.26703 10.3792 1.13365 10.555 1.02176C10.9118 0.794206 11.3929 0.666626 11.8942 0.666626C12.3955 0.666626 12.8766 0.794206 13.2334 1.02176L33.5308 13.6502L53.8254 1.02176Z" fill="currentColor" fill-opacity="0.8"/>\n\t\t\t\t\t\t<path d="M61.8921 8.43787C62.3908 8.12383 63.0632 7.94775 63.7638 7.94775C64.4643 7.94775 65.1367 8.12383 65.6354 8.43787C65.881 8.5923 66.0761 8.77637 66.2093 8.97938C66.3424 9.18238 66.411 9.40027 66.411 9.62035C66.411 9.84044 66.3424 10.0583 66.2093 10.2613C66.0761 10.4643 65.881 10.6484 65.6354 10.8028L35.3989 29.9129C34.9002 30.227 34.2278 30.4031 33.5273 30.4031C32.8267 30.4031 32.1544 30.227 31.6557 29.9129L1.41921 10.8028C1.17355 10.6484 0.978457 10.4643 0.845295 10.2613C0.712132 10.0583 0.643555 9.84044 0.643555 9.62035C0.643555 9.40027 0.712132 9.18238 0.845295 8.97938C0.978457 8.77637 1.17355 8.5923 1.41921 8.43787C1.91791 8.12383 2.59028 7.94775 3.29082 7.94775C3.99137 7.94775 4.66374 8.12383 5.16244 8.43787L33.5292 25.8664L61.8921 8.43787Z" fill="currentColor"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            DefinitionOverlay: function () {
              return DefinitionOverlay;
            },
          });
        var i = s(1),
          n = s(753),
          o = s.n(n),
          r = s(754);
        s(755);
        class DefinitionOverlay extends i.BaseComponent {
          constructor(t, e = {}) {
            super(t, null, { isVisible: !1 }),
              (this._definitions = r),
              (this._router = null),
              (this._queryUnsubscribe = null),
              (this._scrollbar = null),
              (this._class.fontSize.small = ""),
              (this._activeDef = null),
              (this._prevDef = null),
              Object.assign(this._state, {
                title: null,
                content: null,
                fontSizeClass: "",
              }),
              this.bindFunctions([
                "navigateToDefinition",
                "_updateDefinition",
                "_handleOutsideClick",
                "_handleContainerClick",
              ]);
          }
          init() {
            super.init(), (this._router = this._app.getManager("router"));
          }
          async onQueryChange({ cancelToken: t, definition: e } = {}) {
            (t && t.isCanceled) ||
              ((this._prevDef = this._activeDef),
                (this._activeDef = e),
                this._updateDefinition(this._activeDef, this._prevDef));
          }
          _updateDefinition(t, e) {
            const s = this._definitions[t] ?? !1,
              n = this._definitions[e] ?? !1;
            if (s) {
              const { title: t, html: e, related: o } = s;
              this.setState({ title: t, content: e }),
                (this._scrollbar ??= i.AppUtils.addScrollbar(
                  this._children.contentEl,
                  { sizeAutoCapable: !0 },
                )),
                this._scrollbar.scroll(0, 300);
              const r = o.map((t) => {
                const e = this._definitions[t]?.title,
                  s = document.createElement("div");
                return (
                  (s.className = "definition-related-item small clickable"),
                  s.setAttribute("data-def", t),
                  (s.innerText = e),
                  s
                );
              });
              this._children.relatedEl.replaceChildren(...r), n || this.show();
            } else n && this.hide();
          }
          navigateToDefinition(t) {
            t
              ? this._router.navigate(
                { definition: t },
                this._router.currentRoute.url,
              )
              : !1 === t &&
              this._router.navigate(
                { __remove: ["definition"] },
                this._router.currentRoute.url,
              );
          }
          navigateToStory(t, e = "1") {
            const s = { slide: `slide_${e}` },
              i = `/story/${t}`;
            this.app
              .getManager("router")
              .navigate(s, i, { __remove: ["modal", "definition"] });
          }
          _handleOutsideClick(t) {
            t.stopPropagation(), this.navigateToDefinition(!1);
          }
          _handleContainerClick(t) {
            t.stopPropagation();
            const {
              storyid: e,
              storyslide: s,
              def: i,
            } = t?.target?.dataset || {};
            e ? this.navigateToStory(e, s) : i && this.navigateToDefinition(i);
          }
          __destroy() {
            "function" == typeof this._queryUnsubscribe &&
              this._queryUnsubscribe(),
              (this._queryUnsubscribe = null),
              (this._router = null),
              (this._definitions = null),
              super.__destroy();
          }
        }
        DefinitionOverlay.html = o();
      },
      function (t) {
        t.exports =
          '<div id="definition-overlay" class="definition-overlay {{isVisibleClass}}" onclick="_handleOutsideClick">\n\t<div class="definition-container" onclick="_handleContainerClick">\n\t\t<div class="definition-header">\n\t\t\t<div class="definition-info"><span class="icon icon-info"></span></div>\n\t\t\t<h4 class="definition-title">{{title}}</h4>\n\t\t\t<div class="definition-close" onclick="_handleOutsideClick"><span class="icon icon-close clickable"></span></div>\n\t\t</div>\n\t\t<div class="definition-content os-host-flexbox scrollable" key="contentEl">{{content}}</div>\n\t\t<div class="definition-footer">\n\t\t\t<div class="definition-divider"><span class="x-small">RELATED TERMS</span></div>\n\t\t\t<div class="definition-related" key="relatedEl"></div>\n\t\t</div>\n\t</div>\n</div>\n';
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"asteroid":{"title":"Asteroid","html":"<div><p> Sometimes called minor planets, asteroids are rocky, airless remnants left over from the early formation of our solar system about 4.6 billion years ago.</p><p>Most of this ancient space rubble can be found orbiting the Sun between Mars and Jupiter within the main asteroid belt.</p><p>Unlike <span data-def=\\"comet\\">comets</span>, asteroids remain solid under extreme temperatures; this is due to their formation in the high heat, high density center of the solar nebula.</p><div class=\\"eyes-deepdive\\" data-storyid=\\"asteroids_101\\">Deep Dive into Asteroids 101</div></div>","related":["comet"]},"comet":{"title":"Comet","html":"<div><p>Comets are frozen leftovers from the formation of the solar system composed of dust, rock, and ice. They range from a few kilometers, to hundreds of kilometers wide.</p><p>As they orbit closer to the Sun, they heat up and spew gases and dust into a glowing head that can be larger than a planet. This material forms a tail that stretches millions of kilometers.</p><p>Unlike <span data-def=\\"asteroid\\">asteroids</span>, comets formed in areas of the solar nebula where it was cold enough for water and gases to freeze. Consequently, they are larger and rarer than asteroids, and tend to originate in the far reaches of the solar system.</p></div>","related":["asteroid"]},"neo":{"title":"NEO","html":"<div><h5>Near-Earth object</h5><p> A near-Earth object is any small solar system body whose orbit brings it within a certain distance of Earth. This distance is defined by having the closest approach to the sun, the <span data-def=\\"perihelion\\">perihelion</span>, be within 1.3 <span data-def=\\"au\\">AU</span></p><p>A sub-category of the NEO is the <span data-def=\\"pho\\">PHO</span>.</p></div>","related":["perihelion","au","pho"]},"pho":{"title":"PHO","html":"<div><h5>Potentially Hazardous Object</h5><p>To be defined as potentially hazardous, an object must be:</p><ul><li>Larger than 150 meters (almost 500 feet), roughly twice as big as the Statue of Liberty is tall.</li><li>Approach Earth\'s orbit to within about 7.5 million kilometers (4.6 million miles). This can also be expressed as having a <span data-def=\\"moid\\">MOID</span> of less than 0.05 <span data-def=\\"au\\">AU</span> (within 19.5 <span data-def=\\"ld\\">LD</span>s).</li></ul><p>PHOs can be both <span data-def=\\"asteroid\\">asteroids</span> and <span data-def=\\"comet\\">comets</span>, but the vast majority are asteroids. Learn more about the PHO, Apophis below.</p><div class=\\"eyes-deepdive\\" data-storyid=\\"asteroids_close_approach\\">Deep Dive into Close Approaches</div></div>","related":["asteroid","comet","moid","au","ld"]},"aphelion":{"title":"Aphelion","html":"<div><p>The aphelion is the point in the orbit of an object at which it is farthest from the sun.</p><p>The opposite case is called the <span data-def=\\"perihelion\\">perihelion</span>.</p></div>","related":["perihelion"]},"perihelion":{"title":"Perihelion","html":"<div><p>The perihelion is the point in the orbit of an object at which it is closest to the sun. </p><p>The opposite case is called the  <span data-def=\\"aphelion\\">aphelion</span>.</p></div>","related":["aphelion"]},"moid":{"title":"MOID","html":"<div><h5>Minimum Orbit Intersection Distance</h5><p>The MOID is the minimum distance between the orbits of two objects. It indicates the closest possible approach of two objects to each other.</p><p>For Earth, an object with a MOID of less than or equal to 0.05 <span data-def=\\"au\\">AU</span> is considered a possible <span data-def=\\"pho\\">Potentially Hazardous Object</span> if it\'s large enough.</p></div>","related":["au","pho"]},"oumuamua":{"title":"Oumuamua","html":"<div class=\\"oumuamua-animation\\"><h5>First interstellar object</h5><p>Discovered on October 19, 2017, Oumuamua is unlike any asteroid previously observed.</p><p>Although we don’t have a picture, its unusually shiny surface reflects sunlight with a variation factor of 10. This suggest a severely elongated shape, 5 to 10 times larger than its width. Along with its rapid speed and high eccentricity, it was determined to be of interstellar origin.</p><p>Passing Earth on October 14, 2017 at approximately 0.1618 <span data-def=\\"au\\">AU</span>, Oumuamua is now exiting our solar system, unlikely to ever return.</p></div>","related":["au"]},"au":{"title":"AU","html":"<div><h5>Astronomical Unit</h5><p>An AU is defined as exactly 92,955,807.273 miles (149,597,871 kilometers), or roughly the distance between the Earth and the Sun.</p><p>Jupiter orbits at about 5.2 times the Sun-Earth distance, so Jupiter’s distance from the Sun can be expressed as 5.2 AU.</p><p>1 AU is equivalent to 389,174 <span data-def=\\"ld\\">LD</span>s.</p></div>","related":["moid","ld"]},"ld":{"title":"LD","html":"<div><h5>Lunar Distance</h5><p>A lunar distance is defined exactly as 384,398 kilometers (238,854 miles); the average distance between the centers of the Earth and the Moon.</p><p>More technically, it\'s the length of the semi-major axis of the geocentric lunar orbit.</p><p>1 LD is equivalent to about 0.00257 <span data-def=\\"au\\">AU</span>.</p></div>","related":["au"]}}',
        );
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            TimeSlider: function () {
              return TimeSlider;
            },
          });
        var i = s(1),
          n = (s(757), s(758)),
          o = s.n(n);
        const { debounce: r } = i.AppUtils;
        class TimeSlider extends i.BaseComponent {
          constructor(t, e = {}) {
            (e.config = {
              snapPoints: [
                1, 10, 60, 300, 600, 3600, 86400, 604800, 5256e3, 3154e4,
              ],
              enableDynamicRate: !1,
              defaultCamDistance: 7e8,
              fastestRate: { min: 86400, max: 1577e5 },
              ...e.config,
            }),
              super(t, null, {
                startX: null,
                transX: 0,
                lineMeasures: { left: null, width: null, isMeasured: !1 },
                fastestRate: null,
                rateArray: null,
                realtimeVisibleClass: "hidden",
                ...e,
              }),
              (this._currentRate = null),
              (this._camDistance = null),
              (this._limit = null),
              (this._extraClasses = [
                "offset-right",
                "v-squeezy",
                "h-squeezy",
                "portrait",
                "landscape",
              ]),
              (this._camDistanceResolve = null),
              this.bindFunctions([
                "_onMouseTouchDown",
                "_onMouseTouchMove",
                "_onMouseTouchUp",
                "_getFastestRate",
                "_snapToRate",
                "_getRateArray",
                "_onRealtimeClick",
                "_update",
              ]),
              (this._resizeDebounced = r(this._onResize, 300));
          }
          init() {
            super.init();
            const t = this.app.getManager("time");
            this._callbackRegistry.push(
              { emitter: t, event: "update", callback: this._update },
              {
                emitter: t,
                event: "forcedpause",
                callback: (t, e) => this._setLimit(e),
              },
            ),
              this._addHandlers();
          }
          async onQueryChange({ rate: t }) {
            const e = t < 0,
              s = Math.abs(t ?? 1);
            if (0 === t) return this.setCurrentRate(0), void this._setTransX(0);
            const { width: i } = this._measureLine();
            await this._waitForCamDistance();
            const { rateArray: n } = this._state;
            let o = this._snapToRate(s);
            o < n[1] && (o = n[0]);
            const r = "min" === this._limit && e && void 0 !== t,
              a = "max" === this._limit && !e && void 0 !== t,
              l = r || a ? 0 : e && o !== n[0] ? -1 * o : o,
              c = t !== l && void 0 !== t;
            this.setCurrentRate(l);
            const h = this._calculateNormValue(o) * i * 0.5,
              u = e ? -1 * h : h;
            this._setTransX(u), c && this.updateQuery();
          }
          _setLimit(t) {
            this._limit = t;
          }
          async _waitForCamDistance() {
            return this._camDistance && !isNaN(this._camDistance)
              ? Promise.resolve(this._camDistance)
              : new Promise((t) => {
                this._camDistanceResolve = t;
              });
          }
          _addHandlers() {
            const { iconEl: t } = this._children;
            t.addEventListener("mousedown", this._onMouseTouchDown),
              t.addEventListener("touchstart", this._onMouseTouchDown);
          }
          _onMouseTouchDown(t) {
            t?.preventDefault(), this._measureLine();
            const { iconEl: e } = this._children,
              { isTouch: s, canHover: i } = this.app,
              n = t.touches?.length ? t.touches[0] : t,
              { clientX: o } = n;
            e.style.setProperty("transition", "none"),
              document.body.style.setProperty("cursor", "grabbing"),
              s &&
              (document.addEventListener("touchmove", this._onMouseTouchMove),
                document.addEventListener("touchend", this._onMouseTouchUp)),
              i &&
              (document.addEventListener("mousemove", this._onMouseTouchMove),
                document.addEventListener("mouseup", this._onMouseTouchUp)),
              this.setState({ startX: o });
          }
          _onMouseTouchMove(t) {
            const {
              lineMeasures: { left: e, width: s },
            } = this._state,
              n = t.touches?.length ? t.touches[0] : t;
            let { clientX: o } = n;
            const r = e,
              a = e + s,
              l = 0.5 * s;
            (o = Math.max(o, r)), (o = Math.min(o, a)), (o -= e + l);
            const c = o / l;
            let h = this._calculateRate(c);
            if (isNaN(c) || isNaN(h)) return;
            const u = c < 0,
              d = "min" === this._limit && u,
              p = "max" === this._limit && !u;
            if (
              ((d || p) && ((o = 0), (h = 0)),
                this._setTransX(o),
                i.AppUtils.isMobilePortrait())
            ) {
              const { snapPoints: t } = this._config,
                e = Math.abs(h) > t[t.length - 3],
                s = e && h < -1 * t[t.length - 3],
                i = e && h > t[t.length - 3],
                n = s ? "100%" : i ? "-10%" : "50%";
              document.documentElement.style.setProperty(
                "--customIconLabelMargin",
                n,
              );
            }
            this.setCurrentRate(h);
          }
          _onMouseTouchUp(t) {
            t?.preventDefault();
            const { isTouch: e, canHover: s } = this.app,
              { iconEl: i } = this._children;
            e &&
              (document.removeEventListener(
                "touchmove",
                this._onMouseTouchMove,
              ),
                document.removeEventListener("touchend", this._onMouseTouchUp)),
              s &&
              (document.removeEventListener(
                "mousemove",
                this._onMouseTouchMove,
              ),
                document.removeEventListener("mouseup", this._onMouseTouchUp)),
              i.style.setProperty(
                "transition",
                "transform 0.5s cubic-bezier(.3,1.24,.34,.98)",
              ),
              document.body.style.setProperty("cursor", "default"),
              this.updateQuery();
          }
          _onRealtimeClick(t) {
            this.updateQuery(1);
          }
          _setTransX(t) {
            const { trans: e } = this._state;
            t !== e &&
              (this._element.style.setProperty("--x-icon-trans", `${t}px`),
                this.setState({ transX: t }));
          }
          _getRateArray(t) {
            const { snapPoints: e } = this._config,
              s = e.findIndex((e) => t <= e),
              i = -1 === s;
            let n = 8;
            if ((i || (n -= 2 * (e.length - s)), i))
              return [1, ...e.slice(n), t];
            const o = s - (e.length - n);
            return [1, ...e.slice(o, s), t];
          }
          _calculateRate(t) {
            const { fastestRate: e, rateArray: s } = this._state,
              i = t < 0,
              n = Math.abs(t),
              o = s.length - 1;
            let r = n * e;
            if (s) {
              const t = n * o,
                e = t % 1,
                i = Math.floor(t);
              if (((r = s[i]), i < o)) {
                const t = (s[i + 1] - r) * e;
                r += Math.round(t);
              }
            }
            let a = this._snapToRate(r);
            return a < s[1] && (a = s[0]), i && a !== s[0] ? -1 * a : a;
          }
          _calculateNormValue(t) {
            const { rateArray: e } = this._state,
              s = e.length - 1;
            let i = -1;
            for (let s = 0; s < e.length && t >= e[s]; s++) i = s;
            if (i === s || -1 === i) return 1;
            {
              const n = e[i];
              return (i + (t - n) / (e[i + 1] - n)) / s;
            }
          }
          _snapToRate(t) {
            const { snapPoints: e } = this._config,
              s = e.findIndex((e) => t < e);
            if (0 === s) return e[s];
            const i = s > -1 ? e[s - 1] : e[e.length - 1];
            return Math.round(t / i) * i;
          }
          setCurrentRate(t) {
            0 !== t && this._setLimit(null),
              this.app.pioneer.setTimeRate(t),
              (this._currentRate = t);
            const e = this.formatRate(t);
            this._element.style.setProperty("--x-rate", `'${e}'`);
            const s = 1 === t || 0 === t ? "hidden" : "";
            this.setState({ realtimeVisibleClass: s });
          }
          updateQuery(t = this.app.pioneer.getTimeRate()) {
            const e = this.app.getManager("router"),
              s = this.app.getManager("time").getTimeUrl();
            e.navigate({ time: s, rate: t }, e.currentRoute.url);
          }
          _getFastestRate() {
            const {
              enableDynamicRate: t,
              fastestRate: e,
              defaultCamDistance: s,
            } = this._config,
              { defaultMaxDistance: i } = this._app.getManager("camera");
            let n = this._camDistance;
            (n && !isNaN(n)) ||
              (console.warn("Time Slider:: Missing camera distance."), (n = s));
            const o = i && !isNaN(i) ? Math.round(n) / i : 1;
            return t ? e.min + (e.max - e.min) * o : e.max;
          }
          formatRate(t) {
            if (1 === t) return "";
            if (0 === t) return "Paused";
            const e = t < 0,
              s = Math.abs(t),
              i = s / 3154e4,
              n = s / 2628e3,
              o = s / 604800,
              r = s / 86400,
              a = s / 3600,
              l = s / 60,
              c = (t) => {
                const s = Number(`${Math.round(`${t}e1`)}e-1`);
                return e ? -1 * s : s;
              };
            return i >= 1
              ? `${c(i)} yrs/s`
              : n >= 2
                ? `${Math.round(e ? -1 * n : n)} mths/s`
                : o >= 1
                  ? `${Math.round(e ? -1 * o : o)} wks/s`
                  : r >= 1
                    ? `${c(r)} days/s`
                    : a >= 1
                      ? `${c(a)} hrs/s`
                      : l >= 1
                        ? `${c(l)} mins/s`
                        : `${t} secs/s`;
          }
          _getClasses(t) {
            const e = [];
            if (t.removeAll) return e;
            const s = i.AppUtils.isMobilePortrait(),
              n = i.AppUtils.isLandscape(),
              o = window.innerHeight < 641,
              r = window.innerWidth < 961,
              a = window.innerHeight < 641 && !s;
            return (
              t.expanded && a && e.push("offset-right"),
              o && e.push("v-squeezy"),
              r && e.push("h-squeezy"),
              s ? e.push("portrait") : n && e.push("landscape"),
              e
            );
          }
          toggleExtraClasses(t) {
            const e = this._getClasses(t);
            this._extraClasses.forEach((s) => {
              const i = e.includes(s) && !t.removeAll;
              this._parent.classList.toggle(s, i);
            });
          }
          get extraClasses() {
            return this._parent.classList;
          }
          _measureLine() {
            const { left: t, width: e } =
              this._children?.lineEl?.getBoundingClientRect() || {};
            return void 0 === t || void 0 === e
              ? null
              : (this.setState({
                lineMeasures: { left: t, width: e, isMeasured: !0 },
              }),
                { left: t, width: e });
          }
          _onResize() {
            const { width: t } = this._measureLine(),
              e = this._currentRate ?? 1,
              s = e < 0,
              i = Math.abs(e),
              n = this._calculateNormValue(i) * t * 0.5,
              o = s ? -1 * n : n;
            this._setTransX(o);
          }
          resize() {
            this._resizeDebounced();
          }
          _update() {
            const { cameraEntity: t } = this.app.getManager("camera"),
              e = t.getPosition().magnitude();
            if (
              this._camDistance?.toFixed(4) !== e?.toFixed(4) &&
              ((this._camDistance = e),
                this._camDistance && !isNaN(this._camDistance))
            ) {
              const t = this._snapToRate(this._getFastestRate()),
                e = this._getRateArray(t);
              this.setState({ fastestRate: t, rateArray: e });
            }
            this._camDistanceResolve &&
              this._camDistance &&
              !isNaN(this._camDistance) &&
              (this._camDistanceResolve(this._camDistance),
                (this._camDistanceResolve = null));
          }
          show() {
            this._parent?.classList.toggle("hidden", !1);
          }
          hide() {
            this._parent?.classList.toggle("hidden", !0);
          }
          setSliderVisibility(t) {
            this._parent?.classList.toggle("no-slider", !t);
          }
        }
        TimeSlider.html = o();
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t) {
        t.exports =
          '<div class="time-slider">\n\t<button key="realtimeEl" class="realtime {{realtimeVisibleClass}}" onclick="_onRealtimeClick"></button>\n\t<div key="iconEl" class="slider-icon"></div>\n\t<div key="lineEl" class="slider-line"></div>\n</div>;\n';
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Breadcrumb: function () {
              return Breadcrumb;
            },
          });
        var i = s(1);
        s(760);
        class Breadcrumb extends i.Breadcrumb {
          async init() {
            super.init(),
              this.setState({ moduleText: this._crumbTexts.asteroids });
          }
          _goToHome() {
            this._app
              .getManager("router")
              .navigate({ __remove: "all" }, "/home");
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidsSettings: function () {
              return AsteroidsSettings;
            },
          });
        var i = s(1);
        class AsteroidsSettings extends i.Settings {
          toggleInfoPanel() {
            this._app
              .getComponent("tutorialOverlay")
              ?.navigateToTutorial(0, !0);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Search: function () {
              return Search;
            },
          });
        var i = s(1);
        class Search extends i.Search {
          _getLink(t) {
            return this._app.getManager("link")?.getParsedLink?.(t) || t;
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            Types: function () {
              return i.Types;
            },
          });
        var i = s(1),
          n = s(706);
        i.Types.set("SelectionManager", n.SelectionManager),
          i.Types.set("LabelManager", n.LabelManager),
          i.Types.set("TrailManager", n.TrailManager),
          i.Types.set("AsteroidsSettings", n.AsteroidsSettings),
          i.Types.set("AsteroidMenuTop", n.AsteroidMenuTop),
          i.Types.set("AsteroidMenuBottom", n.AsteroidMenuBottom),
          i.Types.set("AsteroidModals", n.AsteroidModals),
          i.Types.set("AsteroidMenuTop", n.AsteroidMenuTop),
          i.Types.set("AsteroidMenuBottom", n.AsteroidMenuBottom),
          i.Types.set("AsteroidPanel", n.AsteroidPanel),
          i.Types.set("Breadcrumb", n.Breadcrumb),
          i.Types.set("DefinitionOverlay", n.DefinitionOverlay),
          i.Types.set("FollowingPanel", n.FollowingPanel),
          i.Types.set("HomeButton", n.HomeButton),
          i.Types.set("MissionPanel", n.MissionPanel),
          i.Types.set("SplashScreen", n.SplashScreen),
          i.Types.set("TimeSlider", n.TimeSlider),
          i.Types.set("WatchPanel", n.WatchPanel),
          i.Types.set("Search", n.Search);
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          (e.default = [
            {
              type: "Search",
              name: "search",
              options: {
                config: {
                  placeholderText: "Search asteroids and comets...",
                  allowFeatured: !0,
                  allowDetail: !1,
                  allowInfo: !0,
                  stopOnExactMatch: !1,
                  maxSuggestions: 3,
                },
              },
            },
            { type: "TutorialOverlay", name: "tutorialOverlay" },
            { type: "AsteroidMenuTop", name: "asteroid_menu_top" },
            { type: "AsteroidMenuBottom", name: "asteroid_menu_bottom" },
            { type: "AsteroidModals", name: "asteroid_modals" },
            {
              type: "Breadcrumb",
              name: "breadcrumb",
              options: { params: { title: "物联网可视化平台" } },
            },
            {
              type: "Clock",
              name: "clock",
              postCreationFunction: (t, e) => {
                const s = e._element?.querySelectorAll(".time, .meridiem");
                s.forEach((t) => t.classList.add("x-small"));
              },
            },
            { type: "ClockShortcut", name: "clockShortcut" },
            {
              type: "TimeSlider",
              name: "timeSlider",
              options: {
                config: {
                  enableDynamicRate: !0,
                  fastestRate: { min: 3629e3, max: 1577e5 },
                },
              },
            },
            { type: "AsteroidsSettings", name: "settings" },
            { type: "HomeButton", name: "homeButton" },
            { type: "AsteroidPanel", name: "asteroidPanel" },
            { type: "MissionPanel", name: "missionPanel" },
            { type: "FollowingPanel", name: "followingPanel" },
            { type: "WatchPanel", name: "watchPanel" },
            {
              type: "LayerPanel",
              name: "layerPanel",
              options: {
                layers: [
                  ["planets"],
                  ["spacecraft"],
                  ["trails", "labels", "icons", "starfield"],
                  ["ui"],
                ],
                checkboxType: "eyes",
              },
            },
            { type: "DefinitionOverlay", name: "definitionOverlay" },
            { type: "SplashScreen", name: "splashScreen" },
            { type: "Story", name: "story" },
          ]);
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"99942_apophis":{"stats":{"discovery":"<p class=\'long\'>Discovered on June 19, 2004 at the Kitt Peak National Observatory in Arizona.</p>","rotation":30.4},"approach":{"fact":"<p class=\'long\'>On April 13, 2029, the asteroid Apophis will pass less than 23,239 miles (37,399 kilometers) from our planet’s surface – just outside the distance of geosynchronous satellites, and closer to Earth than any similarly sized <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span> in recorded history. At that time, Apophis will be visible to observers on the ground in the Eastern Hemisphere without the aid of a telescope or binoculars.</p>"}},"4_vesta":{"stats":{"discovery":"<p class=\'long\'>One of the largest and earliest known asteroids, Vesta was discovered on March 29th, 1807, and was visited by the Dawn mission in 2011.</p>","rotation":5.342}},"433_eros":{"stats":{"discovery":"<p class=\'long\'>Discovered on August 13th, 1898, Eros was the first near-Earth Object (<span class=\\"clickable underline\\" data-def=\\"neo\\">NEO</span>) ever found, and the first asteroid ever orbited by a spacecraft, NEAR-Shoemaker.</p>","rotation":5.27},"approach":{"fact":"<p class=\'long\'>Eros will approach Earth within 0.39765 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span> on November 30th, 2025.</p>"}},"951_gaspra":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1916, Gaspra is the first asteroid to be closely approached by a spacecraft, which was Galileo in 1991.</p>","rotation":7.042}},"243_ida":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1884, Ida was visited by the Galileo spacecraft in August of 1993.</p>","rotation":4.634}},"81p_wild_2":{"stats":{"discovery":"<p class=\'long\'>This comet was discovered on January 6th, 1978, and was visited by the Stardust mission in January of 2004.</p>"}},"9p_tempel_1":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1867, comet Tempel 1 was the target of the Deep Impact mission, which physically collided with the comet on July 4th, 2005.</p>","rotation":40.7}},"21_lutetia":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1852, the asteroid was visited by the European space probe Rosetta in July of 2010.</p>","rotation":8.1655}},"67p_churyumov_gerasimenko":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1969, this comet was the first to be landed upon by a robotic mission from Earth, the European Space Agency\'s Rosetta mission. The Philae lander touched down in November of 2014.</p>","rotation":12.76},"approach":{"fact":"<p class=\'long\'>The comet approached Earth within 0.418 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span> on November 12th, 2021, and then will approach again in November of 2034 at a distance of 0.4523 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span>.</p>"}},"1_ceres":{"stats":{"discovery":"<p class=\'long\'>Discovered in January of 1801, Ceres was the first asteroid ever found, though it was initially classified as a planet. It remained an asteroid until 2006, when it was reclassified as a dwarf planet.</p>","rotation":9.0741}},"101955_bennu":{"stats":{"discovery":"<p class=\'long\'>Discovered in September of 1999, Bennu was the subject of the OSIRIS-REx mission, which touched down on the asteroid and collected a sample of the surface on October 20th, 2020. OSIRIS-REx departed Bennu in 2021, and delivered the capsule with pieces of the asteroid to Earth on September 24, 2023.</p>","rotation":4.296},"approach":{"fact":"<p class=\'long\'>Bennu is a <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span>, and will have multiple close approaches with Earth over time. The next close approach will be in 2023, at a distance of 0.497 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span></p>"}},"103p_hartley_2":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1986, Comet Hartley 2 was the target of the Deep Impact/EPOXI mission, which flew by in November of 2010.</p>","rotation":18.1},"approach":{"fact":"<p class=\'long\'>103p/Hartley 2 is classified as an <span class=\\"clickable underline\\" data-def=\\"neo\\">NEO</span>, and will approach Earth within 0.3826 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span> on September 26th, 2023.</p>"}},"25143_itokawa":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1998, Itokawa was the first asteroid to be the target of a sample return mission. The Japanese space probe Hayabusa took a sample from the comet in November of 2005.</p>","rotation":12.132},"approach":{"fact":"<p class=\'long\'>Itokawa is classified as a <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span>, and will next approach the Earth on March 6th, 2030, at a distance of 0.376 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span>.</p>"}},"16_psyche":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1852, the Psyche asteroid is the subject of the upcoming Psyche mission which will launch no earlier than 2023.</p>","rotation":4.196}},"65803_didymos":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1996, Didymos is part of a binary asteroid system with its smaller partner, Dimorphos. The DART mission targeted this system, successfully crashing a probe into Dimorphos on September 26th, 2022.</p>","rotation":2.2593},"approach":{"fact":"<p class=\'long\'>Didymos is a <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span>, and approached Earth at a distance of 0.07123 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span> on October 4th, 2022.</p>"}},"dimorphos":{"stats":{"discovery":"<p class=\'long\'>First observed in 2003 (7 years after the discovery of Didymos), Dimorphos is the smaller twin of the Didymos binary asteroid system. The DART mission intentionally crashed into Dimorphos on September 26th, 2022, and successfully altered its orbit.</p>","rotation":11.92},"approach":{"fact":"<p class=\'long\'>Dimorphos and its binary system are classifed as a <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span>, and approached Earth at a distance of 0.07123 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span> on October 4th, 2022.</p>"}},"52246_donaldjohanson":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1981, and named after the paleoanthropologist who discovered the \\"Lucy\\" fossil, this will be the second small body that the Lucy mission will encounter in 2025.</p>","rotation":252}},"3548_eurybates":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1973, Eurybates is the first Trojan Asteroid that the Lucy mission will visit in August of 2027. It has a small satellite named Queta.</p>","rotation":8.7}},"15094_polymele":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1999, Polymele is a Trojan Asteroid that will be visited by the Lucy mission in September of 2027.</p>","rotation":5.86}},"11351_leucus":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1997, Leucus is a Trojan Asteroid that will be visited by the Lucy mission in April of 2028.</p>","rotation":445.73}},"21900_orus":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1999, Orus is a Trojan Asteroid that will be visited by the Lucy mission in November of 2028.</p>","rotation":13.45}},"617_patroclus":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1906, Patroclus is a Trojan Asteroid that will be visited by the Lucy mission in 2033. In 2001, Patroclus was found to be part of a binary asteroid system with its smaller twin, named Menoetius.</p>","rotation":102.8}},"19p_borrelly":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1904, comet Borrelly was the target of the Deep Space 1 mission, which flew by in September of 2010.</p>"}},"5535_annefrank":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1942, the main belt asteroid 5535 Annefrank was used as a practice flyby target by the Stardust mission on November 2nd, 2002.</p>","rotation":15.12}},"9969_braille":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1992, Braille was visited by the Deep Space 1 mission on July 29th, 1999. The spacecraft passed within 26 km (16 miles) of the asteroid, which was the closest asteroid flyby ever at that time.</p>","rotation":226.4}},"162173_ryugu":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1999, Ryugu was the target of the Hayabusa2 mission, which orbited the asteroid for a year and a half, landed small rovers on it, and collected samples that were returned to Earth in December of 2020.</p>","rotation":7.63},"approach":{"fact":"<p class=\'long\'>Ryugu is a <span class=\\"clickable underline\\" data-def=\\"pho\\">PHO</span>, and will next approach Earth at a distance of 0.373 <span class=\\"clickable underline\\" data-def=\\"au\\">AU</span>s on June 3rd, 2025.</p>"}},"152830_dinkinesh":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1999, Dinkinesh will be the Lucy mission\'s first flyby target in early November of 2023. It will become the smallest main-belt asteroid ever visited.</p>"}},"73p_schwassmann_wachmann_3":{"stats":{"discovery":"<p class=\'long\'>Discovered in 1930, 73P/Schwassmann-Wachmann 3 is a periodic comet that began to disintegrate as it approached the sun in 1995. Initially, it split into four distinct fragments, but later further split into more than sixty pieces.</p>"},"category":"Comet","id":"73p_schwassmann_wachmann_3","iauName":"73P/Schwassmann Wachmann 3","displayName":"Schwassmann Wachmann 3"}}',
        );
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '[{"id":"intro","title":"<small>Welcome to</small><br>Eyes on Asteroids!","description":"You are looking at a real-time visualization of every known <span class=\'clickable underline\' data-def=\'asteroid\'>asteroid</span> or <span class=\'clickable underline\' data-def=\'comet\'>comet</span> that is classified as a <span class=\'clickable underline\' data-def=\'neo\'>Near-Earth Object (NEO)</span>.<br class=big-br>With asteroids represented as blue points, and comets as white points, our database is updated daily to give you approximately {{getNeoTotal}} NEOs (and counting). Additionally, you can explore most of NASA\'s asteroid and comet missions (past and present), from Galileo, to Lucy and DART.","extra":"<h5>Extra fact:</h5><p>Farther from Earth, the full asteroid belt contains over a million members, with the majority lying between Mars and Jupiter.</p>"},{"id":"nav3d","title":"Navigate 3D like an Expert","description":{"touch":"One finger controls your orbit in all directions. Pinch zoom for close inspection, large-scale overviews, and everything in-between.","desktop":"Left mouse click-and-drag controls your orbit in all directions. Scroll zoom for close inspection, macro overviews, and everything in-between."},"extra":{"desktop":"<h5>Secret tip:</h5><p>Use the \'A\', \'S\', \'D\', \'W\', \'Z\', and \'C\' keys only if you\'re a true expert. Hold the \'shift\' key to move even faster. </p>"},"targetSelector":"#pioneer","mask":{"xSizeMult":0.6,"ySizeMult":0.25}},{"id":"labels","title":"Info on the Fly","description":"Select any label or icon in the 3D screen to fly to it and bring up an information panel.","extra":"<h5>Don\'t get lost:</h5><p>The top-left NASA logo or \'See all asteroids\' button will always take you back home.</p>","targetSelector":"#pioneer","mask":{"xSizeMult":0.6,"ySizeMult":0.25}},{"id":"time","title":"<small>From 1990 to 2033</small><br>You Control Time.","description":"Drag the time slider left to go backwards, or right to go forwards in time. The LIVE button will always return you to the present time.","extra":"<h5>A little trick:</h5><p>To go even faster, zoom out and try again.</p>","targetSelector":"#time-slider-container"},{"id":"learn","title":"Learn by Scrolling","description":"Select \'Learn\' to access three different scrollable stories about asteroids and comets, including a tour through NASA\'s historic missions.","targetSelector":"nav.navigation div:nth-child(1).clickable button","mask":{"xSizeMult":0.7,"ySizeMult":0.7}},{"id":"watch","title":"Keep an Eye Out!","description":"Select the \'Asteroid Watch\' option to see the next five closest approaches to Earth, complete with a countdown.","extra":"<h5>Hint:</h5><p>Don\'t forget to play with that time slider!</p>","targetSelector":"nav.navigation div:nth-child(2).clickable button","mask":{"xSizeMult":0.7,"ySizeMult":0.7}},{"id":"filters","title":"Filter your View","description":"Select \'Filters\' to see just the comets, or just the asteroids, or just the <span class=\'clickable underline\' data-def=\'pho\'>Potentially Hazardous Objects (PHOs)</span>.","targetSelector":"nav.navigation div:nth-child(3).clickable button","mask":{"xSizeMult":0.7,"ySizeMult":0.7}},{"id":"search","title":"Looking for Something?","description":"Type it in the search bar to look through our entire NEO database.","targetSelector":".search>span.icon-search","mask":{"xSizeMult":0.5,"ySizeMult":0.5}},{"id":"settings","title":"Fine Tuning","description":"Use the settings menu to toggle display layers, incrementally zoom, change the lighting when the sun is not enough, and go full-screen.","alternateDescription":"Use the settings menu to toggle display layers, incrementally zoom, and change the lighting when the sun is not enough.","extra":"<h5>Just in case:</h5><p>The info icon will take you back here if you ever need a recap.</p>","targetSelector":"div.settings","mask":{"xSizeMult":0.5}},{"id":"complete","title":"Dare Mighty Things","description":"You are now armed with all the knowledge to explore Eyes on Asteroids like a pro. Happy Learning!","extra":"<h5>One last secret:</h5><p>Watch out for any underlined text; it may lead you down a rabbit hole of space knowledge...</p>"}]',
        );
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"limits":{"min":"1990-01-01T00:00:00Z","max":"2034-01-01T00:00:00Z"}}',
        );
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"zoomMax":12000000000,"staticEntityGroups":["stars","planets"],"staticEntities":["moon","sc_osiris_rex","sc_lucy","sc_psyche","sc_deep_impact","sc_deep_impact_impactor","sc_deep_space_1","sc_near_shoemaker","sc_stardust","sc_stardust_src","sc_dawn","sc_rosetta","sc_galileo","sc_philae","sc_dart"],"title":{"prefix":"Eyes on Asteroids","suffix":"NASA/JPL"}}',
        );
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '[{"class":"HomeView","name":"home","components":["asteroid_menu_top","asteroid_menu_bottom","asteroid_modals","breadcrumb","clock","clockShortcut","timeSlider","settings","layerPanel","search","definitionOverlay","splashScreen","tutorialOverlay"]},{"class":"AsteroidView","name":"asteroid","components":["asteroid_menu_top","asteroid_menu_bottom","asteroid_modals","homeButton","breadcrumb","clock","clockShortcut","timeSlider","settings","layerPanel","asteroidPanel","search","loadIcon","definitionOverlay"]},{"class":"WatchView","name":"watch","components":["asteroid_menu_top","asteroid_menu_bottom","homeButton","watchPanel","breadcrumb","clock","clockShortcut","timeSlider","settings","layerPanel","search","definitionOverlay","tutorialOverlay"]},{"class":"MissionView","name":"mission","components":["asteroid_menu_top","asteroid_menu_bottom","asteroid_modals","homeButton","breadcrumb","clock","clockShortcut","timeSlider","settings","layerPanel","missionPanel","search","loadIcon","definitionOverlay"]},{"class":"FollowingView","name":"following","components":["asteroid_menu_top","asteroid_menu_bottom","asteroid_modals","homeButton","breadcrumb","clock","clockShortcut","timeSlider","settings","layerPanel","followingPanel","search","loadIcon","definitionOverlay"]},{"class":"StoryView","name":"story","components":["clock","settings","layerPanel","breadcrumb","timeSlider","story","overlay","definitionOverlay"]}]',
        );
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(771),
          n = s(773),
          o = s(774),
          r = s(775),
          a = s(776),
          l = s(777);
        e.default = {
          AsteroidView: i.AsteroidView,
          MissionView: n.MissionView,
          FollowingView: o.FollowingView,
          WatchView: r.WatchView,
          HomeView: a.HomeView,
          StoryView: l.StoryView,
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            AsteroidView: function () {
              return AsteroidView;
            },
          });
        var i = s(772),
          n = s(529);
        class AsteroidView extends i.default {
          constructor(...t) {
            super(...t),
              (this._rules.spaceObject = {
                value: (t) => Boolean(this._app.neos.get(t)?.pioneerName),
              }),
              (this._asteroidPanel = null),
              (this._target = null),
              (this._neoData = null),
              (this._heroData = null),
              (this._entityInfo = null),
              (this.filtersManager = null);
          }
          async onEnter(t) {
            this.addUIexcludedComponents([
              "asteroid_modals",
              "definitionOverlay",
              "clock",
              "clockShortcut",
              "asteroid_menu_bottom",
            ]),
              (this.filtersManager = this._app.getManager("filters")),
              (this._asteroidPanel ??= this._app.getComponent("asteroidPanel")),
              await super.onEnter(t),
              (this._mainViewportEl.style.top = ""),
              (this._mainViewportEl.style.left = "");
          }
          onLeave(t) {
            this._app.removeParticleMatchFunction("asteroid_view", !0),
              (t && t.cancelToken && t.cancelToken.isCanceled) ||
              (this._asteroidPanel.hide(),
                (this._mainViewportEl.style.top = "0px"),
                (this._mainViewportEl.style.left = "0px"),
                super.onLeave(t));
          }
          _reset(t) {
            super._reset(t),
              (this._target = null),
              (this._neoData = null),
              (this._heroData = null),
              (this._entityInfo = null);
          }
          registerCallbacks() {
            super.registerCallbacks(),
              this._asteroidPanel.registerCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          removeCallbacks() {
            super.removeCallbacks(),
              this._asteroidPanel.removeCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          async _updateResources({ spaceObject: t }) {
            const e = this._app.getManager("content");
            (this._target = t),
              (this._neoData = this._allNEOs.get(this._target)),
              (this._heroData = this._allHeroes[this._neoData.pioneerName]),
              (this._entityInfo = e.getEntityInfo(this._target));
            let s = this._app.scene.getEntity(this._target);
            if (s) {
              if (!s._enabled) {
                const t = this._app.getManager("search").getEntry(this._target);
                t.neo && this.filtersManager.setFilterToReveal(t.neo, !0);
              }
            } else
              s = this._app.getManager("neos").createTempNEO(this._neoData);
            const i = this.app.pioneer.getTime();
            let o = i;
            i < s.getPositionCoverage().min
              ? (o = s.getPositionCoverage().min)
              : i >= s.getPositionCoverage().max - 3600 &&
              (o = s.getPositionCoverage().max - 3600);
            const r = new n.DateTime();
            r.fromET(o), this.app.pioneer.setTime(i);
            const { nextClosestApproachTime: a } = this._neoData;
            (this._eventInfo =
              0 != a && a < i
                ? { start: r.toString() + "Z" }
                : { start: null }),
              await s.getLoadedPromise(),
              await this._app.pioneer.waitUntilNextFrame(),
              this._app.addParticleMatchFunction(
                (t) => t.pioneerName !== this._target,
                "asteroid_view",
                !0,
              ),
              this._app.getManager("layer").setTarget(this._target),
              this._app.getManager("selection").selectEntity(this._target),
              e.resetContext(),
              this._entityInfo && (await e.loadDescriptions([this._target]));
          }
          async _updateComponents(t) {
            this._asteroidPanel.populate(this._neoData, this._heroData),
              super._updateComponents(t);
          }
          async _updateComponentsVisibility(t) {
            await super._updateComponentsVisibility(t),
              this._updateTimeSliderPosition();
            this._app.getManager("layer").getLayer("ui").visible &&
              this._asteroidPanel.show(),
              this._app.getComponent("asteroid_menu_bottom")?.hide();
          }
          async _updateCamera(t) {
            await this._app.cameraScripts.goToCelestialObject(this._target);
          }
          resize() {
            super.resize();
            const t = this._asteroidPanel?._state.isExpanded;
            this._onExpandToggle(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            default: function () {
              return ExtendedBaseView;
            },
          });
        var i = s(1),
          n = s(529),
          o = s(5);
        class ExtendedBaseView extends i.BaseView {
          constructor(t, e, s = []) {
            super(t, e, s),
              (this._UIexcludedComponents = null),
              this.resetUIexcludedComponents(),
              (this._floatMid = null),
              (this._floatMidBottom = null),
              (this._pioneerParentEl = null),
              (this._mainViewportEl = null),
              (this._allNEOs = null),
              (this._allHeroes = null),
              (this._lastTime = null),
              (this._rules.redirect = (t) => {
                const e = this._app.getManager("router"),
                  s = this._app.getManager("link")?.getParsedLink?.(t);
                s !== `/${t}`
                  ? e.navigate(s)
                  : "asteroids" === t
                    ? e.navigate(e.homeRoute)
                    : (console.warn(`No object with name, ${t}.`),
                      e.navigate(e._previousRoute?.url || ""),
                      this._app.getComponent("search").simulate(t));
              }),
              this.bindFunctions(["_onExpandToggle"]);
          }
          async onEnter(t, e = []) {
            (this._mainViewportEl = this._app.pioneer
              ?.getViewport("main-viewport")
              ?.getDiv()),
              (this._pioneerParentEl = document.getElementById("pioneer")),
              (this._allNEOs ??= this._app.neos),
              (this._allHeroes ??= this._app.heroes),
              await super.onEnter(t, e);
            const s = this._app.getManager("layer").getLayer("ui").visible;
            this.toggleViewUI(s, !1);
          }
          _showControls() {
            this._app.getComponent("clock").show(),
              this._app.getComponent("clockShortcut").show(),
              this._app.getComponent("settings").show(),
              (this._floatMidBottom =
                this._floatMidBottom ||
                document.getElementById("float-mid-bottom")),
              (this._floatMid =
                this._floatMid || document.getElementById("float-mid")),
              this._floatMidBottom.classList.remove("hidden"),
              this._floatMidBottom.classList.add("active"),
              i.AppUtils.isMobileMode()
                ? this._floatMid.classList.add("low")
                : (this._floatMid.classList.remove("hidden"),
                  this._floatMid.classList.remove("low"));
          }
          _hideControls() {
            i.AppUtils.isMobileMode() &&
              (this._app.getComponent("clock").hide(),
                this._app.getComponent("clockShortcut").hide(),
                this._app.getComponent("settings").hide(),
                (this._floatMidBottom =
                  this._floatMidBottom ||
                  document.getElementById("float-mid-bottom")),
                (this._floatMid =
                  this._floatMid || document.getElementById("float-mid")),
                this._floatMidBottom.classList.add("hidden"),
                this._floatMidBottom.classList.remove("active"),
                this._floatMid.classList.remove("low"));
          }
          async onQueryChange(t) {
            super.onQueryChange(t), this._callQueryChanges(t);
          }
          _updateComponents(t) {
            this._app.getComponent("breadcrumb")?.onRouteChange({ ...t }),
              this._app
                .getComponent("settings")
                .setConfig({
                  orientation: { smallLandscape: { ori: "vertical" } },
                }),
              this._callQueryChanges(t);
          }
          async _updateTime(t) {
            (this._lastTime = this.app.pioneer.getTime()),
              await super._updateTime(t);
          }
          async _checkReady(t) {
            const { cameraEntity: e } = this.app.getManager("camera"),
              s = e.getParent(),
              i = this.app.scene.get(this._target);
            if (s && i) {
              const t = this.app.pioneer.getTime();
              if (null === s.getLowestCommonAncestorAtTime(i, t)) {
                const t = `${s.getName()}_temp`,
                  i = new o.Vector3();
                i.copy(s.getPosition());
                const r = n.Entity.createFromOptions(
                  t,
                  {
                    radius: s.getExtentsRadius(),
                    parents: [[Number.NEGATIVE_INFINITY, "sun"]],
                  },
                  this.app.scene,
                );
                r.setPosition(i);
                const a = s.getParentAtTime(this._lastTime) ?? "sun",
                  l = this.app.scene.get(a);
                r.setParent(l),
                  e.setParent(r),
                  this.app.getManager("scene").addTempEntity(r);
              }
            }
            await super._checkReady(t), this.app.endLoadingScreen();
          }
          _callQueryChanges(t) {
            const e = this.app.getManager("router"),
              s = e.parseQuery(e.previousRoute.query),
              {
                modal: i,
                definition: n,
                tutorial: o,
                rate: r,
              } = { ...t, ...s };
            i &&
              (this.app.getComponent("asteroid_menu_top")?.onQueryChange(t),
                this.app.getComponent("asteroid_modals")?.onQueryChange(t)),
              n && this.app.getComponent("definitionOverlay")?.onQueryChange(t),
              o && this.app.getComponent("tutorialOverlay")?.onQueryChange(t),
              void 0 !== r &&
              this.app.getComponent("timeSlider")?.onQueryChange(t);
          }
          onLeave(t) {
            this.resetUIexcludedComponents(), super.onLeave(t);
          }
          _shouldResetStatus() {
            return !0;
          }
          addUIexcludedComponents(t) {
            this._UIexcludedComponents.push(...t);
          }
          resetUIexcludedComponents() {
            this._UIexcludedComponents = [
              "breadcrumb",
              "settings",
              "loadIcon",
              "layerPanel",
            ];
          }
          toggleViewUI(
            t = this._app.getManager("layer").getLayer("ui").visible,
            e = !0,
          ) {
            this._app.getComponent("layerPanel").hide(),
              this._components.forEach((s) => {
                if (this._UIexcludedComponents.includes(s)) return;
                if (
                  this.app
                    .getManager("router")
                    ._alwaysHiddenComponents?.includes(s)
                )
                  return;
                const i = this._app.getComponent(s),
                  n = "story" === s;
                t ? (i.setEnabled(!0), i.show(e), n && i.resize()) : i.hide();
              });
            const s = document.getElementById("extended-controls");
            s && (s.style.display = t ? "grid" : "none");
          }
          get shouldOffsetRight() {
            return !i.AppUtils.isMobilePortrait();
          }
          get shouldOffsetUp() {
            return i.AppUtils.isMobilePortrait();
          }
          _onExpandToggle(t, e = !0) {
            e && this._updateTimeSliderPosition({ expanded: t });
            const s = this._app.getComponent("loadIcon")?.element,
              i = this.shouldOffsetRight && t;
            this._pioneerParentEl?.classList.toggle("offset-right", i),
              this._mainViewportEl?.classList.toggle("offset-right", i),
              s?.classList.toggle("offset-right", i);
            const n = this.shouldOffsetUp && t;
            this._pioneerParentEl?.classList.toggle("offset-up", n),
              this._mainViewportEl?.classList.toggle("offset-up", n),
              s?.classList.toggle("offset-up", n);
            const o = this._app.getComponent("settings");
            n ? o?.hide() : o?.show();
          }
          _updateTimeSliderPosition(t = {}) {
            this._app.getComponent("timeSlider")?.toggleExtraClasses(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            MissionView: function () {
              return MissionView;
            },
          });
        var i = s(772);
        s(5);
        class MissionView extends i.default {
          constructor(...t) {
            super(...t),
              (this._rules.spacecraft = {
                value: (t) =>
                  "Spacecraft" ===
                  this._app.getManager("content")?.getEntityInfo(t)?.category,
              }),
              (this._missionPanel = null),
              (this._entityInfo = null),
              (this.filtersManager = null);
          }
          async onEnter(t) {
            this.addUIexcludedComponents([
              "asteroid_modals",
              "definitionOverlay",
              "clock",
              "clockShortcut",
              "asteroid_menu_bottom",
            ]),
              (this.filtersManager = this._app.getManager("filters")),
              (this._missionPanel ??= this._app.getComponent("missionPanel")),
              await super.onEnter(t),
              (this._mainViewportEl.style.top = ""),
              (this._mainViewportEl.style.left = "");
          }
          onLeave(t) {
            (t && t.cancelToken && t.cancelToken.isCanceled) ||
              (this._missionPanel.hide(),
                (this._mainViewportEl.style.top = "0px"),
                (this._mainViewportEl.style.left = "0px"),
                super.onLeave(t));
          }
          registerCallbacks() {
            super.registerCallbacks(),
              this._missionPanel.registerCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          removeCallbacks() {
            super.removeCallbacks(),
              this._missionPanel.removeCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          _reset(t) {
            super._reset(t), (this._target = null), (this._entityInfo = null);
          }
          async _updateResources({ spacecraft: t }) {
            const e = this._app.getManager("content");
            (this._target = t),
              (this._entityInfo = e.getEntityInfo(this._target)),
              await this._app
                .getManager("content")
                .loadDescriptions([this._target]),
              await this._app
                .getManager("content")
                .loadEvents(this._target, { all: "all_events" }),
              this._app.getManager("layer").setTarget(this._target),
              this._app.getManager("selection").selectEntity(this._target),
              null !== this._entityInfo
                ? this._entityInfo?.related &&
                this.filtersManager.setFilterToReveal(
                  Object.keys(this._entityInfo.related)
                    .filter((t) => this._entityInfo.related[t].length > 0)
                    .reduce((t, e) => ((t[e] = !0), t), {}),
                  !0,
                )
                : this._handleError(
                  `MissionView._updateResources: Cannot find entity named ${this._target}.`,
                );
          }
          async _updateComponents(t) {
            const e = this._app.getManager("content"),
              s = e.context[this._target]?.description?.blurb,
              i = e.context?.events,
              { iauName: n, displayName: o } = this._entityInfo,
              r = n || o;
            this._missionPanel.populate(r, s, this._target, i),
              super._updateComponents(t);
          }
          async _updateComponentsVisibility(t) {
            await super._updateComponentsVisibility(t),
              this._updateTimeSliderPosition();
            this._app.getManager("layer").getLayer("ui").visible &&
              this._missionPanel.show(),
              this._app.getComponent("asteroid_menu_bottom")?.hide();
          }
          async _updateCamera(t) {
            this._app.getManager("content").hasLanded(this._entityInfo)
              ? await this._app.cameraScripts.alignSpacecraftPlanet(
                this._target,
              )
              : await this._app.cameraScripts.goToSpacecraft(this._target);
          }
          resize() {
            super.resize();
            const t = this._missionPanel?._state.isExpanded;
            this._onExpandToggle(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            FollowingView: function () {
              return FollowingView;
            },
          });
        var i = s(772);
        class FollowingView extends i.default {
          constructor(...t) {
            super(...t),
              (this._rules = {
                ...this._rules,
                planet: {
                  value: (t) =>
                    "Planet" ===
                    this._app.getManager("content")?.getEntityInfo(t)?.category,
                },
                moon: {
                  value: (t) =>
                    "moon" ===
                    this._app.getManager("content")?.getEntityInfo(t)?.id,
                },
                sun: {
                  value: (t) =>
                    "sun" ===
                    this._app.getManager("content")?.getEntityInfo(t)?.id,
                },
              }),
              (this._followingPanel = null),
              (this._entityInfo = null);
          }
          async onEnter(t) {
            this.addUIexcludedComponents([
              "asteroid_modals",
              "definitionOverlay",
              "clock",
              "clockShortcut",
              "asteroid_menu_bottom",
            ]),
              (this._followingPanel ??=
                this._app.getComponent("followingPanel")),
              await super.onEnter(t);
          }
          onLeave(t) {
            this._followingPanel.hide(), super.onLeave(t);
          }
          _reset(t) {
            super._reset(t);
            const { planet: e, star: s, moon: i } = t;
            this._target = e || s || i;
          }
          async _updateResources(t) {
            this._app.getManager("layer").setTarget(this._target),
              this._app.getManager("selection").selectEntity(this._target);
          }
          async _updateComponents(t) {
            const e = this._app
              .getManager("content")
              ?.getEntityInfo(this._target);
            this._followingPanel.setState({
              title: e.iauName || e.displayName,
            }),
              super._updateComponents(t);
          }
          async _updateComponentsVisibility(t) {
            await super._updateComponentsVisibility(t),
              this._updateTimeSliderPosition();
            this._app.getManager("layer").getLayer("ui").visible &&
              this._followingPanel.show(),
              this._app.getComponent("asteroid_menu_bottom")?.hide();
          }
          async _updateCamera() {
            await this._app.cameraScripts.goToCelestialObject(this._target);
          }
          resize() {
            super.resize(), this._onExpandToggle(!1);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            WatchView: function () {
              return WatchView;
            },
          });
        var i = s(772),
          n = s(5);
        s(1);
        class WatchView extends i.default {
          constructor(...t) {
            super(...t),
              (this._rules.neoName = {
                value: (t) => Boolean(this._app.neos.get(t)?.pioneerName),
              }),
              (this._watchManager = null),
              (this._watchPanel = null),
              (this.filtersManager = null);
          }
          async onRouteChange(t) {
            const e = void 0 === t.neoName,
              s = "watch" !== this._app.getManager("router").previousView && e;
            let i = this._watchManager.determineSlideIndex(t.neoName);
            const n = -1 === i,
              o = t.neoName && !this._app.scene.get(t.neoName);
            if (s || n || o)
              return (
                o
                  ? console.warn(
                    `Asteroid, ${t.neoName} is not in the database. Re-directing to Next Closest Approach.`,
                  )
                  : n &&
                  console.warn(
                    `Asteroid, ${t.neoName} has safely passed earth. Re-directing to Next Closest Approach.`,
                  ),
                (i = 0),
                this._watchManager.setHasRedirected(!0),
                void this._watchManager.setSlideUrlByIndex(i)
              );
            const { neoName: r } = t;
            (this._watchPanel.shouldBeExpanded = Boolean(r)),
              this._watchManager.setSlideIndex(i);
            const a = this._watchPanel._swiper;
            if (r && a) {
              const { realIndex: t } = a;
              null !== i && i !== t && a.slideTo(i, void 0, !1);
            }
            await this._entitiesLoadedPromise,
              this._watchManager.setAsteroidSelection(),
              await super.onRouteChange(t);
          }
          async onEnter(t) {
            (this.filtersManager = this._app.getManager("filters")),
              this._app
                .getComponent("asteroid_menu_top")
                ?.toggleActive("Asteroid Watch", !0),
              (this._watchManager = this._app.getManager("watch")),
              this._watchManager.setData();
            const { nextFiveData: e } = this._watchManager;
            (this._entitiesLoadedPromise =
              this._watchManager._createEntities()),
              this._watchPanel ||
              (this._watchPanel = this._app.getComponent("watchPanel")),
              this._watchPanel._swiper ||
              (this._watchPanel.populate(e), this._watchPanel.initSwiper()),
              this._watchManager.restrictEarthCoverage(),
              this._watchManager.dimBackgroundLabels(!0),
              this._watchManager.setBgTrailWidthDefault(0),
              this._app.getManager("selection").setClickable(!1);
            this._app.getManager("label").setLabelClickable("earth", !1),
              this.filtersManager.setFilter({
                asteroids: !1,
                comets: !1,
                phos: !1,
              }),
              this.app.getComponent("filtersModal").handleResetFilters(),
              this.addUIexcludedComponents([
                "asteroid_modals",
                "definitionOverlay",
                "clock",
                "clockShortcut",
                "asteroid_menu_bottom",
                "tutorialOverlay",
              ]),
              await super.onEnter(t),
              (this._mainViewportEl.style.top = ""),
              (this._mainViewportEl.style.left = "");
          }
          async onLeave(t) {
            this._watchPanel.hide(),
              await super.onLeave(t),
              this._watchManager.restoreEarthCoverage(),
              this._watchManager.dimBackgroundLabels(!1),
              this._watchManager.setBgTrailWidthDefault();
            const e = this._getParticleShader();
            e && (e.uniforms.masterOpacity.value = 0.5),
              this._app
                .getComponent("asteroid_menu_top")
                ?.toggleActive("Asteroid Watch", !1),
              this._watchManager.removeReferences(),
              (this._mainViewportEl.style.top = "0px"),
              (this._mainViewportEl.style.left = "0px"),
              this._app.getManager("selection").setClickable(!0);
            this._app.getManager("label").setLabelClickable("earth", !0);
          }
          _reset() {
            this._target = "earth";
          }
          registerCallbacks() {
            super.registerCallbacks(),
              this._watchPanel.registerCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          removeCallbacks() {
            super.removeCallbacks(),
              this._watchPanel.removeCallback(
                "expandtoggle",
                this._onExpandToggle,
              );
          }
          async goToWatchAsteroids(
            t,
            {
              asteroidData: e = [],
              duration: s = 2,
              distanceCoeff: i = 4,
              maxCamDistance: o = 5e7,
              onTransition: r,
              forceAnimation: a = !1,
            },
          ) {
            const l = this.app.getManager("scene").main,
              c = this.app.getManager("camera"),
              h = c.cameraEntity,
              u = l.getEntity(t),
              d = 0.5 * s,
              p = new n.Vector3();
            h?.getPositionRelativeToEntity(p, n.Vector3.Zero, u);
            const m = p.magnitude(),
              _ = new n.Vector3(),
              g = e.map(({ pioneerName: t }) => {
                const e = l.getEntity(t);
                return (
                  u.getPositionRelativeToEntity(_, n.Vector3.Zero, e),
                  _.magnitude()
                );
              }),
              y = Math.max(...g),
              f = Math.min(y * i, o);
            if (isNaN(m) || m > o || m < y || a) {
              const e = new n.Vector3();
              u.getOrientation().getAxis(e, 2),
                e.mult(e, f),
                (this._onCameraTransition = r),
                await c.goToEntity(t, {
                  distance: f,
                  cinematic: true,
                  destinationUp: e,
                  duration: d,
                  transitionFunction:
                    this.app.cameraScripts._easeInOutExpoTransition,
                }),
                (this._onCameraTransition = null);
            }
          }
          async _updateCamera({ cancelToken: t }) {
            if (t.isCanceled) return;
            const {
              nextFiveData: e,
              backgroundPlanets: s,
              defaultPlanetTrailWidth: i,
              hasRedirected: n,
            } = this._watchManager,
              o = this._app.getManager("trail"),
              r = this,
              a = n || "watch" !== this._app.getManager("router").previousView;
            await this.goToWatchAsteroids(this._target, {
              asteroidData: e,
              ...(a && {
                onTransition: (t) => {
                  const e = 0.2 + 0.3 * (1 - t),
                    n = i * (1 - t);
                  r._setParticleOpacity(e), o.setMultipleWidths(s, n, n);
                },
                forceAnimation: !0,
              }),
            }),
              t.isCanceled
                ? (this._setParticleOpacity(0.5),
                  this._watchManager.setBgTrailWidthDefault())
                : (this._setParticleOpacity(0.2), o.setMultipleWidths(s, 0, 0));
          }
          _getParticleShader() {
            return this._app._pioneer
              .get("main", "sun", "orbitalParticles")
              ?.getThreeJsMaterials()?.[0];
          }
          _setParticleOpacity(t) {
            const e = this._getParticleShader();
            e && (e.uniforms.masterOpacity.value = t);
          }
          after(t) {
            this._app.getManager("layer").resetTarget(),
              this._watchManager.hasRedirected &&
              this._watchManager.setHasRedirected(!1);
          }
          async _updateComponentsVisibility(t) {
            await super._updateComponentsVisibility(t);
            this._app.getManager("layer").getLayer("ui").visible &&
              this._watchPanel.show(),
              this._app.getComponent("asteroid_menu_bottom")?.hide();
          }
          resize() {
            super.resize();
            const t = this._watchPanel?._state.isExpanded;
            this._onExpandToggle(t);
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            HomeView: function () {
              return HomeView;
            },
          });
        var i = s(772);
        class HomeView extends i.default {
          async onEnter(t) {
            this.addUIexcludedComponents([
              "splashScreen",
              "asteroid_modals",
              "definitionOverlay",
              "clock",
              "clockShortcut",
              "tutorialOverlay",
            ]),
              this._updateTimeSliderPosition(),
              this._app.getComponent("asteroid_menu_bottom")?.show();
            const e = [];
            null === this._app.getComponent("splashScreen")?.element &&
              e.push("splashScreen"),
              await super.onEnter(t, e);
          }
          _updateResources(t) {
            this._app.getManager("time").resetLimits(),
              this._app.getManager("layer").setTarget(""),
              (this._target = "sun");
          }
          async _updateCamera(t) {
            await this.app.cameraScripts.goToSystem("inner_solar_system");
          }
          resize() {
            super.resize(), this._updateTimeSliderPosition();
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            StoryView: function () {
              return StoryView;
            },
          });
        var i = s(1),
          n = s(772);
        class StoryView extends n.default {
          constructor(...t) {
            super(...t),
              (this._story = null),
              (this._rules.id = {
                value: (t) =>
                  t in this._app.getManager("content").getStoryList().stories,
              }),
              (this._onLeaveCallbacks = []);
          }
          async onQueryChange(t) {
            this._app.getComponent("definitionOverlay")?.onQueryChange(t),
              await super.onQueryChange(t),
              await this._updateTime(t),
              await this._app.getComponent("story").onQueryChange(t),
              await this._updateCamera(t);
          }
          async onEnter(t, e = []) {
            this.addUIexcludedComponents([
              "asteroid_modals",
              "overlay",
              "definitionOverlay",
              "clock",
              "clockShortcut",
              "asteroid_menu_bottom",
            ]);
            const s = this._app.getComponent("story");
            s.hide(), await super.onEnter(t, e);
            this._app.getManager("layer").getLayer("ui").visible && s.show();
            const i = this._app.getManager("layer"),
              n = this._app.getComponent("layerPanel");
            i.getLayer("spacecraft").visible || n.toggleLayer("spacecraft"),
              i.getLayer("planets").visible || n.toggleLayer("planets"),
              n.setCategoryEnabled("spacecraft", !1),
              this._app
                .getManager("filters")
                ?.setFilter({ phos: !1, asteroids: !1, comets: !1 });
            const o = this._app.getComponent("clock");
            o.setState({ allowEdit: !1 }),
              o.toggle("time", !1),
              o.toggle("meridiem", !1),
              this._app.getManager("label").setClickable(!1),
              this._app.getManager("selection").setClickable(!1),
              this._app.getComponent("timeSlider")?.setSliderVisibility(!1);
          }
          async onLeave(t) {
            super.onLeave(t),
              await this._story?.onLeave?.(this._app),
              await this._app.getComponent("story").onLeave();
            const e = this._app.getComponent("clock");
            e.setState({ allowEdit: !0 }),
              e.toggle("time", !0),
              e.toggle("meridiem", !0),
              this._app.getManager("label").setClickable(!0),
              this._app.getManager("selection").setClickable(!0),
              this._app.getComponent("timeSlider")?.setSliderVisibility(!0),
              this._app
                .getComponent("layerPanel")
                ?.setCategoryEnabled("spacecraft", !0);
            for (let e = 0; e < this._onLeaveCallbacks.length; e++)
              this._onLeaveCallbacks[e](t);
            (this._onLeaveCallbacks = []), (this._story = null);
          }
          async _updateResources(t) {
            this._app.getManager("layer").setTarget(""),
              this._story &&
              (this._story.onLeave?.(this._app),
                this._app.getComponent("story")?.onLeave());
            try {
              const e = await this._app.getManager("content").getStory(t.id);
              (this._story = i.AppUtils.deepClone(e)),
                this._story?.onEnter?.(this._app);
            } catch (e) {
              this._handleError(
                `StoryView._updateResources: Cannot find story ${t.id}.`,
              );
            }
          }
          async _updateTime(t) {
            super._updateTime(t);
            const e = this._app.getManager("time"),
              s = t.slide
                ? this._story.slides.find((e) => e.id === t.slide)
                : this._story.slides[0],
              { min: i, max: n } = s?.timeLimits || {};
            i && e.setMin(i),
              n && e.setMin(n),
              !t.time &&
              s.time &&
              (e.setTime(s.time),
                await this._app.pioneer.waitUntilNextFrame());
          }
          _shouldHideControls() {
            return (
              i.AppUtils.isMobileMode() &&
              this._app.getComponent("story").getState("isVisible")
            );
          }
          async _updateComponents(t) {
            super._updateComponents(t);
            const e = this._app.getComponent("settings"),
              { allowInfoPanel: s } = e.getConfig();
            this._onLeaveCallbacks.push(() => {
              e.setConfig({ allowInfoPanel: s });
            }),
              e.setConfig({ allowInfoPanel: !1 });
            const i = this._app.getComponent("story");
            await i.onRouteChange(this._story.slides, t), i.show();
          }
          async _updateCamera(t) {
            const e = t.slide
              ? this._story.slides.find((e) => e.id === t.slide)
              : this._story.slides[0];
            if (e && e.camera) {
              const t = this._app.getComponent("story");
              if (t.getState("previousIndex") !== t.getState("currentIndex")) {
                const t = e.camera[0];
                await t(this._app);
              }
            } else
              await this._app.cameraScripts.goToSystem("outer_solar_system");
          }
        }
      },
      function (t, e, s) {
        "use strict";
        s.r(e),
          s.d(e, {
            STORY_LIST: function () {
              return r;
            },
            STORIES: function () {
              return a;
            },
          });
        var i = s(779),
          n = s(780),
          o = s(781),
          r = s(782);
        const a = {
          asteroids_101: i.default,
          asteroids_close_approach: n.default,
          asteroids_missions: o.default,
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(1);
        let n = 0;
        e.default = {
          type: "nonsequential",
          entities: ["4_vesta", "67p_churyumov_gerasimenko"],
          slides: [
            {
              id: "slide_1",
              type: "overlay",
              classList: ["opaque", "black"],
              content: [{ type: "title", title: "Asteroids and Comets 101" }],
            },
            {
              id: "slide_2",
              type: "overlay",
              classList: ["opaque", "black"],
              content: [
                {
                  type: "image",
                  src: "assets/images/outterAsteroidBelt.png",
                  title: "Main Asteroid Belt. Credit: NASA/JPL",
                  alt: "This image illustrates the millions of asteroids between the Sun and Jupiter — know as the asteroid belt.",
                  clickable: !0,
                },
                {
                  type: "description",
                  description:
                    'Asteroids and comets are remnants left over from the early formation of our solar system 4.6 billion years ago. Asteroids are mostly rocky bodies that formed closer to the Sun than Jupiter, while comets formed farther from the Sun and contain substantial amounts of frozen ices. The vast majority of these small bodies are asteroids, and most of them reside within the main belt, between the orbits of Mars and Jupiter. <br><br>The current number of known asteroids in the entire solar system is:<br><span class="big semi tween-count test">0</span><br><br>',
                  onEnter: async (t, e) => {
                    const s = e.element.querySelector(".tween-count"),
                      n = await fetch(
                        "https://solarsystem.nasa.gov/api/v1/static_stellar_counts/1/",
                      ),
                      o = (await n.json()).asteroids;
                    i.AppUtils.tween(
                      { i: 0 },
                      { i: o },
                      {
                        onUpdate: (t) => {
                          if (s) {
                            const e = Math.round(t.i);
                            s.innerHTML = Number(e).toLocaleString();
                          }
                        },
                        duration: 3e3,
                      },
                    );
                  },
                },
              ],
            },
            {
              id: "slide_3",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    "Asteroids range in size from Vesta (shown here) – one of the largest at about 329 miles (530 kilometers) in diameter – to bodies that are as small as 3 feet (1 meter) across. Most asteroids are small: the total mass of all them combined is far less than that of the Earth’s Moon.<br>Asteroids less than about one meter across are called meteoroids, and are generally too small to be detected by telescopes. Meteoroids (or asteroids) that happen to hit Earth’s atmosphere become visible as meteors and largely disintegrate. Larger asteroids (car-sized or bus-sized) produce bright meteors called fireballs or bolides, but they also mostly disintegrate. Any solid leftover pieces that make it all the way to the ground are called meteorites.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++n;
                  await t.getManager("scene").isReady("4_vesta"),
                    e === n &&
                    (await t.cameraScripts.goToSystem("inner_solar_system", {
                      duration: 1,
                    }),
                      e === n &&
                      (await t.cameraScripts.goToCelestialObject("4_vesta", {
                        duration: 4,
                      })));
                },
              ],
            },
            {
              id: "slide_4",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    "Comets (like 67P/Churyumov-Gerasimenko, shown here) also have dust and rock, but also contain large amounts of various frozen ices. Comets generally follow long elliptical orbits in which they spend most of their time far from the Sun, where the ices can remain frozen.<br>When a comet’s orbit brings it closer to the Sun, the ices start heating up, creating explosive jets which spew out gas and dust. The expelled material forms into a cloud around the solid nucleus called the “coma”, that can be larger than a planet. The material is also swept back away from the Sun into diffuse tails that can stretch for millions of miles (use Shift-S to zoom out quickly to see the tail, Shift-W to zoom in; pinch to zoom on mobiles). Eventually, after thousands of orbits, a comet’s ices will be depleted. Some objects now classified as asteroids may simply be “dead” comets.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++n;
                  await t
                    .getManager("scene")
                    .isReady("67p_churyumov_gerasimenko"),
                    e === n &&
                    (await t.cameraScripts.goToSystem("inner_solar_system", {
                      duration: 1,
                    }),
                      e === n &&
                      (await t.cameraScripts.goToCelestialObject(
                        "67p_churyumov_gerasimenko",
                        { duration: 4 },
                      )));
                },
              ],
            },
            {
              id: "slide_5",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    'Many asteroids orbit nearby. On occasion, one impacts our planet. For example, the dinosaurs are thought to have been made extinct by the impact of a large asteroid 6-9 miles wide (10-15 km) that collided with Earth 66 million years ago.<br>NASA established the <a class="clickable" href="https://www.nasa.gov/planetarydefense/overview" target="_blank">Planetary Defense Coordination Office (PDCO)</a> to manage its ongoing mission of planetary defense, which includes tracking potentially hazardous objects. The PDCO has a lead role in coordinating U.S. government planning for response to an actual impact threat, and is supported by the <a class="clickable" href="https://cneos.jpl.nasa.gov" target="_blank">Center for Near-Earth Object Studies (CNEOS)</a>, which is NASA’s center for computing asteroid and comet orbits and their odds of impacting Earth. <br>For more on close approaches, click <a class="clickable" href="#/story/asteroids_close_approach">here</a>.',
                },
              ],
              camera: [
                async (t) => {
                  ++n,
                    await t.cameraScripts.goToSystem("inner_solar_system", {
                      duration: 2,
                    });
                },
              ],
              rate: 604800,
            },
          ],
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        var i = s(1),
          n = s(529);
        e.default = {
          type: "nonsequential",
          entities: ["moon", "99942_apophis"],
          slides: [
            {
              id: "slide_1",
              type: "overlay",
              classList: ["opaque", "black"],
              content: [{ type: "title", title: "What is a Close Approach?" }],
              camera: [
                async (t) => {
                  await t.cameraScripts.goToSystem("outer_solar_system");
                },
              ],
            },
            {
              id: "slide_2",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    'Some asteroids will inevitably approach Earth, and these are tracked by NASA. The <a class="clickable" href="https://cneos.jpl.nasa.gov" target="_blank">Center for Near-Earth Object Studies (CNEOS)</a> computes the orbits of asteroids and comets and their odds of impacting Earth. The orbits of all asteroids seen here are publicly available from NASA’s <a class="clickable" href="https://ssd.jpl.nasa.gov" target="_blank">Solar System Dynamics (SSD)</a> group.',
                },
              ],
              camera: [
                async (t) => {
                  await t.cameraScripts.goToSystem("inner_solar_system");
                },
              ],
              rate: 259200,
            },
            {
              id: "slide_3",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    "Apophis is a near-Earth asteroid more than 1000 feet (over 300 meters) in size that will harmlessly pass close to Earth on April 13, 2029. When it was discovered in 2004, the asteroid caused a stir because initial calculations indicated a small possibility it would impact Earth.",
                },
              ],
              time: "2029-04-13T14:40:12-07:00",
              camera: [
                async (t) => {
                  await t
                    .getManager("scene")
                    .isListReady(["99942_apophis", "earth"]),
                    t.getManager("time").pause(),
                    await t.cameraScripts.alignObjects(
                      "99942_apophis",
                      "earth",
                      {
                        duration: 2,
                        verticalOffset: 15,
                        horizontalOffset: -15,
                      },
                    ),
                    t.getManager("time").play();
                },
              ],
              onEnter: (t) => {
                t.scene
                  .get("sun")
                  .getComponentByType("orbitalParticles")
                  .setEnabled(!1);
              },
              onLeave: (t) => {
                t.scene
                  .get("sun")
                  .getComponentByType("orbitalParticles")
                  .setEnabled(!0);
              },
              rate: 60,
            },
            {
              id: "slide_4",
              type: "panel",
              content: [
                {
                  type: "description",
                  classList: ["large", "semi"],
                  description:
                    '<div><span>Distance: </span><span class="number highlight">{{distance}}</span><span> km</span></div>',
                  onEnter: (t, e) => {
                    e.addState("distance", "0"),
                      (e.update = () => {
                        const s = t
                          .getManager("scene")
                          .getDistance("earth", "99942_apophis", {
                            precision: 3,
                          })
                          .toLocaleString();
                        e.setState({ distance: s });
                      }),
                      t.pioneer.addCallback(e.update, !0);
                  },
                  onLeave: (t, e) => {
                    t.pioneer.removeCallback(e.update);
                  },
                },
                {
                  type: "description",
                  description:
                    "It’s now predicted the asteroid will safely pass about 23,189 miles (37,320 kilometers) from our planet’s surface. While that’s a safe distance, it’s close enough that the asteroid will come between Earth and our Moon, which is about 238,855 miles (384,400 kilometers) away. It’s also near the distance that some spacecraft orbit Earth. <br>This asteroid has the official designation of being both a “Near Earth Object” and a “Potentially Hazardous Object.”",
                },
                { type: "replay" },
              ],
              time: "2029-04-12T12:00:00-07:00",
              camera: [
                async (t) => {
                  await t
                    .getManager("scene")
                    .isListReady(["earth", "moon", "99942_apophis"]),
                    t.getManager("time").pause(),
                    await t.cameraScripts.goToSystem("earth", {
                      duration: 2,
                      planeId: "moon",
                      otherEntityNames: ["moon"],
                      distance: 962500,
                      angle: 35,
                      includeChildren: !1,
                      isRelativeToPreviousCamera: !1,
                    }),
                    t.getManager("time").play();
                },
              ],
              onEnter: async (t, e) => {
                await t
                  .getManager("scene")
                  .isListReady(["sun", "earth", "moon", "99942_apophis"]);
                const s = t.scene.get("sun");
                s.getComponentByType("orbitalParticles").setEnabled(!1);
                const i = s.get("orbiterLineOfSight");
                if (
                  (i.setEnabled(!0),
                    i.setTargets("earth", "99942_apophis"),
                    t.scene.get("earth").get("orbitLine").setEnabled(!1),
                    e.getState("previousIndex") !== e.getState("currentIndex"))
                ) {
                  e.reset = {};
                  const s = t.scene.get("99942_apophis");
                  s.getControllerByType("dynamo", 0)?.setEnabled(!1);
                  s
                    .addController("dynamo", "earth_centric")
                    .setBaseUrl(
                      "$DYNAMIC_ASSETS_URL/dynamo/ssd/99942_apophis/earth/orb/",
                    ),
                    s.removeParentingTableEntry(Number.NEGATIVE_INFINITY),
                    s.addParentingTableEntry(Number.NEGATIVE_INFINITY, "earth");
                }
                t.getManager("time").setMax("2029-04-14T12:00:00-07:00");
              },
              onLeave: async (t, e) => {
                const s = t.scene.get("99942_apophis");
                s.removeParentingTableEntry(Number.NEGATIVE_INFINITY),
                  s.addParentingTableEntry(Number.NEGATIVE_INFINITY, "sun"),
                  s.removeController(s.getController("earth_centric")),
                  s.getControllerByType("dynamo", 0)?.setEnabled(!0);
                const i = t.scene.get("sun");
                i.getComponentByType("orbitalParticles").setEnabled(!0);
                i.get("orbiterLineOfSight").setEnabled(!1),
                  t.scene.get("earth").get("orbitLine").setEnabled(!0),
                  t.getManager("time").resetMax(),
                  await t.scene.getLoadedPromise(),
                  await t.pioneer.waitUntilNextFrame();
              },
              rate: 1800,
            },
            {
              id: "slide_5",
              type: "panel",
              content: [
                {
                  type: "description",
                  title: "What is a Near Earth Object (NEO)?",
                  description:
                    'Over millions of years, some main belt asteroids have been influenced by collisions and gravitational interactions with planets that have gradually changed their orbits so that they now pass through Earth’s general region of space. These are the Near-Earth Objects (NEOs).<br>Specifically, an NEO is defined as an asteroid or comet whose orbit brings it to within 1.3 astronomical units (<a class="clickable" key="auLink">AU</a>s) of the sun. Near-Earth Comets (NECs) are further restricted to only those with “short” orbital periods less than 200 years.',
                  onEnter: (t, e) => {
                    (e.auLinkClick = () => {
                      t.getComponent("definitionOverlay").navigateToDefinition(
                        "au",
                      );
                    }),
                      e._children.auLink?.addEventListener(
                        "click",
                        e.auLinkClick,
                      ),
                      e._children.auLink?.addEventListener(
                        "click",
                        e.auLinkClick,
                      );
                  },
                  onLeave: (t, e) => {
                    e._children.auLink?.removeEventListener(
                      "click",
                      e.auLinkClick,
                    );
                  },
                },
              ],
              time: "2029-03-01T10:45:12-07:00",
              rate: 3e5,
              camera: [
                async (t) => {
                  await t
                    .getManager("scene")
                    .isListReady(["sun", "earth", "99942_apophis"]),
                    t.getManager("time").pause(),
                    await t.cameraScripts.showLocation(
                      "sun",
                      "earth",
                      "earth",
                      "planeNormal",
                      {
                        distance: 1.3 * i.AppUtils.conversionTable.auToKm * 1.5,
                        duration: 2,
                        startFromTarget: !1,
                        rotateByScreenRatio: !1,
                      },
                    ),
                    t.getManager("time").play();
                },
              ],
              onEnter: (t) => {
                n.Entity.getEntityNamesInGroup("planets").forEach((e) => {
                  "earth" !== e && t.scene.get(e).setEnabled(!1);
                }),
                  t.getManager("layer").toggleLayer("trails"),
                  t.scene.get("earth").get("orbitLine").setEnabled(!0),
                  t.getManager("label").addException("earth"),
                  t.getManager("label").addException("99942_apophis");
                const e = t.scene.get("sunRing"),
                  s = t.scene.get("sunRingLabel");
                e.setEnabled(!0), s.setEnabled(!0);
              },
              onLeave: (t) => {
                n.Entity.getEntityNamesInGroup("planets").forEach((e) => {
                  "earth" !== e && t.scene.get(e).setEnabled(!0);
                }),
                  t.getManager("layer").toggleLayer("trails", void 0, !0),
                  t.getManager("label").removeException("earth"),
                  t.getManager("label").removeException("99942_apophis");
                t.scene.get("sunRing").setEnabled(!1);
                t.scene.get("sunRingLabel").setEnabled(!1);
              },
            },
            {
              id: "slide_6",
              type: "panel",
              content: [
                {
                  type: "description",
                  title: "What is a Potentially Hazardous Object?",
                  description:
                    "<span>A Potentially Hazardous Object (PHO) is a Near-Earth Object (NEO) that is at least 140 meters (460 feet) in size, and whose orbit approaches Earth’s orbit to within 0.05 AU (7,480,000 km or 4,675,000 miles). PHOs are “potentially hazardous” only in a long-term sense: almost all are not currently on Earth-crossing orbits, but their orbits are close enough that over hundreds or thousands of years, they may evolve to become Earth-crossing.<br>There are </span><span>{{phoCount}}</span><span> PHOs currently.</span>",
                  onEnter: (t, e) => {
                    e.addState("phoCount", "0"),
                      t
                        .getManager("filters")
                        .setFilter(
                          { asteroids: !0, comets: !0, phos: !0 },
                          null,
                          (t) => {
                            e.setState({
                              phoCount: Number(t).toLocaleString(),
                            });
                          },
                        );
                  },
                  onLeave: (t, e) => {
                    const s = t.getManager("filters");
                    s.setFilter(s.getPreviousFilters());
                  },
                },
              ],
              time: "2029-03-27T14:45:12-07:00",
              rate: 1e4,
              camera: [
                async (t) => {
                  await t
                    .getManager("scene")
                    .isListReady(["earth", "99942_apophis"]),
                    t.getManager("time").pause(),
                    await t.cameraScripts.showLocation(
                      "sun",
                      "earth",
                      "earth",
                      "planeNormal",
                      {
                        distance: 1.3 * i.AppUtils.conversionTable.auToKm * 1.5,
                        duration: 2,
                        startFromTarget: !1,
                        rotateByScreenRatio: !1,
                      },
                    ),
                    await t.cameraScripts.goToSystemSideway("earth", {
                      duration: 2,
                      distance: 0.05 * i.AppUtils.conversionTable.auToKm * 20,
                      angleInDegree: 30,
                      includeChildren: !1,
                    }),
                    t.getManager("time").play();
                },
              ],
              onEnter: async (t) => {
                t.scene.get("sunTorus").setEnabled(!0);
                t.scene.get("sunTorusLabel").setEnabled(!0);
              },
              onLeave: (t) => {
                t.scene.get("sunTorus").setEnabled(!1);
                t.scene.get("sunTorusLabel").setEnabled(!1);
              },
            },
            {
              id: "slide_7",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    'Explore the next 5 closest approaches <a class="clickable" href="#/watch">here</a>. These are continuously updated, as NASA is constantly on the lookout.',
                },
              ],
              camera: [
                async (t) => {
                  await t.cameraScripts.goToSystem("inner_solar_system");
                },
              ],
              rate: 259200,
            },
          ],
          onEnter: (t) => { },
          onLeave: (t) => {
            t.getManager("scene");
            t.getManager("layer").toggleLayer("trails", void 0, !0),
              t.scene.get("earth").get("orbitLine").setEnabled(!0);
          },
        };
      },
      function (t, e, s) {
        "use strict";
        s.r(e);
        s(1);
        let i = 0,
          n = !1;
        const o = () => {
          n = !1;
        },
          r = (t, e, s) => {
            const i = t.scene.getEntity(e)?.get("div")?.getDiv();
            i &&
              (i.classList.remove("unclickable"),
                i.addEventListener("click", async () => {
                  (n = !0), await s(e, t);
                }));
          },
          a = (t, e, s) => {
            const i = t.scene.getEntity(e)?.get("div")?.getDiv();
            i &&
              (i.classList.add("unclickable"),
                i.removeEventListener("click", s));
          },
          l = async (t, e) => {
            await e.cameraScripts.goToSpacecraft(t);
          },
          c = async (t, e) => {
            await e.cameraScripts.goToCelestialObject(t);
          };
        e.default = {
          type: "nonsequential",
          slides: [
            {
              id: "slide_1",
              type: "overlay",
              classList: ["opaque", "black"],
              content: [
                { type: "title", title: "Asteroid and Comet Missions" },
              ],
              camera: [
                async (t) => {
                  ++i, await t.cameraScripts.goToSystem("inner_solar_system");
                },
              ],
            },
            {
              id: "slide_2",
              type: "panel",
              time: "2015-02-14T08:14:00Z",
              content: [
                {
                  type: "description",
                  description:
                    "NASA and other space agencies have sent spacecraft to visit, photograph, sample, and even collide with various asteroids like Bennu, Vesta, and Eros, and the comets Tempel 1, 19P/Borrelly, and 67P Churyumov-Gerasimenko (seen here with the Rosetta spacecraft).",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["67p_churyumov_gerasimenko", "sc_rosetta"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToSpacecraft("sc_rosetta", {
                        cinematic: !0,
                        duration: 3,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                const s = t.getManager("camera");
                r(t, "sc_rosetta", l),
                  r(t, "67p_churyumov_gerasimenko", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "67p_churyumov_gerasimenko" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_rosetta" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                a(t, "sc_rosetta", l),
                  a(t, "67p_churyumov_gerasimenko", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_3",
              type: "panel",
              time: "2001-02-12T18:00:00Z",
              rate: 0,
              content: [
                {
                  type: "description",
                  description:
                    "The very first mission to both orbit and land on an asteroid was the NEAR mission (Near Earth Asteroid Rendezvous, later renamed NEAR Shoemaker after the renowned geologist Eugene Shoemaker). The mission successfully orbited the asteroid Eros for a year, and ended the mission by landing on the surface on February 12th, 2001.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["433_eros", "sc_near_shoemaker"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.alignObjects(
                        "sc_near_shoemaker",
                        "433_eros",
                        {
                          duration: 3,
                          verticalOffset: 15,
                          horizontalOffset: -15,
                          distance: 0.05,
                        },
                      ),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                const s = t.getManager("camera");
                r(t, "sc_near_shoemaker", l),
                  r(t, "433_eros", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "433_eros" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_near_shoemaker" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                a(t, "sc_near_shoemaker", l),
                  a(t, "433_eros", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_4",
              type: "panel",
              time: "2005-07-04T05:44:20Z",
              content: [
                {
                  type: "description",
                  description:
                    "NASA has also sent several missions to study comets. On the 4th of July, 2005, NASA’s Deep Impact mission actually collided with a comet named Tempel 1 (9P/Tempel). The spacecraft (Deep Impact) sent a washing-machine sized probe (the Deep Impact Impactor) to hit the comet itself, and then flew through the resulting cloud of space debris to analyze the composition. The comet’s nucleus had more dust and less ice than models had suggested.",
                },
                { type: "replay" },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady([
                      "9p_tempel_1",
                      "sc_deep_impact",
                      "sc_deep_impact_impactor",
                    ]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.alignObjects(
                        "sc_deep_impact_impactor",
                        "9p_tempel_1",
                        {
                          duration: 3,
                          distance: 0.005,
                          verticalOffset: 15,
                          horizontalOffset: 15,
                        },
                      ),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                const s = "2005-07-04T05:44:33Z";
                (e.update = () => {
                  const e = t.getManager("time");
                  e.getTime().valueOf() >= e.parseTime(s).valueOf() &&
                    e.pause();
                }),
                  t.pioneer.addCallback(e.update, !0),
                  t.getManager("time").setMax(s);
                const i = t.getManager("camera");
                r(t, "sc_deep_impact_impactor", l),
                  r(t, "sc_deep_impact", l),
                  r(t, "9p_tempel_1", c),
                  (e.selectionCallback = i.getSelectionCallback()),
                  i.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "9p_tempel_1" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_deep_impact_impactor" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                t.pioneer.removeCallback(e.update),
                  t.getManager("time").resetMax(),
                  a(t, "sc_deep_impact_impactor", l),
                  a(t, "9p_tempel_1", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_5",
              type: "panel",
              time: "2012-07-21T12:01:00Z",
              rate: 35,
              content: [
                {
                  type: "description",
                  description:
                    "The Dawn mission was the first to orbit an object in the main asteroid belt, as well as the first mission to orbit two separate destinations.<br>Dawn spent over a year in orbit around Vesta, from July of 2011 until September of 2012. Dawn mapped Vesta's geology, composition, cratering record and more.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["4_vesta", "sc_dawn"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToSpacecraft("sc_dawn", {
                        cinematic: !0,
                        duration: 3,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                const s = t.getManager("camera");
                r(t, "sc_dawn", l),
                  r(t, "4_vesta", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "4_vesta" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_dawn" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                a(t, "sc_dawn", l),
                  a(t, "4_vesta", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_6",
              type: "panel",
              time: "2016-03-18T13:30:00Z",
              rate: 40,
              content: [
                {
                  type: "description",
                  description:
                    "Dawn then traveled to Ceres, which is the largest object in the asteroid belt. (Ceres is still considered to be an asteroid, but was designated as a dwarf planet in 2006.) The spacecraft arrived in 2015 and continued to collect data until running out of thruster fuel. <br>Dawn found abundant proof of water ice in the higher latitudes, as well as active geological features. Dawn remains in orbit around Ceres but will eventually impact the surface.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["1_ceres", "sc_dawn"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToCelestialObject("1_ceres", {
                        cinematic: !1,
                        duration: 3,
                        distance: 2,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                const s = t.getManager("camera");
                r(t, "sc_dawn", l),
                  r(t, "1_ceres", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "1_ceres" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_dawn" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                a(t, "sc_dawn", l),
                  a(t, "1_ceres", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_7",
              type: "panel",
              time: "2003-12-24T00:00:00Z",
              rate: 90,
              content: [
                {
                  type: "description",
                  description:
                    "Other missions actually take samples of asteroids and comets. The Stardust mission flew by the comet Wild 2 and collected samples from the dust trail of the comet, as well as interstellar dust. <br>These samples were later brought back to Earth via a detachable sample return capsule, which re-entered Earth’s atmosphere on January 15th, 2006. The sample capsule landed in Utah and the millions of dust particles are still being studied to this day.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t.getManager("scene").isReady("sc_stardust"),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToSpacecraft("sc_stardust", {
                        distance: -0.01,
                        cinematic: !1,
                        duration: 3,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                r(t, "sc_stardust", l), r(t, "81p_wild_2", c);
              },
              onLeave: (t, e) => {
                a(t, "sc_stardust", l), a(t, "81p_wild_2", c);
              },
            },
            {
              id: "slide_8",
              type: "panel",
              time: "2020-10-20T21:50:24Z",
              content: [
                {
                  type: "description",
                  description:
                    "In October of 2020, the OSIRIS-REx mission successfully sampled the surface of the asteroid Bennu, collecting approximately 60 grams of surface material. The mission successfully dropped off the sample return capsule to Earth on September 24th, 2023, and is now on course to visit the asteroid Apophis.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["101955_bennu", "sc_osiris_rex"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.alignObjects(
                        "sc_osiris_rex",
                        "101955_bennu",
                        {
                          duration: 4,
                          distance: 0.1,
                          verticalOffset: 30,
                          horizontalOffset: -80,
                        },
                      ),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                t.getComponent("settings").toggleLightOptions("flood");
                const s = t.getManager("camera");
                r(t, "sc_osiris_rex", l),
                  r(t, "101955_bennu", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    if (n) return;
                    const s = e?.getName();
                    "101955_bennu" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_osiris_rex" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                t.getComponent("settings").toggleLightOptions("shadow"),
                  a(t, "sc_osiris_rex", l),
                  a(t, "101955_bennu", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_9",
              type: "panel",
              time: "2029-08-17T01:02:00Z",
              content: [
                {
                  type: "description",
                  description:
                    "NASA has several new missions to investigate asteroids, including Lucy and Psyche. Each mission promises to unlock further secrets of the formation and evolution of our solar system by studying asteroids. The Lucy mission is investigating the ancient Trojan asteroids that share Jupiter’s orbit, and the Psyche mission (seen here) is en route to the unique metal asteroid 16 Psyche.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["16_psyche", "sc_psyche"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToSpacecraft("sc_psyche", {
                        cinematic: !0,
                        duration: 3,
                        distance: 0.05,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                t.getComponent("settings").toggleLightOptions("flood");
                const s = t.getManager("camera");
                r(t, "sc_psyche", l),
                  r(t, "16_psyche", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    "16_psyche" === s
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_psyche" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                t.getComponent("settings").toggleLightOptions("shadow"),
                  a(t, "sc_psyche", l),
                  a(t, "16_psyche", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_10",
              type: "panel",
              time: "2022-09-26T23:14:11Z",
              content: [
                {
                  type: "description",
                  description:
                    "The Double Asteroid Redirection Test, or DART, is a NASA mission that could be a plot from a Hollywood movie. As the very first planetary defense test mission, DART will test whether a spacecraft impact could deflect the orbit of an asteroid. Even a slight change in the orbit of an asteroid could avert a collision with Earth if the change happens early enough. DART successfully impacted the asteroid moon Dimorphos, which is in a binary system with the larger asteroid Didymos. The orbital period of Dimorphos changed by 33 minutes.",
                },
                { type: "replay" },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t
                    .getManager("scene")
                    .isListReady(["65803_didymos", "dimorphos", "sc_dart"]),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToSpacecraft("sc_dart", {
                        cinematic: !1,
                        duration: 3,
                        verticalOffset: 15,
                      }),
                      s.play());
                },
              ],
              onEnter: (t, e) => {
                t.getManager("time").setMax("2022-09-26T23:14:18.054Z");
                const s = t.getManager("camera");
                r(t, "sc_dart", l),
                  r(t, "dimorphos", c),
                  r(t, "65803_didymos", c),
                  (e.selectionCallback = s.getSelectionCallback()),
                  s.setSelectionCallback(async (e) => {
                    const s = e?.getName();
                    ["dimorphos", "65803_didymos"].includes(s)
                      ? await t.cameraScripts.goToCelestialObject(s)
                      : "sc_dart" === s &&
                      (await t.cameraScripts.goToSpacecraft(s));
                  });
              },
              onLeave: (t, e) => {
                t.getManager("time").resetMax(),
                  a(t, "sc_dart", l),
                  a(t, "dimorphos", c),
                  a(t, "65803_didymos", c),
                  t
                    .getManager("camera")
                    .setSelectionCallback(e.selectionCallback);
              },
            },
            {
              id: "slide_11",
              type: "panel",
              content: [
                {
                  type: "description",
                  description:
                    "NASA and other space agencies will continue to send robotic explorers throughout our solar system.  The journey of discovery is just beginning.",
                },
              ],
              camera: [
                async (t) => {
                  const e = ++i,
                    s = t.getManager("time");
                  await t.getManager("scene").isReady("earth"),
                    e === i &&
                    (s.pause(),
                      await t.cameraScripts.goToCelestialObject("earth", {
                        cinematic: !0,
                        duration: 3,
                      }),
                      s.play());
                },
              ],
            },
          ],
          onEnter: (t) => {
            t.scene.get("sun", "orbitalParticles").setEnabled(!1),
              t
                .getManager("layer")
                .toggleLayer("starfield", { category: "Star Field" }, !0),
              window.addEventListener("mousedown", o),
              window.addEventListener("touchstart", o);
          },
          onLeave: (t) => {
            t.scene.get("sun", "orbitalParticles").setEnabled(!0),
              t
                .getManager("layer")
                .toggleLayer("starfield", { category: "Star Field" }, !1),
              window.removeEventListener("mousedown", o),
              window.removeEventListener("touchstart", o);
          },
        };
      },
      function (t) {
        "use strict";
        t.exports = JSON.parse(
          '{"stories":{"asteroids_101":{"id":"asteroids_101","title":"Asteroids 101AAA"},"asteroids_close_approach":{"id":"asteroids_close_approach","title":"What is a Close Approach?AAA"},"asteroids_missions":{"id":"asteroids_missions","title":"Asteroid and Comet MissionsAAA"}},"external":{},"featured":[]}',
        );
      },
      /** 页面布局 */
      function (t) {
        t.exports =
          '<header class="header">\n  <Breadcrumb></Breadcrumb>\n  <AsteroidMenuTop></AsteroidMenuTop>\n  <Search></Search>\n</header>\n<HomeButton></HomeButton>\n<WatchPanel></WatchPanel>\n<AsteroidPanel></AsteroidPanel>\n<MissionPanel></MissionPanel>\n<FollowingPanel></FollowingPanel>\n<Story></Story>\n<div id="float-mid" class="float-mid"></div>\n<div id="float-mid-bottom" class="float-mid-bottom">\n\t<div id="time-slider-container" class="time-container">\n\t\t<ClockShortcut></ClockShortcut>\n\t\t<Clock></Clock>\n\t\t<TimeSlider></TimeSlider>\n\t</div>\n\t<AsteroidMenuBottom></AsteroidMenuBottom>\n</div>\n<div id="float-right-bottom" class="float-right-bottom">\n  <LayerPanel></LayerPanel>\n  <AsteroidsSettings></AsteroidsSettings>\n</div>\n<AsteroidModals></AsteroidModals>\n<DefinitionOverlay></DefinitionOverlay>\n<SplashScreen></SplashScreen>\n';
      },
    ],
    s = {};
  function i(t) {
    var n = s[t];
    if (void 0 !== n) return n.exports;
    var o = (s[t] = { id: t, loaded: !1, exports: {} });
    return e[t].call(o.exports, o, o.exports, i), (o.loaded = !0), o.exports;
  }
  (i.m = e),
    (t = []),
    (i.O = function (e, s, n, o) {
      if (!s) {
        var r = 1 / 0;
        for (h = 0; h < t.length; h++) {
          (s = t[h][0]), (n = t[h][1]), (o = t[h][2]);
          for (var a = !0, l = 0; l < s.length; l++)
            (!1 & o || r >= o) &&
              Object.keys(i.O).every(function (t) {
                return i.O[t](s[l]);
              })
              ? s.splice(l--, 1)
              : ((a = !1), o < r && (r = o));
          if (a) {
            t.splice(h--, 1);
            var c = n();  // i函数的返回。
            void 0 !== c && (e = c);
          }
        }
        return e;
      }
      o = o || 0;
      for (var h = t.length; h > 0 && t[h - 1][2] > o; h--) t[h] = t[h - 1];
      t[h] = [s, n, o];
    }),
    (i.n = function (t) {
      var e =
        t && t.__esModule
          ? function () {
            return t.default;
          }
          : function () {
            return t;   // 返回HTML
          };
      return i.d(e, { a: e }), e;
    }),
    (i.d = function (t, e) {
      for (var s in e)
        i.o(e, s) &&
          !i.o(t, s) &&
          Object.defineProperty(t, s, { enumerable: !0, get: e[s] });
    }),
    (i.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (t) {
        if ("object" == typeof window) return window;
      }
    })()),
    (i.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }),
    (i.r = function (t) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(t, "__esModule", { value: !0 });
    }),
    (i.nmd = function (t) {
      return (t.paths = []), t.children || (t.children = []), t;
    }),
    /* 装配vendor.js中675个函数到i.m数组 */
    (function () {
      var t = { 0: 0 };
      i.O.j = function (e) {
        return 0 === t[e];
      };
      var e = function (e, s) {
        var n,
          o,
          r = s[0],
          a = s[1],
          l = s[2],
          c = 0;
        if (
          r.some(function (e) {
            return 0 !== t[e];
          })
        ) {
          for (n in a) i.o(a, n) && (i.m[n] = a[n]);  //这个位置vendor.js的函数全部被i.m数组保存起来备用
          if (l) var h = l(i);
        }
        for (e && e(s); c < r.length; c++)
          (o = r[c]), i.o(t, o) && t[o] && t[o][0](), (t[o] = 0);
        return i.O(h);
      },
        s = (self.webpackChunkasteroids = self.webpackChunkasteroids || []);
      s.forEach(
        e.bind(null, 0) //上面定义的e函数是一个装配函数，把s（vendor.js)中的函数数组全部装备到i中。
        ), 
      (s.push = e.bind(null, s.push.bind(s)));
    })();

  /* i.O应该是BaseApp的入口，被调用了2次，第一次还调用了i函数自己 */
  var n = i.O(void 0, [1], function () {
    return i(0);
  });
  n = i.O(n);
})();
